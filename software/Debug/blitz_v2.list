
blitz_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f38  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008188  08008188  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008190  08008190  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008190  08008190  00018190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  20000088  08008220  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  08008220  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c14  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027f7  00000000  00000000  00032ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  000354c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  00036590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021414  00000000  00000000  00037510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d590  00000000  00000000  00058924  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2dc3  00000000  00000000  00065eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128c77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cfc  00000000  00000000  00128cf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006238 	.word	0x08006238

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08006238 	.word	0x08006238

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <__io_putchar+0x20>)
 8000582:	f004 fa00 	bl	8004986 <HAL_UART_Transmit>
	return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200005e0 	.word	0x200005e0

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000598:	f001 fe68 	bl	800226c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f88a 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fb54 	bl	8000c4c <MX_GPIO_Init>
  MX_I2C3_Init();
 80005a4:	f000 f8e4 	bl	8000770 <MX_I2C3_Init>
  MX_TIM1_Init();
 80005a8:	f000 f910 	bl	80007cc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005ac:	f000 fb24 	bl	8000bf8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80005b0:	f000 fa46 	bl	8000a40 <MX_TIM4_Init>
  MX_TIM3_Init();
 80005b4:	f000 f9e0 	bl	8000978 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005b8:	f000 f98a 	bl	80008d0 <MX_TIM2_Init>
  MX_TIM5_Init();
 80005bc:	f000 faa4 	bl	8000b08 <MX_TIM5_Init>
  MX_TIM14_Init();
 80005c0:	f000 faf6 	bl	8000bb0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  printf("========== Blitz V2 ==========\r\n");
 80005c4:	4831      	ldr	r0, [pc, #196]	; (800068c <main+0xf8>)
 80005c6:	f004 fecb 	bl	8005360 <puts>
  printf("Created by Oskar & Isak\r\n");
 80005ca:	4831      	ldr	r0, [pc, #196]	; (8000690 <main+0xfc>)
 80005cc:	f004 fec8 	bl	8005360 <puts>


  printf("\r\n========== Initializing peripherals ==========\r\n");
 80005d0:	4830      	ldr	r0, [pc, #192]	; (8000694 <main+0x100>)
 80005d2:	f004 fec5 	bl	8005360 <puts>
  printf("\t- Buzzer\r\n");
 80005d6:	4830      	ldr	r0, [pc, #192]	; (8000698 <main+0x104>)
 80005d8:	f004 fec2 	bl	8005360 <puts>
  init_buzzer();
 80005dc:	f000 ff64 	bl	80014a8 <init_buzzer>
  //Startup beep
  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80005e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e4:	482d      	ldr	r0, [pc, #180]	; (800069c <main+0x108>)
 80005e6:	f002 f9b2 	bl	800294e <HAL_GPIO_TogglePin>
	tone(523,200);
 80005ea:	21c8      	movs	r1, #200	; 0xc8
 80005ec:	f240 200b 	movw	r0, #523	; 0x20b
 80005f0:	f000 ff64 	bl	80014bc <tone>
	HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80005f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f8:	4828      	ldr	r0, [pc, #160]	; (800069c <main+0x108>)
 80005fa:	f002 f9a8 	bl	800294e <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80005fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000602:	4826      	ldr	r0, [pc, #152]	; (800069c <main+0x108>)
 8000604:	f002 f9a3 	bl	800294e <HAL_GPIO_TogglePin>
	tone(659,200);
 8000608:	21c8      	movs	r1, #200	; 0xc8
 800060a:	f240 2093 	movw	r0, #659	; 0x293
 800060e:	f000 ff55 	bl	80014bc <tone>
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000616:	4821      	ldr	r0, [pc, #132]	; (800069c <main+0x108>)
 8000618:	f002 f999 	bl	800294e <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800061c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000620:	481f      	ldr	r0, [pc, #124]	; (80006a0 <main+0x10c>)
 8000622:	f002 f994 	bl	800294e <HAL_GPIO_TogglePin>
	tone(784,200);
 8000626:	21c8      	movs	r1, #200	; 0xc8
 8000628:	f44f 7044 	mov.w	r0, #784	; 0x310
 800062c:	f000 ff46 	bl	80014bc <tone>
	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000634:	481a      	ldr	r0, [pc, #104]	; (80006a0 <main+0x10c>)
 8000636:	f002 f98a 	bl	800294e <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800063a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063e:	f001 fe87 	bl	8002350 <HAL_Delay>

  printf("\t- OLED\r\n");
 8000642:	4818      	ldr	r0, [pc, #96]	; (80006a4 <main+0x110>)
 8000644:	f004 fe8c 	bl	8005360 <puts>
  init_oled(); // Draws CASE LOGO for now
 8000648:	f000 ffc2 	bl	80015d0 <init_oled>
  HAL_Delay(500);
 800064c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000650:	f001 fe7e 	bl	8002350 <HAL_Delay>
  printf("\t- Motors\r\n");
 8000654:	4814      	ldr	r0, [pc, #80]	; (80006a8 <main+0x114>)
 8000656:	f004 fe83 	bl	8005360 <puts>
  init_motors();
 800065a:	f000 ff7b 	bl	8001554 <init_motors>
  HAL_Delay(500);
 800065e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000662:	f001 fe75 	bl	8002350 <HAL_Delay>
  printf("\t- Fans\r\n");
 8000666:	4811      	ldr	r0, [pc, #68]	; (80006ac <main+0x118>)
 8000668:	f004 fe7a 	bl	8005360 <puts>
  init_fans();
 800066c:	f000 ff4e 	bl	800150c <init_fans>
  HAL_Delay(3000); //Wait for fans to beep
 8000670:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000674:	f001 fe6c 	bl	8002350 <HAL_Delay>


  // Run all tests
  //tests_run();

  printf("\r\n========== Starting Blitz ==========\r\n");
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <main+0x11c>)
 800067a:	f004 fe71 	bl	8005360 <puts>

    /* USER CODE BEGIN 3 */

  	//printf("Left Enc: %d\t\t Right Enc: %d\r\n", (int)TIM2->CNT, (int)TIM5->CNT);

  	oled_update();
 800067e:	f001 f893 	bl	80017a8 <oled_update>
  	HAL_Delay(10);
 8000682:	200a      	movs	r0, #10
 8000684:	f001 fe64 	bl	8002350 <HAL_Delay>
  	oled_update();
 8000688:	e7f9      	b.n	800067e <main+0xea>
 800068a:	bf00      	nop
 800068c:	08006298 	.word	0x08006298
 8000690:	080062b8 	.word	0x080062b8
 8000694:	080062d4 	.word	0x080062d4
 8000698:	08006274 	.word	0x08006274
 800069c:	40020800 	.word	0x40020800
 80006a0:	40020000 	.word	0x40020000
 80006a4:	08006308 	.word	0x08006308
 80006a8:	08006280 	.word	0x08006280
 80006ac:	0800628c 	.word	0x0800628c
 80006b0:	08006314 	.word	0x08006314

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fde8 	bl	8005298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xb4>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xb4>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xb4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <SystemClock_Config+0xb8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <SystemClock_Config+0xb8>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <SystemClock_Config+0xb8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f002 fd9f 	bl	8003268 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000730:	f000 fb2c 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fffa 	bl	8003748 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800075a:	f000 fb17 	bl	8000d8c <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_I2C3_Init+0x50>)
 8000776:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_I2C3_Init+0x54>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_I2C3_Init+0x50>)
 800077c:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_I2C3_Init+0x58>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_I2C3_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_I2C3_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_I2C3_Init+0x50>)
 800078e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000792:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_I2C3_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_I2C3_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_I2C3_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_I2C3_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_I2C3_Init+0x50>)
 80007ae:	f002 f90d 	bl	80029cc <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 fae8 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200004cc 	.word	0x200004cc
 80007c4:	40005c00 	.word	0x40005c00
 80007c8:	00061a80 	.word	0x00061a80

080007cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b092      	sub	sp, #72	; 0x48
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
 80007ec:	615a      	str	r2, [r3, #20]
 80007ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2220      	movs	r2, #32
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 fd4e 	bl	8005298 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007fc:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <MX_TIM1_Init+0xfc>)
 80007fe:	4a33      	ldr	r2, [pc, #204]	; (80008cc <MX_TIM1_Init+0x100>)
 8000800:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_TIM1_Init+0xfc>)
 8000804:	2203      	movs	r2, #3
 8000806:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <MX_TIM1_Init+0xfc>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800080e:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_TIM1_Init+0xfc>)
 8000810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000814:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <MX_TIM1_Init+0xfc>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800081c:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_TIM1_Init+0xfc>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_TIM1_Init+0xfc>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000828:	4827      	ldr	r0, [pc, #156]	; (80008c8 <MX_TIM1_Init+0xfc>)
 800082a:	f003 f9d3 	bl	8003bd4 <HAL_TIM_PWM_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000834:	f000 faaa 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000840:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000844:	4619      	mov	r1, r3
 8000846:	4820      	ldr	r0, [pc, #128]	; (80008c8 <MX_TIM1_Init+0xfc>)
 8000848:	f003 ff6e 	bl	8004728 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000852:	f000 fa9b 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000856:	2360      	movs	r3, #96	; 0x60
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	220c      	movs	r2, #12
 8000874:	4619      	mov	r1, r3
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <MX_TIM1_Init+0xfc>)
 8000878:	f003 fbe8 	bl	800404c <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000882:	f000 fa83 	bl	8000d8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800089a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4619      	mov	r1, r3
 80008a8:	4807      	ldr	r0, [pc, #28]	; (80008c8 <MX_TIM1_Init+0xfc>)
 80008aa:	f003 ffb9 	bl	8004820 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80008b4:	f000 fa6a 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <MX_TIM1_Init+0xfc>)
 80008ba:	f000 fc11 	bl	80010e0 <HAL_TIM_MspPostInit>

}
 80008be:	bf00      	nop
 80008c0:	3748      	adds	r7, #72	; 0x48
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000620 	.word	0x20000620
 80008cc:	40010000 	.word	0x40010000

080008d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	; 0x30
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2224      	movs	r2, #36	; 0x24
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 fcda 	bl	8005298 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_TIM2_Init+0xa4>)
 80008ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_TIM2_Init+0xa4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_TIM2_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_TIM2_Init+0xa4>)
 8000902:	f04f 32ff 	mov.w	r2, #4294967295
 8000906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_TIM2_Init+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_TIM2_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000914:	2303      	movs	r3, #3
 8000916:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800091c:	2301      	movs	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800092c:	2301      	movs	r3, #1
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_TIM2_Init+0xa4>)
 8000940:	f003 f9b2 	bl	8003ca8 <HAL_TIM_Encoder_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800094a:	f000 fa1f 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <MX_TIM2_Init+0xa4>)
 800095c:	f003 fee4 	bl	8004728 <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000966:	f000 fa11 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	; 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000660 	.word	0x20000660

08000978 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800099a:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <MX_TIM3_Init+0xc0>)
 800099c:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <MX_TIM3_Init+0xc4>)
 800099e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <MX_TIM3_Init+0xc0>)
 80009a2:	220f      	movs	r2, #15
 80009a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_TIM3_Init+0xc0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_TIM3_Init+0xc0>)
 80009ae:	f644 6220 	movw	r2, #20000	; 0x4e20
 80009b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_TIM3_Init+0xc0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_TIM3_Init+0xc0>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009c0:	481d      	ldr	r0, [pc, #116]	; (8000a38 <MX_TIM3_Init+0xc0>)
 80009c2:	f003 f907 	bl	8003bd4 <HAL_TIM_PWM_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f9de 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4619      	mov	r1, r3
 80009de:	4816      	ldr	r0, [pc, #88]	; (8000a38 <MX_TIM3_Init+0xc0>)
 80009e0:	f003 fea2 	bl	8004728 <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009ea:	f000 f9cf 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ee:	2360      	movs	r3, #96	; 0x60
 80009f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_TIM3_Init+0xc0>)
 8000a06:	f003 fb21 	bl	800404c <HAL_TIM_PWM_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a10:	f000 f9bc 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2204      	movs	r2, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <MX_TIM3_Init+0xc0>)
 8000a1c:	f003 fb16 	bl	800404c <HAL_TIM_PWM_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a26:	f000 f9b1 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a2a:	4803      	ldr	r0, [pc, #12]	; (8000a38 <MX_TIM3_Init+0xc0>)
 8000a2c:	f000 fb58 	bl	80010e0 <HAL_TIM_MspPostInit>

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200005a0 	.word	0x200005a0
 8000a3c:	40000400 	.word	0x40000400

08000a40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a62:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <MX_TIM4_Init+0xc0>)
 8000a64:	4a27      	ldr	r2, [pc, #156]	; (8000b04 <MX_TIM4_Init+0xc4>)
 8000a66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a68:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <MX_TIM4_Init+0xc0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <MX_TIM4_Init+0xc0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <MX_TIM4_Init+0xc0>)
 8000a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <MX_TIM4_Init+0xc0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_TIM4_Init+0xc0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a88:	481d      	ldr	r0, [pc, #116]	; (8000b00 <MX_TIM4_Init+0xc0>)
 8000a8a:	f003 f8a3 	bl	8003bd4 <HAL_TIM_PWM_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000a94:	f000 f97a 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000aa0:	f107 0320 	add.w	r3, r7, #32
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4816      	ldr	r0, [pc, #88]	; (8000b00 <MX_TIM4_Init+0xc0>)
 8000aa8:	f003 fe3e 	bl	8004728 <HAL_TIMEx_MasterConfigSynchronization>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000ab2:	f000 f96b 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab6:	2360      	movs	r3, #96	; 0x60
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2208      	movs	r2, #8
 8000aca:	4619      	mov	r1, r3
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <MX_TIM4_Init+0xc0>)
 8000ace:	f003 fabd 	bl	800404c <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000ad8:	f000 f958 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	220c      	movs	r2, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <MX_TIM4_Init+0xc0>)
 8000ae4:	f003 fab2 	bl	800404c <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000aee:	f000 f94d 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000af2:	4803      	ldr	r0, [pc, #12]	; (8000b00 <MX_TIM4_Init+0xc0>)
 8000af4:	f000 faf4 	bl	80010e0 <HAL_TIM_MspPostInit>

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	; 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000520 	.word	0x20000520
 8000b04:	40000800 	.word	0x40000800

08000b08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2224      	movs	r2, #36	; 0x24
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 fbbe 	bl	8005298 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b24:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b26:	4a21      	ldr	r2, [pc, #132]	; (8000bac <MX_TIM5_Init+0xa4>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b52:	2301      	movs	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b62:	2301      	movs	r3, #1
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b76:	f003 f897 	bl	8003ca8 <HAL_TIM_Encoder_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000b80:	f000 f904 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b92:	f003 fdc9 	bl	8004728 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000b9c:	f000 f8f6 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000560 	.word	0x20000560
 8000bac:	40000c00 	.word	0x40000c00

08000bb0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_TIM14_Init+0x40>)
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <MX_TIM14_Init+0x44>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000;
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <MX_TIM14_Init+0x40>)
 8000bbc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000bc0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_TIM14_Init+0x40>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_TIM14_Init+0x40>)
 8000bca:	2232      	movs	r2, #50	; 0x32
 8000bcc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_TIM14_Init+0x40>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_TIM14_Init+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_TIM14_Init+0x40>)
 8000bdc:	f002 ff80 	bl	8003ae0 <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000be6:	f000 f8d1 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200006a0 	.word	0x200006a0
 8000bf4:	40002000 	.word	0x40002000

08000bf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MX_USART1_UART_Init+0x50>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_USART1_UART_Init+0x4c>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USART1_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USART1_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_USART1_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USART1_UART_Init+0x4c>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USART1_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USART1_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USART1_UART_Init+0x4c>)
 8000c30:	f003 fe5c 	bl	80048ec <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c3a:	f000 f8a7 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200005e0 	.word	0x200005e0
 8000c48:	40011000 	.word	0x40011000

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	4b44      	ldr	r3, [pc, #272]	; (8000d78 <MX_GPIO_Init+0x12c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a43      	ldr	r2, [pc, #268]	; (8000d78 <MX_GPIO_Init+0x12c>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <MX_GPIO_Init+0x12c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <MX_GPIO_Init+0x12c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a3c      	ldr	r2, [pc, #240]	; (8000d78 <MX_GPIO_Init+0x12c>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <MX_GPIO_Init+0x12c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <MX_GPIO_Init+0x12c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a35      	ldr	r2, [pc, #212]	; (8000d78 <MX_GPIO_Init+0x12c>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <MX_GPIO_Init+0x12c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cbc:	482f      	ldr	r0, [pc, #188]	; (8000d7c <MX_GPIO_Init+0x130>)
 8000cbe:	f001 fe2d 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000cc8:	482d      	ldr	r0, [pc, #180]	; (8000d80 <MX_GPIO_Init+0x134>)
 8000cca:	f001 fe27 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin|MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	21f0      	movs	r1, #240	; 0xf0
 8000cd2:	482c      	ldr	r0, [pc, #176]	; (8000d84 <MX_GPIO_Init+0x138>)
 8000cd4:	f001 fe22 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_SELECT_Pin */
  GPIO_InitStruct.Pin = BUTTON_SELECT_Pin;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <MX_GPIO_Init+0x13c>)
 8000cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_SELECT_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4825      	ldr	r0, [pc, #148]	; (8000d80 <MX_GPIO_Init+0x134>)
 8000cec:	f001 fc64 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	4619      	mov	r1, r3
 8000d02:	4820      	ldr	r0, [pc, #128]	; (8000d84 <MX_GPIO_Init+0x138>)
 8000d04:	f001 fc58 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000d08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4816      	ldr	r0, [pc, #88]	; (8000d7c <MX_GPIO_Init+0x130>)
 8000d22:	f001 fc49 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8000d26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4810      	ldr	r0, [pc, #64]	; (8000d80 <MX_GPIO_Init+0x134>)
 8000d40:	f001 fc3a 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_R_IN2_Pin MOTOR_R_IN1_Pin MOTOR_L_IN2_Pin MOTOR_L_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin|MOTOR_L_IN1_Pin;
 8000d44:	23f0      	movs	r3, #240	; 0xf0
 8000d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480a      	ldr	r0, [pc, #40]	; (8000d84 <MX_GPIO_Init+0x138>)
 8000d5c:	f001 fc2c 	bl	80025b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	2009      	movs	r0, #9
 8000d66:	f001 fbf0 	bl	800254a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d6a:	2009      	movs	r0, #9
 8000d6c:	f001 fc09 	bl	8002582 <HAL_NVIC_EnableIRQ>

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	40020800 	.word	0x40020800
 8000d84:	40020400 	.word	0x40020400
 8000d88:	10210000 	.word	0x10210000

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_MspInit+0x4c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <HAL_I2C_MspInit+0xc4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d14b      	bne.n	8000ea6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <HAL_I2C_MspInit+0xc8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a27      	ldr	r2, [pc, #156]	; (8000eb4 <HAL_I2C_MspInit+0xc8>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <HAL_I2C_MspInit+0xc8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_I2C_MspInit+0xc8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <HAL_I2C_MspInit+0xc8>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <HAL_I2C_MspInit+0xc8>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = SDA_Pin;
 8000e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <HAL_I2C_MspInit+0xcc>)
 8000e64:	f001 fba8 	bl	80025b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCL_Pin;
 8000e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6e:	2312      	movs	r3, #18
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <HAL_I2C_MspInit+0xd0>)
 8000e86:	f001 fb97 	bl	80025b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_I2C_MspInit+0xc8>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HAL_I2C_MspInit+0xc8>)
 8000e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_I2C_MspInit+0xc8>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40005c00 	.word	0x40005c00
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <HAL_TIM_PWM_MspInit+0x8c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d10e      	bne.n	8000ef0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_TIM_PWM_MspInit+0x90>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a1d      	ldr	r2, [pc, #116]	; (8000f50 <HAL_TIM_PWM_MspInit+0x90>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_TIM_PWM_MspInit+0x90>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000eee:	e026      	b.n	8000f3e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a17      	ldr	r2, [pc, #92]	; (8000f54 <HAL_TIM_PWM_MspInit+0x94>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10e      	bne.n	8000f18 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_TIM_PWM_MspInit+0x90>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <HAL_TIM_PWM_MspInit+0x90>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_TIM_PWM_MspInit+0x90>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
}
 8000f16:	e012      	b.n	8000f3e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_TIM_PWM_MspInit+0x98>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10d      	bne.n	8000f3e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_TIM_PWM_MspInit+0x90>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_TIM_PWM_MspInit+0x90>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_TIM_PWM_MspInit+0x90>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
}
 8000f3e:	bf00      	nop
 8000f40:	371c      	adds	r7, #28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40000400 	.word	0x40000400
 8000f58:	40000800 	.word	0x40000800

08000f5c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	; 0x30
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f7c:	d14a      	bne.n	8001014 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a3e      	ldr	r2, [pc, #248]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b3c      	ldr	r3, [pc, #240]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
 8000f98:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	4b38      	ldr	r3, [pc, #224]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a37      	ldr	r2, [pc, #220]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b35      	ldr	r3, [pc, #212]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b31      	ldr	r3, [pc, #196]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a30      	ldr	r2, [pc, #192]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_L_A_Pin;
 8000fd2:	2320      	movs	r3, #32
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	4825      	ldr	r0, [pc, #148]	; (8001084 <HAL_TIM_Encoder_MspInit+0x128>)
 8000fee:	f001 fae3 	bl	80025b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_L_B_Pin;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001002:	2301      	movs	r3, #1
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	481e      	ldr	r0, [pc, #120]	; (8001088 <HAL_TIM_Encoder_MspInit+0x12c>)
 800100e:	f001 fad3 	bl	80025b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001012:	e030      	b.n	8001076 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1c      	ldr	r2, [pc, #112]	; (800108c <HAL_TIM_Encoder_MspInit+0x130>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d12b      	bne.n	8001076 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a16      	ldr	r2, [pc, #88]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_TIM_Encoder_MspInit+0x124>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_R_B_Pin|ENC_R_A_Pin;
 8001056:	2303      	movs	r3, #3
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001066:	2302      	movs	r3, #2
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <HAL_TIM_Encoder_MspInit+0x128>)
 8001072:	f001 faa1 	bl	80025b8 <HAL_GPIO_Init>
}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	; 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400
 800108c:	40000c00 	.word	0x40000c00

08001090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_TIM_Base_MspInit+0x48>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d115      	bne.n	80010ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_TIM_Base_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <HAL_TIM_Base_MspInit+0x4c>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_TIM_Base_MspInit+0x4c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	202d      	movs	r0, #45	; 0x2d
 80010c4:	f001 fa41 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80010c8:	202d      	movs	r0, #45	; 0x2d
 80010ca:	f001 fa5a 	bl	8002582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40002000 	.word	0x40002000
 80010dc:	40023800 	.word	0x40023800

080010e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a37      	ldr	r2, [pc, #220]	; (80011dc <HAL_TIM_MspPostInit+0xfc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d11f      	bne.n	8001142 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <HAL_TIM_MspPostInit+0x100>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a35      	ldr	r2, [pc, #212]	; (80011e0 <HAL_TIM_MspPostInit+0x100>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_TIM_MspPostInit+0x100>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800111e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001130:	2301      	movs	r3, #1
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	482a      	ldr	r0, [pc, #168]	; (80011e4 <HAL_TIM_MspPostInit+0x104>)
 800113c:	f001 fa3c 	bl	80025b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001140:	e047      	b.n	80011d2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a28      	ldr	r2, [pc, #160]	; (80011e8 <HAL_TIM_MspPostInit+0x108>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d11e      	bne.n	800118a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <HAL_TIM_MspPostInit+0x100>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <HAL_TIM_MspPostInit+0x100>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_TIM_MspPostInit+0x100>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_L_PWM_Pin|FAN_R_PWM_Pin;
 8001168:	23c0      	movs	r3, #192	; 0xc0
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001178:	2302      	movs	r3, #2
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	481a      	ldr	r0, [pc, #104]	; (80011ec <HAL_TIM_MspPostInit+0x10c>)
 8001184:	f001 fa18 	bl	80025b8 <HAL_GPIO_Init>
}
 8001188:	e023      	b.n	80011d2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <HAL_TIM_MspPostInit+0x110>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d11e      	bne.n	80011d2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_TIM_MspPostInit+0x100>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <HAL_TIM_MspPostInit+0x100>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	6313      	str	r3, [r2, #48]	; 0x30
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_TIM_MspPostInit+0x100>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin|MOTOR_L_PWM_Pin;
 80011b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011c2:	2302      	movs	r3, #2
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <HAL_TIM_MspPostInit+0x114>)
 80011ce:	f001 f9f3 	bl	80025b8 <HAL_GPIO_Init>
}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40000400 	.word	0x40000400
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40000800 	.word	0x40000800
 80011f4:	40020400 	.word	0x40020400

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a19      	ldr	r2, [pc, #100]	; (800127c <HAL_UART_MspInit+0x84>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d12c      	bne.n	8001274 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_UART_MspInit+0x88>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_UART_MspInit+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001252:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001264:	2307      	movs	r3, #7
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_UART_MspInit+0x8c>)
 8001270:	f001 f9a2 	bl	80025b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40011000 	.word	0x40011000
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012dc:	f001 f818 	bl	8002310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80012e8:	2008      	movs	r0, #8
 80012ea:	f001 fb4b 	bl	8002984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  // Button might have been pressed when this interrupt is called
  // Software debounce
  if(!checking){
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <EXTI3_IRQHandler+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <EXTI3_IRQHandler+0x1e>
		HAL_TIM_Base_Start_IT(&htim14);
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <EXTI3_IRQHandler+0x28>)
 80012f8:	f002 fc1d 	bl	8003b36 <HAL_TIM_Base_Start_IT>
		checking = 1;
 80012fc:	4b02      	ldr	r3, [pc, #8]	; (8001308 <EXTI3_IRQHandler+0x24>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000a4 	.word	0x200000a4
 800130c:	200006a0 	.word	0x200006a0

08001310 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 8001316:	f002 fd90 	bl	8003e3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
  if(HAL_GPIO_ReadPin(BUTTON_SELECT_GPIO_Port, BUTTON_SELECT_Pin) == GPIO_PIN_RESET){
 800131a:	2108      	movs	r1, #8
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 800131e:	f001 fae5 	bl	80028ec <HAL_GPIO_ReadPin>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d107      	bne.n	8001338 <TIM8_TRG_COM_TIM14_IRQHandler+0x28>
		checking = 0;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim14);
 800132e:	4803      	ldr	r0, [pc, #12]	; (800133c <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 8001330:	f002 fc25 	bl	8003b7e <HAL_TIM_Base_Stop_IT>
		oled_button_press();
 8001334:	f000 fc56 	bl	8001be4 <oled_button_press>
	}

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200006a0 	.word	0x200006a0
 8001340:	40020800 	.word	0x40020800
 8001344:	200000a4 	.word	0x200000a4

08001348 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00a      	b.n	8001370 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800135a:	f3af 8000 	nop.w
 800135e:	4601      	mov	r1, r0
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	60ba      	str	r2, [r7, #8]
 8001366:	b2ca      	uxtb	r2, r1
 8001368:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	dbf0      	blt.n	800135a <_read+0x12>
	}

return len;
 8001378:	687b      	ldr	r3, [r7, #4]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e009      	b.n	80013a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	60ba      	str	r2, [r7, #8]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8e7 	bl	8000570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf1      	blt.n	8001394 <_write+0x12>
	}
	return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_close>:

int _close(int file)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	return -1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e2:	605a      	str	r2, [r3, #4]
	return 0;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_isatty>:

int _isatty(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	return 1;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	return 0;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x50>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <_sbrk+0x16>
		heap_end = &end;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <_sbrk+0x50>)
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <_sbrk+0x54>)
 8001438:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <_sbrk+0x50>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <_sbrk+0x50>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	466a      	mov	r2, sp
 800144a:	4293      	cmp	r3, r2
 800144c:	d907      	bls.n	800145e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800144e:	f003 fef9 	bl	8005244 <__errno>
 8001452:	4602      	mov	r2, r0
 8001454:	230c      	movs	r3, #12
 8001456:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	e006      	b.n	800146c <_sbrk+0x48>
	}

	heap_end += incr;
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <_sbrk+0x50>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	4a03      	ldr	r2, [pc, #12]	; (8001474 <_sbrk+0x50>)
 8001468:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200000a8 	.word	0x200000a8
 8001478:	20000890 	.word	0x20000890

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <SystemInit+0x28>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <SystemInit+0x28>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SystemInit+0x28>)
 8001492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001496:	609a      	str	r2, [r3, #8]
#endif
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <init_buzzer>:
  NOTE_GS5,2,

};


void init_buzzer(void){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014ac:	210c      	movs	r1, #12
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <init_buzzer+0x10>)
 80014b0:	f002 fbbc 	bl	8003c2c <HAL_TIM_PWM_Start>


}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000620 	.word	0x20000620

080014bc <tone>:
 * Plays a frequency for a duration
 *
 * @param int frequency - Hertz [Hz] (MAX 16kHz)
 * @param int duration - miliseconds [ms]
 */
void tone(int frequency, int duration){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	//Check for devision by 0
	if(frequency == 0){
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d104      	bne.n	80014d6 <tone+0x1a>
		HAL_Delay(duration);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 ff3e 	bl	8002350 <HAL_Delay>
		return;
 80014d4:	e015      	b.n	8001502 <tone+0x46>
	}

	//Calculate prescaler value
	int prescalar = 16000000 / 1000 / frequency;
 80014d6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80014e0:	60fb      	str	r3, [r7, #12]
	TIM1->PSC = prescalar;
 80014e2:	4a09      	ldr	r2, [pc, #36]	; (8001508 <tone+0x4c>)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6293      	str	r3, [r2, #40]	; 0x28

	//Play tone
	TIM1->CCR4 = 200;
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <tone+0x4c>)
 80014ea:	22c8      	movs	r2, #200	; 0xc8
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(duration);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 ff2d 	bl	8002350 <HAL_Delay>
	TIM1->CCR4 = 0;
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <tone+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	641a      	str	r2, [r3, #64]	; 0x40

	//Base prescalar
	TIM1->PSC = 4;
 80014fc:	4b02      	ldr	r3, [pc, #8]	; (8001508 <tone+0x4c>)
 80014fe:	2204      	movs	r2, #4
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40010000 	.word	0x40010000

0800150c <init_fans>:


/**
 * Initialize fans by starting PWM timers and running startup sequence required by the ESCs.
 */
void init_fans(void){
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Right
 8001510:	2104      	movs	r1, #4
 8001512:	480e      	ldr	r0, [pc, #56]	; (800154c <init_fans+0x40>)
 8001514:	f002 fb8a 	bl	8003c2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Left
 8001518:	2100      	movs	r1, #0
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <init_fans+0x40>)
 800151c:	f002 fb86 	bl	8003c2c <HAL_TIM_PWM_Start>

	// Startup sequence
	// 1. Start arming by applying a OK signal
	// 2. Finish arming by applying 0 throttle

	TIM3->CCR2 = 1600;
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <init_fans+0x44>)
 8001522:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001526:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = 1600;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <init_fans+0x44>)
 800152a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800152e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(3000);
 8001530:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001534:	f000 ff0c 	bl	8002350 <HAL_Delay>

	TIM3->CCR2 = 1500;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <init_fans+0x44>)
 800153a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800153e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = 1500;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <init_fans+0x44>)
 8001542:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001546:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200005a0 	.word	0x200005a0
 8001550:	40000400 	.word	0x40000400

08001554 <init_motors>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

void init_motors(void){
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    // Start encoder inputs
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Right
 8001558:	213c      	movs	r1, #60	; 0x3c
 800155a:	4809      	ldr	r0, [pc, #36]	; (8001580 <init_motors+0x2c>)
 800155c:	f002 fc36 	bl	8003dcc <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left
 8001560:	213c      	movs	r1, #60	; 0x3c
 8001562:	4808      	ldr	r0, [pc, #32]	; (8001584 <init_motors+0x30>)
 8001564:	f002 fc32 	bl	8003dcc <HAL_TIM_Encoder_Start>

    // Start PWM generation for motors
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Right
 8001568:	2108      	movs	r1, #8
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <init_motors+0x34>)
 800156c:	f002 fb5e 	bl	8003c2c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Left
 8001570:	210c      	movs	r1, #12
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <init_motors+0x34>)
 8001574:	f002 fb5a 	bl	8003c2c <HAL_TIM_PWM_Start>

    // Put both motors in Hi-Z (high impedance output => rotate freely)
    motors_stop();
 8001578:	f000 f808 	bl	800158c <motors_stop>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000560 	.word	0x20000560
 8001584:	20000660 	.word	0x20000660
 8001588:	20000520 	.word	0x20000520

0800158c <motors_stop>:
    }

    TIM4->CCR3 = limited_speed;
}

void motors_stop(void){
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
    TIM4->CCR3 = 0;
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <motors_stop+0x3c>)
 8001592:	2200      	movs	r2, #0
 8001594:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_WritePin(MOTOR_R_IN1_GPIO_Port, MOTOR_R_IN1_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2120      	movs	r1, #32
 800159a:	480c      	ldr	r0, [pc, #48]	; (80015cc <motors_stop+0x40>)
 800159c:	f001 f9be 	bl	800291c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_R_IN2_GPIO_Port, MOTOR_R_IN2_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2110      	movs	r1, #16
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <motors_stop+0x40>)
 80015a6:	f001 f9b9 	bl	800291c <HAL_GPIO_WritePin>

    TIM4->CCR4 = 0;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <motors_stop+0x3c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_GPIO_WritePin(MOTOR_L_IN1_GPIO_Port, MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <motors_stop+0x40>)
 80015b6:	f001 f9b1 	bl	800291c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_L_IN2_GPIO_Port, MOTOR_L_IN2_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2140      	movs	r1, #64	; 0x40
 80015be:	4803      	ldr	r0, [pc, #12]	; (80015cc <motors_stop+0x40>)
 80015c0:	f001 f9ac 	bl	800291c <HAL_GPIO_WritePin>
};
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40000800 	.word	0x40000800
 80015cc:	40020400 	.word	0x40020400

080015d0 <init_oled>:


/**
	* @brief Initialize the oled screen and a welcome screen. 
*/
void init_oled(void){
 80015d0:	b598      	push	{r3, r4, r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80015d4:	f000 fc04 	bl	8001de0 <ssd1306_Init>
	
	ssd1306_DrawBitmap(case_head_bmp);
 80015d8:	4852      	ldr	r0, [pc, #328]	; (8001724 <init_oled+0x154>)
 80015da:	f000 fd17 	bl	800200c <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80015de:	f000 fc8f 	bl	8001f00 <ssd1306_UpdateScreen>

	HAL_Delay(1000);
 80015e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015e6:	f000 feb3 	bl	8002350 <HAL_Delay>
	
	// Show main menu
	active_screen = MENU;
 80015ea:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <init_oled+0x158>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
	
	// Main Menu
	strcpy(main_menu.name, "Main menu");
 80015f0:	4b4e      	ldr	r3, [pc, #312]	; (800172c <init_oled+0x15c>)
 80015f2:	4a4f      	ldr	r2, [pc, #316]	; (8001730 <init_oled+0x160>)
 80015f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80015f6:	c303      	stmia	r3!, {r0, r1}
 80015f8:	801a      	strh	r2, [r3, #0]
	main_menu.head_item = NULL; 	// main menu has no items, only sub menus
 80015fa:	4b4c      	ldr	r3, [pc, #304]	; (800172c <init_oled+0x15c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	615a      	str	r2, [r3, #20]
	main_menu.pNext  = &sub_menu_1; // Start of submenus
 8001600:	4b4a      	ldr	r3, [pc, #296]	; (800172c <init_oled+0x15c>)
 8001602:	4a4c      	ldr	r2, [pc, #304]	; (8001734 <init_oled+0x164>)
 8001604:	619a      	str	r2, [r3, #24]
	
	// Back to main menu item
	strcpy(menu_item_back_main.name, "Back");
 8001606:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <init_oled+0x168>)
 8001608:	4a4c      	ldr	r2, [pc, #304]	; (800173c <init_oled+0x16c>)
 800160a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800160e:	6018      	str	r0, [r3, #0]
 8001610:	3304      	adds	r3, #4
 8001612:	7019      	strb	r1, [r3, #0]
	menu_item_back_main.pNext = NULL;
 8001614:	4b48      	ldr	r3, [pc, #288]	; (8001738 <init_oled+0x168>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
	menu_item_back_main.function = go_back_main;
 800161a:	4b47      	ldr	r3, [pc, #284]	; (8001738 <init_oled+0x168>)
 800161c:	4a48      	ldr	r2, [pc, #288]	; (8001740 <init_oled+0x170>)
 800161e:	615a      	str	r2, [r3, #20]
	
	// Sub menu 1 + items
	strcpy(sub_menu_1.name, "General");
 8001620:	4b44      	ldr	r3, [pc, #272]	; (8001734 <init_oled+0x164>)
 8001622:	4a48      	ldr	r2, [pc, #288]	; (8001744 <init_oled+0x174>)
 8001624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001628:	e883 0003 	stmia.w	r3, {r0, r1}
	sub_menu_1.pNext = &sub_menu_2;
 800162c:	4b41      	ldr	r3, [pc, #260]	; (8001734 <init_oled+0x164>)
 800162e:	4a46      	ldr	r2, [pc, #280]	; (8001748 <init_oled+0x178>)
 8001630:	619a      	str	r2, [r3, #24]
	sub_menu_1.head_item = &menu_item_11;
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <init_oled+0x164>)
 8001634:	4a45      	ldr	r2, [pc, #276]	; (800174c <init_oled+0x17c>)
 8001636:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_11.name, "Peripheral info");
 8001638:	4a44      	ldr	r2, [pc, #272]	; (800174c <init_oled+0x17c>)
 800163a:	4b45      	ldr	r3, [pc, #276]	; (8001750 <init_oled+0x180>)
 800163c:	4614      	mov	r4, r2
 800163e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	menu_item_11.pNext = &menu_item_12;
 8001644:	4b41      	ldr	r3, [pc, #260]	; (800174c <init_oled+0x17c>)
 8001646:	4a43      	ldr	r2, [pc, #268]	; (8001754 <init_oled+0x184>)
 8001648:	621a      	str	r2, [r3, #32]
	menu_item_11.function = oled_show_info;
 800164a:	4b40      	ldr	r3, [pc, #256]	; (800174c <init_oled+0x17c>)
 800164c:	4a42      	ldr	r2, [pc, #264]	; (8001758 <init_oled+0x188>)
 800164e:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_12.name, "CASE Logo");
 8001650:	4b40      	ldr	r3, [pc, #256]	; (8001754 <init_oled+0x184>)
 8001652:	4a42      	ldr	r2, [pc, #264]	; (800175c <init_oled+0x18c>)
 8001654:	ca07      	ldmia	r2, {r0, r1, r2}
 8001656:	c303      	stmia	r3!, {r0, r1}
 8001658:	801a      	strh	r2, [r3, #0]
	menu_item_12.pNext = &menu_item_13;
 800165a:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <init_oled+0x184>)
 800165c:	4a40      	ldr	r2, [pc, #256]	; (8001760 <init_oled+0x190>)
 800165e:	621a      	str	r2, [r3, #32]
	menu_item_12.function = oled_show_case;
 8001660:	4b3c      	ldr	r3, [pc, #240]	; (8001754 <init_oled+0x184>)
 8001662:	4a40      	ldr	r2, [pc, #256]	; (8001764 <init_oled+0x194>)
 8001664:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_13.name, "Nyx & Iris");
 8001666:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <init_oled+0x190>)
 8001668:	4a3f      	ldr	r2, [pc, #252]	; (8001768 <init_oled+0x198>)
 800166a:	ca07      	ldmia	r2, {r0, r1, r2}
 800166c:	c303      	stmia	r3!, {r0, r1}
 800166e:	801a      	strh	r2, [r3, #0]
 8001670:	3302      	adds	r3, #2
 8001672:	0c12      	lsrs	r2, r2, #16
 8001674:	701a      	strb	r2, [r3, #0]
	menu_item_13.pNext = &menu_item_back_main;
 8001676:	4b3a      	ldr	r3, [pc, #232]	; (8001760 <init_oled+0x190>)
 8001678:	4a2f      	ldr	r2, [pc, #188]	; (8001738 <init_oled+0x168>)
 800167a:	621a      	str	r2, [r3, #32]
	menu_item_13.function = oled_show_cats;
 800167c:	4b38      	ldr	r3, [pc, #224]	; (8001760 <init_oled+0x190>)
 800167e:	4a3b      	ldr	r2, [pc, #236]	; (800176c <init_oled+0x19c>)
 8001680:	615a      	str	r2, [r3, #20]
	
	// Sub menu 2 + items
	strcpy(sub_menu_2.name, "Edit variables");
 8001682:	4a31      	ldr	r2, [pc, #196]	; (8001748 <init_oled+0x178>)
 8001684:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <init_oled+0x1a0>)
 8001686:	4614      	mov	r4, r2
 8001688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800168a:	c407      	stmia	r4!, {r0, r1, r2}
 800168c:	8023      	strh	r3, [r4, #0]
 800168e:	3402      	adds	r4, #2
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	7023      	strb	r3, [r4, #0]
	sub_menu_2.pNext = &sub_menu_3;
 8001694:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <init_oled+0x178>)
 8001696:	4a37      	ldr	r2, [pc, #220]	; (8001774 <init_oled+0x1a4>)
 8001698:	619a      	str	r2, [r3, #24]
	sub_menu_2.head_item = &menu_item_21;
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <init_oled+0x178>)
 800169c:	4a36      	ldr	r2, [pc, #216]	; (8001778 <init_oled+0x1a8>)
 800169e:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_21.name, "Kp");
 80016a0:	4b35      	ldr	r3, [pc, #212]	; (8001778 <init_oled+0x1a8>)
 80016a2:	4a36      	ldr	r2, [pc, #216]	; (800177c <init_oled+0x1ac>)
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	4611      	mov	r1, r2
 80016a8:	8019      	strh	r1, [r3, #0]
 80016aa:	3302      	adds	r3, #2
 80016ac:	0c12      	lsrs	r2, r2, #16
 80016ae:	701a      	strb	r2, [r3, #0]
	menu_item_21.pNext = &menu_item_22;
 80016b0:	4b31      	ldr	r3, [pc, #196]	; (8001778 <init_oled+0x1a8>)
 80016b2:	4a33      	ldr	r2, [pc, #204]	; (8001780 <init_oled+0x1b0>)
 80016b4:	621a      	str	r2, [r3, #32]
	menu_item_21.pvar = &kp_test;
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <init_oled+0x1a8>)
 80016b8:	4a32      	ldr	r2, [pc, #200]	; (8001784 <init_oled+0x1b4>)
 80016ba:	619a      	str	r2, [r3, #24]
	menu_item_21.edit_var_function = oled_edit_var;
 80016bc:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <init_oled+0x1a8>)
 80016be:	4a32      	ldr	r2, [pc, #200]	; (8001788 <init_oled+0x1b8>)
 80016c0:	61da      	str	r2, [r3, #28]
	
	strcpy(menu_item_22.name, "Ki");
 80016c2:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <init_oled+0x1b0>)
 80016c4:	4a31      	ldr	r2, [pc, #196]	; (800178c <init_oled+0x1bc>)
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	4611      	mov	r1, r2
 80016ca:	8019      	strh	r1, [r3, #0]
 80016cc:	3302      	adds	r3, #2
 80016ce:	0c12      	lsrs	r2, r2, #16
 80016d0:	701a      	strb	r2, [r3, #0]
	menu_item_22.pNext = &menu_item_back_main;
 80016d2:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <init_oled+0x1b0>)
 80016d4:	4a18      	ldr	r2, [pc, #96]	; (8001738 <init_oled+0x168>)
 80016d6:	621a      	str	r2, [r3, #32]
	menu_item_22.pvar = &ki_test;
 80016d8:	4b29      	ldr	r3, [pc, #164]	; (8001780 <init_oled+0x1b0>)
 80016da:	4a2d      	ldr	r2, [pc, #180]	; (8001790 <init_oled+0x1c0>)
 80016dc:	619a      	str	r2, [r3, #24]
	menu_item_22.edit_var_function = oled_edit_var;
 80016de:	4b28      	ldr	r3, [pc, #160]	; (8001780 <init_oled+0x1b0>)
 80016e0:	4a29      	ldr	r2, [pc, #164]	; (8001788 <init_oled+0x1b8>)
 80016e2:	61da      	str	r2, [r3, #28]


	// Sub menu 3 + items
	strcpy(sub_menu_3.name, "Submenu 3");
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <init_oled+0x1a4>)
 80016e6:	4a2b      	ldr	r2, [pc, #172]	; (8001794 <init_oled+0x1c4>)
 80016e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ea:	c303      	stmia	r3!, {r0, r1}
 80016ec:	801a      	strh	r2, [r3, #0]
	sub_menu_3.pNext = NULL;
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <init_oled+0x1a4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
	sub_menu_3.head_item = &menu_item_31;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <init_oled+0x1a4>)
 80016f6:	4a28      	ldr	r2, [pc, #160]	; (8001798 <init_oled+0x1c8>)
 80016f8:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_31.name, "Item 31");
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <init_oled+0x1c8>)
 80016fc:	4a27      	ldr	r2, [pc, #156]	; (800179c <init_oled+0x1cc>)
 80016fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001702:	e883 0003 	stmia.w	r3, {r0, r1}
	menu_item_31.pNext = &menu_item_32;
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <init_oled+0x1c8>)
 8001708:	4a25      	ldr	r2, [pc, #148]	; (80017a0 <init_oled+0x1d0>)
 800170a:	621a      	str	r2, [r3, #32]
	
	strcpy(menu_item_32.name, "Item 32");
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <init_oled+0x1d0>)
 800170e:	4a25      	ldr	r2, [pc, #148]	; (80017a4 <init_oled+0x1d4>)
 8001710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001714:	e883 0003 	stmia.w	r3, {r0, r1}
	menu_item_32.pNext = &menu_item_back_main;
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <init_oled+0x1d0>)
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <init_oled+0x168>)
 800171c:	621a      	str	r2, [r3, #32]

}
 800171e:	bf00      	nop
 8001720:	bd98      	pop	{r3, r4, r7, pc}
 8001722:	bf00      	nop
 8001724:	08006428 	.word	0x08006428
 8001728:	20000794 	.word	0x20000794
 800172c:	20000798 	.word	0x20000798
 8001730:	0800633c 	.word	0x0800633c
 8001734:	200007b4 	.word	0x200007b4
 8001738:	20000840 	.word	0x20000840
 800173c:	08006348 	.word	0x08006348
 8001740:	08001bc1 	.word	0x08001bc1
 8001744:	08006350 	.word	0x08006350
 8001748:	2000070c 	.word	0x2000070c
 800174c:	20000770 	.word	0x20000770
 8001750:	08006358 	.word	0x08006358
 8001754:	20000728 	.word	0x20000728
 8001758:	08001d21 	.word	0x08001d21
 800175c:	08006368 	.word	0x08006368
 8001760:	200007d0 	.word	0x200007d0
 8001764:	08001cd1 	.word	0x08001cd1
 8001768:	08006374 	.word	0x08006374
 800176c:	08001cf9 	.word	0x08001cf9
 8001770:	08006380 	.word	0x08006380
 8001774:	20000868 	.word	0x20000868
 8001778:	2000081c 	.word	0x2000081c
 800177c:	08006390 	.word	0x08006390
 8001780:	200006e4 	.word	0x200006e4
 8001784:	20000004 	.word	0x20000004
 8001788:	08001d39 	.word	0x08001d39
 800178c:	08006394 	.word	0x08006394
 8001790:	20000008 	.word	0x20000008
 8001794:	08006398 	.word	0x08006398
 8001798:	200007f8 	.word	0x200007f8
 800179c:	080063a4 	.word	0x080063a4
 80017a0:	2000074c 	.word	0x2000074c
 80017a4:	080063ac 	.word	0x080063ac

080017a8 <oled_update>:
/**
	* @brief Update the screen with new data
	*	
	* Will check if errors have occurred and only print an error screen.
*/
void oled_update(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	// Don't print anything if an error has occurred
	if(error_occured){
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <oled_update+0x70>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d12e      	bne.n	8001812 <oled_update+0x6a>
		return;
	}
	
	if(active_screen == MENU){
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <oled_update+0x74>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <oled_update+0x1a>
		oled_menu();
 80017bc:	f000 f90c 	bl	80019d8 <oled_menu>
 80017c0:	e024      	b.n	800180c <oled_update+0x64>
	}else if(active_screen == INFO){
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <oled_update+0x74>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d102      	bne.n	80017d0 <oled_update+0x28>
		oled_info_screen();
 80017ca:	f000 f82f 	bl	800182c <oled_info_screen>
 80017ce:	e01d      	b.n	800180c <oled_update+0x64>
	}else if(active_screen == IMAGE){
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <oled_update+0x74>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d105      	bne.n	80017e4 <oled_update+0x3c>
		ssd1306_DrawBitmap(curr_image);
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <oled_update+0x78>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fc15 	bl	800200c <ssd1306_DrawBitmap>
 80017e2:	e013      	b.n	800180c <oled_update+0x64>
	}else if(active_screen == EDIT_VAR){
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <oled_update+0x74>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d102      	bne.n	80017f2 <oled_update+0x4a>
		oled_edit_var_screen();
 80017ec:	f000 f864 	bl	80018b8 <oled_edit_var_screen>
 80017f0:	e00c      	b.n	800180c <oled_update+0x64>
	}else{
		ssd1306_Fill(Black);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 fb62 	bl	8001ebc <ssd1306_Fill>
		ssd1306_SetCursor((128-15*7)/2, 40);
 80017f8:	2128      	movs	r1, #40	; 0x28
 80017fa:	200b      	movs	r0, #11
 80017fc:	f000 fcf4 	bl	80021e8 <ssd1306_SetCursor>
		ssd1306_WriteString("NOT IMPLEMENTED", Font_7x10, White);
 8001800:	4a08      	ldr	r2, [pc, #32]	; (8001824 <oled_update+0x7c>)
 8001802:	2301      	movs	r3, #1
 8001804:	ca06      	ldmia	r2, {r1, r2}
 8001806:	4808      	ldr	r0, [pc, #32]	; (8001828 <oled_update+0x80>)
 8001808:	f000 fcc8 	bl	800219c <ssd1306_WriteString>
	}
	
	ssd1306_UpdateScreen();
 800180c:	f000 fb78 	bl	8001f00 <ssd1306_UpdateScreen>
 8001810:	e000      	b.n	8001814 <oled_update+0x6c>
		return;
 8001812:	bf00      	nop
}
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200000ac 	.word	0x200000ac
 800181c:	20000794 	.word	0x20000794
 8001820:	20000708 	.word	0x20000708
 8001824:	2000000c 	.word	0x2000000c
 8001828:	080063b4 	.word	0x080063b4

0800182c <oled_info_screen>:


/**
	* @brief Show an screen with general info about the mouse peripherals.
*/
void oled_info_screen(){
 800182c:	b580      	push	{r7, lr}
 800182e:	b090      	sub	sp, #64	; 0x40
 8001830:	af00      	add	r7, sp, #0
	char buff[60];
	

	ssd1306_Fill(Black);
 8001832:	2000      	movs	r0, #0
 8001834:	f000 fb42 	bl	8001ebc <ssd1306_Fill>
	ssd1306_SetCursor(0,0);
 8001838:	2100      	movs	r1, #0
 800183a:	2000      	movs	r0, #0
 800183c:	f000 fcd4 	bl	80021e8 <ssd1306_SetCursor>
	ssd1306_WriteString("Info", Font_11x18, White);
 8001840:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <oled_info_screen+0x74>)
 8001842:	2301      	movs	r3, #1
 8001844:	ca06      	ldmia	r2, {r1, r2}
 8001846:	4817      	ldr	r0, [pc, #92]	; (80018a4 <oled_info_screen+0x78>)
 8001848:	f000 fca8 	bl	800219c <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "Encoder R: %d", (int)TIM5->CNT);
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <oled_info_screen+0x7c>)
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	1d38      	adds	r0, r7, #4
 8001852:	4a16      	ldr	r2, [pc, #88]	; (80018ac <oled_info_screen+0x80>)
 8001854:	213c      	movs	r1, #60	; 0x3c
 8001856:	f003 fd8b 	bl	8005370 <sniprintf>
	ssd1306_SetCursor(0,40);
 800185a:	2128      	movs	r1, #40	; 0x28
 800185c:	2000      	movs	r0, #0
 800185e:	f000 fcc3 	bl	80021e8 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <oled_info_screen+0x84>)
 8001864:	1d38      	adds	r0, r7, #4
 8001866:	2301      	movs	r3, #1
 8001868:	ca06      	ldmia	r2, {r1, r2}
 800186a:	f000 fc97 	bl	800219c <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "Encoder L: %d", (int)TIM2->CNT);
 800186e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	1d38      	adds	r0, r7, #4
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <oled_info_screen+0x88>)
 8001878:	213c      	movs	r1, #60	; 0x3c
 800187a:	f003 fd79 	bl	8005370 <sniprintf>
	ssd1306_SetCursor(0,50);
 800187e:	2132      	movs	r1, #50	; 0x32
 8001880:	2000      	movs	r0, #0
 8001882:	f000 fcb1 	bl	80021e8 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <oled_info_screen+0x84>)
 8001888:	1d38      	adds	r0, r7, #4
 800188a:	2301      	movs	r3, #1
 800188c:	ca06      	ldmia	r2, {r1, r2}
 800188e:	f000 fc85 	bl	800219c <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8001892:	f000 fb35 	bl	8001f00 <ssd1306_UpdateScreen>
}
 8001896:	bf00      	nop
 8001898:	3740      	adds	r7, #64	; 0x40
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000014 	.word	0x20000014
 80018a4:	080063c4 	.word	0x080063c4
 80018a8:	40000c00 	.word	0x40000c00
 80018ac:	080063cc 	.word	0x080063cc
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	080063dc 	.word	0x080063dc

080018b8 <oled_edit_var_screen>:


/**
 * @brief Show edit variable screen
 */
void oled_edit_var_screen(void){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
	edit_var_new_value = *pedit_var + (int)TIM5->CNT / (float)4096 * 15;
 80018be:	4b25      	ldr	r3, [pc, #148]	; (8001954 <oled_edit_var_screen+0x9c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <oled_edit_var_screen+0xa0>)
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018d8:	ed9f 6a20 	vldr	s12, [pc, #128]	; 800195c <oled_edit_var_screen+0xa4>
 80018dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018e0:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80018e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f0:	ee17 2a90 	vmov	r2, s15
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <oled_edit_var_screen+0xa8>)
 80018f6:	601a      	str	r2, [r3, #0]

	char buff[10];

	ssd1306_Fill(Black);
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 fadf 	bl	8001ebc <ssd1306_Fill>
	ssd1306_SetCursor(0,0);
 80018fe:	2100      	movs	r1, #0
 8001900:	2000      	movs	r0, #0
 8001902:	f000 fc71 	bl	80021e8 <ssd1306_SetCursor>
	ssd1306_WriteString("Edit", Font_11x18, White);
 8001906:	4a17      	ldr	r2, [pc, #92]	; (8001964 <oled_edit_var_screen+0xac>)
 8001908:	2301      	movs	r3, #1
 800190a:	ca06      	ldmia	r2, {r1, r2}
 800190c:	4816      	ldr	r0, [pc, #88]	; (8001968 <oled_edit_var_screen+0xb0>)
 800190e:	f000 fc45 	bl	800219c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 40);
 8001912:	2128      	movs	r1, #40	; 0x28
 8001914:	2000      	movs	r0, #0
 8001916:	f000 fc67 	bl	80021e8 <ssd1306_SetCursor>
	ssd1306_WriteString(pedit_var_name, Font_7x10, White);
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <oled_edit_var_screen+0xb4>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	4a14      	ldr	r2, [pc, #80]	; (8001970 <oled_edit_var_screen+0xb8>)
 8001920:	2301      	movs	r3, #1
 8001922:	ca06      	ldmia	r2, {r1, r2}
 8001924:	f000 fc3a 	bl	800219c <ssd1306_WriteString>

	ssd1306_SetCursor(80, 40);
 8001928:	2128      	movs	r1, #40	; 0x28
 800192a:	2050      	movs	r0, #80	; 0x50
 800192c:	f000 fc5c 	bl	80021e8 <ssd1306_SetCursor>
	snprintf(buff, sizeof(buff), "%d", edit_var_new_value);
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <oled_edit_var_screen+0xa8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	1d38      	adds	r0, r7, #4
 8001936:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <oled_edit_var_screen+0xbc>)
 8001938:	210a      	movs	r1, #10
 800193a:	f003 fd19 	bl	8005370 <sniprintf>
	ssd1306_WriteString(buff, Font_7x10, White);
 800193e:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <oled_edit_var_screen+0xb8>)
 8001940:	1d38      	adds	r0, r7, #4
 8001942:	2301      	movs	r3, #1
 8001944:	ca06      	ldmia	r2, {r1, r2}
 8001946:	f000 fc29 	bl	800219c <ssd1306_WriteString>
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200006e0 	.word	0x200006e0
 8001958:	40000c00 	.word	0x40000c00
 800195c:	45800000 	.word	0x45800000
 8001960:	20000864 	.word	0x20000864
 8001964:	20000014 	.word	0x20000014
 8001968:	080063ec 	.word	0x080063ec
 800196c:	200007f4 	.word	0x200007f4
 8001970:	2000000c 	.word	0x2000000c
 8001974:	080063f4 	.word	0x080063f4

08001978 <oled_nr_items>:
}




uint8_t oled_nr_items(void){
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
	uint8_t nr_items = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
	
	if(curr_submenu == NULL){
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <oled_nr_items+0x58>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10d      	bne.n	80019a6 <oled_nr_items+0x2e>
		struct menu * sub_menu = main_menu.pNext;
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <oled_nr_items+0x5c>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 8001990:	e005      	b.n	800199e <oled_nr_items+0x26>
			nr_items++;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	3301      	adds	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
			sub_menu = sub_menu->pNext;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f6      	bne.n	8001992 <oled_nr_items+0x1a>
 80019a4:	e00d      	b.n	80019c2 <oled_nr_items+0x4a>
		}
	}else{
		struct menu_item * item = curr_submenu->head_item;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <oled_nr_items+0x58>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 80019ae:	e005      	b.n	80019bc <oled_nr_items+0x44>
			nr_items++;
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	3301      	adds	r3, #1
 80019b4:	73fb      	strb	r3, [r7, #15]
			item = item->pNext;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f6      	bne.n	80019b0 <oled_nr_items+0x38>
		}
	}
	
	return nr_items;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	200000b4 	.word	0x200000b4
 80019d4:	20000798 	.word	0x20000798

080019d8 <oled_menu>:
	* 
	* The cursor position can be changed by rotating the wheels
	* You can choose menu or function by pressing the "Select Button" on the board 
	*
*/
void oled_menu(void){
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0

	// Calculate cursor index based on encoder
	revolutions = TIM5->CNT / (float)4096 * 6;
 80019de:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <oled_menu+0x1c0>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019ea:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001b9c <oled_menu+0x1c4>
 80019ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80019f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fa:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <oled_menu+0x1c8>)
 80019fc:	edc3 7a00 	vstr	s15, [r3]
	cursor = (int) revolutions % oled_nr_items(); // Should be calculated based on actual number of items in the current sub_menu
 8001a00:	4b67      	ldr	r3, [pc, #412]	; (8001ba0 <oled_menu+0x1c8>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0a:	ee17 4a90 	vmov	r4, s15
 8001a0e:	f7ff ffb3 	bl	8001978 <oled_nr_items>
 8001a12:	4603      	mov	r3, r0
 8001a14:	fb94 f2f3 	sdiv	r2, r4, r3
 8001a18:	fb03 f302 	mul.w	r3, r3, r2
 8001a1c:	1ae3      	subs	r3, r4, r3
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b60      	ldr	r3, [pc, #384]	; (8001ba4 <oled_menu+0x1cc>)
 8001a22:	701a      	strb	r2, [r3, #0]
	
	// Background
	ssd1306_Fill(Black);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f000 fa49 	bl	8001ebc <ssd1306_Fill>
	
	if(curr_submenu == NULL){
 8001a2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ba8 <oled_menu+0x1d0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d145      	bne.n	8001abe <oled_menu+0xe6>
		ssd1306_SetCursor(0,0);
 8001a32:	2100      	movs	r1, #0
 8001a34:	2000      	movs	r0, #0
 8001a36:	f000 fbd7 	bl	80021e8 <ssd1306_SetCursor>
		ssd1306_WriteString(main_menu.name, Font_11x18, White);
 8001a3a:	4a5c      	ldr	r2, [pc, #368]	; (8001bac <oled_menu+0x1d4>)
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	ca06      	ldmia	r2, {r1, r2}
 8001a40:	485b      	ldr	r0, [pc, #364]	; (8001bb0 <oled_menu+0x1d8>)
 8001a42:	f000 fbab 	bl	800219c <ssd1306_WriteString>
		
		struct menu * sub_menu = main_menu.pNext; // Reference to first submenu
 8001a46:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <oled_menu+0x1d8>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	61fb      	str	r3, [r7, #28]
		int line = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61bb      	str	r3, [r7, #24]
		
		while(sub_menu != NULL){
 8001a50:	e031      	b.n	8001ab6 <oled_menu+0xde>
			if(line == cursor){
 8001a52:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <oled_menu+0x1cc>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d112      	bne.n	8001a84 <oled_menu+0xac>
				ssd1306_SetCursor(0, 18 + line*10);
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	3312      	adds	r3, #18
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4619      	mov	r1, r3
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 fbb8 	bl	80021e8 <ssd1306_SetCursor>
				ssd1306_WriteString(">", Font_7x10, White);
 8001a78:	4a4e      	ldr	r2, [pc, #312]	; (8001bb4 <oled_menu+0x1dc>)
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	ca06      	ldmia	r2, {r1, r2}
 8001a7e:	484e      	ldr	r0, [pc, #312]	; (8001bb8 <oled_menu+0x1e0>)
 8001a80:	f000 fb8c 	bl	800219c <ssd1306_WriteString>
			}
			ssd1306_SetCursor(14, 18 + line*10);
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	0092      	lsls	r2, r2, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	3312      	adds	r3, #18
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	4619      	mov	r1, r3
 8001a98:	200e      	movs	r0, #14
 8001a9a:	f000 fba5 	bl	80021e8 <ssd1306_SetCursor>
			ssd1306_WriteString(sub_menu->name, Font_7x10, White);
 8001a9e:	69f8      	ldr	r0, [r7, #28]
 8001aa0:	4a44      	ldr	r2, [pc, #272]	; (8001bb4 <oled_menu+0x1dc>)
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	ca06      	ldmia	r2, {r1, r2}
 8001aa6:	f000 fb79 	bl	800219c <ssd1306_WriteString>
			line++;
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	3301      	adds	r3, #1
 8001aae:	61bb      	str	r3, [r7, #24]
			sub_menu = sub_menu->pNext;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	61fb      	str	r3, [r7, #28]
		while(sub_menu != NULL){
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1ca      	bne.n	8001a52 <oled_menu+0x7a>
 8001abc:	e066      	b.n	8001b8c <oled_menu+0x1b4>
		}
	}else{ // We are in a submenu => draw menu items
		ssd1306_SetCursor(0,0);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f000 fb91 	bl	80021e8 <ssd1306_SetCursor>
		ssd1306_WriteString(curr_submenu->name, Font_11x18, White);
 8001ac6:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <oled_menu+0x1d0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	4a37      	ldr	r2, [pc, #220]	; (8001bac <oled_menu+0x1d4>)
 8001ace:	2301      	movs	r3, #1
 8001ad0:	ca06      	ldmia	r2, {r1, r2}
 8001ad2:	f000 fb63 	bl	800219c <ssd1306_WriteString>
		
		
		struct menu_item * item = curr_submenu->head_item;
 8001ad6:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <oled_menu+0x1d0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	617b      	str	r3, [r7, #20]
		int line = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
		while(item != NULL){
 8001ae2:	e050      	b.n	8001b86 <oled_menu+0x1ae>
			if (line == cursor){
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <oled_menu+0x1cc>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d112      	bne.n	8001b16 <oled_menu+0x13e>
				ssd1306_SetCursor(0, 18 + line*10);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3312      	adds	r3, #18
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	4619      	mov	r1, r3
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 fb6f 	bl	80021e8 <ssd1306_SetCursor>
				ssd1306_WriteString(">", Font_7x10, White);
 8001b0a:	4a2a      	ldr	r2, [pc, #168]	; (8001bb4 <oled_menu+0x1dc>)
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	ca06      	ldmia	r2, {r1, r2}
 8001b10:	4829      	ldr	r0, [pc, #164]	; (8001bb8 <oled_menu+0x1e0>)
 8001b12:	f000 fb43 	bl	800219c <ssd1306_WriteString>
			}
			ssd1306_SetCursor(14, 18 + line*10);
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	3312      	adds	r3, #18
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4619      	mov	r1, r3
 8001b2a:	200e      	movs	r0, #14
 8001b2c:	f000 fb5c 	bl	80021e8 <ssd1306_SetCursor>
			ssd1306_WriteString(item->name, Font_7x10, White);
 8001b30:	6978      	ldr	r0, [r7, #20]
 8001b32:	4a20      	ldr	r2, [pc, #128]	; (8001bb4 <oled_menu+0x1dc>)
 8001b34:	2301      	movs	r3, #1
 8001b36:	ca06      	ldmia	r2, {r1, r2}
 8001b38:	f000 fb30 	bl	800219c <ssd1306_WriteString>
			if(item->pvar != NULL){
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01a      	beq.n	8001b7a <oled_menu+0x1a2>
				char buff[10];
				ssd1306_SetCursor(80, 18 + line*10);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	3312      	adds	r3, #18
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4619      	mov	r1, r3
 8001b58:	2050      	movs	r0, #80	; 0x50
 8001b5a:	f000 fb45 	bl	80021e8 <ssd1306_SetCursor>
				snprintf(buff, sizeof(buff), "%d", *item->pvar);
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	1d38      	adds	r0, r7, #4
 8001b66:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <oled_menu+0x1e4>)
 8001b68:	210a      	movs	r1, #10
 8001b6a:	f003 fc01 	bl	8005370 <sniprintf>
				ssd1306_WriteString(buff, Font_7x10, White);
 8001b6e:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <oled_menu+0x1dc>)
 8001b70:	1d38      	adds	r0, r7, #4
 8001b72:	2301      	movs	r3, #1
 8001b74:	ca06      	ldmia	r2, {r1, r2}
 8001b76:	f000 fb11 	bl	800219c <ssd1306_WriteString>
			}
			line++;
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	613b      	str	r3, [r7, #16]
			item = item->pNext;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	617b      	str	r3, [r7, #20]
		while(item != NULL){
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ab      	bne.n	8001ae4 <oled_menu+0x10c>
		}		
	}
	ssd1306_UpdateScreen();
 8001b8c:	f000 f9b8 	bl	8001f00 <ssd1306_UpdateScreen>

}
 8001b90:	bf00      	nop
 8001b92:	3724      	adds	r7, #36	; 0x24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd90      	pop	{r4, r7, pc}
 8001b98:	40000c00 	.word	0x40000c00
 8001b9c:	45800000 	.word	0x45800000
 8001ba0:	200000b0 	.word	0x200000b0
 8001ba4:	200000ad 	.word	0x200000ad
 8001ba8:	200000b4 	.word	0x200000b4
 8001bac:	20000014 	.word	0x20000014
 8001bb0:	20000798 	.word	0x20000798
 8001bb4:	2000000c 	.word	0x2000000c
 8001bb8:	0800640c 	.word	0x0800640c
 8001bbc:	080063f4 	.word	0x080063f4

08001bc0 <go_back_main>:


/**
	* @brief Go back to the main menu
*/
void go_back_main(void){
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
	curr_submenu = NULL;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <go_back_main+0x1c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
    prev_submenu = NULL;
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <go_back_main+0x20>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	200000b4 	.word	0x200000b4
 8001be0:	200000b8 	.word	0x200000b8

08001be4 <oled_button_press>:
/**
	* @brief Update the menu when a button is pressed
	*
	* The menu will change based on where the cursor is
*/
void oled_button_press(void){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
	TIM5->CNT = 0; // Reset counter to reset cursor location
 8001bea:	4b32      	ldr	r3, [pc, #200]	; (8001cb4 <oled_button_press+0xd0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24

	if(active_screen == EDIT_VAR){
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <oled_button_press+0xd4>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d108      	bne.n	8001c0a <oled_button_press+0x26>
		*pedit_var = edit_var_new_value;
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <oled_button_press+0xd8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a30      	ldr	r2, [pc, #192]	; (8001cc0 <oled_button_press+0xdc>)
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	601a      	str	r2, [r3, #0]
		active_screen = MENU;
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <oled_button_press+0xd4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
		return;
 8001c08:	e051      	b.n	8001cae <oled_button_press+0xca>
	}else if(active_screen != MENU){
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <oled_button_press+0xd4>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <oled_button_press+0x36>
		active_screen = MENU;
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <oled_button_press+0xd4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
		return; // Don't continue checking if we are on another screen.
 8001c18:	e049      	b.n	8001cae <oled_button_press+0xca>
	}
	
	if(curr_submenu == NULL){
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <oled_button_press+0xe0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d119      	bne.n	8001c56 <oled_button_press+0x72>
		struct menu * sub_menu = main_menu.pNext;
 8001c22:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <oled_button_press+0xe4>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	60fb      	str	r3, [r7, #12]
		int line = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 8001c2c:	e00f      	b.n	8001c4e <oled_button_press+0x6a>
			if (line == cursor){
 8001c2e:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <oled_button_press+0xe8>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d103      	bne.n	8001c42 <oled_button_press+0x5e>
				curr_submenu = sub_menu;
 8001c3a:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <oled_button_press+0xe0>)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6013      	str	r3, [r2, #0]
				break;
 8001c40:	e035      	b.n	8001cae <oled_button_press+0xca>
			}
			line++;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3301      	adds	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
			sub_menu = sub_menu->pNext;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	60fb      	str	r3, [r7, #12]
		while(sub_menu != NULL){
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ec      	bne.n	8001c2e <oled_button_press+0x4a>
 8001c54:	e02b      	b.n	8001cae <oled_button_press+0xca>
		}
	}else{
		// Find which menu item the cursor is on and run it's function
		struct menu_item * item = curr_submenu->head_item;
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <oled_button_press+0xe0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	607b      	str	r3, [r7, #4]
		int line = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
		while(item != NULL){
 8001c62:	e01f      	b.n	8001ca4 <oled_button_press+0xc0>
			if (line == cursor){
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <oled_button_press+0xe8>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d113      	bne.n	8001c98 <oled_button_press+0xb4>
				if(item->function != NULL){
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <oled_button_press+0x9c>
					item->function();
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	4798      	blx	r3
				}else if(item->edit_var_function != NULL){
					item->edit_var_function(item->name, item->pvar);
				}
				break;
 8001c7e:	e015      	b.n	8001cac <oled_button_press+0xc8>
				}else if(item->edit_var_function != NULL){
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d011      	beq.n	8001cac <oled_button_press+0xc8>
					item->edit_var_function(item->name, item->pvar);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6992      	ldr	r2, [r2, #24]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4798      	blx	r3
				break;
 8001c96:	e009      	b.n	8001cac <oled_button_press+0xc8>
			}
			line++;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	603b      	str	r3, [r7, #0]
			item = item->pNext;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1dc      	bne.n	8001c64 <oled_button_press+0x80>
 8001caa:	e000      	b.n	8001cae <oled_button_press+0xca>
				break;
 8001cac:	bf00      	nop
		}
	}
}
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40000c00 	.word	0x40000c00
 8001cb8:	20000794 	.word	0x20000794
 8001cbc:	200006e0 	.word	0x200006e0
 8001cc0:	20000864 	.word	0x20000864
 8001cc4:	200000b4 	.word	0x200000b4
 8001cc8:	20000798 	.word	0x20000798
 8001ccc:	200000ad 	.word	0x200000ad

08001cd0 <oled_show_case>:


// Menu item funcions
void oled_show_case(void){
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
	active_screen = IMAGE;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <oled_show_case+0x1c>)
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	701a      	strb	r2, [r3, #0]
	curr_image = case_head_bmp;
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <oled_show_case+0x20>)
 8001cdc:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <oled_show_case+0x24>)
 8001cde:	601a      	str	r2, [r3, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000794 	.word	0x20000794
 8001cf0:	20000708 	.word	0x20000708
 8001cf4:	08006428 	.word	0x08006428

08001cf8 <oled_show_cats>:
void oled_show_cats(void){
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	active_screen = IMAGE;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <oled_show_cats+0x1c>)
 8001cfe:	2202      	movs	r2, #2
 8001d00:	701a      	strb	r2, [r3, #0]
	curr_image = cats_bmp;
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <oled_show_cats+0x20>)
 8001d04:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <oled_show_cats+0x24>)
 8001d06:	601a      	str	r2, [r3, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000794 	.word	0x20000794
 8001d18:	20000708 	.word	0x20000708
 8001d1c:	08006828 	.word	0x08006828

08001d20 <oled_show_info>:
void oled_show_info(void){
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
	active_screen = INFO;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <oled_show_info+0x14>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	20000794 	.word	0x20000794

08001d38 <oled_edit_var>:
void oled_edit_var(char *pvar_name, int *pvar){
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	active_screen = EDIT_VAR;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <oled_edit_var+0x28>)
 8001d44:	2203      	movs	r2, #3
 8001d46:	701a      	strb	r2, [r3, #0]

	pedit_var_name = pvar_name;
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <oled_edit_var+0x2c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
	pedit_var = pvar;
 8001d4e:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <oled_edit_var+0x30>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	20000794 	.word	0x20000794
 8001d64:	200007f4 	.word	0x200007f4
 8001d68:	200006e0 	.word	0x200006e0

08001d6c <ssd1306_Reset>:
#include "user/ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af04      	add	r7, sp, #16
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	9302      	str	r3, [sp, #8]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2301      	movs	r3, #1
 8001d96:	2200      	movs	r2, #0
 8001d98:	2178      	movs	r1, #120	; 0x78
 8001d9a:	4803      	ldr	r0, [pc, #12]	; (8001da8 <ssd1306_WriteCommand+0x2c>)
 8001d9c:	f000 ff4e 	bl	8002c3c <HAL_I2C_Mem_Write>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200004cc 	.word	0x200004cc

08001dac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af04      	add	r7, sp, #16
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbe:	9202      	str	r2, [sp, #8]
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	2240      	movs	r2, #64	; 0x40
 8001dca:	2178      	movs	r1, #120	; 0x78
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <ssd1306_WriteData+0x30>)
 8001dce:	f000 ff35 	bl	8002c3c <HAL_I2C_Mem_Write>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200004cc 	.word	0x200004cc

08001de0 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001de4:	f7ff ffc2 	bl	8001d6c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001de8:	2064      	movs	r0, #100	; 0x64
 8001dea:	f000 fab1 	bl	8002350 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001dee:	20ae      	movs	r0, #174	; 0xae
 8001df0:	f7ff ffc4 	bl	8001d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001df4:	2020      	movs	r0, #32
 8001df6:	f7ff ffc1 	bl	8001d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8001dfa:	2010      	movs	r0, #16
 8001dfc:	f7ff ffbe 	bl	8001d7c <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e00:	20b0      	movs	r0, #176	; 0xb0
 8001e02:	f7ff ffbb 	bl	8001d7c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001e06:	20c8      	movs	r0, #200	; 0xc8
 8001e08:	f7ff ffb8 	bl	8001d7c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff ffb5 	bl	8001d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001e12:	2010      	movs	r0, #16
 8001e14:	f7ff ffb2 	bl	8001d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001e18:	2040      	movs	r0, #64	; 0x40
 8001e1a:	f7ff ffaf 	bl	8001d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001e1e:	2081      	movs	r0, #129	; 0x81
 8001e20:	f7ff ffac 	bl	8001d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001e24:	20ff      	movs	r0, #255	; 0xff
 8001e26:	f7ff ffa9 	bl	8001d7c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001e2a:	20a1      	movs	r0, #161	; 0xa1
 8001e2c:	f7ff ffa6 	bl	8001d7c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001e30:	20a6      	movs	r0, #166	; 0xa6
 8001e32:	f7ff ffa3 	bl	8001d7c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001e36:	20a8      	movs	r0, #168	; 0xa8
 8001e38:	f7ff ffa0 	bl	8001d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8001e3c:	203f      	movs	r0, #63	; 0x3f
 8001e3e:	f7ff ff9d 	bl	8001d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e42:	20a4      	movs	r0, #164	; 0xa4
 8001e44:	f7ff ff9a 	bl	8001d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001e48:	20d3      	movs	r0, #211	; 0xd3
 8001e4a:	f7ff ff97 	bl	8001d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff ff94 	bl	8001d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e54:	20d5      	movs	r0, #213	; 0xd5
 8001e56:	f7ff ff91 	bl	8001d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001e5a:	20f0      	movs	r0, #240	; 0xf0
 8001e5c:	f7ff ff8e 	bl	8001d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001e60:	20d9      	movs	r0, #217	; 0xd9
 8001e62:	f7ff ff8b 	bl	8001d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001e66:	2022      	movs	r0, #34	; 0x22
 8001e68:	f7ff ff88 	bl	8001d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001e6c:	20da      	movs	r0, #218	; 0xda
 8001e6e:	f7ff ff85 	bl	8001d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8001e72:	2012      	movs	r0, #18
 8001e74:	f7ff ff82 	bl	8001d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001e78:	20db      	movs	r0, #219	; 0xdb
 8001e7a:	f7ff ff7f 	bl	8001d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001e7e:	2020      	movs	r0, #32
 8001e80:	f7ff ff7c 	bl	8001d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001e84:	208d      	movs	r0, #141	; 0x8d
 8001e86:	f7ff ff79 	bl	8001d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001e8a:	2014      	movs	r0, #20
 8001e8c:	f7ff ff76 	bl	8001d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001e90:	20af      	movs	r0, #175	; 0xaf
 8001e92:	f7ff ff73 	bl	8001d7c <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 f810 	bl	8001ebc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001e9c:	f000 f830 	bl	8001f00 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <ssd1306_Init+0xd8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <ssd1306_Init+0xd8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001eac:	4b02      	ldr	r3, [pc, #8]	; (8001eb8 <ssd1306_Init+0xd8>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	715a      	strb	r2, [r3, #5]
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200004bc 	.word	0x200004bc

08001ebc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	e00d      	b.n	8001ee8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <ssd1306_Fill+0x1a>
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	e000      	b.n	8001ed8 <ssd1306_Fill+0x1c>
 8001ed6:	21ff      	movs	r1, #255	; 0xff
 8001ed8:	4a08      	ldr	r2, [pc, #32]	; (8001efc <ssd1306_Fill+0x40>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4413      	add	r3, r2
 8001ede:	460a      	mov	r2, r1
 8001ee0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eee:	d3ed      	bcc.n	8001ecc <ssd1306_Fill+0x10>
    }
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	200000bc 	.word	0x200000bc

08001f00 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8001f06:	2300      	movs	r3, #0
 8001f08:	71fb      	strb	r3, [r7, #7]
 8001f0a:	e016      	b.n	8001f3a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	3b50      	subs	r3, #80	; 0x50
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff32 	bl	8001d7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f7ff ff2f 	bl	8001d7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001f1e:	2010      	movs	r0, #16
 8001f20:	f7ff ff2c 	bl	8001d7c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	01db      	lsls	r3, r3, #7
 8001f28:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <ssd1306_UpdateScreen+0x48>)
 8001f2a:	4413      	add	r3, r2
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff3c 	bl	8001dac <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	3301      	adds	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b07      	cmp	r3, #7
 8001f3e:	d9e5      	bls.n	8001f0c <ssd1306_UpdateScreen+0xc>
    }
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200000bc 	.word	0x200000bc

08001f4c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	460b      	mov	r3, r1
 8001f58:	71bb      	strb	r3, [r7, #6]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db48      	blt.n	8001ff8 <ssd1306_DrawPixel+0xac>
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	2b3f      	cmp	r3, #63	; 0x3f
 8001f6a:	d845      	bhi.n	8001ff8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <ssd1306_DrawPixel+0xb8>)
 8001f6e:	791b      	ldrb	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001f74:	797b      	ldrb	r3, [r7, #5]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bf0c      	ite	eq
 8001f7a:	2301      	moveq	r3, #1
 8001f7c:	2300      	movne	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001f82:	797b      	ldrb	r3, [r7, #5]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d11a      	bne.n	8001fbe <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f88:	79fa      	ldrb	r2, [r7, #7]
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	b2d8      	uxtb	r0, r3
 8001f90:	4603      	mov	r3, r0
 8001f92:	01db      	lsls	r3, r3, #7
 8001f94:	4413      	add	r3, r2
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <ssd1306_DrawPixel+0xbc>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	b25a      	sxtb	r2, r3
 8001f9c:	79bb      	ldrb	r3, [r7, #6]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b259      	sxtb	r1, r3
 8001fae:	79fa      	ldrb	r2, [r7, #7]
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	01db      	lsls	r3, r3, #7
 8001fb4:	4413      	add	r3, r2
 8001fb6:	b2c9      	uxtb	r1, r1
 8001fb8:	4a13      	ldr	r2, [pc, #76]	; (8002008 <ssd1306_DrawPixel+0xbc>)
 8001fba:	54d1      	strb	r1, [r2, r3]
 8001fbc:	e01d      	b.n	8001ffa <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001fbe:	79fa      	ldrb	r2, [r7, #7]
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	b2d8      	uxtb	r0, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	01db      	lsls	r3, r3, #7
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <ssd1306_DrawPixel+0xbc>)
 8001fce:	5cd3      	ldrb	r3, [r2, r3]
 8001fd0:	b25a      	sxtb	r2, r3
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	2101      	movs	r1, #1
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	b25b      	sxtb	r3, r3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	b259      	sxtb	r1, r3
 8001fe8:	79fa      	ldrb	r2, [r7, #7]
 8001fea:	4603      	mov	r3, r0
 8001fec:	01db      	lsls	r3, r3, #7
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2c9      	uxtb	r1, r1
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <ssd1306_DrawPixel+0xbc>)
 8001ff4:	54d1      	strb	r1, [r2, r3]
 8001ff6:	e000      	b.n	8001ffa <ssd1306_DrawPixel+0xae>
        return;
 8001ff8:	bf00      	nop
    }
}
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	200004bc 	.word	0x200004bc
 8002008:	200000bc 	.word	0x200000bc

0800200c <ssd1306_DrawBitmap>:

// Draw a 128x64 bitmap image
// pBitmap     => Pointer to the stored byte array (size = 1024) of the image. 
// Convesion done here: https://javl.github.io/image2cpp/
void ssd1306_DrawBitmap(const unsigned char * pBitmap){
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 1024; i++){
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	e037      	b.n	800208a <ssd1306_DrawBitmap+0x7e>
			// Extract each byte
			unsigned char byte = pBitmap[i];
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	75fb      	strb	r3, [r7, #23]
				
			for(int k = 0; k < 8; k++){
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	e029      	b.n	800207e <ssd1306_DrawBitmap+0x72>
				unsigned char pixel = (byte >> (7-k)) & 0x01;
 800202a:	7dfa      	ldrb	r2, [r7, #23]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	f1c3 0307 	rsb	r3, r3, #7
 8002032:	fa42 f303 	asr.w	r3, r2, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	75bb      	strb	r3, [r7, #22]
				unsigned int x = (i*8 + k) % 128;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	00da      	lsls	r2, r3, #3
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4413      	add	r3, r2
 8002046:	425a      	negs	r2, r3
 8002048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800204c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002050:	bf58      	it	pl
 8002052:	4253      	negpl	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
				unsigned int y = (i*8 + k)/128;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	00da      	lsls	r2, r3, #3
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4413      	add	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	da00      	bge.n	8002064 <ssd1306_DrawBitmap+0x58>
 8002062:	337f      	adds	r3, #127	; 0x7f
 8002064:	11db      	asrs	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]
				ssd1306_DrawPixel(x, y, (SSD1306_COLOR) pixel);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	b2d1      	uxtb	r1, r2
 8002070:	7dba      	ldrb	r2, [r7, #22]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff6a 	bl	8001f4c <ssd1306_DrawPixel>
			for(int k = 0; k < 8; k++){
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	3301      	adds	r3, #1
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b07      	cmp	r3, #7
 8002082:	ddd2      	ble.n	800202a <ssd1306_DrawBitmap+0x1e>
	for(int i = 0; i < 1024; i++){
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	3301      	adds	r3, #1
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002090:	dbc3      	blt.n	800201a <ssd1306_DrawBitmap+0xe>
			}//for - k
	}//for - i
}
 8002092:	bf00      	nop
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4604      	mov	r4, r0
 80020a4:	1d38      	adds	r0, r7, #4
 80020a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80020aa:	461a      	mov	r2, r3
 80020ac:	4623      	mov	r3, r4
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	4613      	mov	r3, r2
 80020b2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80020b4:	4b38      	ldr	r3, [pc, #224]	; (8002198 <ssd1306_WriteChar+0xfc>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	793b      	ldrb	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	2b7f      	cmp	r3, #127	; 0x7f
 80020c0:	dc06      	bgt.n	80020d0 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80020c2:	4b35      	ldr	r3, [pc, #212]	; (8002198 <ssd1306_WriteChar+0xfc>)
 80020c4:	885b      	ldrh	r3, [r3, #2]
 80020c6:	461a      	mov	r2, r3
 80020c8:	797b      	ldrb	r3, [r7, #5]
 80020ca:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80020cc:	2b3f      	cmp	r3, #63	; 0x3f
 80020ce:	dd01      	ble.n	80020d4 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e05d      	b.n	8002190 <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	e04c      	b.n	8002174 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	3b20      	subs	r3, #32
 80020e0:	7979      	ldrb	r1, [r7, #5]
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4619      	mov	r1, r3
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	440b      	add	r3, r1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	e034      	b.n	8002164 <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d012      	beq.n	8002130 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <ssd1306_WriteChar+0xfc>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4413      	add	r3, r2
 8002116:	b2d8      	uxtb	r0, r3
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <ssd1306_WriteChar+0xfc>)
 800211a:	885b      	ldrh	r3, [r3, #2]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	4413      	add	r3, r2
 8002124:	b2db      	uxtb	r3, r3
 8002126:	7bba      	ldrb	r2, [r7, #14]
 8002128:	4619      	mov	r1, r3
 800212a:	f7ff ff0f 	bl	8001f4c <ssd1306_DrawPixel>
 800212e:	e016      	b.n	800215e <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <ssd1306_WriteChar+0xfc>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4413      	add	r3, r2
 800213c:	b2d8      	uxtb	r0, r3
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <ssd1306_WriteChar+0xfc>)
 8002140:	885b      	ldrh	r3, [r3, #2]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4413      	add	r3, r2
 800214a:	b2d9      	uxtb	r1, r3
 800214c:	7bbb      	ldrb	r3, [r7, #14]
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf0c      	ite	eq
 8002152:	2301      	moveq	r3, #1
 8002154:	2300      	movne	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	f7ff fef7 	bl	8001f4c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	3301      	adds	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	793b      	ldrb	r3, [r7, #4]
 8002166:	461a      	mov	r2, r3
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	4293      	cmp	r3, r2
 800216c:	d3c5      	bcc.n	80020fa <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	797b      	ldrb	r3, [r7, #5]
 8002176:	461a      	mov	r2, r3
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4293      	cmp	r3, r2
 800217c:	d3ad      	bcc.n	80020da <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <ssd1306_WriteChar+0xfc>)
 8002180:	881a      	ldrh	r2, [r3, #0]
 8002182:	793b      	ldrb	r3, [r7, #4]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4413      	add	r3, r2
 8002188:	b29a      	uxth	r2, r3
 800218a:	4b03      	ldr	r3, [pc, #12]	; (8002198 <ssd1306_WriteChar+0xfc>)
 800218c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3724      	adds	r7, #36	; 0x24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd90      	pop	{r4, r7, pc}
 8002198:	200004bc 	.word	0x200004bc

0800219c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	1d38      	adds	r0, r7, #4
 80021a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80021aa:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80021ac:	e012      	b.n	80021d4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	7818      	ldrb	r0, [r3, #0]
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	1d3a      	adds	r2, r7, #4
 80021b6:	ca06      	ldmia	r2, {r1, r2}
 80021b8:	f7ff ff70 	bl	800209c <ssd1306_WriteChar>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d002      	beq.n	80021ce <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	e008      	b.n	80021e0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3301      	adds	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e8      	bne.n	80021ae <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	781b      	ldrb	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	460a      	mov	r2, r1
 80021f2:	71fb      	strb	r3, [r7, #7]
 80021f4:	4613      	mov	r3, r2
 80021f6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <ssd1306_SetCursor+0x2c>)
 80021fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002200:	79bb      	ldrb	r3, [r7, #6]
 8002202:	b29a      	uxth	r2, r3
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <ssd1306_SetCursor+0x2c>)
 8002206:	805a      	strh	r2, [r3, #2]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	200004bc 	.word	0x200004bc

08002218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002250 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800221c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800221e:	e003      	b.n	8002228 <LoopCopyDataInit>

08002220 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002222:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002224:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002226:	3104      	adds	r1, #4

08002228 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002228:	480b      	ldr	r0, [pc, #44]	; (8002258 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800222c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800222e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002230:	d3f6      	bcc.n	8002220 <CopyDataInit>
  ldr  r2, =_sbss
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002234:	e002      	b.n	800223c <LoopFillZerobss>

08002236 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002236:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002238:	f842 3b04 	str.w	r3, [r2], #4

0800223c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800223e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002240:	d3f9      	bcc.n	8002236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002242:	f7ff f91b 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002246:	f003 f803 	bl	8005250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224a:	f7fe f9a3 	bl	8000594 <main>
  bx  lr    
 800224e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002250:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002254:	08008198 	.word	0x08008198
  ldr  r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800225c:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8002260:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002264:	2000088c 	.word	0x2000088c

08002268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>
	...

0800226c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <HAL_Init+0x40>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800227a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_Init+0x40>)
 8002282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a07      	ldr	r2, [pc, #28]	; (80022ac <HAL_Init+0x40>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002294:	2003      	movs	r0, #3
 8002296:	f000 f94d 	bl	8002534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800229a:	2000      	movs	r0, #0
 800229c:	f000 f808 	bl	80022b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a0:	f7fe fd7c 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00

080022b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_InitTick+0x54>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_InitTick+0x58>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f965 	bl	800259e <HAL_SYSTICK_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e00e      	b.n	80022fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d80a      	bhi.n	80022fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e4:	2200      	movs	r2, #0
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f000 f92d 	bl	800254a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f0:	4a06      	ldr	r2, [pc, #24]	; (800230c <HAL_InitTick+0x5c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000000 	.word	0x20000000
 8002308:	20000020 	.word	0x20000020
 800230c:	2000001c 	.word	0x2000001c

08002310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x20>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_IncTick+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_IncTick+0x24>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000020 	.word	0x20000020
 8002334:	20000884 	.word	0x20000884

08002338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return uwTick;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_GetTick+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000884 	.word	0x20000884

08002350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff ffee 	bl	8002338 <HAL_GetTick>
 800235c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_Delay+0x40>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002376:	bf00      	nop
 8002378:	f7ff ffde 	bl	8002338 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000020 	.word	0x20000020

08002394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b0:	4013      	ands	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c6:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	60d3      	str	r3, [r2, #12]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <__NVIC_GetPriorityGrouping+0x18>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	f003 0307 	and.w	r3, r3, #7
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	2b00      	cmp	r3, #0
 8002408:	db0b      	blt.n	8002422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	f003 021f 	and.w	r2, r3, #31
 8002410:	4907      	ldr	r1, [pc, #28]	; (8002430 <__NVIC_EnableIRQ+0x38>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	2001      	movs	r0, #1
 800241a:	fa00 f202 	lsl.w	r2, r0, r2
 800241e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000e100 	.word	0xe000e100

08002434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	db0a      	blt.n	800245e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	490c      	ldr	r1, [pc, #48]	; (8002480 <__NVIC_SetPriority+0x4c>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800245c:	e00a      	b.n	8002474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4908      	ldr	r1, [pc, #32]	; (8002484 <__NVIC_SetPriority+0x50>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3b04      	subs	r3, #4
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	440b      	add	r3, r1
 8002472:	761a      	strb	r2, [r3, #24]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000e100 	.word	0xe000e100
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f1c3 0307 	rsb	r3, r3, #7
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	bf28      	it	cs
 80024a6:	2304      	movcs	r3, #4
 80024a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d902      	bls.n	80024b8 <NVIC_EncodePriority+0x30>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3b03      	subs	r3, #3
 80024b6:	e000      	b.n	80024ba <NVIC_EncodePriority+0x32>
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	401a      	ands	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43d9      	mvns	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	4313      	orrs	r3, r2
         );
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002500:	d301      	bcc.n	8002506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002502:	2301      	movs	r3, #1
 8002504:	e00f      	b.n	8002526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <SysTick_Config+0x40>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250e:	210f      	movs	r1, #15
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f7ff ff8e 	bl	8002434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <SysTick_Config+0x40>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <SysTick_Config+0x40>)
 8002520:	2207      	movs	r2, #7
 8002522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	e000e010 	.word	0xe000e010

08002534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff29 	bl	8002394 <__NVIC_SetPriorityGrouping>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255c:	f7ff ff3e 	bl	80023dc <__NVIC_GetPriorityGrouping>
 8002560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f7ff ff8e 	bl	8002488 <NVIC_EncodePriority>
 800256c:	4602      	mov	r2, r0
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff5d 	bl	8002434 <__NVIC_SetPriority>
}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff31 	bl	80023f8 <__NVIC_EnableIRQ>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ffa2 	bl	80024f0 <SysTick_Config>
 80025ac:	4603      	mov	r3, r0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	e16b      	b.n	80028ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d4:	2201      	movs	r2, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	f040 815a 	bne.w	80028a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d00b      	beq.n	8002612 <HAL_GPIO_Init+0x5a>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002606:	2b11      	cmp	r3, #17
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b12      	cmp	r3, #18
 8002610:	d130      	bne.n	8002674 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002648:	2201      	movs	r2, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 0201 	and.w	r2, r3, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	2203      	movs	r2, #3
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0xfc>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b12      	cmp	r3, #18
 80026b2:	d123      	bne.n	80026fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	08da      	lsrs	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3208      	adds	r2, #8
 80026bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	220f      	movs	r2, #15
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	08da      	lsrs	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3208      	adds	r2, #8
 80026f6:	69b9      	ldr	r1, [r7, #24]
 80026f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0203 	and.w	r2, r3, #3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80b4 	beq.w	80028a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <HAL_GPIO_Init+0x308>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	4a5e      	ldr	r2, [pc, #376]	; (80028c0 <HAL_GPIO_Init+0x308>)
 8002748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	4b5c      	ldr	r3, [pc, #368]	; (80028c0 <HAL_GPIO_Init+0x308>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800275a:	4a5a      	ldr	r2, [pc, #360]	; (80028c4 <HAL_GPIO_Init+0x30c>)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3302      	adds	r3, #2
 8002762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	220f      	movs	r2, #15
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a51      	ldr	r2, [pc, #324]	; (80028c8 <HAL_GPIO_Init+0x310>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d02b      	beq.n	80027de <HAL_GPIO_Init+0x226>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a50      	ldr	r2, [pc, #320]	; (80028cc <HAL_GPIO_Init+0x314>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d025      	beq.n	80027da <HAL_GPIO_Init+0x222>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4f      	ldr	r2, [pc, #316]	; (80028d0 <HAL_GPIO_Init+0x318>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d01f      	beq.n	80027d6 <HAL_GPIO_Init+0x21e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4e      	ldr	r2, [pc, #312]	; (80028d4 <HAL_GPIO_Init+0x31c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d019      	beq.n	80027d2 <HAL_GPIO_Init+0x21a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4d      	ldr	r2, [pc, #308]	; (80028d8 <HAL_GPIO_Init+0x320>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <HAL_GPIO_Init+0x216>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4c      	ldr	r2, [pc, #304]	; (80028dc <HAL_GPIO_Init+0x324>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00d      	beq.n	80027ca <HAL_GPIO_Init+0x212>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4b      	ldr	r2, [pc, #300]	; (80028e0 <HAL_GPIO_Init+0x328>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d007      	beq.n	80027c6 <HAL_GPIO_Init+0x20e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4a      	ldr	r2, [pc, #296]	; (80028e4 <HAL_GPIO_Init+0x32c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_GPIO_Init+0x20a>
 80027be:	2307      	movs	r3, #7
 80027c0:	e00e      	b.n	80027e0 <HAL_GPIO_Init+0x228>
 80027c2:	2308      	movs	r3, #8
 80027c4:	e00c      	b.n	80027e0 <HAL_GPIO_Init+0x228>
 80027c6:	2306      	movs	r3, #6
 80027c8:	e00a      	b.n	80027e0 <HAL_GPIO_Init+0x228>
 80027ca:	2305      	movs	r3, #5
 80027cc:	e008      	b.n	80027e0 <HAL_GPIO_Init+0x228>
 80027ce:	2304      	movs	r3, #4
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x228>
 80027d2:	2303      	movs	r3, #3
 80027d4:	e004      	b.n	80027e0 <HAL_GPIO_Init+0x228>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e002      	b.n	80027e0 <HAL_GPIO_Init+0x228>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_GPIO_Init+0x228>
 80027de:	2300      	movs	r3, #0
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	f002 0203 	and.w	r2, r2, #3
 80027e6:	0092      	lsls	r2, r2, #2
 80027e8:	4093      	lsls	r3, r2
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f0:	4934      	ldr	r1, [pc, #208]	; (80028c4 <HAL_GPIO_Init+0x30c>)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027fe:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <HAL_GPIO_Init+0x330>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002822:	4a31      	ldr	r2, [pc, #196]	; (80028e8 <HAL_GPIO_Init+0x330>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002828:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <HAL_GPIO_Init+0x330>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800284c:	4a26      	ldr	r2, [pc, #152]	; (80028e8 <HAL_GPIO_Init+0x330>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002852:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <HAL_GPIO_Init+0x330>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002876:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_GPIO_Init+0x330>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800287c:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_GPIO_Init+0x330>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a0:	4a11      	ldr	r2, [pc, #68]	; (80028e8 <HAL_GPIO_Init+0x330>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	f67f ae90 	bls.w	80025d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b4:	bf00      	nop
 80028b6:	3724      	adds	r7, #36	; 0x24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40013800 	.word	0x40013800
 80028c8:	40020000 	.word	0x40020000
 80028cc:	40020400 	.word	0x40020400
 80028d0:	40020800 	.word	0x40020800
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40021400 	.word	0x40021400
 80028e0:	40021800 	.word	0x40021800
 80028e4:	40021c00 	.word	0x40021c00
 80028e8:	40013c00 	.word	0x40013c00

080028ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	887b      	ldrh	r3, [r7, #2]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
 8002908:	e001      	b.n	800290e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
 8002928:	4613      	mov	r3, r2
 800292a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800292c:	787b      	ldrb	r3, [r7, #1]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002938:	e003      	b.n	8002942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800293a:	887b      	ldrh	r3, [r7, #2]
 800293c:	041a      	lsls	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	619a      	str	r2, [r3, #24]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	401a      	ands	r2, r3
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	429a      	cmp	r2, r3
 8002966:	d104      	bne.n	8002972 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002968:	887b      	ldrh	r3, [r7, #2]
 800296a:	041a      	lsls	r2, r3, #16
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002970:	e002      	b.n	8002978 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	619a      	str	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800299a:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f806 	bl	80029b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40013c00 	.word	0x40013c00

080029b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e11f      	b.n	8002c1e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe f9fa 	bl	8000dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2224      	movs	r2, #36	; 0x24
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a30:	f001 f82e 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 8002a34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4a7b      	ldr	r2, [pc, #492]	; (8002c28 <HAL_I2C_Init+0x25c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d807      	bhi.n	8002a50 <HAL_I2C_Init+0x84>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4a7a      	ldr	r2, [pc, #488]	; (8002c2c <HAL_I2C_Init+0x260>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	bf94      	ite	ls
 8002a48:	2301      	movls	r3, #1
 8002a4a:	2300      	movhi	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e006      	b.n	8002a5e <HAL_I2C_Init+0x92>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a77      	ldr	r2, [pc, #476]	; (8002c30 <HAL_I2C_Init+0x264>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	bf94      	ite	ls
 8002a58:	2301      	movls	r3, #1
 8002a5a:	2300      	movhi	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0db      	b.n	8002c1e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a72      	ldr	r2, [pc, #456]	; (8002c34 <HAL_I2C_Init+0x268>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	0c9b      	lsrs	r3, r3, #18
 8002a70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a64      	ldr	r2, [pc, #400]	; (8002c28 <HAL_I2C_Init+0x25c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d802      	bhi.n	8002aa0 <HAL_I2C_Init+0xd4>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	e009      	b.n	8002ab4 <HAL_I2C_Init+0xe8>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	4a63      	ldr	r2, [pc, #396]	; (8002c38 <HAL_I2C_Init+0x26c>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ac6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4956      	ldr	r1, [pc, #344]	; (8002c28 <HAL_I2C_Init+0x25c>)
 8002ad0:	428b      	cmp	r3, r1
 8002ad2:	d80d      	bhi.n	8002af0 <HAL_I2C_Init+0x124>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1e59      	subs	r1, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	bf38      	it	cc
 8002aec:	2304      	movcc	r3, #4
 8002aee:	e04f      	b.n	8002b90 <HAL_I2C_Init+0x1c4>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d111      	bne.n	8002b1c <HAL_I2C_Init+0x150>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	440b      	add	r3, r1
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e012      	b.n	8002b42 <HAL_I2C_Init+0x176>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e58      	subs	r0, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	0099      	lsls	r1, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_Init+0x17e>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e022      	b.n	8002b90 <HAL_I2C_Init+0x1c4>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10e      	bne.n	8002b70 <HAL_I2C_Init+0x1a4>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1e58      	subs	r0, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6859      	ldr	r1, [r3, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	440b      	add	r3, r1
 8002b60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6e:	e00f      	b.n	8002b90 <HAL_I2C_Init+0x1c4>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e58      	subs	r0, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	0099      	lsls	r1, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	6809      	ldr	r1, [r1, #0]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6911      	ldr	r1, [r2, #16]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68d2      	ldr	r2, [r2, #12]
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	000186a0 	.word	0x000186a0
 8002c2c:	001e847f 	.word	0x001e847f
 8002c30:	003d08ff 	.word	0x003d08ff
 8002c34:	431bde83 	.word	0x431bde83
 8002c38:	10624dd3 	.word	0x10624dd3

08002c3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	4608      	mov	r0, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	817b      	strh	r3, [r7, #10]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	813b      	strh	r3, [r7, #8]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c56:	f7ff fb6f 	bl	8002338 <HAL_GetTick>
 8002c5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	f040 80d9 	bne.w	8002e1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2319      	movs	r3, #25
 8002c70:	2201      	movs	r2, #1
 8002c72:	496d      	ldr	r1, [pc, #436]	; (8002e28 <HAL_I2C_Mem_Write+0x1ec>)
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f96f 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
 8002c82:	e0cc      	b.n	8002e1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_Mem_Write+0x56>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e0c5      	b.n	8002e1e <HAL_I2C_Mem_Write+0x1e2>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d007      	beq.n	8002cb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2221      	movs	r2, #33	; 0x21
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a4d      	ldr	r2, [pc, #308]	; (8002e2c <HAL_I2C_Mem_Write+0x1f0>)
 8002cf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cfa:	88f8      	ldrh	r0, [r7, #6]
 8002cfc:	893a      	ldrh	r2, [r7, #8]
 8002cfe:	8979      	ldrh	r1, [r7, #10]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	4603      	mov	r3, r0
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f890 	bl	8002e30 <I2C_RequestMemoryWrite>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d052      	beq.n	8002dbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e081      	b.n	8002e1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f9f0 	bl	8003104 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d107      	bne.n	8002d42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e06b      	b.n	8002e1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d11b      	bne.n	8002dbc <HAL_I2C_Mem_Write+0x180>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d017      	beq.n	8002dbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1aa      	bne.n	8002d1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f9dc 	bl	8003186 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00d      	beq.n	8002df0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d107      	bne.n	8002dec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e016      	b.n	8002e1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
  }
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	00100002 	.word	0x00100002
 8002e2c:	ffff0000 	.word	0xffff0000

08002e30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	817b      	strh	r3, [r7, #10]
 8002e42:	460b      	mov	r3, r1
 8002e44:	813b      	strh	r3, [r7, #8]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f876 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e05f      	b.n	8002f4c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e8c:	897b      	ldrh	r3, [r7, #10]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	6a3a      	ldr	r2, [r7, #32]
 8002ea0:	492c      	ldr	r1, [pc, #176]	; (8002f54 <I2C_RequestMemoryWrite+0x124>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f8af 	bl	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e04c      	b.n	8002f4c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eca:	6a39      	ldr	r1, [r7, #32]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f919 	bl	8003104 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00d      	beq.n	8002ef4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d107      	bne.n	8002ef0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e02b      	b.n	8002f4c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d105      	bne.n	8002f06 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002efa:	893b      	ldrh	r3, [r7, #8]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	611a      	str	r2, [r3, #16]
 8002f04:	e021      	b.n	8002f4a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f06:	893b      	ldrh	r3, [r7, #8]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f16:	6a39      	ldr	r1, [r7, #32]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f8f3 	bl	8003104 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d107      	bne.n	8002f3c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e005      	b.n	8002f4c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f40:	893b      	ldrh	r3, [r7, #8]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	00010002 	.word	0x00010002

08002f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f68:	e025      	b.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d021      	beq.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7ff f9e1 	bl	8002338 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d116      	bne.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e023      	b.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d10d      	bne.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf0c      	ite	eq
 8002fd2:	2301      	moveq	r3, #1
 8002fd4:	2300      	movne	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	e00c      	b.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d0b6      	beq.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003014:	e051      	b.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003024:	d123      	bne.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003034:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800303e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f043 0204 	orr.w	r2, r3, #4
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e046      	b.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d021      	beq.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7ff f95f 	bl	8002338 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d116      	bne.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e020      	b.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10c      	bne.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e00b      	b.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d18d      	bne.n	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003110:	e02d      	b.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f878 	bl	8003208 <I2C_IsAcknowledgeFailed>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e02d      	b.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d021      	beq.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312a:	f7ff f905 	bl	8002338 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	d302      	bcc.n	8003140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d116      	bne.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e007      	b.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d1ca      	bne.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003192:	e02d      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f837 	bl	8003208 <I2C_IsAcknowledgeFailed>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e02d      	b.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d021      	beq.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ac:	f7ff f8c4 	bl	8002338 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d302      	bcc.n	80031c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e007      	b.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d1ca      	bne.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321e:	d11b      	bne.n	8003258 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003228:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f043 0204 	orr.w	r2, r3, #4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e25b      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d075      	beq.n	8003372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003286:	4ba3      	ldr	r3, [pc, #652]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b04      	cmp	r3, #4
 8003290:	d00c      	beq.n	80032ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003292:	4ba0      	ldr	r3, [pc, #640]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800329a:	2b08      	cmp	r3, #8
 800329c:	d112      	bne.n	80032c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800329e:	4b9d      	ldr	r3, [pc, #628]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032aa:	d10b      	bne.n	80032c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	4b99      	ldr	r3, [pc, #612]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d05b      	beq.n	8003370 <HAL_RCC_OscConfig+0x108>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d157      	bne.n	8003370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e236      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d106      	bne.n	80032dc <HAL_RCC_OscConfig+0x74>
 80032ce:	4b91      	ldr	r3, [pc, #580]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a90      	ldr	r2, [pc, #576]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e01d      	b.n	8003318 <HAL_RCC_OscConfig+0xb0>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x98>
 80032e6:	4b8b      	ldr	r3, [pc, #556]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a8a      	ldr	r2, [pc, #552]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b88      	ldr	r3, [pc, #544]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a87      	ldr	r2, [pc, #540]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0xb0>
 8003300:	4b84      	ldr	r3, [pc, #528]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a83      	ldr	r2, [pc, #524]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b81      	ldr	r3, [pc, #516]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a80      	ldr	r2, [pc, #512]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d013      	beq.n	8003348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7ff f80a 	bl	8002338 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003328:	f7ff f806 	bl	8002338 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1fb      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b76      	ldr	r3, [pc, #472]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0xc0>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe fff6 	bl	8002338 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003350:	f7fe fff2 	bl	8002338 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e1e7      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003362:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0xe8>
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d063      	beq.n	8003446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800337e:	4b65      	ldr	r3, [pc, #404]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338a:	4b62      	ldr	r3, [pc, #392]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003392:	2b08      	cmp	r3, #8
 8003394:	d11c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003396:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d116      	bne.n	80033d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a2:	4b5c      	ldr	r3, [pc, #368]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_RCC_OscConfig+0x152>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e1bb      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	4b56      	ldr	r3, [pc, #344]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4952      	ldr	r1, [pc, #328]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	e03a      	b.n	8003446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d8:	4b4f      	ldr	r3, [pc, #316]	; (8003518 <HAL_RCC_OscConfig+0x2b0>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7fe ffab 	bl	8002338 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e6:	f7fe ffa7 	bl	8002338 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e19c      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f8:	4b46      	ldr	r3, [pc, #280]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003404:	4b43      	ldr	r3, [pc, #268]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4940      	ldr	r1, [pc, #256]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]
 8003418:	e015      	b.n	8003446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_RCC_OscConfig+0x2b0>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe ff8a 	bl	8002338 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003428:	f7fe ff86 	bl	8002338 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e17b      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343a:	4b36      	ldr	r3, [pc, #216]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d030      	beq.n	80034b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345a:	4b30      	ldr	r3, [pc, #192]	; (800351c <HAL_RCC_OscConfig+0x2b4>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7fe ff6a 	bl	8002338 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003468:	f7fe ff66 	bl	8002338 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e15b      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347a:	4b26      	ldr	r3, [pc, #152]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 800347c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x200>
 8003486:	e015      	b.n	80034b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003488:	4b24      	ldr	r3, [pc, #144]	; (800351c <HAL_RCC_OscConfig+0x2b4>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348e:	f7fe ff53 	bl	8002338 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003496:	f7fe ff4f 	bl	8002338 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e144      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80a0 	beq.w	8003602 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10f      	bne.n	80034f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e0:	6413      	str	r3, [r2, #64]	; 0x40
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_RCC_OscConfig+0x2b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d121      	bne.n	8003542 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_RCC_OscConfig+0x2b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a07      	ldr	r2, [pc, #28]	; (8003520 <HAL_RCC_OscConfig+0x2b8>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350a:	f7fe ff15 	bl	8002338 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	e011      	b.n	8003536 <HAL_RCC_OscConfig+0x2ce>
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	42470000 	.word	0x42470000
 800351c:	42470e80 	.word	0x42470e80
 8003520:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003524:	f7fe ff08 	bl	8002338 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0fd      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003536:	4b81      	ldr	r3, [pc, #516]	; (800373c <HAL_RCC_OscConfig+0x4d4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x2f0>
 800354a:	4b7d      	ldr	r3, [pc, #500]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a7c      	ldr	r2, [pc, #496]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	e01c      	b.n	8003592 <HAL_RCC_OscConfig+0x32a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b05      	cmp	r3, #5
 800355e:	d10c      	bne.n	800357a <HAL_RCC_OscConfig+0x312>
 8003560:	4b77      	ldr	r3, [pc, #476]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	4a76      	ldr	r2, [pc, #472]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 8003566:	f043 0304 	orr.w	r3, r3, #4
 800356a:	6713      	str	r3, [r2, #112]	; 0x70
 800356c:	4b74      	ldr	r3, [pc, #464]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	4a73      	ldr	r2, [pc, #460]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6713      	str	r3, [r2, #112]	; 0x70
 8003578:	e00b      	b.n	8003592 <HAL_RCC_OscConfig+0x32a>
 800357a:	4b71      	ldr	r3, [pc, #452]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	4a70      	ldr	r2, [pc, #448]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	6713      	str	r3, [r2, #112]	; 0x70
 8003586:	4b6e      	ldr	r3, [pc, #440]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	4a6d      	ldr	r2, [pc, #436]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d015      	beq.n	80035c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fe fecd 	bl	8002338 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fe fec9 	bl	8002338 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0bc      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b8:	4b61      	ldr	r3, [pc, #388]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ee      	beq.n	80035a2 <HAL_RCC_OscConfig+0x33a>
 80035c4:	e014      	b.n	80035f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c6:	f7fe feb7 	bl	8002338 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fe feb3 	bl	8002338 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e0a6      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e4:	4b56      	ldr	r3, [pc, #344]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ee      	bne.n	80035ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f6:	4b52      	ldr	r3, [pc, #328]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	4a51      	ldr	r2, [pc, #324]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 80035fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003600:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8092 	beq.w	8003730 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800360c:	4b4c      	ldr	r3, [pc, #304]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d05c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d141      	bne.n	80036a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003620:	4b48      	ldr	r3, [pc, #288]	; (8003744 <HAL_RCC_OscConfig+0x4dc>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fe fe87 	bl	8002338 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362e:	f7fe fe83 	bl	8002338 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e078      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003640:	4b3f      	ldr	r3, [pc, #252]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	019b      	lsls	r3, r3, #6
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	3b01      	subs	r3, #1
 8003666:	041b      	lsls	r3, r3, #16
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	061b      	lsls	r3, r3, #24
 8003670:	4933      	ldr	r1, [pc, #204]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003676:	4b33      	ldr	r3, [pc, #204]	; (8003744 <HAL_RCC_OscConfig+0x4dc>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fe fe5c 	bl	8002338 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe fe58 	bl	8002338 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e04d      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x41c>
 80036a2:	e045      	b.n	8003730 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a4:	4b27      	ldr	r3, [pc, #156]	; (8003744 <HAL_RCC_OscConfig+0x4dc>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe fe45 	bl	8002338 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fe fe41 	bl	8002338 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e036      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c4:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x44a>
 80036d0:	e02e      	b.n	8003730 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e029      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036de:	4b18      	ldr	r3, [pc, #96]	; (8003740 <HAL_RCC_OscConfig+0x4d8>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d11c      	bne.n	800372c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d115      	bne.n	800372c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003706:	4013      	ands	r3, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800370c:	4293      	cmp	r3, r2
 800370e:	d10d      	bne.n	800372c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d106      	bne.n	800372c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40007000 	.word	0x40007000
 8003740:	40023800 	.word	0x40023800
 8003744:	42470060 	.word	0x42470060

08003748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0cc      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d90c      	bls.n	8003784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	4b65      	ldr	r3, [pc, #404]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b63      	ldr	r3, [pc, #396]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0b8      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800379c:	4b59      	ldr	r3, [pc, #356]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a58      	ldr	r2, [pc, #352]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b4:	4b53      	ldr	r3, [pc, #332]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4a52      	ldr	r2, [pc, #328]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c0:	4b50      	ldr	r3, [pc, #320]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	494d      	ldr	r1, [pc, #308]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d044      	beq.n	8003868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d119      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e07f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d003      	beq.n	8003806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003802:	2b03      	cmp	r3, #3
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003806:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e067      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003826:	4b37      	ldr	r3, [pc, #220]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 0203 	bic.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4934      	ldr	r1, [pc, #208]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003838:	f7fe fd7e 	bl	8002338 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	e00a      	b.n	8003856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003840:	f7fe fd7a 	bl	8002338 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e04f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 020c 	and.w	r2, r3, #12
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	429a      	cmp	r2, r3
 8003866:	d1eb      	bne.n	8003840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d20c      	bcs.n	8003890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e032      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4916      	ldr	r1, [pc, #88]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	490e      	ldr	r1, [pc, #56]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ce:	f000 f821 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 80038d2:	4601      	mov	r1, r0
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	5cd3      	ldrb	r3, [r2, r3]
 80038e2:	fa21 f303 	lsr.w	r3, r1, r3
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fcde 	bl	80022b0 <HAL_InitTick>

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023c00 	.word	0x40023c00
 8003904:	40023800 	.word	0x40023800
 8003908:	08006410 	.word	0x08006410
 800390c:	20000000 	.word	0x20000000
 8003910:	2000001c 	.word	0x2000001c

08003914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	2300      	movs	r3, #0
 8003924:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800392a:	4b50      	ldr	r3, [pc, #320]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x158>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b04      	cmp	r3, #4
 8003934:	d007      	beq.n	8003946 <HAL_RCC_GetSysClockFreq+0x32>
 8003936:	2b08      	cmp	r3, #8
 8003938:	d008      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x38>
 800393a:	2b00      	cmp	r3, #0
 800393c:	f040 808d 	bne.w	8003a5a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003942:	60bb      	str	r3, [r7, #8]
       break;
 8003944:	e08c      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003946:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x160>)
 8003948:	60bb      	str	r3, [r7, #8]
      break;
 800394a:	e089      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800394c:	4b47      	ldr	r3, [pc, #284]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x158>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003954:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003956:	4b45      	ldr	r3, [pc, #276]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x158>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d023      	beq.n	80039aa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003962:	4b42      	ldr	r3, [pc, #264]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x158>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	f04f 0400 	mov.w	r4, #0
 800396c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	ea03 0501 	and.w	r5, r3, r1
 8003978:	ea04 0602 	and.w	r6, r4, r2
 800397c:	4a3d      	ldr	r2, [pc, #244]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x160>)
 800397e:	fb02 f106 	mul.w	r1, r2, r6
 8003982:	2200      	movs	r2, #0
 8003984:	fb02 f205 	mul.w	r2, r2, r5
 8003988:	440a      	add	r2, r1
 800398a:	493a      	ldr	r1, [pc, #232]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x160>)
 800398c:	fba5 0101 	umull	r0, r1, r5, r1
 8003990:	1853      	adds	r3, r2, r1
 8003992:	4619      	mov	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f04f 0400 	mov.w	r4, #0
 800399a:	461a      	mov	r2, r3
 800399c:	4623      	mov	r3, r4
 800399e:	f7fc fc67 	bl	8000270 <__aeabi_uldivmod>
 80039a2:	4603      	mov	r3, r0
 80039a4:	460c      	mov	r4, r1
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e049      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039aa:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x158>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	099b      	lsrs	r3, r3, #6
 80039b0:	f04f 0400 	mov.w	r4, #0
 80039b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	ea03 0501 	and.w	r5, r3, r1
 80039c0:	ea04 0602 	and.w	r6, r4, r2
 80039c4:	4629      	mov	r1, r5
 80039c6:	4632      	mov	r2, r6
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	f04f 0400 	mov.w	r4, #0
 80039d0:	0154      	lsls	r4, r2, #5
 80039d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039d6:	014b      	lsls	r3, r1, #5
 80039d8:	4619      	mov	r1, r3
 80039da:	4622      	mov	r2, r4
 80039dc:	1b49      	subs	r1, r1, r5
 80039de:	eb62 0206 	sbc.w	r2, r2, r6
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	f04f 0400 	mov.w	r4, #0
 80039ea:	0194      	lsls	r4, r2, #6
 80039ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039f0:	018b      	lsls	r3, r1, #6
 80039f2:	1a5b      	subs	r3, r3, r1
 80039f4:	eb64 0402 	sbc.w	r4, r4, r2
 80039f8:	f04f 0100 	mov.w	r1, #0
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	00e2      	lsls	r2, r4, #3
 8003a02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a06:	00d9      	lsls	r1, r3, #3
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4614      	mov	r4, r2
 8003a0c:	195b      	adds	r3, r3, r5
 8003a0e:	eb44 0406 	adc.w	r4, r4, r6
 8003a12:	f04f 0100 	mov.w	r1, #0
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	02a2      	lsls	r2, r4, #10
 8003a1c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a20:	0299      	lsls	r1, r3, #10
 8003a22:	460b      	mov	r3, r1
 8003a24:	4614      	mov	r4, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	4621      	mov	r1, r4
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f04f 0400 	mov.w	r4, #0
 8003a30:	461a      	mov	r2, r3
 8003a32:	4623      	mov	r3, r4
 8003a34:	f7fc fc1c 	bl	8000270 <__aeabi_uldivmod>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	0c1b      	lsrs	r3, r3, #16
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	3301      	adds	r3, #1
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	60bb      	str	r3, [r7, #8]
      break;
 8003a58:	e002      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a5c:	60bb      	str	r3, [r7, #8]
      break;
 8003a5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a60:	68bb      	ldr	r3, [r7, #8]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	00f42400 	.word	0x00f42400
 8003a74:	017d7840 	.word	0x017d7840

08003a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000000 	.word	0x20000000

08003a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a94:	f7ff fff0 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003a98:	4601      	mov	r1, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0a9b      	lsrs	r3, r3, #10
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4a03      	ldr	r2, [pc, #12]	; (8003ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa6:	5cd3      	ldrb	r3, [r2, r3]
 8003aa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	08006420 	.word	0x08006420

08003ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003abc:	f7ff ffdc 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4601      	mov	r1, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0b5b      	lsrs	r3, r3, #13
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4a03      	ldr	r2, [pc, #12]	; (8003adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ace:	5cd3      	ldrb	r3, [r2, r3]
 8003ad0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	08006420 	.word	0x08006420

08003ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e01d      	b.n	8003b2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fac2 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f000 fb8c 	bl	800423c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0201 	orr.w	r2, r2, #1
 8003b4c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b06      	cmp	r3, #6
 8003b5e:	d007      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10f      	bne.n	8003bc6 <HAL_TIM_Base_Stop_IT+0x48>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a1a      	ldr	r2, [r3, #32]
 8003bac:	f240 4344 	movw	r3, #1092	; 0x444
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_Base_Stop_IT+0x48>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e01d      	b.n	8003c22 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd f960 	bl	8000ec0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f000 fb12 	bl	800423c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	6839      	ldr	r1, [r7, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fd4c 	bl	80046dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <HAL_TIM_PWM_Start+0x74>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_TIM_PWM_Start+0x2c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a14      	ldr	r2, [pc, #80]	; (8003ca4 <HAL_TIM_PWM_Start+0x78>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_TIM_PWM_Start+0x30>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_TIM_PWM_Start+0x32>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b06      	cmp	r3, #6
 8003c82:	d007      	beq.n	8003c94 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40010400 	.word	0x40010400

08003ca8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e083      	b.n	8003dc4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7fd f943 	bl	8000f5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cec:	f023 0307 	bic.w	r3, r3, #7
 8003cf0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f000 fa9d 	bl	800423c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d48:	f023 030c 	bic.w	r3, r3, #12
 8003d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	4313      	orrs	r3, r2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	011a      	lsls	r2, r3, #4
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	031b      	lsls	r3, r3, #12
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_TIM_Encoder_Start+0x16>
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d008      	beq.n	8003df2 <HAL_TIM_Encoder_Start+0x26>
 8003de0:	e00f      	b.n	8003e02 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2201      	movs	r2, #1
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fc76 	bl	80046dc <TIM_CCxChannelCmd>
      break;
 8003df0:	e016      	b.n	8003e20 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	2104      	movs	r1, #4
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fc6e 	bl	80046dc <TIM_CCxChannelCmd>
      break;
 8003e00:	e00e      	b.n	8003e20 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2201      	movs	r2, #1
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fc66 	bl	80046dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2201      	movs	r2, #1
 8003e16:	2104      	movs	r1, #4
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fc5f 	bl	80046dc <TIM_CCxChannelCmd>
      break;
 8003e1e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d122      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d11b      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f06f 0202 	mvn.w	r2, #2
 8003e66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f9bf 	bl	8004200 <HAL_TIM_IC_CaptureCallback>
 8003e82:	e005      	b.n	8003e90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f9b1 	bl	80041ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f9c2 	bl	8004214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d122      	bne.n	8003eea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d11b      	bne.n	8003eea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f06f 0204 	mvn.w	r2, #4
 8003eba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f995 	bl	8004200 <HAL_TIM_IC_CaptureCallback>
 8003ed6:	e005      	b.n	8003ee4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f987 	bl	80041ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f998 	bl	8004214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d122      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d11b      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f06f 0208 	mvn.w	r2, #8
 8003f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2204      	movs	r2, #4
 8003f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f96b 	bl	8004200 <HAL_TIM_IC_CaptureCallback>
 8003f2a:	e005      	b.n	8003f38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f95d 	bl	80041ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f96e 	bl	8004214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d122      	bne.n	8003f92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d11b      	bne.n	8003f92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f06f 0210 	mvn.w	r2, #16
 8003f62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2208      	movs	r2, #8
 8003f68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f941 	bl	8004200 <HAL_TIM_IC_CaptureCallback>
 8003f7e:	e005      	b.n	8003f8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f933 	bl	80041ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f944 	bl	8004214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10e      	bne.n	8003fbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d107      	bne.n	8003fbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f06f 0201 	mvn.w	r2, #1
 8003fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f90d 	bl	80041d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc8:	2b80      	cmp	r3, #128	; 0x80
 8003fca:	d10e      	bne.n	8003fea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	2b80      	cmp	r3, #128	; 0x80
 8003fd8:	d107      	bne.n	8003fea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fc77 	bl	80048d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b40      	cmp	r3, #64	; 0x40
 8003ff6:	d10e      	bne.n	8004016 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b40      	cmp	r3, #64	; 0x40
 8004004:	d107      	bne.n	8004016 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800400e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f909 	bl	8004228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b20      	cmp	r3, #32
 8004022:	d10e      	bne.n	8004042 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b20      	cmp	r3, #32
 8004030:	d107      	bne.n	8004042 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f06f 0220 	mvn.w	r2, #32
 800403a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fc41 	bl	80048c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004062:	2302      	movs	r3, #2
 8004064:	e0b4      	b.n	80041d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2202      	movs	r2, #2
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b0c      	cmp	r3, #12
 800407a:	f200 809f 	bhi.w	80041bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800407e:	a201      	add	r2, pc, #4	; (adr r2, 8004084 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004084:	080040b9 	.word	0x080040b9
 8004088:	080041bd 	.word	0x080041bd
 800408c:	080041bd 	.word	0x080041bd
 8004090:	080041bd 	.word	0x080041bd
 8004094:	080040f9 	.word	0x080040f9
 8004098:	080041bd 	.word	0x080041bd
 800409c:	080041bd 	.word	0x080041bd
 80040a0:	080041bd 	.word	0x080041bd
 80040a4:	0800413b 	.word	0x0800413b
 80040a8:	080041bd 	.word	0x080041bd
 80040ac:	080041bd 	.word	0x080041bd
 80040b0:	080041bd 	.word	0x080041bd
 80040b4:	0800417b 	.word	0x0800417b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 f95c 	bl	800437c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0208 	orr.w	r2, r2, #8
 80040d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0204 	bic.w	r2, r2, #4
 80040e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6999      	ldr	r1, [r3, #24]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	619a      	str	r2, [r3, #24]
      break;
 80040f6:	e062      	b.n	80041be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f9ac 	bl	800445c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6999      	ldr	r1, [r3, #24]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	021a      	lsls	r2, r3, #8
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	619a      	str	r2, [r3, #24]
      break;
 8004138:	e041      	b.n	80041be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fa01 	bl	8004548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0208 	orr.w	r2, r2, #8
 8004154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0204 	bic.w	r2, r2, #4
 8004164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69d9      	ldr	r1, [r3, #28]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	61da      	str	r2, [r3, #28]
      break;
 8004178:	e021      	b.n	80041be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fa55 	bl	8004630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69d9      	ldr	r1, [r3, #28]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	021a      	lsls	r2, r3, #8
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	61da      	str	r2, [r3, #28]
      break;
 80041ba:	e000      	b.n	80041be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80041bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a40      	ldr	r2, [pc, #256]	; (8004350 <TIM_Base_SetConfig+0x114>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d013      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425a:	d00f      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a3d      	ldr	r2, [pc, #244]	; (8004354 <TIM_Base_SetConfig+0x118>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00b      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a3c      	ldr	r2, [pc, #240]	; (8004358 <TIM_Base_SetConfig+0x11c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d007      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a3b      	ldr	r2, [pc, #236]	; (800435c <TIM_Base_SetConfig+0x120>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a3a      	ldr	r2, [pc, #232]	; (8004360 <TIM_Base_SetConfig+0x124>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d108      	bne.n	800428e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a2f      	ldr	r2, [pc, #188]	; (8004350 <TIM_Base_SetConfig+0x114>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d02b      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429c:	d027      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <TIM_Base_SetConfig+0x118>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d023      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2b      	ldr	r2, [pc, #172]	; (8004358 <TIM_Base_SetConfig+0x11c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01f      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a2a      	ldr	r2, [pc, #168]	; (800435c <TIM_Base_SetConfig+0x120>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01b      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a29      	ldr	r2, [pc, #164]	; (8004360 <TIM_Base_SetConfig+0x124>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d017      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a28      	ldr	r2, [pc, #160]	; (8004364 <TIM_Base_SetConfig+0x128>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a27      	ldr	r2, [pc, #156]	; (8004368 <TIM_Base_SetConfig+0x12c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00f      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a26      	ldr	r2, [pc, #152]	; (800436c <TIM_Base_SetConfig+0x130>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00b      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a25      	ldr	r2, [pc, #148]	; (8004370 <TIM_Base_SetConfig+0x134>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d007      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a24      	ldr	r2, [pc, #144]	; (8004374 <TIM_Base_SetConfig+0x138>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d003      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a23      	ldr	r2, [pc, #140]	; (8004378 <TIM_Base_SetConfig+0x13c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d108      	bne.n	8004300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a0a      	ldr	r2, [pc, #40]	; (8004350 <TIM_Base_SetConfig+0x114>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d003      	beq.n	8004334 <TIM_Base_SetConfig+0xf8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a0c      	ldr	r2, [pc, #48]	; (8004360 <TIM_Base_SetConfig+0x124>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d103      	bne.n	800433c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	615a      	str	r2, [r3, #20]
}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40010000 	.word	0x40010000
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40010400 	.word	0x40010400
 8004364:	40014000 	.word	0x40014000
 8004368:	40014400 	.word	0x40014400
 800436c:	40014800 	.word	0x40014800
 8004370:	40001800 	.word	0x40001800
 8004374:	40001c00 	.word	0x40001c00
 8004378:	40002000 	.word	0x40002000

0800437c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f023 0201 	bic.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f023 0302 	bic.w	r3, r3, #2
 80043c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a20      	ldr	r2, [pc, #128]	; (8004454 <TIM_OC1_SetConfig+0xd8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_OC1_SetConfig+0x64>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <TIM_OC1_SetConfig+0xdc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d10c      	bne.n	80043fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 0308 	bic.w	r3, r3, #8
 80043e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f023 0304 	bic.w	r3, r3, #4
 80043f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a15      	ldr	r2, [pc, #84]	; (8004454 <TIM_OC1_SetConfig+0xd8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_OC1_SetConfig+0x8e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <TIM_OC1_SetConfig+0xdc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d111      	bne.n	800442e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	621a      	str	r2, [r3, #32]
}
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40010000 	.word	0x40010000
 8004458:	40010400 	.word	0x40010400

0800445c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f023 0210 	bic.w	r2, r3, #16
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f023 0320 	bic.w	r3, r3, #32
 80044a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a22      	ldr	r2, [pc, #136]	; (8004540 <TIM_OC2_SetConfig+0xe4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_OC2_SetConfig+0x68>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <TIM_OC2_SetConfig+0xe8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10d      	bne.n	80044e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a17      	ldr	r2, [pc, #92]	; (8004540 <TIM_OC2_SetConfig+0xe4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_OC2_SetConfig+0x94>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a16      	ldr	r2, [pc, #88]	; (8004544 <TIM_OC2_SetConfig+0xe8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d113      	bne.n	8004518 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40010000 	.word	0x40010000
 8004544:	40010400 	.word	0x40010400

08004548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a21      	ldr	r2, [pc, #132]	; (8004628 <TIM_OC3_SetConfig+0xe0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_OC3_SetConfig+0x66>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a20      	ldr	r2, [pc, #128]	; (800462c <TIM_OC3_SetConfig+0xe4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d10d      	bne.n	80045ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a16      	ldr	r2, [pc, #88]	; (8004628 <TIM_OC3_SetConfig+0xe0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_OC3_SetConfig+0x92>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a15      	ldr	r2, [pc, #84]	; (800462c <TIM_OC3_SetConfig+0xe4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d113      	bne.n	8004602 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	621a      	str	r2, [r3, #32]
}
 800461c:	bf00      	nop
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40010000 	.word	0x40010000
 800462c:	40010400 	.word	0x40010400

08004630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <TIM_OC4_SetConfig+0xa4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_OC4_SetConfig+0x68>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a11      	ldr	r2, [pc, #68]	; (80046d8 <TIM_OC4_SetConfig+0xa8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d109      	bne.n	80046ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800469e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	019b      	lsls	r3, r3, #6
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40010400 	.word	0x40010400

080046dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	2201      	movs	r2, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	401a      	ands	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1a      	ldr	r2, [r3, #32]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800473c:	2302      	movs	r3, #2
 800473e:	e05a      	b.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a21      	ldr	r2, [pc, #132]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d022      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478c:	d01d      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d018      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1b      	ldr	r2, [pc, #108]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1a      	ldr	r2, [pc, #104]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00e      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a18      	ldr	r2, [pc, #96]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a17      	ldr	r2, [pc, #92]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d10c      	bne.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40010000 	.word	0x40010000
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00
 8004814:	40010400 	.word	0x40010400
 8004818:	40014000 	.word	0x40014000
 800481c:	40001800 	.word	0x40001800

08004820 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004838:	2302      	movs	r3, #2
 800483a:	e03d      	b.n	80048b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e03f      	b.n	800497e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fc fc70 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2224      	movs	r2, #36	; 0x24
 800491c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800492e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f90b 	bl	8004b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b088      	sub	sp, #32
 800498a:	af02      	add	r7, sp, #8
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	f040 8083 	bne.w	8004aae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_UART_Transmit+0x2e>
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e07b      	b.n	8004ab0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_UART_Transmit+0x40>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e074      	b.n	8004ab0 <HAL_UART_Transmit+0x12a>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2221      	movs	r2, #33	; 0x21
 80049d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80049dc:	f7fd fcac 	bl	8002338 <HAL_GetTick>
 80049e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	88fa      	ldrh	r2, [r7, #6]
 80049e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	88fa      	ldrh	r2, [r7, #6]
 80049ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80049f6:	e042      	b.n	8004a7e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0e:	d122      	bne.n	8004a56 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	2180      	movs	r1, #128	; 0x80
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f84c 	bl	8004ab8 <UART_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e042      	b.n	8004ab0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d103      	bne.n	8004a4e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3302      	adds	r3, #2
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	e017      	b.n	8004a7e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	3301      	adds	r3, #1
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	e013      	b.n	8004a7e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2180      	movs	r1, #128	; 0x80
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f829 	bl	8004ab8 <UART_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e01f      	b.n	8004ab0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	60ba      	str	r2, [r7, #8]
 8004a76:	781a      	ldrb	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1b7      	bne.n	80049f8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2140      	movs	r1, #64	; 0x40
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f810 	bl	8004ab8 <UART_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e006      	b.n	8004ab0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e000      	b.n	8004ab0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004aae:	2302      	movs	r3, #2
  }
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac8:	e02c      	b.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d028      	beq.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ad8:	f7fd fc2e 	bl	8002338 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d21d      	bcs.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004af6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e00f      	b.n	8004b44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d0c3      	beq.n	8004aca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b8e:	f023 030c 	bic.w	r3, r3, #12
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	68f9      	ldr	r1, [r7, #12]
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bba:	f040 818b 	bne.w	8004ed4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4ac1      	ldr	r2, [pc, #772]	; (8004ec8 <UART_SetConfig+0x37c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d005      	beq.n	8004bd4 <UART_SetConfig+0x88>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4abf      	ldr	r2, [pc, #764]	; (8004ecc <UART_SetConfig+0x380>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	f040 80bd 	bne.w	8004d4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bd4:	f7fe ff70 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8004bd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	461d      	mov	r5, r3
 8004bde:	f04f 0600 	mov.w	r6, #0
 8004be2:	46a8      	mov	r8, r5
 8004be4:	46b1      	mov	r9, r6
 8004be6:	eb18 0308 	adds.w	r3, r8, r8
 8004bea:	eb49 0409 	adc.w	r4, r9, r9
 8004bee:	4698      	mov	r8, r3
 8004bf0:	46a1      	mov	r9, r4
 8004bf2:	eb18 0805 	adds.w	r8, r8, r5
 8004bf6:	eb49 0906 	adc.w	r9, r9, r6
 8004bfa:	f04f 0100 	mov.w	r1, #0
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c0e:	4688      	mov	r8, r1
 8004c10:	4691      	mov	r9, r2
 8004c12:	eb18 0005 	adds.w	r0, r8, r5
 8004c16:	eb49 0106 	adc.w	r1, r9, r6
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	461d      	mov	r5, r3
 8004c20:	f04f 0600 	mov.w	r6, #0
 8004c24:	196b      	adds	r3, r5, r5
 8004c26:	eb46 0406 	adc.w	r4, r6, r6
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	4623      	mov	r3, r4
 8004c2e:	f7fb fb1f 	bl	8000270 <__aeabi_uldivmod>
 8004c32:	4603      	mov	r3, r0
 8004c34:	460c      	mov	r4, r1
 8004c36:	461a      	mov	r2, r3
 8004c38:	4ba5      	ldr	r3, [pc, #660]	; (8004ed0 <UART_SetConfig+0x384>)
 8004c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	461d      	mov	r5, r3
 8004c48:	f04f 0600 	mov.w	r6, #0
 8004c4c:	46a9      	mov	r9, r5
 8004c4e:	46b2      	mov	sl, r6
 8004c50:	eb19 0309 	adds.w	r3, r9, r9
 8004c54:	eb4a 040a 	adc.w	r4, sl, sl
 8004c58:	4699      	mov	r9, r3
 8004c5a:	46a2      	mov	sl, r4
 8004c5c:	eb19 0905 	adds.w	r9, r9, r5
 8004c60:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c64:	f04f 0100 	mov.w	r1, #0
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c78:	4689      	mov	r9, r1
 8004c7a:	4692      	mov	sl, r2
 8004c7c:	eb19 0005 	adds.w	r0, r9, r5
 8004c80:	eb4a 0106 	adc.w	r1, sl, r6
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	461d      	mov	r5, r3
 8004c8a:	f04f 0600 	mov.w	r6, #0
 8004c8e:	196b      	adds	r3, r5, r5
 8004c90:	eb46 0406 	adc.w	r4, r6, r6
 8004c94:	461a      	mov	r2, r3
 8004c96:	4623      	mov	r3, r4
 8004c98:	f7fb faea 	bl	8000270 <__aeabi_uldivmod>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4b8b      	ldr	r3, [pc, #556]	; (8004ed0 <UART_SetConfig+0x384>)
 8004ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	2164      	movs	r1, #100	; 0x64
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	3332      	adds	r3, #50	; 0x32
 8004cb6:	4a86      	ldr	r2, [pc, #536]	; (8004ed0 <UART_SetConfig+0x384>)
 8004cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cc4:	4498      	add	r8, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	461d      	mov	r5, r3
 8004cca:	f04f 0600 	mov.w	r6, #0
 8004cce:	46a9      	mov	r9, r5
 8004cd0:	46b2      	mov	sl, r6
 8004cd2:	eb19 0309 	adds.w	r3, r9, r9
 8004cd6:	eb4a 040a 	adc.w	r4, sl, sl
 8004cda:	4699      	mov	r9, r3
 8004cdc:	46a2      	mov	sl, r4
 8004cde:	eb19 0905 	adds.w	r9, r9, r5
 8004ce2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cfa:	4689      	mov	r9, r1
 8004cfc:	4692      	mov	sl, r2
 8004cfe:	eb19 0005 	adds.w	r0, r9, r5
 8004d02:	eb4a 0106 	adc.w	r1, sl, r6
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	461d      	mov	r5, r3
 8004d0c:	f04f 0600 	mov.w	r6, #0
 8004d10:	196b      	adds	r3, r5, r5
 8004d12:	eb46 0406 	adc.w	r4, r6, r6
 8004d16:	461a      	mov	r2, r3
 8004d18:	4623      	mov	r3, r4
 8004d1a:	f7fb faa9 	bl	8000270 <__aeabi_uldivmod>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	460c      	mov	r4, r1
 8004d22:	461a      	mov	r2, r3
 8004d24:	4b6a      	ldr	r3, [pc, #424]	; (8004ed0 <UART_SetConfig+0x384>)
 8004d26:	fba3 1302 	umull	r1, r3, r3, r2
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	2164      	movs	r1, #100	; 0x64
 8004d2e:	fb01 f303 	mul.w	r3, r1, r3
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	3332      	adds	r3, #50	; 0x32
 8004d38:	4a65      	ldr	r2, [pc, #404]	; (8004ed0 <UART_SetConfig+0x384>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	f003 0207 	and.w	r2, r3, #7
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4442      	add	r2, r8
 8004d4a:	609a      	str	r2, [r3, #8]
 8004d4c:	e26f      	b.n	800522e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d4e:	f7fe fe9f 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 8004d52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	461d      	mov	r5, r3
 8004d58:	f04f 0600 	mov.w	r6, #0
 8004d5c:	46a8      	mov	r8, r5
 8004d5e:	46b1      	mov	r9, r6
 8004d60:	eb18 0308 	adds.w	r3, r8, r8
 8004d64:	eb49 0409 	adc.w	r4, r9, r9
 8004d68:	4698      	mov	r8, r3
 8004d6a:	46a1      	mov	r9, r4
 8004d6c:	eb18 0805 	adds.w	r8, r8, r5
 8004d70:	eb49 0906 	adc.w	r9, r9, r6
 8004d74:	f04f 0100 	mov.w	r1, #0
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d88:	4688      	mov	r8, r1
 8004d8a:	4691      	mov	r9, r2
 8004d8c:	eb18 0005 	adds.w	r0, r8, r5
 8004d90:	eb49 0106 	adc.w	r1, r9, r6
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	461d      	mov	r5, r3
 8004d9a:	f04f 0600 	mov.w	r6, #0
 8004d9e:	196b      	adds	r3, r5, r5
 8004da0:	eb46 0406 	adc.w	r4, r6, r6
 8004da4:	461a      	mov	r2, r3
 8004da6:	4623      	mov	r3, r4
 8004da8:	f7fb fa62 	bl	8000270 <__aeabi_uldivmod>
 8004dac:	4603      	mov	r3, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	461a      	mov	r2, r3
 8004db2:	4b47      	ldr	r3, [pc, #284]	; (8004ed0 <UART_SetConfig+0x384>)
 8004db4:	fba3 2302 	umull	r2, r3, r3, r2
 8004db8:	095b      	lsrs	r3, r3, #5
 8004dba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	461d      	mov	r5, r3
 8004dc2:	f04f 0600 	mov.w	r6, #0
 8004dc6:	46a9      	mov	r9, r5
 8004dc8:	46b2      	mov	sl, r6
 8004dca:	eb19 0309 	adds.w	r3, r9, r9
 8004dce:	eb4a 040a 	adc.w	r4, sl, sl
 8004dd2:	4699      	mov	r9, r3
 8004dd4:	46a2      	mov	sl, r4
 8004dd6:	eb19 0905 	adds.w	r9, r9, r5
 8004dda:	eb4a 0a06 	adc.w	sl, sl, r6
 8004dde:	f04f 0100 	mov.w	r1, #0
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004df2:	4689      	mov	r9, r1
 8004df4:	4692      	mov	sl, r2
 8004df6:	eb19 0005 	adds.w	r0, r9, r5
 8004dfa:	eb4a 0106 	adc.w	r1, sl, r6
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	461d      	mov	r5, r3
 8004e04:	f04f 0600 	mov.w	r6, #0
 8004e08:	196b      	adds	r3, r5, r5
 8004e0a:	eb46 0406 	adc.w	r4, r6, r6
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4623      	mov	r3, r4
 8004e12:	f7fb fa2d 	bl	8000270 <__aeabi_uldivmod>
 8004e16:	4603      	mov	r3, r0
 8004e18:	460c      	mov	r4, r1
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4b2c      	ldr	r3, [pc, #176]	; (8004ed0 <UART_SetConfig+0x384>)
 8004e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	2164      	movs	r1, #100	; 0x64
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	3332      	adds	r3, #50	; 0x32
 8004e30:	4a27      	ldr	r2, [pc, #156]	; (8004ed0 <UART_SetConfig+0x384>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	095b      	lsrs	r3, r3, #5
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e3e:	4498      	add	r8, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	461d      	mov	r5, r3
 8004e44:	f04f 0600 	mov.w	r6, #0
 8004e48:	46a9      	mov	r9, r5
 8004e4a:	46b2      	mov	sl, r6
 8004e4c:	eb19 0309 	adds.w	r3, r9, r9
 8004e50:	eb4a 040a 	adc.w	r4, sl, sl
 8004e54:	4699      	mov	r9, r3
 8004e56:	46a2      	mov	sl, r4
 8004e58:	eb19 0905 	adds.w	r9, r9, r5
 8004e5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e60:	f04f 0100 	mov.w	r1, #0
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e74:	4689      	mov	r9, r1
 8004e76:	4692      	mov	sl, r2
 8004e78:	eb19 0005 	adds.w	r0, r9, r5
 8004e7c:	eb4a 0106 	adc.w	r1, sl, r6
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	461d      	mov	r5, r3
 8004e86:	f04f 0600 	mov.w	r6, #0
 8004e8a:	196b      	adds	r3, r5, r5
 8004e8c:	eb46 0406 	adc.w	r4, r6, r6
 8004e90:	461a      	mov	r2, r3
 8004e92:	4623      	mov	r3, r4
 8004e94:	f7fb f9ec 	bl	8000270 <__aeabi_uldivmod>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <UART_SetConfig+0x384>)
 8004ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	2164      	movs	r1, #100	; 0x64
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	3332      	adds	r3, #50	; 0x32
 8004eb2:	4a07      	ldr	r2, [pc, #28]	; (8004ed0 <UART_SetConfig+0x384>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	f003 0207 	and.w	r2, r3, #7
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4442      	add	r2, r8
 8004ec4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ec6:	e1b2      	b.n	800522e <UART_SetConfig+0x6e2>
 8004ec8:	40011000 	.word	0x40011000
 8004ecc:	40011400 	.word	0x40011400
 8004ed0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4ad7      	ldr	r2, [pc, #860]	; (8005238 <UART_SetConfig+0x6ec>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d005      	beq.n	8004eea <UART_SetConfig+0x39e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4ad6      	ldr	r2, [pc, #856]	; (800523c <UART_SetConfig+0x6f0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	f040 80d1 	bne.w	800508c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004eea:	f7fe fde5 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8004eee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	469a      	mov	sl, r3
 8004ef4:	f04f 0b00 	mov.w	fp, #0
 8004ef8:	46d0      	mov	r8, sl
 8004efa:	46d9      	mov	r9, fp
 8004efc:	eb18 0308 	adds.w	r3, r8, r8
 8004f00:	eb49 0409 	adc.w	r4, r9, r9
 8004f04:	4698      	mov	r8, r3
 8004f06:	46a1      	mov	r9, r4
 8004f08:	eb18 080a 	adds.w	r8, r8, sl
 8004f0c:	eb49 090b 	adc.w	r9, r9, fp
 8004f10:	f04f 0100 	mov.w	r1, #0
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f24:	4688      	mov	r8, r1
 8004f26:	4691      	mov	r9, r2
 8004f28:	eb1a 0508 	adds.w	r5, sl, r8
 8004f2c:	eb4b 0609 	adc.w	r6, fp, r9
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4619      	mov	r1, r3
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	f04f 0400 	mov.w	r4, #0
 8004f42:	0094      	lsls	r4, r2, #2
 8004f44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f48:	008b      	lsls	r3, r1, #2
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4623      	mov	r3, r4
 8004f4e:	4628      	mov	r0, r5
 8004f50:	4631      	mov	r1, r6
 8004f52:	f7fb f98d 	bl	8000270 <__aeabi_uldivmod>
 8004f56:	4603      	mov	r3, r0
 8004f58:	460c      	mov	r4, r1
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4bb8      	ldr	r3, [pc, #736]	; (8005240 <UART_SetConfig+0x6f4>)
 8004f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	469b      	mov	fp, r3
 8004f6c:	f04f 0c00 	mov.w	ip, #0
 8004f70:	46d9      	mov	r9, fp
 8004f72:	46e2      	mov	sl, ip
 8004f74:	eb19 0309 	adds.w	r3, r9, r9
 8004f78:	eb4a 040a 	adc.w	r4, sl, sl
 8004f7c:	4699      	mov	r9, r3
 8004f7e:	46a2      	mov	sl, r4
 8004f80:	eb19 090b 	adds.w	r9, r9, fp
 8004f84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f88:	f04f 0100 	mov.w	r1, #0
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f9c:	4689      	mov	r9, r1
 8004f9e:	4692      	mov	sl, r2
 8004fa0:	eb1b 0509 	adds.w	r5, fp, r9
 8004fa4:	eb4c 060a 	adc.w	r6, ip, sl
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4619      	mov	r1, r3
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	f04f 0400 	mov.w	r4, #0
 8004fba:	0094      	lsls	r4, r2, #2
 8004fbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fc0:	008b      	lsls	r3, r1, #2
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4623      	mov	r3, r4
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	4631      	mov	r1, r6
 8004fca:	f7fb f951 	bl	8000270 <__aeabi_uldivmod>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4b9a      	ldr	r3, [pc, #616]	; (8005240 <UART_SetConfig+0x6f4>)
 8004fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2164      	movs	r1, #100	; 0x64
 8004fde:	fb01 f303 	mul.w	r3, r1, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	3332      	adds	r3, #50	; 0x32
 8004fe8:	4a95      	ldr	r2, [pc, #596]	; (8005240 <UART_SetConfig+0x6f4>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ff4:	4498      	add	r8, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	469b      	mov	fp, r3
 8004ffa:	f04f 0c00 	mov.w	ip, #0
 8004ffe:	46d9      	mov	r9, fp
 8005000:	46e2      	mov	sl, ip
 8005002:	eb19 0309 	adds.w	r3, r9, r9
 8005006:	eb4a 040a 	adc.w	r4, sl, sl
 800500a:	4699      	mov	r9, r3
 800500c:	46a2      	mov	sl, r4
 800500e:	eb19 090b 	adds.w	r9, r9, fp
 8005012:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005016:	f04f 0100 	mov.w	r1, #0
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800502a:	4689      	mov	r9, r1
 800502c:	4692      	mov	sl, r2
 800502e:	eb1b 0509 	adds.w	r5, fp, r9
 8005032:	eb4c 060a 	adc.w	r6, ip, sl
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4619      	mov	r1, r3
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	f04f 0400 	mov.w	r4, #0
 8005048:	0094      	lsls	r4, r2, #2
 800504a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800504e:	008b      	lsls	r3, r1, #2
 8005050:	461a      	mov	r2, r3
 8005052:	4623      	mov	r3, r4
 8005054:	4628      	mov	r0, r5
 8005056:	4631      	mov	r1, r6
 8005058:	f7fb f90a 	bl	8000270 <__aeabi_uldivmod>
 800505c:	4603      	mov	r3, r0
 800505e:	460c      	mov	r4, r1
 8005060:	461a      	mov	r2, r3
 8005062:	4b77      	ldr	r3, [pc, #476]	; (8005240 <UART_SetConfig+0x6f4>)
 8005064:	fba3 1302 	umull	r1, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	2164      	movs	r1, #100	; 0x64
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	3332      	adds	r3, #50	; 0x32
 8005076:	4a72      	ldr	r2, [pc, #456]	; (8005240 <UART_SetConfig+0x6f4>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	f003 020f 	and.w	r2, r3, #15
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4442      	add	r2, r8
 8005088:	609a      	str	r2, [r3, #8]
 800508a:	e0d0      	b.n	800522e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800508c:	f7fe fd00 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 8005090:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	469a      	mov	sl, r3
 8005096:	f04f 0b00 	mov.w	fp, #0
 800509a:	46d0      	mov	r8, sl
 800509c:	46d9      	mov	r9, fp
 800509e:	eb18 0308 	adds.w	r3, r8, r8
 80050a2:	eb49 0409 	adc.w	r4, r9, r9
 80050a6:	4698      	mov	r8, r3
 80050a8:	46a1      	mov	r9, r4
 80050aa:	eb18 080a 	adds.w	r8, r8, sl
 80050ae:	eb49 090b 	adc.w	r9, r9, fp
 80050b2:	f04f 0100 	mov.w	r1, #0
 80050b6:	f04f 0200 	mov.w	r2, #0
 80050ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050c6:	4688      	mov	r8, r1
 80050c8:	4691      	mov	r9, r2
 80050ca:	eb1a 0508 	adds.w	r5, sl, r8
 80050ce:	eb4b 0609 	adc.w	r6, fp, r9
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4619      	mov	r1, r3
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	f04f 0400 	mov.w	r4, #0
 80050e4:	0094      	lsls	r4, r2, #2
 80050e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050ea:	008b      	lsls	r3, r1, #2
 80050ec:	461a      	mov	r2, r3
 80050ee:	4623      	mov	r3, r4
 80050f0:	4628      	mov	r0, r5
 80050f2:	4631      	mov	r1, r6
 80050f4:	f7fb f8bc 	bl	8000270 <__aeabi_uldivmod>
 80050f8:	4603      	mov	r3, r0
 80050fa:	460c      	mov	r4, r1
 80050fc:	461a      	mov	r2, r3
 80050fe:	4b50      	ldr	r3, [pc, #320]	; (8005240 <UART_SetConfig+0x6f4>)
 8005100:	fba3 2302 	umull	r2, r3, r3, r2
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	469b      	mov	fp, r3
 800510e:	f04f 0c00 	mov.w	ip, #0
 8005112:	46d9      	mov	r9, fp
 8005114:	46e2      	mov	sl, ip
 8005116:	eb19 0309 	adds.w	r3, r9, r9
 800511a:	eb4a 040a 	adc.w	r4, sl, sl
 800511e:	4699      	mov	r9, r3
 8005120:	46a2      	mov	sl, r4
 8005122:	eb19 090b 	adds.w	r9, r9, fp
 8005126:	eb4a 0a0c 	adc.w	sl, sl, ip
 800512a:	f04f 0100 	mov.w	r1, #0
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005136:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800513a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800513e:	4689      	mov	r9, r1
 8005140:	4692      	mov	sl, r2
 8005142:	eb1b 0509 	adds.w	r5, fp, r9
 8005146:	eb4c 060a 	adc.w	r6, ip, sl
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4619      	mov	r1, r3
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	f04f 0400 	mov.w	r4, #0
 800515c:	0094      	lsls	r4, r2, #2
 800515e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005162:	008b      	lsls	r3, r1, #2
 8005164:	461a      	mov	r2, r3
 8005166:	4623      	mov	r3, r4
 8005168:	4628      	mov	r0, r5
 800516a:	4631      	mov	r1, r6
 800516c:	f7fb f880 	bl	8000270 <__aeabi_uldivmod>
 8005170:	4603      	mov	r3, r0
 8005172:	460c      	mov	r4, r1
 8005174:	461a      	mov	r2, r3
 8005176:	4b32      	ldr	r3, [pc, #200]	; (8005240 <UART_SetConfig+0x6f4>)
 8005178:	fba3 1302 	umull	r1, r3, r3, r2
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	2164      	movs	r1, #100	; 0x64
 8005180:	fb01 f303 	mul.w	r3, r1, r3
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	3332      	adds	r3, #50	; 0x32
 800518a:	4a2d      	ldr	r2, [pc, #180]	; (8005240 <UART_SetConfig+0x6f4>)
 800518c:	fba2 2303 	umull	r2, r3, r2, r3
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005196:	4498      	add	r8, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	469b      	mov	fp, r3
 800519c:	f04f 0c00 	mov.w	ip, #0
 80051a0:	46d9      	mov	r9, fp
 80051a2:	46e2      	mov	sl, ip
 80051a4:	eb19 0309 	adds.w	r3, r9, r9
 80051a8:	eb4a 040a 	adc.w	r4, sl, sl
 80051ac:	4699      	mov	r9, r3
 80051ae:	46a2      	mov	sl, r4
 80051b0:	eb19 090b 	adds.w	r9, r9, fp
 80051b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051b8:	f04f 0100 	mov.w	r1, #0
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051cc:	4689      	mov	r9, r1
 80051ce:	4692      	mov	sl, r2
 80051d0:	eb1b 0509 	adds.w	r5, fp, r9
 80051d4:	eb4c 060a 	adc.w	r6, ip, sl
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4619      	mov	r1, r3
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	f04f 0400 	mov.w	r4, #0
 80051ea:	0094      	lsls	r4, r2, #2
 80051ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051f0:	008b      	lsls	r3, r1, #2
 80051f2:	461a      	mov	r2, r3
 80051f4:	4623      	mov	r3, r4
 80051f6:	4628      	mov	r0, r5
 80051f8:	4631      	mov	r1, r6
 80051fa:	f7fb f839 	bl	8000270 <__aeabi_uldivmod>
 80051fe:	4603      	mov	r3, r0
 8005200:	460c      	mov	r4, r1
 8005202:	461a      	mov	r2, r3
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <UART_SetConfig+0x6f4>)
 8005206:	fba3 1302 	umull	r1, r3, r3, r2
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2164      	movs	r1, #100	; 0x64
 800520e:	fb01 f303 	mul.w	r3, r1, r3
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	3332      	adds	r3, #50	; 0x32
 8005218:	4a09      	ldr	r2, [pc, #36]	; (8005240 <UART_SetConfig+0x6f4>)
 800521a:	fba2 2303 	umull	r2, r3, r2, r3
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	f003 020f 	and.w	r2, r3, #15
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4442      	add	r2, r8
 800522a:	609a      	str	r2, [r3, #8]
}
 800522c:	e7ff      	b.n	800522e <UART_SetConfig+0x6e2>
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005238:	40011000 	.word	0x40011000
 800523c:	40011400 	.word	0x40011400
 8005240:	51eb851f 	.word	0x51eb851f

08005244 <__errno>:
 8005244:	4b01      	ldr	r3, [pc, #4]	; (800524c <__errno+0x8>)
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	20000024 	.word	0x20000024

08005250 <__libc_init_array>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4e0d      	ldr	r6, [pc, #52]	; (8005288 <__libc_init_array+0x38>)
 8005254:	4c0d      	ldr	r4, [pc, #52]	; (800528c <__libc_init_array+0x3c>)
 8005256:	1ba4      	subs	r4, r4, r6
 8005258:	10a4      	asrs	r4, r4, #2
 800525a:	2500      	movs	r5, #0
 800525c:	42a5      	cmp	r5, r4
 800525e:	d109      	bne.n	8005274 <__libc_init_array+0x24>
 8005260:	4e0b      	ldr	r6, [pc, #44]	; (8005290 <__libc_init_array+0x40>)
 8005262:	4c0c      	ldr	r4, [pc, #48]	; (8005294 <__libc_init_array+0x44>)
 8005264:	f000 ffe8 	bl	8006238 <_init>
 8005268:	1ba4      	subs	r4, r4, r6
 800526a:	10a4      	asrs	r4, r4, #2
 800526c:	2500      	movs	r5, #0
 800526e:	42a5      	cmp	r5, r4
 8005270:	d105      	bne.n	800527e <__libc_init_array+0x2e>
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005278:	4798      	blx	r3
 800527a:	3501      	adds	r5, #1
 800527c:	e7ee      	b.n	800525c <__libc_init_array+0xc>
 800527e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005282:	4798      	blx	r3
 8005284:	3501      	adds	r5, #1
 8005286:	e7f2      	b.n	800526e <__libc_init_array+0x1e>
 8005288:	08008190 	.word	0x08008190
 800528c:	08008190 	.word	0x08008190
 8005290:	08008190 	.word	0x08008190
 8005294:	08008194 	.word	0x08008194

08005298 <memset>:
 8005298:	4402      	add	r2, r0
 800529a:	4603      	mov	r3, r0
 800529c:	4293      	cmp	r3, r2
 800529e:	d100      	bne.n	80052a2 <memset+0xa>
 80052a0:	4770      	bx	lr
 80052a2:	f803 1b01 	strb.w	r1, [r3], #1
 80052a6:	e7f9      	b.n	800529c <memset+0x4>

080052a8 <_puts_r>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	460e      	mov	r6, r1
 80052ac:	4605      	mov	r5, r0
 80052ae:	b118      	cbz	r0, 80052b8 <_puts_r+0x10>
 80052b0:	6983      	ldr	r3, [r0, #24]
 80052b2:	b90b      	cbnz	r3, 80052b8 <_puts_r+0x10>
 80052b4:	f000 fa40 	bl	8005738 <__sinit>
 80052b8:	69ab      	ldr	r3, [r5, #24]
 80052ba:	68ac      	ldr	r4, [r5, #8]
 80052bc:	b913      	cbnz	r3, 80052c4 <_puts_r+0x1c>
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 fa3a 	bl	8005738 <__sinit>
 80052c4:	4b23      	ldr	r3, [pc, #140]	; (8005354 <_puts_r+0xac>)
 80052c6:	429c      	cmp	r4, r3
 80052c8:	d117      	bne.n	80052fa <_puts_r+0x52>
 80052ca:	686c      	ldr	r4, [r5, #4]
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	071b      	lsls	r3, r3, #28
 80052d0:	d51d      	bpl.n	800530e <_puts_r+0x66>
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	b1db      	cbz	r3, 800530e <_puts_r+0x66>
 80052d6:	3e01      	subs	r6, #1
 80052d8:	68a3      	ldr	r3, [r4, #8]
 80052da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052de:	3b01      	subs	r3, #1
 80052e0:	60a3      	str	r3, [r4, #8]
 80052e2:	b9e9      	cbnz	r1, 8005320 <_puts_r+0x78>
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	da2e      	bge.n	8005346 <_puts_r+0x9e>
 80052e8:	4622      	mov	r2, r4
 80052ea:	210a      	movs	r1, #10
 80052ec:	4628      	mov	r0, r5
 80052ee:	f000 f873 	bl	80053d8 <__swbuf_r>
 80052f2:	3001      	adds	r0, #1
 80052f4:	d011      	beq.n	800531a <_puts_r+0x72>
 80052f6:	200a      	movs	r0, #10
 80052f8:	e011      	b.n	800531e <_puts_r+0x76>
 80052fa:	4b17      	ldr	r3, [pc, #92]	; (8005358 <_puts_r+0xb0>)
 80052fc:	429c      	cmp	r4, r3
 80052fe:	d101      	bne.n	8005304 <_puts_r+0x5c>
 8005300:	68ac      	ldr	r4, [r5, #8]
 8005302:	e7e3      	b.n	80052cc <_puts_r+0x24>
 8005304:	4b15      	ldr	r3, [pc, #84]	; (800535c <_puts_r+0xb4>)
 8005306:	429c      	cmp	r4, r3
 8005308:	bf08      	it	eq
 800530a:	68ec      	ldreq	r4, [r5, #12]
 800530c:	e7de      	b.n	80052cc <_puts_r+0x24>
 800530e:	4621      	mov	r1, r4
 8005310:	4628      	mov	r0, r5
 8005312:	f000 f8b3 	bl	800547c <__swsetup_r>
 8005316:	2800      	cmp	r0, #0
 8005318:	d0dd      	beq.n	80052d6 <_puts_r+0x2e>
 800531a:	f04f 30ff 	mov.w	r0, #4294967295
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	2b00      	cmp	r3, #0
 8005322:	da04      	bge.n	800532e <_puts_r+0x86>
 8005324:	69a2      	ldr	r2, [r4, #24]
 8005326:	429a      	cmp	r2, r3
 8005328:	dc06      	bgt.n	8005338 <_puts_r+0x90>
 800532a:	290a      	cmp	r1, #10
 800532c:	d004      	beq.n	8005338 <_puts_r+0x90>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	6022      	str	r2, [r4, #0]
 8005334:	7019      	strb	r1, [r3, #0]
 8005336:	e7cf      	b.n	80052d8 <_puts_r+0x30>
 8005338:	4622      	mov	r2, r4
 800533a:	4628      	mov	r0, r5
 800533c:	f000 f84c 	bl	80053d8 <__swbuf_r>
 8005340:	3001      	adds	r0, #1
 8005342:	d1c9      	bne.n	80052d8 <_puts_r+0x30>
 8005344:	e7e9      	b.n	800531a <_puts_r+0x72>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	200a      	movs	r0, #10
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	6022      	str	r2, [r4, #0]
 800534e:	7018      	strb	r0, [r3, #0]
 8005350:	e7e5      	b.n	800531e <_puts_r+0x76>
 8005352:	bf00      	nop
 8005354:	08008114 	.word	0x08008114
 8005358:	08008134 	.word	0x08008134
 800535c:	080080f4 	.word	0x080080f4

08005360 <puts>:
 8005360:	4b02      	ldr	r3, [pc, #8]	; (800536c <puts+0xc>)
 8005362:	4601      	mov	r1, r0
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	f7ff bf9f 	b.w	80052a8 <_puts_r>
 800536a:	bf00      	nop
 800536c:	20000024 	.word	0x20000024

08005370 <sniprintf>:
 8005370:	b40c      	push	{r2, r3}
 8005372:	b530      	push	{r4, r5, lr}
 8005374:	4b17      	ldr	r3, [pc, #92]	; (80053d4 <sniprintf+0x64>)
 8005376:	1e0c      	subs	r4, r1, #0
 8005378:	b09d      	sub	sp, #116	; 0x74
 800537a:	681d      	ldr	r5, [r3, #0]
 800537c:	da08      	bge.n	8005390 <sniprintf+0x20>
 800537e:	238b      	movs	r3, #139	; 0x8b
 8005380:	602b      	str	r3, [r5, #0]
 8005382:	f04f 30ff 	mov.w	r0, #4294967295
 8005386:	b01d      	add	sp, #116	; 0x74
 8005388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800538c:	b002      	add	sp, #8
 800538e:	4770      	bx	lr
 8005390:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005394:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005398:	bf14      	ite	ne
 800539a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800539e:	4623      	moveq	r3, r4
 80053a0:	9304      	str	r3, [sp, #16]
 80053a2:	9307      	str	r3, [sp, #28]
 80053a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053a8:	9002      	str	r0, [sp, #8]
 80053aa:	9006      	str	r0, [sp, #24]
 80053ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80053b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053b2:	ab21      	add	r3, sp, #132	; 0x84
 80053b4:	a902      	add	r1, sp, #8
 80053b6:	4628      	mov	r0, r5
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	f000 fbad 	bl	8005b18 <_svfiprintf_r>
 80053be:	1c43      	adds	r3, r0, #1
 80053c0:	bfbc      	itt	lt
 80053c2:	238b      	movlt	r3, #139	; 0x8b
 80053c4:	602b      	strlt	r3, [r5, #0]
 80053c6:	2c00      	cmp	r4, #0
 80053c8:	d0dd      	beq.n	8005386 <sniprintf+0x16>
 80053ca:	9b02      	ldr	r3, [sp, #8]
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	e7d9      	b.n	8005386 <sniprintf+0x16>
 80053d2:	bf00      	nop
 80053d4:	20000024 	.word	0x20000024

080053d8 <__swbuf_r>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	460e      	mov	r6, r1
 80053dc:	4614      	mov	r4, r2
 80053de:	4605      	mov	r5, r0
 80053e0:	b118      	cbz	r0, 80053ea <__swbuf_r+0x12>
 80053e2:	6983      	ldr	r3, [r0, #24]
 80053e4:	b90b      	cbnz	r3, 80053ea <__swbuf_r+0x12>
 80053e6:	f000 f9a7 	bl	8005738 <__sinit>
 80053ea:	4b21      	ldr	r3, [pc, #132]	; (8005470 <__swbuf_r+0x98>)
 80053ec:	429c      	cmp	r4, r3
 80053ee:	d12a      	bne.n	8005446 <__swbuf_r+0x6e>
 80053f0:	686c      	ldr	r4, [r5, #4]
 80053f2:	69a3      	ldr	r3, [r4, #24]
 80053f4:	60a3      	str	r3, [r4, #8]
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	071a      	lsls	r2, r3, #28
 80053fa:	d52e      	bpl.n	800545a <__swbuf_r+0x82>
 80053fc:	6923      	ldr	r3, [r4, #16]
 80053fe:	b363      	cbz	r3, 800545a <__swbuf_r+0x82>
 8005400:	6923      	ldr	r3, [r4, #16]
 8005402:	6820      	ldr	r0, [r4, #0]
 8005404:	1ac0      	subs	r0, r0, r3
 8005406:	6963      	ldr	r3, [r4, #20]
 8005408:	b2f6      	uxtb	r6, r6
 800540a:	4283      	cmp	r3, r0
 800540c:	4637      	mov	r7, r6
 800540e:	dc04      	bgt.n	800541a <__swbuf_r+0x42>
 8005410:	4621      	mov	r1, r4
 8005412:	4628      	mov	r0, r5
 8005414:	f000 f926 	bl	8005664 <_fflush_r>
 8005418:	bb28      	cbnz	r0, 8005466 <__swbuf_r+0x8e>
 800541a:	68a3      	ldr	r3, [r4, #8]
 800541c:	3b01      	subs	r3, #1
 800541e:	60a3      	str	r3, [r4, #8]
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	6022      	str	r2, [r4, #0]
 8005426:	701e      	strb	r6, [r3, #0]
 8005428:	6963      	ldr	r3, [r4, #20]
 800542a:	3001      	adds	r0, #1
 800542c:	4283      	cmp	r3, r0
 800542e:	d004      	beq.n	800543a <__swbuf_r+0x62>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	07db      	lsls	r3, r3, #31
 8005434:	d519      	bpl.n	800546a <__swbuf_r+0x92>
 8005436:	2e0a      	cmp	r6, #10
 8005438:	d117      	bne.n	800546a <__swbuf_r+0x92>
 800543a:	4621      	mov	r1, r4
 800543c:	4628      	mov	r0, r5
 800543e:	f000 f911 	bl	8005664 <_fflush_r>
 8005442:	b190      	cbz	r0, 800546a <__swbuf_r+0x92>
 8005444:	e00f      	b.n	8005466 <__swbuf_r+0x8e>
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <__swbuf_r+0x9c>)
 8005448:	429c      	cmp	r4, r3
 800544a:	d101      	bne.n	8005450 <__swbuf_r+0x78>
 800544c:	68ac      	ldr	r4, [r5, #8]
 800544e:	e7d0      	b.n	80053f2 <__swbuf_r+0x1a>
 8005450:	4b09      	ldr	r3, [pc, #36]	; (8005478 <__swbuf_r+0xa0>)
 8005452:	429c      	cmp	r4, r3
 8005454:	bf08      	it	eq
 8005456:	68ec      	ldreq	r4, [r5, #12]
 8005458:	e7cb      	b.n	80053f2 <__swbuf_r+0x1a>
 800545a:	4621      	mov	r1, r4
 800545c:	4628      	mov	r0, r5
 800545e:	f000 f80d 	bl	800547c <__swsetup_r>
 8005462:	2800      	cmp	r0, #0
 8005464:	d0cc      	beq.n	8005400 <__swbuf_r+0x28>
 8005466:	f04f 37ff 	mov.w	r7, #4294967295
 800546a:	4638      	mov	r0, r7
 800546c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800546e:	bf00      	nop
 8005470:	08008114 	.word	0x08008114
 8005474:	08008134 	.word	0x08008134
 8005478:	080080f4 	.word	0x080080f4

0800547c <__swsetup_r>:
 800547c:	4b32      	ldr	r3, [pc, #200]	; (8005548 <__swsetup_r+0xcc>)
 800547e:	b570      	push	{r4, r5, r6, lr}
 8005480:	681d      	ldr	r5, [r3, #0]
 8005482:	4606      	mov	r6, r0
 8005484:	460c      	mov	r4, r1
 8005486:	b125      	cbz	r5, 8005492 <__swsetup_r+0x16>
 8005488:	69ab      	ldr	r3, [r5, #24]
 800548a:	b913      	cbnz	r3, 8005492 <__swsetup_r+0x16>
 800548c:	4628      	mov	r0, r5
 800548e:	f000 f953 	bl	8005738 <__sinit>
 8005492:	4b2e      	ldr	r3, [pc, #184]	; (800554c <__swsetup_r+0xd0>)
 8005494:	429c      	cmp	r4, r3
 8005496:	d10f      	bne.n	80054b8 <__swsetup_r+0x3c>
 8005498:	686c      	ldr	r4, [r5, #4]
 800549a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800549e:	b29a      	uxth	r2, r3
 80054a0:	0715      	lsls	r5, r2, #28
 80054a2:	d42c      	bmi.n	80054fe <__swsetup_r+0x82>
 80054a4:	06d0      	lsls	r0, r2, #27
 80054a6:	d411      	bmi.n	80054cc <__swsetup_r+0x50>
 80054a8:	2209      	movs	r2, #9
 80054aa:	6032      	str	r2, [r6, #0]
 80054ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b0:	81a3      	strh	r3, [r4, #12]
 80054b2:	f04f 30ff 	mov.w	r0, #4294967295
 80054b6:	e03e      	b.n	8005536 <__swsetup_r+0xba>
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <__swsetup_r+0xd4>)
 80054ba:	429c      	cmp	r4, r3
 80054bc:	d101      	bne.n	80054c2 <__swsetup_r+0x46>
 80054be:	68ac      	ldr	r4, [r5, #8]
 80054c0:	e7eb      	b.n	800549a <__swsetup_r+0x1e>
 80054c2:	4b24      	ldr	r3, [pc, #144]	; (8005554 <__swsetup_r+0xd8>)
 80054c4:	429c      	cmp	r4, r3
 80054c6:	bf08      	it	eq
 80054c8:	68ec      	ldreq	r4, [r5, #12]
 80054ca:	e7e6      	b.n	800549a <__swsetup_r+0x1e>
 80054cc:	0751      	lsls	r1, r2, #29
 80054ce:	d512      	bpl.n	80054f6 <__swsetup_r+0x7a>
 80054d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054d2:	b141      	cbz	r1, 80054e6 <__swsetup_r+0x6a>
 80054d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054d8:	4299      	cmp	r1, r3
 80054da:	d002      	beq.n	80054e2 <__swsetup_r+0x66>
 80054dc:	4630      	mov	r0, r6
 80054de:	f000 fa19 	bl	8005914 <_free_r>
 80054e2:	2300      	movs	r3, #0
 80054e4:	6363      	str	r3, [r4, #52]	; 0x34
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054ec:	81a3      	strh	r3, [r4, #12]
 80054ee:	2300      	movs	r3, #0
 80054f0:	6063      	str	r3, [r4, #4]
 80054f2:	6923      	ldr	r3, [r4, #16]
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	f043 0308 	orr.w	r3, r3, #8
 80054fc:	81a3      	strh	r3, [r4, #12]
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	b94b      	cbnz	r3, 8005516 <__swsetup_r+0x9a>
 8005502:	89a3      	ldrh	r3, [r4, #12]
 8005504:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800550c:	d003      	beq.n	8005516 <__swsetup_r+0x9a>
 800550e:	4621      	mov	r1, r4
 8005510:	4630      	mov	r0, r6
 8005512:	f000 f9bf 	bl	8005894 <__smakebuf_r>
 8005516:	89a2      	ldrh	r2, [r4, #12]
 8005518:	f012 0301 	ands.w	r3, r2, #1
 800551c:	d00c      	beq.n	8005538 <__swsetup_r+0xbc>
 800551e:	2300      	movs	r3, #0
 8005520:	60a3      	str	r3, [r4, #8]
 8005522:	6963      	ldr	r3, [r4, #20]
 8005524:	425b      	negs	r3, r3
 8005526:	61a3      	str	r3, [r4, #24]
 8005528:	6923      	ldr	r3, [r4, #16]
 800552a:	b953      	cbnz	r3, 8005542 <__swsetup_r+0xc6>
 800552c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005530:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005534:	d1ba      	bne.n	80054ac <__swsetup_r+0x30>
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	0792      	lsls	r2, r2, #30
 800553a:	bf58      	it	pl
 800553c:	6963      	ldrpl	r3, [r4, #20]
 800553e:	60a3      	str	r3, [r4, #8]
 8005540:	e7f2      	b.n	8005528 <__swsetup_r+0xac>
 8005542:	2000      	movs	r0, #0
 8005544:	e7f7      	b.n	8005536 <__swsetup_r+0xba>
 8005546:	bf00      	nop
 8005548:	20000024 	.word	0x20000024
 800554c:	08008114 	.word	0x08008114
 8005550:	08008134 	.word	0x08008134
 8005554:	080080f4 	.word	0x080080f4

08005558 <__sflush_r>:
 8005558:	898a      	ldrh	r2, [r1, #12]
 800555a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555e:	4605      	mov	r5, r0
 8005560:	0710      	lsls	r0, r2, #28
 8005562:	460c      	mov	r4, r1
 8005564:	d458      	bmi.n	8005618 <__sflush_r+0xc0>
 8005566:	684b      	ldr	r3, [r1, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	dc05      	bgt.n	8005578 <__sflush_r+0x20>
 800556c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	dc02      	bgt.n	8005578 <__sflush_r+0x20>
 8005572:	2000      	movs	r0, #0
 8005574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800557a:	2e00      	cmp	r6, #0
 800557c:	d0f9      	beq.n	8005572 <__sflush_r+0x1a>
 800557e:	2300      	movs	r3, #0
 8005580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005584:	682f      	ldr	r7, [r5, #0]
 8005586:	6a21      	ldr	r1, [r4, #32]
 8005588:	602b      	str	r3, [r5, #0]
 800558a:	d032      	beq.n	80055f2 <__sflush_r+0x9a>
 800558c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	075a      	lsls	r2, r3, #29
 8005592:	d505      	bpl.n	80055a0 <__sflush_r+0x48>
 8005594:	6863      	ldr	r3, [r4, #4]
 8005596:	1ac0      	subs	r0, r0, r3
 8005598:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800559a:	b10b      	cbz	r3, 80055a0 <__sflush_r+0x48>
 800559c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800559e:	1ac0      	subs	r0, r0, r3
 80055a0:	2300      	movs	r3, #0
 80055a2:	4602      	mov	r2, r0
 80055a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055a6:	6a21      	ldr	r1, [r4, #32]
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b0      	blx	r6
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	d106      	bne.n	80055c0 <__sflush_r+0x68>
 80055b2:	6829      	ldr	r1, [r5, #0]
 80055b4:	291d      	cmp	r1, #29
 80055b6:	d848      	bhi.n	800564a <__sflush_r+0xf2>
 80055b8:	4a29      	ldr	r2, [pc, #164]	; (8005660 <__sflush_r+0x108>)
 80055ba:	40ca      	lsrs	r2, r1
 80055bc:	07d6      	lsls	r6, r2, #31
 80055be:	d544      	bpl.n	800564a <__sflush_r+0xf2>
 80055c0:	2200      	movs	r2, #0
 80055c2:	6062      	str	r2, [r4, #4]
 80055c4:	04d9      	lsls	r1, r3, #19
 80055c6:	6922      	ldr	r2, [r4, #16]
 80055c8:	6022      	str	r2, [r4, #0]
 80055ca:	d504      	bpl.n	80055d6 <__sflush_r+0x7e>
 80055cc:	1c42      	adds	r2, r0, #1
 80055ce:	d101      	bne.n	80055d4 <__sflush_r+0x7c>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b903      	cbnz	r3, 80055d6 <__sflush_r+0x7e>
 80055d4:	6560      	str	r0, [r4, #84]	; 0x54
 80055d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055d8:	602f      	str	r7, [r5, #0]
 80055da:	2900      	cmp	r1, #0
 80055dc:	d0c9      	beq.n	8005572 <__sflush_r+0x1a>
 80055de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055e2:	4299      	cmp	r1, r3
 80055e4:	d002      	beq.n	80055ec <__sflush_r+0x94>
 80055e6:	4628      	mov	r0, r5
 80055e8:	f000 f994 	bl	8005914 <_free_r>
 80055ec:	2000      	movs	r0, #0
 80055ee:	6360      	str	r0, [r4, #52]	; 0x34
 80055f0:	e7c0      	b.n	8005574 <__sflush_r+0x1c>
 80055f2:	2301      	movs	r3, #1
 80055f4:	4628      	mov	r0, r5
 80055f6:	47b0      	blx	r6
 80055f8:	1c41      	adds	r1, r0, #1
 80055fa:	d1c8      	bne.n	800558e <__sflush_r+0x36>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0c5      	beq.n	800558e <__sflush_r+0x36>
 8005602:	2b1d      	cmp	r3, #29
 8005604:	d001      	beq.n	800560a <__sflush_r+0xb2>
 8005606:	2b16      	cmp	r3, #22
 8005608:	d101      	bne.n	800560e <__sflush_r+0xb6>
 800560a:	602f      	str	r7, [r5, #0]
 800560c:	e7b1      	b.n	8005572 <__sflush_r+0x1a>
 800560e:	89a3      	ldrh	r3, [r4, #12]
 8005610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005614:	81a3      	strh	r3, [r4, #12]
 8005616:	e7ad      	b.n	8005574 <__sflush_r+0x1c>
 8005618:	690f      	ldr	r7, [r1, #16]
 800561a:	2f00      	cmp	r7, #0
 800561c:	d0a9      	beq.n	8005572 <__sflush_r+0x1a>
 800561e:	0793      	lsls	r3, r2, #30
 8005620:	680e      	ldr	r6, [r1, #0]
 8005622:	bf08      	it	eq
 8005624:	694b      	ldreq	r3, [r1, #20]
 8005626:	600f      	str	r7, [r1, #0]
 8005628:	bf18      	it	ne
 800562a:	2300      	movne	r3, #0
 800562c:	eba6 0807 	sub.w	r8, r6, r7
 8005630:	608b      	str	r3, [r1, #8]
 8005632:	f1b8 0f00 	cmp.w	r8, #0
 8005636:	dd9c      	ble.n	8005572 <__sflush_r+0x1a>
 8005638:	4643      	mov	r3, r8
 800563a:	463a      	mov	r2, r7
 800563c:	6a21      	ldr	r1, [r4, #32]
 800563e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005640:	4628      	mov	r0, r5
 8005642:	47b0      	blx	r6
 8005644:	2800      	cmp	r0, #0
 8005646:	dc06      	bgt.n	8005656 <__sflush_r+0xfe>
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800564e:	81a3      	strh	r3, [r4, #12]
 8005650:	f04f 30ff 	mov.w	r0, #4294967295
 8005654:	e78e      	b.n	8005574 <__sflush_r+0x1c>
 8005656:	4407      	add	r7, r0
 8005658:	eba8 0800 	sub.w	r8, r8, r0
 800565c:	e7e9      	b.n	8005632 <__sflush_r+0xda>
 800565e:	bf00      	nop
 8005660:	20400001 	.word	0x20400001

08005664 <_fflush_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	690b      	ldr	r3, [r1, #16]
 8005668:	4605      	mov	r5, r0
 800566a:	460c      	mov	r4, r1
 800566c:	b1db      	cbz	r3, 80056a6 <_fflush_r+0x42>
 800566e:	b118      	cbz	r0, 8005678 <_fflush_r+0x14>
 8005670:	6983      	ldr	r3, [r0, #24]
 8005672:	b90b      	cbnz	r3, 8005678 <_fflush_r+0x14>
 8005674:	f000 f860 	bl	8005738 <__sinit>
 8005678:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <_fflush_r+0x48>)
 800567a:	429c      	cmp	r4, r3
 800567c:	d109      	bne.n	8005692 <_fflush_r+0x2e>
 800567e:	686c      	ldr	r4, [r5, #4]
 8005680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005684:	b17b      	cbz	r3, 80056a6 <_fflush_r+0x42>
 8005686:	4621      	mov	r1, r4
 8005688:	4628      	mov	r0, r5
 800568a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800568e:	f7ff bf63 	b.w	8005558 <__sflush_r>
 8005692:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <_fflush_r+0x4c>)
 8005694:	429c      	cmp	r4, r3
 8005696:	d101      	bne.n	800569c <_fflush_r+0x38>
 8005698:	68ac      	ldr	r4, [r5, #8]
 800569a:	e7f1      	b.n	8005680 <_fflush_r+0x1c>
 800569c:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <_fflush_r+0x50>)
 800569e:	429c      	cmp	r4, r3
 80056a0:	bf08      	it	eq
 80056a2:	68ec      	ldreq	r4, [r5, #12]
 80056a4:	e7ec      	b.n	8005680 <_fflush_r+0x1c>
 80056a6:	2000      	movs	r0, #0
 80056a8:	bd38      	pop	{r3, r4, r5, pc}
 80056aa:	bf00      	nop
 80056ac:	08008114 	.word	0x08008114
 80056b0:	08008134 	.word	0x08008134
 80056b4:	080080f4 	.word	0x080080f4

080056b8 <std>:
 80056b8:	2300      	movs	r3, #0
 80056ba:	b510      	push	{r4, lr}
 80056bc:	4604      	mov	r4, r0
 80056be:	e9c0 3300 	strd	r3, r3, [r0]
 80056c2:	6083      	str	r3, [r0, #8]
 80056c4:	8181      	strh	r1, [r0, #12]
 80056c6:	6643      	str	r3, [r0, #100]	; 0x64
 80056c8:	81c2      	strh	r2, [r0, #14]
 80056ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056ce:	6183      	str	r3, [r0, #24]
 80056d0:	4619      	mov	r1, r3
 80056d2:	2208      	movs	r2, #8
 80056d4:	305c      	adds	r0, #92	; 0x5c
 80056d6:	f7ff fddf 	bl	8005298 <memset>
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <std+0x38>)
 80056dc:	6263      	str	r3, [r4, #36]	; 0x24
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <std+0x3c>)
 80056e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80056e2:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <std+0x40>)
 80056e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056e6:	4b05      	ldr	r3, [pc, #20]	; (80056fc <std+0x44>)
 80056e8:	6224      	str	r4, [r4, #32]
 80056ea:	6323      	str	r3, [r4, #48]	; 0x30
 80056ec:	bd10      	pop	{r4, pc}
 80056ee:	bf00      	nop
 80056f0:	08006039 	.word	0x08006039
 80056f4:	0800605b 	.word	0x0800605b
 80056f8:	08006093 	.word	0x08006093
 80056fc:	080060b7 	.word	0x080060b7

08005700 <_cleanup_r>:
 8005700:	4901      	ldr	r1, [pc, #4]	; (8005708 <_cleanup_r+0x8>)
 8005702:	f000 b885 	b.w	8005810 <_fwalk_reent>
 8005706:	bf00      	nop
 8005708:	08005665 	.word	0x08005665

0800570c <__sfmoreglue>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	1e4a      	subs	r2, r1, #1
 8005710:	2568      	movs	r5, #104	; 0x68
 8005712:	4355      	muls	r5, r2
 8005714:	460e      	mov	r6, r1
 8005716:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800571a:	f000 f949 	bl	80059b0 <_malloc_r>
 800571e:	4604      	mov	r4, r0
 8005720:	b140      	cbz	r0, 8005734 <__sfmoreglue+0x28>
 8005722:	2100      	movs	r1, #0
 8005724:	e9c0 1600 	strd	r1, r6, [r0]
 8005728:	300c      	adds	r0, #12
 800572a:	60a0      	str	r0, [r4, #8]
 800572c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005730:	f7ff fdb2 	bl	8005298 <memset>
 8005734:	4620      	mov	r0, r4
 8005736:	bd70      	pop	{r4, r5, r6, pc}

08005738 <__sinit>:
 8005738:	6983      	ldr	r3, [r0, #24]
 800573a:	b510      	push	{r4, lr}
 800573c:	4604      	mov	r4, r0
 800573e:	bb33      	cbnz	r3, 800578e <__sinit+0x56>
 8005740:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005744:	6503      	str	r3, [r0, #80]	; 0x50
 8005746:	4b12      	ldr	r3, [pc, #72]	; (8005790 <__sinit+0x58>)
 8005748:	4a12      	ldr	r2, [pc, #72]	; (8005794 <__sinit+0x5c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6282      	str	r2, [r0, #40]	; 0x28
 800574e:	4298      	cmp	r0, r3
 8005750:	bf04      	itt	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	6183      	streq	r3, [r0, #24]
 8005756:	f000 f81f 	bl	8005798 <__sfp>
 800575a:	6060      	str	r0, [r4, #4]
 800575c:	4620      	mov	r0, r4
 800575e:	f000 f81b 	bl	8005798 <__sfp>
 8005762:	60a0      	str	r0, [r4, #8]
 8005764:	4620      	mov	r0, r4
 8005766:	f000 f817 	bl	8005798 <__sfp>
 800576a:	2200      	movs	r2, #0
 800576c:	60e0      	str	r0, [r4, #12]
 800576e:	2104      	movs	r1, #4
 8005770:	6860      	ldr	r0, [r4, #4]
 8005772:	f7ff ffa1 	bl	80056b8 <std>
 8005776:	2201      	movs	r2, #1
 8005778:	2109      	movs	r1, #9
 800577a:	68a0      	ldr	r0, [r4, #8]
 800577c:	f7ff ff9c 	bl	80056b8 <std>
 8005780:	2202      	movs	r2, #2
 8005782:	2112      	movs	r1, #18
 8005784:	68e0      	ldr	r0, [r4, #12]
 8005786:	f7ff ff97 	bl	80056b8 <std>
 800578a:	2301      	movs	r3, #1
 800578c:	61a3      	str	r3, [r4, #24]
 800578e:	bd10      	pop	{r4, pc}
 8005790:	080080f0 	.word	0x080080f0
 8005794:	08005701 	.word	0x08005701

08005798 <__sfp>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <__sfp+0x70>)
 800579c:	681e      	ldr	r6, [r3, #0]
 800579e:	69b3      	ldr	r3, [r6, #24]
 80057a0:	4607      	mov	r7, r0
 80057a2:	b913      	cbnz	r3, 80057aa <__sfp+0x12>
 80057a4:	4630      	mov	r0, r6
 80057a6:	f7ff ffc7 	bl	8005738 <__sinit>
 80057aa:	3648      	adds	r6, #72	; 0x48
 80057ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	d503      	bpl.n	80057bc <__sfp+0x24>
 80057b4:	6833      	ldr	r3, [r6, #0]
 80057b6:	b133      	cbz	r3, 80057c6 <__sfp+0x2e>
 80057b8:	6836      	ldr	r6, [r6, #0]
 80057ba:	e7f7      	b.n	80057ac <__sfp+0x14>
 80057bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057c0:	b16d      	cbz	r5, 80057de <__sfp+0x46>
 80057c2:	3468      	adds	r4, #104	; 0x68
 80057c4:	e7f4      	b.n	80057b0 <__sfp+0x18>
 80057c6:	2104      	movs	r1, #4
 80057c8:	4638      	mov	r0, r7
 80057ca:	f7ff ff9f 	bl	800570c <__sfmoreglue>
 80057ce:	6030      	str	r0, [r6, #0]
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d1f1      	bne.n	80057b8 <__sfp+0x20>
 80057d4:	230c      	movs	r3, #12
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	4604      	mov	r4, r0
 80057da:	4620      	mov	r0, r4
 80057dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057de:	4b0b      	ldr	r3, [pc, #44]	; (800580c <__sfp+0x74>)
 80057e0:	6665      	str	r5, [r4, #100]	; 0x64
 80057e2:	e9c4 5500 	strd	r5, r5, [r4]
 80057e6:	60a5      	str	r5, [r4, #8]
 80057e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80057ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80057f0:	2208      	movs	r2, #8
 80057f2:	4629      	mov	r1, r5
 80057f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057f8:	f7ff fd4e 	bl	8005298 <memset>
 80057fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005804:	e7e9      	b.n	80057da <__sfp+0x42>
 8005806:	bf00      	nop
 8005808:	080080f0 	.word	0x080080f0
 800580c:	ffff0001 	.word	0xffff0001

08005810 <_fwalk_reent>:
 8005810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005814:	4680      	mov	r8, r0
 8005816:	4689      	mov	r9, r1
 8005818:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800581c:	2600      	movs	r6, #0
 800581e:	b914      	cbnz	r4, 8005826 <_fwalk_reent+0x16>
 8005820:	4630      	mov	r0, r6
 8005822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005826:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800582a:	3f01      	subs	r7, #1
 800582c:	d501      	bpl.n	8005832 <_fwalk_reent+0x22>
 800582e:	6824      	ldr	r4, [r4, #0]
 8005830:	e7f5      	b.n	800581e <_fwalk_reent+0xe>
 8005832:	89ab      	ldrh	r3, [r5, #12]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d907      	bls.n	8005848 <_fwalk_reent+0x38>
 8005838:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800583c:	3301      	adds	r3, #1
 800583e:	d003      	beq.n	8005848 <_fwalk_reent+0x38>
 8005840:	4629      	mov	r1, r5
 8005842:	4640      	mov	r0, r8
 8005844:	47c8      	blx	r9
 8005846:	4306      	orrs	r6, r0
 8005848:	3568      	adds	r5, #104	; 0x68
 800584a:	e7ee      	b.n	800582a <_fwalk_reent+0x1a>

0800584c <__swhatbuf_r>:
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	460e      	mov	r6, r1
 8005850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005854:	2900      	cmp	r1, #0
 8005856:	b096      	sub	sp, #88	; 0x58
 8005858:	4614      	mov	r4, r2
 800585a:	461d      	mov	r5, r3
 800585c:	da07      	bge.n	800586e <__swhatbuf_r+0x22>
 800585e:	2300      	movs	r3, #0
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	89b3      	ldrh	r3, [r6, #12]
 8005864:	061a      	lsls	r2, r3, #24
 8005866:	d410      	bmi.n	800588a <__swhatbuf_r+0x3e>
 8005868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800586c:	e00e      	b.n	800588c <__swhatbuf_r+0x40>
 800586e:	466a      	mov	r2, sp
 8005870:	f000 fc48 	bl	8006104 <_fstat_r>
 8005874:	2800      	cmp	r0, #0
 8005876:	dbf2      	blt.n	800585e <__swhatbuf_r+0x12>
 8005878:	9a01      	ldr	r2, [sp, #4]
 800587a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800587e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005882:	425a      	negs	r2, r3
 8005884:	415a      	adcs	r2, r3
 8005886:	602a      	str	r2, [r5, #0]
 8005888:	e7ee      	b.n	8005868 <__swhatbuf_r+0x1c>
 800588a:	2340      	movs	r3, #64	; 0x40
 800588c:	2000      	movs	r0, #0
 800588e:	6023      	str	r3, [r4, #0]
 8005890:	b016      	add	sp, #88	; 0x58
 8005892:	bd70      	pop	{r4, r5, r6, pc}

08005894 <__smakebuf_r>:
 8005894:	898b      	ldrh	r3, [r1, #12]
 8005896:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005898:	079d      	lsls	r5, r3, #30
 800589a:	4606      	mov	r6, r0
 800589c:	460c      	mov	r4, r1
 800589e:	d507      	bpl.n	80058b0 <__smakebuf_r+0x1c>
 80058a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	6123      	str	r3, [r4, #16]
 80058a8:	2301      	movs	r3, #1
 80058aa:	6163      	str	r3, [r4, #20]
 80058ac:	b002      	add	sp, #8
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
 80058b0:	ab01      	add	r3, sp, #4
 80058b2:	466a      	mov	r2, sp
 80058b4:	f7ff ffca 	bl	800584c <__swhatbuf_r>
 80058b8:	9900      	ldr	r1, [sp, #0]
 80058ba:	4605      	mov	r5, r0
 80058bc:	4630      	mov	r0, r6
 80058be:	f000 f877 	bl	80059b0 <_malloc_r>
 80058c2:	b948      	cbnz	r0, 80058d8 <__smakebuf_r+0x44>
 80058c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c8:	059a      	lsls	r2, r3, #22
 80058ca:	d4ef      	bmi.n	80058ac <__smakebuf_r+0x18>
 80058cc:	f023 0303 	bic.w	r3, r3, #3
 80058d0:	f043 0302 	orr.w	r3, r3, #2
 80058d4:	81a3      	strh	r3, [r4, #12]
 80058d6:	e7e3      	b.n	80058a0 <__smakebuf_r+0xc>
 80058d8:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <__smakebuf_r+0x7c>)
 80058da:	62b3      	str	r3, [r6, #40]	; 0x28
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	6020      	str	r0, [r4, #0]
 80058e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e4:	81a3      	strh	r3, [r4, #12]
 80058e6:	9b00      	ldr	r3, [sp, #0]
 80058e8:	6163      	str	r3, [r4, #20]
 80058ea:	9b01      	ldr	r3, [sp, #4]
 80058ec:	6120      	str	r0, [r4, #16]
 80058ee:	b15b      	cbz	r3, 8005908 <__smakebuf_r+0x74>
 80058f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f4:	4630      	mov	r0, r6
 80058f6:	f000 fc17 	bl	8006128 <_isatty_r>
 80058fa:	b128      	cbz	r0, 8005908 <__smakebuf_r+0x74>
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	f023 0303 	bic.w	r3, r3, #3
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	81a3      	strh	r3, [r4, #12]
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	431d      	orrs	r5, r3
 800590c:	81a5      	strh	r5, [r4, #12]
 800590e:	e7cd      	b.n	80058ac <__smakebuf_r+0x18>
 8005910:	08005701 	.word	0x08005701

08005914 <_free_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4605      	mov	r5, r0
 8005918:	2900      	cmp	r1, #0
 800591a:	d045      	beq.n	80059a8 <_free_r+0x94>
 800591c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005920:	1f0c      	subs	r4, r1, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	bfb8      	it	lt
 8005926:	18e4      	addlt	r4, r4, r3
 8005928:	f000 fc44 	bl	80061b4 <__malloc_lock>
 800592c:	4a1f      	ldr	r2, [pc, #124]	; (80059ac <_free_r+0x98>)
 800592e:	6813      	ldr	r3, [r2, #0]
 8005930:	4610      	mov	r0, r2
 8005932:	b933      	cbnz	r3, 8005942 <_free_r+0x2e>
 8005934:	6063      	str	r3, [r4, #4]
 8005936:	6014      	str	r4, [r2, #0]
 8005938:	4628      	mov	r0, r5
 800593a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800593e:	f000 bc3a 	b.w	80061b6 <__malloc_unlock>
 8005942:	42a3      	cmp	r3, r4
 8005944:	d90c      	bls.n	8005960 <_free_r+0x4c>
 8005946:	6821      	ldr	r1, [r4, #0]
 8005948:	1862      	adds	r2, r4, r1
 800594a:	4293      	cmp	r3, r2
 800594c:	bf04      	itt	eq
 800594e:	681a      	ldreq	r2, [r3, #0]
 8005950:	685b      	ldreq	r3, [r3, #4]
 8005952:	6063      	str	r3, [r4, #4]
 8005954:	bf04      	itt	eq
 8005956:	1852      	addeq	r2, r2, r1
 8005958:	6022      	streq	r2, [r4, #0]
 800595a:	6004      	str	r4, [r0, #0]
 800595c:	e7ec      	b.n	8005938 <_free_r+0x24>
 800595e:	4613      	mov	r3, r2
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	b10a      	cbz	r2, 8005968 <_free_r+0x54>
 8005964:	42a2      	cmp	r2, r4
 8005966:	d9fa      	bls.n	800595e <_free_r+0x4a>
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	1858      	adds	r0, r3, r1
 800596c:	42a0      	cmp	r0, r4
 800596e:	d10b      	bne.n	8005988 <_free_r+0x74>
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	4401      	add	r1, r0
 8005974:	1858      	adds	r0, r3, r1
 8005976:	4282      	cmp	r2, r0
 8005978:	6019      	str	r1, [r3, #0]
 800597a:	d1dd      	bne.n	8005938 <_free_r+0x24>
 800597c:	6810      	ldr	r0, [r2, #0]
 800597e:	6852      	ldr	r2, [r2, #4]
 8005980:	605a      	str	r2, [r3, #4]
 8005982:	4401      	add	r1, r0
 8005984:	6019      	str	r1, [r3, #0]
 8005986:	e7d7      	b.n	8005938 <_free_r+0x24>
 8005988:	d902      	bls.n	8005990 <_free_r+0x7c>
 800598a:	230c      	movs	r3, #12
 800598c:	602b      	str	r3, [r5, #0]
 800598e:	e7d3      	b.n	8005938 <_free_r+0x24>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	1821      	adds	r1, r4, r0
 8005994:	428a      	cmp	r2, r1
 8005996:	bf04      	itt	eq
 8005998:	6811      	ldreq	r1, [r2, #0]
 800599a:	6852      	ldreq	r2, [r2, #4]
 800599c:	6062      	str	r2, [r4, #4]
 800599e:	bf04      	itt	eq
 80059a0:	1809      	addeq	r1, r1, r0
 80059a2:	6021      	streq	r1, [r4, #0]
 80059a4:	605c      	str	r4, [r3, #4]
 80059a6:	e7c7      	b.n	8005938 <_free_r+0x24>
 80059a8:	bd38      	pop	{r3, r4, r5, pc}
 80059aa:	bf00      	nop
 80059ac:	200004c4 	.word	0x200004c4

080059b0 <_malloc_r>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	1ccd      	adds	r5, r1, #3
 80059b4:	f025 0503 	bic.w	r5, r5, #3
 80059b8:	3508      	adds	r5, #8
 80059ba:	2d0c      	cmp	r5, #12
 80059bc:	bf38      	it	cc
 80059be:	250c      	movcc	r5, #12
 80059c0:	2d00      	cmp	r5, #0
 80059c2:	4606      	mov	r6, r0
 80059c4:	db01      	blt.n	80059ca <_malloc_r+0x1a>
 80059c6:	42a9      	cmp	r1, r5
 80059c8:	d903      	bls.n	80059d2 <_malloc_r+0x22>
 80059ca:	230c      	movs	r3, #12
 80059cc:	6033      	str	r3, [r6, #0]
 80059ce:	2000      	movs	r0, #0
 80059d0:	bd70      	pop	{r4, r5, r6, pc}
 80059d2:	f000 fbef 	bl	80061b4 <__malloc_lock>
 80059d6:	4a21      	ldr	r2, [pc, #132]	; (8005a5c <_malloc_r+0xac>)
 80059d8:	6814      	ldr	r4, [r2, #0]
 80059da:	4621      	mov	r1, r4
 80059dc:	b991      	cbnz	r1, 8005a04 <_malloc_r+0x54>
 80059de:	4c20      	ldr	r4, [pc, #128]	; (8005a60 <_malloc_r+0xb0>)
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	b91b      	cbnz	r3, 80059ec <_malloc_r+0x3c>
 80059e4:	4630      	mov	r0, r6
 80059e6:	f000 fb17 	bl	8006018 <_sbrk_r>
 80059ea:	6020      	str	r0, [r4, #0]
 80059ec:	4629      	mov	r1, r5
 80059ee:	4630      	mov	r0, r6
 80059f0:	f000 fb12 	bl	8006018 <_sbrk_r>
 80059f4:	1c43      	adds	r3, r0, #1
 80059f6:	d124      	bne.n	8005a42 <_malloc_r+0x92>
 80059f8:	230c      	movs	r3, #12
 80059fa:	6033      	str	r3, [r6, #0]
 80059fc:	4630      	mov	r0, r6
 80059fe:	f000 fbda 	bl	80061b6 <__malloc_unlock>
 8005a02:	e7e4      	b.n	80059ce <_malloc_r+0x1e>
 8005a04:	680b      	ldr	r3, [r1, #0]
 8005a06:	1b5b      	subs	r3, r3, r5
 8005a08:	d418      	bmi.n	8005a3c <_malloc_r+0x8c>
 8005a0a:	2b0b      	cmp	r3, #11
 8005a0c:	d90f      	bls.n	8005a2e <_malloc_r+0x7e>
 8005a0e:	600b      	str	r3, [r1, #0]
 8005a10:	50cd      	str	r5, [r1, r3]
 8005a12:	18cc      	adds	r4, r1, r3
 8005a14:	4630      	mov	r0, r6
 8005a16:	f000 fbce 	bl	80061b6 <__malloc_unlock>
 8005a1a:	f104 000b 	add.w	r0, r4, #11
 8005a1e:	1d23      	adds	r3, r4, #4
 8005a20:	f020 0007 	bic.w	r0, r0, #7
 8005a24:	1ac3      	subs	r3, r0, r3
 8005a26:	d0d3      	beq.n	80059d0 <_malloc_r+0x20>
 8005a28:	425a      	negs	r2, r3
 8005a2a:	50e2      	str	r2, [r4, r3]
 8005a2c:	e7d0      	b.n	80059d0 <_malloc_r+0x20>
 8005a2e:	428c      	cmp	r4, r1
 8005a30:	684b      	ldr	r3, [r1, #4]
 8005a32:	bf16      	itet	ne
 8005a34:	6063      	strne	r3, [r4, #4]
 8005a36:	6013      	streq	r3, [r2, #0]
 8005a38:	460c      	movne	r4, r1
 8005a3a:	e7eb      	b.n	8005a14 <_malloc_r+0x64>
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	6849      	ldr	r1, [r1, #4]
 8005a40:	e7cc      	b.n	80059dc <_malloc_r+0x2c>
 8005a42:	1cc4      	adds	r4, r0, #3
 8005a44:	f024 0403 	bic.w	r4, r4, #3
 8005a48:	42a0      	cmp	r0, r4
 8005a4a:	d005      	beq.n	8005a58 <_malloc_r+0xa8>
 8005a4c:	1a21      	subs	r1, r4, r0
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f000 fae2 	bl	8006018 <_sbrk_r>
 8005a54:	3001      	adds	r0, #1
 8005a56:	d0cf      	beq.n	80059f8 <_malloc_r+0x48>
 8005a58:	6025      	str	r5, [r4, #0]
 8005a5a:	e7db      	b.n	8005a14 <_malloc_r+0x64>
 8005a5c:	200004c4 	.word	0x200004c4
 8005a60:	200004c8 	.word	0x200004c8

08005a64 <__ssputs_r>:
 8005a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	688e      	ldr	r6, [r1, #8]
 8005a6a:	429e      	cmp	r6, r3
 8005a6c:	4682      	mov	sl, r0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	4690      	mov	r8, r2
 8005a72:	4699      	mov	r9, r3
 8005a74:	d837      	bhi.n	8005ae6 <__ssputs_r+0x82>
 8005a76:	898a      	ldrh	r2, [r1, #12]
 8005a78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a7c:	d031      	beq.n	8005ae2 <__ssputs_r+0x7e>
 8005a7e:	6825      	ldr	r5, [r4, #0]
 8005a80:	6909      	ldr	r1, [r1, #16]
 8005a82:	1a6f      	subs	r7, r5, r1
 8005a84:	6965      	ldr	r5, [r4, #20]
 8005a86:	2302      	movs	r3, #2
 8005a88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005a90:	f109 0301 	add.w	r3, r9, #1
 8005a94:	443b      	add	r3, r7
 8005a96:	429d      	cmp	r5, r3
 8005a98:	bf38      	it	cc
 8005a9a:	461d      	movcc	r5, r3
 8005a9c:	0553      	lsls	r3, r2, #21
 8005a9e:	d530      	bpl.n	8005b02 <__ssputs_r+0x9e>
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	f7ff ff85 	bl	80059b0 <_malloc_r>
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	b950      	cbnz	r0, 8005ac0 <__ssputs_r+0x5c>
 8005aaa:	230c      	movs	r3, #12
 8005aac:	f8ca 3000 	str.w	r3, [sl]
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab6:	81a3      	strh	r3, [r4, #12]
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8005abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac0:	463a      	mov	r2, r7
 8005ac2:	6921      	ldr	r1, [r4, #16]
 8005ac4:	f000 fb52 	bl	800616c <memcpy>
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad2:	81a3      	strh	r3, [r4, #12]
 8005ad4:	6126      	str	r6, [r4, #16]
 8005ad6:	6165      	str	r5, [r4, #20]
 8005ad8:	443e      	add	r6, r7
 8005ada:	1bed      	subs	r5, r5, r7
 8005adc:	6026      	str	r6, [r4, #0]
 8005ade:	60a5      	str	r5, [r4, #8]
 8005ae0:	464e      	mov	r6, r9
 8005ae2:	454e      	cmp	r6, r9
 8005ae4:	d900      	bls.n	8005ae8 <__ssputs_r+0x84>
 8005ae6:	464e      	mov	r6, r9
 8005ae8:	4632      	mov	r2, r6
 8005aea:	4641      	mov	r1, r8
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	f000 fb48 	bl	8006182 <memmove>
 8005af2:	68a3      	ldr	r3, [r4, #8]
 8005af4:	1b9b      	subs	r3, r3, r6
 8005af6:	60a3      	str	r3, [r4, #8]
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	441e      	add	r6, r3
 8005afc:	6026      	str	r6, [r4, #0]
 8005afe:	2000      	movs	r0, #0
 8005b00:	e7dc      	b.n	8005abc <__ssputs_r+0x58>
 8005b02:	462a      	mov	r2, r5
 8005b04:	f000 fb58 	bl	80061b8 <_realloc_r>
 8005b08:	4606      	mov	r6, r0
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d1e2      	bne.n	8005ad4 <__ssputs_r+0x70>
 8005b0e:	6921      	ldr	r1, [r4, #16]
 8005b10:	4650      	mov	r0, sl
 8005b12:	f7ff feff 	bl	8005914 <_free_r>
 8005b16:	e7c8      	b.n	8005aaa <__ssputs_r+0x46>

08005b18 <_svfiprintf_r>:
 8005b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1c:	461d      	mov	r5, r3
 8005b1e:	898b      	ldrh	r3, [r1, #12]
 8005b20:	061f      	lsls	r7, r3, #24
 8005b22:	b09d      	sub	sp, #116	; 0x74
 8005b24:	4680      	mov	r8, r0
 8005b26:	460c      	mov	r4, r1
 8005b28:	4616      	mov	r6, r2
 8005b2a:	d50f      	bpl.n	8005b4c <_svfiprintf_r+0x34>
 8005b2c:	690b      	ldr	r3, [r1, #16]
 8005b2e:	b96b      	cbnz	r3, 8005b4c <_svfiprintf_r+0x34>
 8005b30:	2140      	movs	r1, #64	; 0x40
 8005b32:	f7ff ff3d 	bl	80059b0 <_malloc_r>
 8005b36:	6020      	str	r0, [r4, #0]
 8005b38:	6120      	str	r0, [r4, #16]
 8005b3a:	b928      	cbnz	r0, 8005b48 <_svfiprintf_r+0x30>
 8005b3c:	230c      	movs	r3, #12
 8005b3e:	f8c8 3000 	str.w	r3, [r8]
 8005b42:	f04f 30ff 	mov.w	r0, #4294967295
 8005b46:	e0c8      	b.n	8005cda <_svfiprintf_r+0x1c2>
 8005b48:	2340      	movs	r3, #64	; 0x40
 8005b4a:	6163      	str	r3, [r4, #20]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b50:	2320      	movs	r3, #32
 8005b52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b56:	2330      	movs	r3, #48	; 0x30
 8005b58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b5c:	9503      	str	r5, [sp, #12]
 8005b5e:	f04f 0b01 	mov.w	fp, #1
 8005b62:	4637      	mov	r7, r6
 8005b64:	463d      	mov	r5, r7
 8005b66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005b6a:	b10b      	cbz	r3, 8005b70 <_svfiprintf_r+0x58>
 8005b6c:	2b25      	cmp	r3, #37	; 0x25
 8005b6e:	d13e      	bne.n	8005bee <_svfiprintf_r+0xd6>
 8005b70:	ebb7 0a06 	subs.w	sl, r7, r6
 8005b74:	d00b      	beq.n	8005b8e <_svfiprintf_r+0x76>
 8005b76:	4653      	mov	r3, sl
 8005b78:	4632      	mov	r2, r6
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4640      	mov	r0, r8
 8005b7e:	f7ff ff71 	bl	8005a64 <__ssputs_r>
 8005b82:	3001      	adds	r0, #1
 8005b84:	f000 80a4 	beq.w	8005cd0 <_svfiprintf_r+0x1b8>
 8005b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8a:	4453      	add	r3, sl
 8005b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8e:	783b      	ldrb	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 809d 	beq.w	8005cd0 <_svfiprintf_r+0x1b8>
 8005b96:	2300      	movs	r3, #0
 8005b98:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ba0:	9304      	str	r3, [sp, #16]
 8005ba2:	9307      	str	r3, [sp, #28]
 8005ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8005baa:	462f      	mov	r7, r5
 8005bac:	2205      	movs	r2, #5
 8005bae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005bb2:	4850      	ldr	r0, [pc, #320]	; (8005cf4 <_svfiprintf_r+0x1dc>)
 8005bb4:	f7fa fb0c 	bl	80001d0 <memchr>
 8005bb8:	9b04      	ldr	r3, [sp, #16]
 8005bba:	b9d0      	cbnz	r0, 8005bf2 <_svfiprintf_r+0xda>
 8005bbc:	06d9      	lsls	r1, r3, #27
 8005bbe:	bf44      	itt	mi
 8005bc0:	2220      	movmi	r2, #32
 8005bc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bc6:	071a      	lsls	r2, r3, #28
 8005bc8:	bf44      	itt	mi
 8005bca:	222b      	movmi	r2, #43	; 0x2b
 8005bcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bd0:	782a      	ldrb	r2, [r5, #0]
 8005bd2:	2a2a      	cmp	r2, #42	; 0x2a
 8005bd4:	d015      	beq.n	8005c02 <_svfiprintf_r+0xea>
 8005bd6:	9a07      	ldr	r2, [sp, #28]
 8005bd8:	462f      	mov	r7, r5
 8005bda:	2000      	movs	r0, #0
 8005bdc:	250a      	movs	r5, #10
 8005bde:	4639      	mov	r1, r7
 8005be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005be4:	3b30      	subs	r3, #48	; 0x30
 8005be6:	2b09      	cmp	r3, #9
 8005be8:	d94d      	bls.n	8005c86 <_svfiprintf_r+0x16e>
 8005bea:	b1b8      	cbz	r0, 8005c1c <_svfiprintf_r+0x104>
 8005bec:	e00f      	b.n	8005c0e <_svfiprintf_r+0xf6>
 8005bee:	462f      	mov	r7, r5
 8005bf0:	e7b8      	b.n	8005b64 <_svfiprintf_r+0x4c>
 8005bf2:	4a40      	ldr	r2, [pc, #256]	; (8005cf4 <_svfiprintf_r+0x1dc>)
 8005bf4:	1a80      	subs	r0, r0, r2
 8005bf6:	fa0b f000 	lsl.w	r0, fp, r0
 8005bfa:	4318      	orrs	r0, r3
 8005bfc:	9004      	str	r0, [sp, #16]
 8005bfe:	463d      	mov	r5, r7
 8005c00:	e7d3      	b.n	8005baa <_svfiprintf_r+0x92>
 8005c02:	9a03      	ldr	r2, [sp, #12]
 8005c04:	1d11      	adds	r1, r2, #4
 8005c06:	6812      	ldr	r2, [r2, #0]
 8005c08:	9103      	str	r1, [sp, #12]
 8005c0a:	2a00      	cmp	r2, #0
 8005c0c:	db01      	blt.n	8005c12 <_svfiprintf_r+0xfa>
 8005c0e:	9207      	str	r2, [sp, #28]
 8005c10:	e004      	b.n	8005c1c <_svfiprintf_r+0x104>
 8005c12:	4252      	negs	r2, r2
 8005c14:	f043 0302 	orr.w	r3, r3, #2
 8005c18:	9207      	str	r2, [sp, #28]
 8005c1a:	9304      	str	r3, [sp, #16]
 8005c1c:	783b      	ldrb	r3, [r7, #0]
 8005c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c20:	d10c      	bne.n	8005c3c <_svfiprintf_r+0x124>
 8005c22:	787b      	ldrb	r3, [r7, #1]
 8005c24:	2b2a      	cmp	r3, #42	; 0x2a
 8005c26:	d133      	bne.n	8005c90 <_svfiprintf_r+0x178>
 8005c28:	9b03      	ldr	r3, [sp, #12]
 8005c2a:	1d1a      	adds	r2, r3, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	9203      	str	r2, [sp, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bfb8      	it	lt
 8005c34:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c38:	3702      	adds	r7, #2
 8005c3a:	9305      	str	r3, [sp, #20]
 8005c3c:	4d2e      	ldr	r5, [pc, #184]	; (8005cf8 <_svfiprintf_r+0x1e0>)
 8005c3e:	7839      	ldrb	r1, [r7, #0]
 8005c40:	2203      	movs	r2, #3
 8005c42:	4628      	mov	r0, r5
 8005c44:	f7fa fac4 	bl	80001d0 <memchr>
 8005c48:	b138      	cbz	r0, 8005c5a <_svfiprintf_r+0x142>
 8005c4a:	2340      	movs	r3, #64	; 0x40
 8005c4c:	1b40      	subs	r0, r0, r5
 8005c4e:	fa03 f000 	lsl.w	r0, r3, r0
 8005c52:	9b04      	ldr	r3, [sp, #16]
 8005c54:	4303      	orrs	r3, r0
 8005c56:	3701      	adds	r7, #1
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	7839      	ldrb	r1, [r7, #0]
 8005c5c:	4827      	ldr	r0, [pc, #156]	; (8005cfc <_svfiprintf_r+0x1e4>)
 8005c5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c62:	2206      	movs	r2, #6
 8005c64:	1c7e      	adds	r6, r7, #1
 8005c66:	f7fa fab3 	bl	80001d0 <memchr>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d038      	beq.n	8005ce0 <_svfiprintf_r+0x1c8>
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <_svfiprintf_r+0x1e8>)
 8005c70:	bb13      	cbnz	r3, 8005cb8 <_svfiprintf_r+0x1a0>
 8005c72:	9b03      	ldr	r3, [sp, #12]
 8005c74:	3307      	adds	r3, #7
 8005c76:	f023 0307 	bic.w	r3, r3, #7
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	9303      	str	r3, [sp, #12]
 8005c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c80:	444b      	add	r3, r9
 8005c82:	9309      	str	r3, [sp, #36]	; 0x24
 8005c84:	e76d      	b.n	8005b62 <_svfiprintf_r+0x4a>
 8005c86:	fb05 3202 	mla	r2, r5, r2, r3
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	460f      	mov	r7, r1
 8005c8e:	e7a6      	b.n	8005bde <_svfiprintf_r+0xc6>
 8005c90:	2300      	movs	r3, #0
 8005c92:	3701      	adds	r7, #1
 8005c94:	9305      	str	r3, [sp, #20]
 8005c96:	4619      	mov	r1, r3
 8005c98:	250a      	movs	r5, #10
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ca0:	3a30      	subs	r2, #48	; 0x30
 8005ca2:	2a09      	cmp	r2, #9
 8005ca4:	d903      	bls.n	8005cae <_svfiprintf_r+0x196>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0c8      	beq.n	8005c3c <_svfiprintf_r+0x124>
 8005caa:	9105      	str	r1, [sp, #20]
 8005cac:	e7c6      	b.n	8005c3c <_svfiprintf_r+0x124>
 8005cae:	fb05 2101 	mla	r1, r5, r1, r2
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	4607      	mov	r7, r0
 8005cb6:	e7f0      	b.n	8005c9a <_svfiprintf_r+0x182>
 8005cb8:	ab03      	add	r3, sp, #12
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	4622      	mov	r2, r4
 8005cbe:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <_svfiprintf_r+0x1ec>)
 8005cc0:	a904      	add	r1, sp, #16
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	f3af 8000 	nop.w
 8005cc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ccc:	4681      	mov	r9, r0
 8005cce:	d1d6      	bne.n	8005c7e <_svfiprintf_r+0x166>
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	065b      	lsls	r3, r3, #25
 8005cd4:	f53f af35 	bmi.w	8005b42 <_svfiprintf_r+0x2a>
 8005cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cda:	b01d      	add	sp, #116	; 0x74
 8005cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce0:	ab03      	add	r3, sp, #12
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	4622      	mov	r2, r4
 8005ce6:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <_svfiprintf_r+0x1ec>)
 8005ce8:	a904      	add	r1, sp, #16
 8005cea:	4640      	mov	r0, r8
 8005cec:	f000 f882 	bl	8005df4 <_printf_i>
 8005cf0:	e7ea      	b.n	8005cc8 <_svfiprintf_r+0x1b0>
 8005cf2:	bf00      	nop
 8005cf4:	08008154 	.word	0x08008154
 8005cf8:	0800815a 	.word	0x0800815a
 8005cfc:	0800815e 	.word	0x0800815e
 8005d00:	00000000 	.word	0x00000000
 8005d04:	08005a65 	.word	0x08005a65

08005d08 <_printf_common>:
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	4691      	mov	r9, r2
 8005d0e:	461f      	mov	r7, r3
 8005d10:	688a      	ldr	r2, [r1, #8]
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	bfb8      	it	lt
 8005d1c:	4613      	movlt	r3, r2
 8005d1e:	f8c9 3000 	str.w	r3, [r9]
 8005d22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d26:	4606      	mov	r6, r0
 8005d28:	460c      	mov	r4, r1
 8005d2a:	b112      	cbz	r2, 8005d32 <_printf_common+0x2a>
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	f8c9 3000 	str.w	r3, [r9]
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	0699      	lsls	r1, r3, #26
 8005d36:	bf42      	ittt	mi
 8005d38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d3c:	3302      	addmi	r3, #2
 8005d3e:	f8c9 3000 	strmi.w	r3, [r9]
 8005d42:	6825      	ldr	r5, [r4, #0]
 8005d44:	f015 0506 	ands.w	r5, r5, #6
 8005d48:	d107      	bne.n	8005d5a <_printf_common+0x52>
 8005d4a:	f104 0a19 	add.w	sl, r4, #25
 8005d4e:	68e3      	ldr	r3, [r4, #12]
 8005d50:	f8d9 2000 	ldr.w	r2, [r9]
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	42ab      	cmp	r3, r5
 8005d58:	dc28      	bgt.n	8005dac <_printf_common+0xa4>
 8005d5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d5e:	6822      	ldr	r2, [r4, #0]
 8005d60:	3300      	adds	r3, #0
 8005d62:	bf18      	it	ne
 8005d64:	2301      	movne	r3, #1
 8005d66:	0692      	lsls	r2, r2, #26
 8005d68:	d42d      	bmi.n	8005dc6 <_printf_common+0xbe>
 8005d6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d6e:	4639      	mov	r1, r7
 8005d70:	4630      	mov	r0, r6
 8005d72:	47c0      	blx	r8
 8005d74:	3001      	adds	r0, #1
 8005d76:	d020      	beq.n	8005dba <_printf_common+0xb2>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	68e5      	ldr	r5, [r4, #12]
 8005d7c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d80:	f003 0306 	and.w	r3, r3, #6
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	bf08      	it	eq
 8005d88:	1aad      	subeq	r5, r5, r2
 8005d8a:	68a3      	ldr	r3, [r4, #8]
 8005d8c:	6922      	ldr	r2, [r4, #16]
 8005d8e:	bf0c      	ite	eq
 8005d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d94:	2500      	movne	r5, #0
 8005d96:	4293      	cmp	r3, r2
 8005d98:	bfc4      	itt	gt
 8005d9a:	1a9b      	subgt	r3, r3, r2
 8005d9c:	18ed      	addgt	r5, r5, r3
 8005d9e:	f04f 0900 	mov.w	r9, #0
 8005da2:	341a      	adds	r4, #26
 8005da4:	454d      	cmp	r5, r9
 8005da6:	d11a      	bne.n	8005dde <_printf_common+0xd6>
 8005da8:	2000      	movs	r0, #0
 8005daa:	e008      	b.n	8005dbe <_printf_common+0xb6>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4652      	mov	r2, sl
 8005db0:	4639      	mov	r1, r7
 8005db2:	4630      	mov	r0, r6
 8005db4:	47c0      	blx	r8
 8005db6:	3001      	adds	r0, #1
 8005db8:	d103      	bne.n	8005dc2 <_printf_common+0xba>
 8005dba:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc2:	3501      	adds	r5, #1
 8005dc4:	e7c3      	b.n	8005d4e <_printf_common+0x46>
 8005dc6:	18e1      	adds	r1, r4, r3
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	2030      	movs	r0, #48	; 0x30
 8005dcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dd0:	4422      	add	r2, r4
 8005dd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dda:	3302      	adds	r3, #2
 8005ddc:	e7c5      	b.n	8005d6a <_printf_common+0x62>
 8005dde:	2301      	movs	r3, #1
 8005de0:	4622      	mov	r2, r4
 8005de2:	4639      	mov	r1, r7
 8005de4:	4630      	mov	r0, r6
 8005de6:	47c0      	blx	r8
 8005de8:	3001      	adds	r0, #1
 8005dea:	d0e6      	beq.n	8005dba <_printf_common+0xb2>
 8005dec:	f109 0901 	add.w	r9, r9, #1
 8005df0:	e7d8      	b.n	8005da4 <_printf_common+0x9c>
	...

08005df4 <_printf_i>:
 8005df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005df8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	7e09      	ldrb	r1, [r1, #24]
 8005e00:	b085      	sub	sp, #20
 8005e02:	296e      	cmp	r1, #110	; 0x6e
 8005e04:	4617      	mov	r7, r2
 8005e06:	4606      	mov	r6, r0
 8005e08:	4698      	mov	r8, r3
 8005e0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e0c:	f000 80b3 	beq.w	8005f76 <_printf_i+0x182>
 8005e10:	d822      	bhi.n	8005e58 <_printf_i+0x64>
 8005e12:	2963      	cmp	r1, #99	; 0x63
 8005e14:	d036      	beq.n	8005e84 <_printf_i+0x90>
 8005e16:	d80a      	bhi.n	8005e2e <_printf_i+0x3a>
 8005e18:	2900      	cmp	r1, #0
 8005e1a:	f000 80b9 	beq.w	8005f90 <_printf_i+0x19c>
 8005e1e:	2958      	cmp	r1, #88	; 0x58
 8005e20:	f000 8083 	beq.w	8005f2a <_printf_i+0x136>
 8005e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005e2c:	e032      	b.n	8005e94 <_printf_i+0xa0>
 8005e2e:	2964      	cmp	r1, #100	; 0x64
 8005e30:	d001      	beq.n	8005e36 <_printf_i+0x42>
 8005e32:	2969      	cmp	r1, #105	; 0x69
 8005e34:	d1f6      	bne.n	8005e24 <_printf_i+0x30>
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	6813      	ldr	r3, [r2, #0]
 8005e3a:	0605      	lsls	r5, r0, #24
 8005e3c:	f103 0104 	add.w	r1, r3, #4
 8005e40:	d52a      	bpl.n	8005e98 <_printf_i+0xa4>
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6011      	str	r1, [r2, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	da03      	bge.n	8005e52 <_printf_i+0x5e>
 8005e4a:	222d      	movs	r2, #45	; 0x2d
 8005e4c:	425b      	negs	r3, r3
 8005e4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e52:	486f      	ldr	r0, [pc, #444]	; (8006010 <_printf_i+0x21c>)
 8005e54:	220a      	movs	r2, #10
 8005e56:	e039      	b.n	8005ecc <_printf_i+0xd8>
 8005e58:	2973      	cmp	r1, #115	; 0x73
 8005e5a:	f000 809d 	beq.w	8005f98 <_printf_i+0x1a4>
 8005e5e:	d808      	bhi.n	8005e72 <_printf_i+0x7e>
 8005e60:	296f      	cmp	r1, #111	; 0x6f
 8005e62:	d020      	beq.n	8005ea6 <_printf_i+0xb2>
 8005e64:	2970      	cmp	r1, #112	; 0x70
 8005e66:	d1dd      	bne.n	8005e24 <_printf_i+0x30>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	f043 0320 	orr.w	r3, r3, #32
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	e003      	b.n	8005e7a <_printf_i+0x86>
 8005e72:	2975      	cmp	r1, #117	; 0x75
 8005e74:	d017      	beq.n	8005ea6 <_printf_i+0xb2>
 8005e76:	2978      	cmp	r1, #120	; 0x78
 8005e78:	d1d4      	bne.n	8005e24 <_printf_i+0x30>
 8005e7a:	2378      	movs	r3, #120	; 0x78
 8005e7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e80:	4864      	ldr	r0, [pc, #400]	; (8006014 <_printf_i+0x220>)
 8005e82:	e055      	b.n	8005f30 <_printf_i+0x13c>
 8005e84:	6813      	ldr	r3, [r2, #0]
 8005e86:	1d19      	adds	r1, r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6011      	str	r1, [r2, #0]
 8005e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e94:	2301      	movs	r3, #1
 8005e96:	e08c      	b.n	8005fb2 <_printf_i+0x1be>
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6011      	str	r1, [r2, #0]
 8005e9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ea0:	bf18      	it	ne
 8005ea2:	b21b      	sxthne	r3, r3
 8005ea4:	e7cf      	b.n	8005e46 <_printf_i+0x52>
 8005ea6:	6813      	ldr	r3, [r2, #0]
 8005ea8:	6825      	ldr	r5, [r4, #0]
 8005eaa:	1d18      	adds	r0, r3, #4
 8005eac:	6010      	str	r0, [r2, #0]
 8005eae:	0628      	lsls	r0, r5, #24
 8005eb0:	d501      	bpl.n	8005eb6 <_printf_i+0xc2>
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	e002      	b.n	8005ebc <_printf_i+0xc8>
 8005eb6:	0668      	lsls	r0, r5, #25
 8005eb8:	d5fb      	bpl.n	8005eb2 <_printf_i+0xbe>
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	4854      	ldr	r0, [pc, #336]	; (8006010 <_printf_i+0x21c>)
 8005ebe:	296f      	cmp	r1, #111	; 0x6f
 8005ec0:	bf14      	ite	ne
 8005ec2:	220a      	movne	r2, #10
 8005ec4:	2208      	moveq	r2, #8
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ecc:	6865      	ldr	r5, [r4, #4]
 8005ece:	60a5      	str	r5, [r4, #8]
 8005ed0:	2d00      	cmp	r5, #0
 8005ed2:	f2c0 8095 	blt.w	8006000 <_printf_i+0x20c>
 8005ed6:	6821      	ldr	r1, [r4, #0]
 8005ed8:	f021 0104 	bic.w	r1, r1, #4
 8005edc:	6021      	str	r1, [r4, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d13d      	bne.n	8005f5e <_printf_i+0x16a>
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	f040 808e 	bne.w	8006004 <_printf_i+0x210>
 8005ee8:	4665      	mov	r5, ip
 8005eea:	2a08      	cmp	r2, #8
 8005eec:	d10b      	bne.n	8005f06 <_printf_i+0x112>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	07db      	lsls	r3, r3, #31
 8005ef2:	d508      	bpl.n	8005f06 <_printf_i+0x112>
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	6862      	ldr	r2, [r4, #4]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	bfde      	ittt	le
 8005efc:	2330      	movle	r3, #48	; 0x30
 8005efe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f06:	ebac 0305 	sub.w	r3, ip, r5
 8005f0a:	6123      	str	r3, [r4, #16]
 8005f0c:	f8cd 8000 	str.w	r8, [sp]
 8005f10:	463b      	mov	r3, r7
 8005f12:	aa03      	add	r2, sp, #12
 8005f14:	4621      	mov	r1, r4
 8005f16:	4630      	mov	r0, r6
 8005f18:	f7ff fef6 	bl	8005d08 <_printf_common>
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d14d      	bne.n	8005fbc <_printf_i+0x1c8>
 8005f20:	f04f 30ff 	mov.w	r0, #4294967295
 8005f24:	b005      	add	sp, #20
 8005f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f2a:	4839      	ldr	r0, [pc, #228]	; (8006010 <_printf_i+0x21c>)
 8005f2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005f30:	6813      	ldr	r3, [r2, #0]
 8005f32:	6821      	ldr	r1, [r4, #0]
 8005f34:	1d1d      	adds	r5, r3, #4
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6015      	str	r5, [r2, #0]
 8005f3a:	060a      	lsls	r2, r1, #24
 8005f3c:	d50b      	bpl.n	8005f56 <_printf_i+0x162>
 8005f3e:	07ca      	lsls	r2, r1, #31
 8005f40:	bf44      	itt	mi
 8005f42:	f041 0120 	orrmi.w	r1, r1, #32
 8005f46:	6021      	strmi	r1, [r4, #0]
 8005f48:	b91b      	cbnz	r3, 8005f52 <_printf_i+0x15e>
 8005f4a:	6822      	ldr	r2, [r4, #0]
 8005f4c:	f022 0220 	bic.w	r2, r2, #32
 8005f50:	6022      	str	r2, [r4, #0]
 8005f52:	2210      	movs	r2, #16
 8005f54:	e7b7      	b.n	8005ec6 <_printf_i+0xd2>
 8005f56:	064d      	lsls	r5, r1, #25
 8005f58:	bf48      	it	mi
 8005f5a:	b29b      	uxthmi	r3, r3
 8005f5c:	e7ef      	b.n	8005f3e <_printf_i+0x14a>
 8005f5e:	4665      	mov	r5, ip
 8005f60:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f64:	fb02 3311 	mls	r3, r2, r1, r3
 8005f68:	5cc3      	ldrb	r3, [r0, r3]
 8005f6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f6e:	460b      	mov	r3, r1
 8005f70:	2900      	cmp	r1, #0
 8005f72:	d1f5      	bne.n	8005f60 <_printf_i+0x16c>
 8005f74:	e7b9      	b.n	8005eea <_printf_i+0xf6>
 8005f76:	6813      	ldr	r3, [r2, #0]
 8005f78:	6825      	ldr	r5, [r4, #0]
 8005f7a:	6961      	ldr	r1, [r4, #20]
 8005f7c:	1d18      	adds	r0, r3, #4
 8005f7e:	6010      	str	r0, [r2, #0]
 8005f80:	0628      	lsls	r0, r5, #24
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	d501      	bpl.n	8005f8a <_printf_i+0x196>
 8005f86:	6019      	str	r1, [r3, #0]
 8005f88:	e002      	b.n	8005f90 <_printf_i+0x19c>
 8005f8a:	066a      	lsls	r2, r5, #25
 8005f8c:	d5fb      	bpl.n	8005f86 <_printf_i+0x192>
 8005f8e:	8019      	strh	r1, [r3, #0]
 8005f90:	2300      	movs	r3, #0
 8005f92:	6123      	str	r3, [r4, #16]
 8005f94:	4665      	mov	r5, ip
 8005f96:	e7b9      	b.n	8005f0c <_printf_i+0x118>
 8005f98:	6813      	ldr	r3, [r2, #0]
 8005f9a:	1d19      	adds	r1, r3, #4
 8005f9c:	6011      	str	r1, [r2, #0]
 8005f9e:	681d      	ldr	r5, [r3, #0]
 8005fa0:	6862      	ldr	r2, [r4, #4]
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f7fa f913 	bl	80001d0 <memchr>
 8005faa:	b108      	cbz	r0, 8005fb0 <_printf_i+0x1bc>
 8005fac:	1b40      	subs	r0, r0, r5
 8005fae:	6060      	str	r0, [r4, #4]
 8005fb0:	6863      	ldr	r3, [r4, #4]
 8005fb2:	6123      	str	r3, [r4, #16]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fba:	e7a7      	b.n	8005f0c <_printf_i+0x118>
 8005fbc:	6923      	ldr	r3, [r4, #16]
 8005fbe:	462a      	mov	r2, r5
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	47c0      	blx	r8
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	d0aa      	beq.n	8005f20 <_printf_i+0x12c>
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	079b      	lsls	r3, r3, #30
 8005fce:	d413      	bmi.n	8005ff8 <_printf_i+0x204>
 8005fd0:	68e0      	ldr	r0, [r4, #12]
 8005fd2:	9b03      	ldr	r3, [sp, #12]
 8005fd4:	4298      	cmp	r0, r3
 8005fd6:	bfb8      	it	lt
 8005fd8:	4618      	movlt	r0, r3
 8005fda:	e7a3      	b.n	8005f24 <_printf_i+0x130>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	464a      	mov	r2, r9
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	47c0      	blx	r8
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	d09a      	beq.n	8005f20 <_printf_i+0x12c>
 8005fea:	3501      	adds	r5, #1
 8005fec:	68e3      	ldr	r3, [r4, #12]
 8005fee:	9a03      	ldr	r2, [sp, #12]
 8005ff0:	1a9b      	subs	r3, r3, r2
 8005ff2:	42ab      	cmp	r3, r5
 8005ff4:	dcf2      	bgt.n	8005fdc <_printf_i+0x1e8>
 8005ff6:	e7eb      	b.n	8005fd0 <_printf_i+0x1dc>
 8005ff8:	2500      	movs	r5, #0
 8005ffa:	f104 0919 	add.w	r9, r4, #25
 8005ffe:	e7f5      	b.n	8005fec <_printf_i+0x1f8>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1ac      	bne.n	8005f5e <_printf_i+0x16a>
 8006004:	7803      	ldrb	r3, [r0, #0]
 8006006:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800600a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800600e:	e76c      	b.n	8005eea <_printf_i+0xf6>
 8006010:	08008165 	.word	0x08008165
 8006014:	08008176 	.word	0x08008176

08006018 <_sbrk_r>:
 8006018:	b538      	push	{r3, r4, r5, lr}
 800601a:	4c06      	ldr	r4, [pc, #24]	; (8006034 <_sbrk_r+0x1c>)
 800601c:	2300      	movs	r3, #0
 800601e:	4605      	mov	r5, r0
 8006020:	4608      	mov	r0, r1
 8006022:	6023      	str	r3, [r4, #0]
 8006024:	f7fb f9fe 	bl	8001424 <_sbrk>
 8006028:	1c43      	adds	r3, r0, #1
 800602a:	d102      	bne.n	8006032 <_sbrk_r+0x1a>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	b103      	cbz	r3, 8006032 <_sbrk_r+0x1a>
 8006030:	602b      	str	r3, [r5, #0]
 8006032:	bd38      	pop	{r3, r4, r5, pc}
 8006034:	20000888 	.word	0x20000888

08006038 <__sread>:
 8006038:	b510      	push	{r4, lr}
 800603a:	460c      	mov	r4, r1
 800603c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006040:	f000 f8e0 	bl	8006204 <_read_r>
 8006044:	2800      	cmp	r0, #0
 8006046:	bfab      	itete	ge
 8006048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800604a:	89a3      	ldrhlt	r3, [r4, #12]
 800604c:	181b      	addge	r3, r3, r0
 800604e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006052:	bfac      	ite	ge
 8006054:	6563      	strge	r3, [r4, #84]	; 0x54
 8006056:	81a3      	strhlt	r3, [r4, #12]
 8006058:	bd10      	pop	{r4, pc}

0800605a <__swrite>:
 800605a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800605e:	461f      	mov	r7, r3
 8006060:	898b      	ldrh	r3, [r1, #12]
 8006062:	05db      	lsls	r3, r3, #23
 8006064:	4605      	mov	r5, r0
 8006066:	460c      	mov	r4, r1
 8006068:	4616      	mov	r6, r2
 800606a:	d505      	bpl.n	8006078 <__swrite+0x1e>
 800606c:	2302      	movs	r3, #2
 800606e:	2200      	movs	r2, #0
 8006070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006074:	f000 f868 	bl	8006148 <_lseek_r>
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800607e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006082:	81a3      	strh	r3, [r4, #12]
 8006084:	4632      	mov	r2, r6
 8006086:	463b      	mov	r3, r7
 8006088:	4628      	mov	r0, r5
 800608a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800608e:	f000 b817 	b.w	80060c0 <_write_r>

08006092 <__sseek>:
 8006092:	b510      	push	{r4, lr}
 8006094:	460c      	mov	r4, r1
 8006096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800609a:	f000 f855 	bl	8006148 <_lseek_r>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	bf15      	itete	ne
 80060a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80060a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060ae:	81a3      	strheq	r3, [r4, #12]
 80060b0:	bf18      	it	ne
 80060b2:	81a3      	strhne	r3, [r4, #12]
 80060b4:	bd10      	pop	{r4, pc}

080060b6 <__sclose>:
 80060b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ba:	f000 b813 	b.w	80060e4 <_close_r>
	...

080060c0 <_write_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4c07      	ldr	r4, [pc, #28]	; (80060e0 <_write_r+0x20>)
 80060c4:	4605      	mov	r5, r0
 80060c6:	4608      	mov	r0, r1
 80060c8:	4611      	mov	r1, r2
 80060ca:	2200      	movs	r2, #0
 80060cc:	6022      	str	r2, [r4, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	f7fb f957 	bl	8001382 <_write>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_write_r+0x1e>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	b103      	cbz	r3, 80060de <_write_r+0x1e>
 80060dc:	602b      	str	r3, [r5, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	20000888 	.word	0x20000888

080060e4 <_close_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4c06      	ldr	r4, [pc, #24]	; (8006100 <_close_r+0x1c>)
 80060e8:	2300      	movs	r3, #0
 80060ea:	4605      	mov	r5, r0
 80060ec:	4608      	mov	r0, r1
 80060ee:	6023      	str	r3, [r4, #0]
 80060f0:	f7fb f963 	bl	80013ba <_close>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d102      	bne.n	80060fe <_close_r+0x1a>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	b103      	cbz	r3, 80060fe <_close_r+0x1a>
 80060fc:	602b      	str	r3, [r5, #0]
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	20000888 	.word	0x20000888

08006104 <_fstat_r>:
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	4c07      	ldr	r4, [pc, #28]	; (8006124 <_fstat_r+0x20>)
 8006108:	2300      	movs	r3, #0
 800610a:	4605      	mov	r5, r0
 800610c:	4608      	mov	r0, r1
 800610e:	4611      	mov	r1, r2
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	f7fb f95e 	bl	80013d2 <_fstat>
 8006116:	1c43      	adds	r3, r0, #1
 8006118:	d102      	bne.n	8006120 <_fstat_r+0x1c>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	b103      	cbz	r3, 8006120 <_fstat_r+0x1c>
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	bd38      	pop	{r3, r4, r5, pc}
 8006122:	bf00      	nop
 8006124:	20000888 	.word	0x20000888

08006128 <_isatty_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4c06      	ldr	r4, [pc, #24]	; (8006144 <_isatty_r+0x1c>)
 800612c:	2300      	movs	r3, #0
 800612e:	4605      	mov	r5, r0
 8006130:	4608      	mov	r0, r1
 8006132:	6023      	str	r3, [r4, #0]
 8006134:	f7fb f95d 	bl	80013f2 <_isatty>
 8006138:	1c43      	adds	r3, r0, #1
 800613a:	d102      	bne.n	8006142 <_isatty_r+0x1a>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	b103      	cbz	r3, 8006142 <_isatty_r+0x1a>
 8006140:	602b      	str	r3, [r5, #0]
 8006142:	bd38      	pop	{r3, r4, r5, pc}
 8006144:	20000888 	.word	0x20000888

08006148 <_lseek_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	4c07      	ldr	r4, [pc, #28]	; (8006168 <_lseek_r+0x20>)
 800614c:	4605      	mov	r5, r0
 800614e:	4608      	mov	r0, r1
 8006150:	4611      	mov	r1, r2
 8006152:	2200      	movs	r2, #0
 8006154:	6022      	str	r2, [r4, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	f7fb f956 	bl	8001408 <_lseek>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d102      	bne.n	8006166 <_lseek_r+0x1e>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	b103      	cbz	r3, 8006166 <_lseek_r+0x1e>
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	20000888 	.word	0x20000888

0800616c <memcpy>:
 800616c:	b510      	push	{r4, lr}
 800616e:	1e43      	subs	r3, r0, #1
 8006170:	440a      	add	r2, r1
 8006172:	4291      	cmp	r1, r2
 8006174:	d100      	bne.n	8006178 <memcpy+0xc>
 8006176:	bd10      	pop	{r4, pc}
 8006178:	f811 4b01 	ldrb.w	r4, [r1], #1
 800617c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006180:	e7f7      	b.n	8006172 <memcpy+0x6>

08006182 <memmove>:
 8006182:	4288      	cmp	r0, r1
 8006184:	b510      	push	{r4, lr}
 8006186:	eb01 0302 	add.w	r3, r1, r2
 800618a:	d807      	bhi.n	800619c <memmove+0x1a>
 800618c:	1e42      	subs	r2, r0, #1
 800618e:	4299      	cmp	r1, r3
 8006190:	d00a      	beq.n	80061a8 <memmove+0x26>
 8006192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006196:	f802 4f01 	strb.w	r4, [r2, #1]!
 800619a:	e7f8      	b.n	800618e <memmove+0xc>
 800619c:	4283      	cmp	r3, r0
 800619e:	d9f5      	bls.n	800618c <memmove+0xa>
 80061a0:	1881      	adds	r1, r0, r2
 80061a2:	1ad2      	subs	r2, r2, r3
 80061a4:	42d3      	cmn	r3, r2
 80061a6:	d100      	bne.n	80061aa <memmove+0x28>
 80061a8:	bd10      	pop	{r4, pc}
 80061aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80061b2:	e7f7      	b.n	80061a4 <memmove+0x22>

080061b4 <__malloc_lock>:
 80061b4:	4770      	bx	lr

080061b6 <__malloc_unlock>:
 80061b6:	4770      	bx	lr

080061b8 <_realloc_r>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	4607      	mov	r7, r0
 80061bc:	4614      	mov	r4, r2
 80061be:	460e      	mov	r6, r1
 80061c0:	b921      	cbnz	r1, 80061cc <_realloc_r+0x14>
 80061c2:	4611      	mov	r1, r2
 80061c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80061c8:	f7ff bbf2 	b.w	80059b0 <_malloc_r>
 80061cc:	b922      	cbnz	r2, 80061d8 <_realloc_r+0x20>
 80061ce:	f7ff fba1 	bl	8005914 <_free_r>
 80061d2:	4625      	mov	r5, r4
 80061d4:	4628      	mov	r0, r5
 80061d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061d8:	f000 f826 	bl	8006228 <_malloc_usable_size_r>
 80061dc:	42a0      	cmp	r0, r4
 80061de:	d20f      	bcs.n	8006200 <_realloc_r+0x48>
 80061e0:	4621      	mov	r1, r4
 80061e2:	4638      	mov	r0, r7
 80061e4:	f7ff fbe4 	bl	80059b0 <_malloc_r>
 80061e8:	4605      	mov	r5, r0
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d0f2      	beq.n	80061d4 <_realloc_r+0x1c>
 80061ee:	4631      	mov	r1, r6
 80061f0:	4622      	mov	r2, r4
 80061f2:	f7ff ffbb 	bl	800616c <memcpy>
 80061f6:	4631      	mov	r1, r6
 80061f8:	4638      	mov	r0, r7
 80061fa:	f7ff fb8b 	bl	8005914 <_free_r>
 80061fe:	e7e9      	b.n	80061d4 <_realloc_r+0x1c>
 8006200:	4635      	mov	r5, r6
 8006202:	e7e7      	b.n	80061d4 <_realloc_r+0x1c>

08006204 <_read_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4c07      	ldr	r4, [pc, #28]	; (8006224 <_read_r+0x20>)
 8006208:	4605      	mov	r5, r0
 800620a:	4608      	mov	r0, r1
 800620c:	4611      	mov	r1, r2
 800620e:	2200      	movs	r2, #0
 8006210:	6022      	str	r2, [r4, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	f7fb f898 	bl	8001348 <_read>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_read_r+0x1e>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	b103      	cbz	r3, 8006222 <_read_r+0x1e>
 8006220:	602b      	str	r3, [r5, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	20000888 	.word	0x20000888

08006228 <_malloc_usable_size_r>:
 8006228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800622c:	1f18      	subs	r0, r3, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	bfbc      	itt	lt
 8006232:	580b      	ldrlt	r3, [r1, r0]
 8006234:	18c0      	addlt	r0, r0, r3
 8006236:	4770      	bx	lr

08006238 <_init>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	bf00      	nop
 800623c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623e:	bc08      	pop	{r3}
 8006240:	469e      	mov	lr, r3
 8006242:	4770      	bx	lr

08006244 <_fini>:
 8006244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006246:	bf00      	nop
 8006248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624a:	bc08      	pop	{r3}
 800624c:	469e      	mov	lr, r3
 800624e:	4770      	bx	lr
