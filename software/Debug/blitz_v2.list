
blitz_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a948  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002330  0800aad8  0800aad8  0001aad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce08  0800ce08  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce08  0800ce08  0001ce08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce10  0800ce10  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce10  0800ce10  0001ce10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce14  0800ce14  0001ce14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ce18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ec  20000200  0800d018  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bec  0800d018  00020bec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f44  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031eb  00000000  00000000  00037174  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b0  00000000  00000000  0003a360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  0003b710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022997  00000000  00000000  0003c928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c33  00000000  00000000  0005f2bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c820c  00000000  00000000  0006fef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001380fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006070  00000000  00000000  0013817c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aac0 	.word	0x0800aac0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800aac0 	.word	0x0800aac0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 8000eb0:	1d39      	adds	r1, r7, #4
 8000eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <__io_putchar+0x20>)
 8000eba:	f006 fc18 	bl	80076ee <HAL_UART_Transmit>
	return ch;
 8000ebe:	687b      	ldr	r3, [r7, #4]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200007f8 	.word	0x200007f8

08000ecc <tests_run>:

void tests_run(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	printf("\r\n========== RUN TESTS ==========\r\n");
 8000ed0:	480f      	ldr	r0, [pc, #60]	; (8000f10 <tests_run+0x44>)
 8000ed2:	f007 fd6d 	bl	80089b0 <puts>
	printf("\t- Buzzer\r\n");
 8000ed6:	480f      	ldr	r0, [pc, #60]	; (8000f14 <tests_run+0x48>)
 8000ed8:	f007 fd6a 	bl	80089b0 <puts>
	test_buzzer();
 8000edc:	f001 fa0c 	bl	80022f8 <test_buzzer>
	HAL_Delay(2000);
 8000ee0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ee4:	f002 fffa 	bl	8003edc <HAL_Delay>
	printf("\t- Motors\r\n");
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <tests_run+0x4c>)
 8000eea:	f007 fd61 	bl	80089b0 <puts>
	test_motors();
 8000eee:	f001 fc33 	bl	8002758 <test_motors>
	HAL_Delay(2000);
 8000ef2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ef6:	f002 fff1 	bl	8003edc <HAL_Delay>
	printf("\t- Fans\r\n");
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <tests_run+0x50>)
 8000efc:	f007 fd58 	bl	80089b0 <puts>
	test_fan();
 8000f00:	f001 faa0 	bl	8002444 <test_fan>
	HAL_Delay(2000);
 8000f04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f08:	f002 ffe8 	bl	8003edc <HAL_Delay>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	0800aad8 	.word	0x0800aad8
 8000f14:	0800aafc 	.word	0x0800aafc
 8000f18:	0800ab08 	.word	0x0800ab08
 8000f1c:	0800ab14 	.word	0x0800ab14

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f24:	f002 ff68 	bl	8003df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f28:	f000 f898 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2c:	f000 fc38 	bl	80017a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f30:	f000 fc16 	bl	8001760 <MX_DMA_Init>
  MX_I2C3_Init();
 8000f34:	f000 f9a6 	bl	8001284 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000f38:	f000 f9d2 	bl	80012e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f3c:	f000 fbe6 	bl	800170c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000f40:	f000 fb08 	bl	8001554 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000f44:	f000 faa2 	bl	800148c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000f48:	f000 f8e6 	bl	8001118 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f4c:	f000 fa4a 	bl	80013e4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f50:	f000 fb64 	bl	800161c <MX_TIM5_Init>
  MX_TIM14_Init();
 8000f54:	f000 fbb6 	bl	80016c4 <MX_TIM14_Init>
  MX_ADC2_Init();
 8000f58:	f000 f940 	bl	80011dc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  printf("========== Blitz V2 ==========\r\n");
 8000f5c:	4833      	ldr	r0, [pc, #204]	; (800102c <main+0x10c>)
 8000f5e:	f007 fd27 	bl	80089b0 <puts>
  printf("Created by Oskar & Isak\r\n");
 8000f62:	4833      	ldr	r0, [pc, #204]	; (8001030 <main+0x110>)
 8000f64:	f007 fd24 	bl	80089b0 <puts>


  printf("\r\n========== Initializing peripherals ==========\r\n");
 8000f68:	4832      	ldr	r0, [pc, #200]	; (8001034 <main+0x114>)
 8000f6a:	f007 fd21 	bl	80089b0 <puts>
  printf("\t- Buzzer\r\n");
 8000f6e:	4832      	ldr	r0, [pc, #200]	; (8001038 <main+0x118>)
 8000f70:	f007 fd1e 	bl	80089b0 <puts>
  init_buzzer();
 8000f74:	f001 f96e 	bl	8002254 <init_buzzer>
  //Startup beep
  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7c:	482f      	ldr	r0, [pc, #188]	; (800103c <main+0x11c>)
 8000f7e:	f004 fb9a 	bl	80056b6 <HAL_GPIO_TogglePin>
	tone(523,200);
 8000f82:	21c8      	movs	r1, #200	; 0xc8
 8000f84:	f240 200b 	movw	r0, #523	; 0x20b
 8000f88:	f001 f98e 	bl	80022a8 <tone>
	HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f90:	482a      	ldr	r0, [pc, #168]	; (800103c <main+0x11c>)
 8000f92:	f004 fb90 	bl	80056b6 <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000f96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9a:	4828      	ldr	r0, [pc, #160]	; (800103c <main+0x11c>)
 8000f9c:	f004 fb8b 	bl	80056b6 <HAL_GPIO_TogglePin>
	tone(659,200);
 8000fa0:	21c8      	movs	r1, #200	; 0xc8
 8000fa2:	f240 2093 	movw	r0, #659	; 0x293
 8000fa6:	f001 f97f 	bl	80022a8 <tone>
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fae:	4823      	ldr	r0, [pc, #140]	; (800103c <main+0x11c>)
 8000fb0:	f004 fb81 	bl	80056b6 <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb8:	4821      	ldr	r0, [pc, #132]	; (8001040 <main+0x120>)
 8000fba:	f004 fb7c 	bl	80056b6 <HAL_GPIO_TogglePin>
	tone(784,200);
 8000fbe:	21c8      	movs	r1, #200	; 0xc8
 8000fc0:	f44f 7044 	mov.w	r0, #784	; 0x310
 8000fc4:	f001 f970 	bl	80022a8 <tone>
	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000fc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fcc:	481c      	ldr	r0, [pc, #112]	; (8001040 <main+0x120>)
 8000fce:	f004 fb72 	bl	80056b6 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd6:	f002 ff81 	bl	8003edc <HAL_Delay>

  printf("\t- OLED\r\n");
 8000fda:	481a      	ldr	r0, [pc, #104]	; (8001044 <main+0x124>)
 8000fdc:	f007 fce8 	bl	80089b0 <puts>
  init_oled(); // Draws CASE LOGO for now
 8000fe0:	f001 fc82 	bl	80028e8 <init_oled>
  //HAL_Delay(500);
  printf("\t- Motors\r\n");
 8000fe4:	4818      	ldr	r0, [pc, #96]	; (8001048 <main+0x128>)
 8000fe6:	f007 fce3 	bl	80089b0 <puts>
  init_motors();
 8000fea:	f001 faff 	bl	80025ec <init_motors>
  //HAL_Delay(500);
  printf("\t- Fans\r\n");
 8000fee:	4817      	ldr	r0, [pc, #92]	; (800104c <main+0x12c>)
 8000ff0:	f007 fcde 	bl	80089b0 <puts>
  init_fans();
 8000ff4:	f001 f9e0 	bl	80023b8 <init_fans>
 // HAL_Delay(3000); //Wait for fans to beep
  printf("\t- Voltage meter\r\n");
 8000ff8:	4815      	ldr	r0, [pc, #84]	; (8001050 <main+0x130>)
 8000ffa:	f007 fcd9 	bl	80089b0 <puts>
  init_voltmeter();
 8000ffe:	f002 fbeb 	bl	80037d8 <init_voltmeter>
  printf("\t- XLINE\r\n");
 8001002:	4814      	ldr	r0, [pc, #80]	; (8001054 <main+0x134>)
 8001004:	f007 fcd4 	bl	80089b0 <puts>
	init_xline();
 8001008:	f002 fc74 	bl	80038f4 <init_xline>

  // Run all tests
  //tests_run();


  printf("\r\n========== Starting Blitz ==========\r\n");
 800100c:	4812      	ldr	r0, [pc, #72]	; (8001058 <main+0x138>)
 800100e:	f007 fccf 	bl	80089b0 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	oled_update();
 8001012:	f001 fd67 	bl	8002ae4 <oled_update>
  	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8001016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101a:	4809      	ldr	r0, [pc, #36]	; (8001040 <main+0x120>)
 800101c:	f004 fb4b 	bl	80056b6 <HAL_GPIO_TogglePin>
  	HAL_Delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f002 ff5b 	bl	8003edc <HAL_Delay>

  	control_loop();
 8001026:	f001 f993 	bl	8002350 <control_loop>
  	oled_update();
 800102a:	e7f2      	b.n	8001012 <main+0xf2>
 800102c:	0800ab20 	.word	0x0800ab20
 8001030:	0800ab40 	.word	0x0800ab40
 8001034:	0800ab5c 	.word	0x0800ab5c
 8001038:	0800aafc 	.word	0x0800aafc
 800103c:	40020800 	.word	0x40020800
 8001040:	40020000 	.word	0x40020000
 8001044:	0800ab90 	.word	0x0800ab90
 8001048:	0800ab08 	.word	0x0800ab08
 800104c:	0800ab14 	.word	0x0800ab14
 8001050:	0800ab9c 	.word	0x0800ab9c
 8001054:	0800abb0 	.word	0x0800abb0
 8001058:	0800abbc 	.word	0x0800abbc

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	; 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f006 ffc8 	bl	8008000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <SystemClock_Config+0xb4>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <SystemClock_Config+0xb4>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <SystemClock_Config+0xb4>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <SystemClock_Config+0xb8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <SystemClock_Config+0xb8>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <SystemClock_Config+0xb8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c0:	2310      	movs	r3, #16
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c8:	f107 0320 	add.w	r3, r7, #32
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 ff7f 	bl	8005fd0 <HAL_RCC_OscConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010d8:	f000 fc3e 	bl	8001958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010dc:	230f      	movs	r3, #15
 80010de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f005 f9da 	bl	80064b0 <HAL_RCC_ClockConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001102:	f000 fc29 	bl	8001958 <Error_Handler>
  }
}
 8001106:	bf00      	nop
 8001108:	3750      	adds	r7, #80	; 0x50
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40007000 	.word	0x40007000

08001118 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	463b      	mov	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800112a:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <MX_ADC1_Init+0xb8>)
 800112c:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <MX_ADC1_Init+0xbc>)
 800112e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <MX_ADC1_Init+0xb8>)
 8001132:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001136:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_ADC1_Init+0xb8>)
 800113a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800113e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_ADC1_Init+0xb8>)
 8001142:	2201      	movs	r2, #1
 8001144:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_ADC1_Init+0xb8>)
 8001148:	2201      	movs	r2, #1
 800114a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_ADC1_Init+0xb8>)
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_ADC1_Init+0xb8>)
 8001156:	2200      	movs	r2, #0
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_ADC1_Init+0xb8>)
 800115c:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <MX_ADC1_Init+0xc0>)
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_ADC1_Init+0xb8>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_ADC1_Init+0xb8>)
 8001168:	2202      	movs	r2, #2
 800116a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_ADC1_Init+0xb8>)
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_ADC1_Init+0xb8>)
 8001176:	2201      	movs	r2, #1
 8001178:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800117a:	4815      	ldr	r0, [pc, #84]	; (80011d0 <MX_ADC1_Init+0xb8>)
 800117c:	f002 fed0 	bl	8003f20 <HAL_ADC_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001186:	f000 fbe7 	bl	8001958 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800118a:	2302      	movs	r3, #2
 800118c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800118e:	2301      	movs	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001192:	2305      	movs	r3, #5
 8001194:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_ADC1_Init+0xb8>)
 800119c:	f003 f9a0 	bl	80044e0 <HAL_ADC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011a6:	f000 fbd7 	bl	8001958 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011aa:	2303      	movs	r3, #3
 80011ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_ADC1_Init+0xb8>)
 80011b8:	f003 f992 	bl	80044e0 <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011c2:	f000 fbc9 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200007b0 	.word	0x200007b0
 80011d4:	40012000 	.word	0x40012000
 80011d8:	0f000001 	.word	0x0f000001

080011dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011e2:	463b      	mov	r3, r7
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <MX_ADC2_Init+0x9c>)
 80011f0:	4a22      	ldr	r2, [pc, #136]	; (800127c <MX_ADC2_Init+0xa0>)
 80011f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_ADC2_Init+0x9c>)
 80011f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_ADC2_Init+0x9c>)
 80011fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001202:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_ADC2_Init+0x9c>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_ADC2_Init+0x9c>)
 800120c:	2200      	movs	r2, #0
 800120e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_ADC2_Init+0x9c>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_ADC2_Init+0x9c>)
 800121a:	2200      	movs	r2, #0
 800121c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_ADC2_Init+0x9c>)
 8001220:	4a17      	ldr	r2, [pc, #92]	; (8001280 <MX_ADC2_Init+0xa4>)
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_ADC2_Init+0x9c>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_ADC2_Init+0x9c>)
 800122c:	2201      	movs	r2, #1
 800122e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_ADC2_Init+0x9c>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_ADC2_Init+0x9c>)
 800123a:	2201      	movs	r2, #1
 800123c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800123e:	480e      	ldr	r0, [pc, #56]	; (8001278 <MX_ADC2_Init+0x9c>)
 8001240:	f002 fe6e 	bl	8003f20 <HAL_ADC_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 800124a:	f000 fb85 	bl	8001958 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800124e:	2309      	movs	r3, #9
 8001250:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001252:	2301      	movs	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001256:	2307      	movs	r3, #7
 8001258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_ADC2_Init+0x9c>)
 8001260:	f003 f93e 	bl	80044e0 <HAL_ADC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 800126a:	f000 fb75 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200006e8 	.word	0x200006e8
 800127c:	40012100 	.word	0x40012100
 8001280:	0f000001 	.word	0x0f000001

08001284 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_I2C3_Init+0x50>)
 800128a:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <MX_I2C3_Init+0x54>)
 800128c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_I2C3_Init+0x50>)
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <MX_I2C3_Init+0x58>)
 8001292:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_I2C3_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_I2C3_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_I2C3_Init+0x50>)
 80012a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <MX_I2C3_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_I2C3_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <MX_I2C3_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_I2C3_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_I2C3_Init+0x50>)
 80012c2:	f004 fa37 	bl	8005734 <HAL_I2C_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80012cc:	f000 fb44 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000654 	.word	0x20000654
 80012d8:	40005c00 	.word	0x40005c00
 80012dc:	00061a80 	.word	0x00061a80

080012e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b092      	sub	sp, #72	; 0x48
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	615a      	str	r2, [r3, #20]
 8001302:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2220      	movs	r2, #32
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f006 fe78 	bl	8008000 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001310:	4b32      	ldr	r3, [pc, #200]	; (80013dc <MX_TIM1_Init+0xfc>)
 8001312:	4a33      	ldr	r2, [pc, #204]	; (80013e0 <MX_TIM1_Init+0x100>)
 8001314:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <MX_TIM1_Init+0xfc>)
 8001318:	2203      	movs	r2, #3
 800131a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <MX_TIM1_Init+0xfc>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <MX_TIM1_Init+0xfc>)
 8001324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001328:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <MX_TIM1_Init+0xfc>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <MX_TIM1_Init+0xfc>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <MX_TIM1_Init+0xfc>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800133c:	4827      	ldr	r0, [pc, #156]	; (80013dc <MX_TIM1_Init+0xfc>)
 800133e:	f005 fafd 	bl	800693c <HAL_TIM_PWM_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001348:	f000 fb06 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001354:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001358:	4619      	mov	r1, r3
 800135a:	4820      	ldr	r0, [pc, #128]	; (80013dc <MX_TIM1_Init+0xfc>)
 800135c:	f006 f898 	bl	8007490 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001366:	f000 faf7 	bl	8001958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136a:	2360      	movs	r3, #96	; 0x60
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001386:	220c      	movs	r2, #12
 8001388:	4619      	mov	r1, r3
 800138a:	4814      	ldr	r0, [pc, #80]	; (80013dc <MX_TIM1_Init+0xfc>)
 800138c:	f005 fd12 	bl	8006db4 <HAL_TIM_PWM_ConfigChannel>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001396:	f000 fadf 	bl	8001958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	; (80013dc <MX_TIM1_Init+0xfc>)
 80013be:	f006 f8e3 	bl	8007588 <HAL_TIMEx_ConfigBreakDeadTime>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80013c8:	f000 fac6 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <MX_TIM1_Init+0xfc>)
 80013ce:	f000 fd15 	bl	8001dfc <HAL_TIM_MspPostInit>

}
 80013d2:	bf00      	nop
 80013d4:	3748      	adds	r7, #72	; 0x48
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000898 	.word	0x20000898
 80013e0:	40010000 	.word	0x40010000

080013e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	2224      	movs	r2, #36	; 0x24
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f006 fe04 	bl	8008000 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <MX_TIM2_Init+0xa4>)
 8001402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_TIM2_Init+0xa4>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_TIM2_Init+0xa4>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_TIM2_Init+0xa4>)
 8001416:	f04f 32ff 	mov.w	r2, #4294967295
 800141a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_TIM2_Init+0xa4>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_TIM2_Init+0xa4>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001428:	2303      	movs	r3, #3
 800142a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001430:	2301      	movs	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800143c:	2302      	movs	r3, #2
 800143e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001440:	2301      	movs	r3, #1
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	4619      	mov	r1, r3
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_TIM2_Init+0xa4>)
 8001454:	f005 fadc 	bl	8006a10 <HAL_TIM_Encoder_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800145e:	f000 fa7b 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_TIM2_Init+0xa4>)
 8001470:	f006 f80e 	bl	8007490 <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800147a:	f000 fa6d 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3730      	adds	r7, #48	; 0x30
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200008d8 	.word	0x200008d8

0800148c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]
 80014aa:	615a      	str	r2, [r3, #20]
 80014ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ae:	4b27      	ldr	r3, [pc, #156]	; (800154c <MX_TIM3_Init+0xc0>)
 80014b0:	4a27      	ldr	r2, [pc, #156]	; (8001550 <MX_TIM3_Init+0xc4>)
 80014b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <MX_TIM3_Init+0xc0>)
 80014b6:	220f      	movs	r2, #15
 80014b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <MX_TIM3_Init+0xc0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <MX_TIM3_Init+0xc0>)
 80014c2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80014c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <MX_TIM3_Init+0xc0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <MX_TIM3_Init+0xc0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014d4:	481d      	ldr	r0, [pc, #116]	; (800154c <MX_TIM3_Init+0xc0>)
 80014d6:	f005 fa31 	bl	800693c <HAL_TIM_PWM_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80014e0:	f000 fa3a 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	4619      	mov	r1, r3
 80014f2:	4816      	ldr	r0, [pc, #88]	; (800154c <MX_TIM3_Init+0xc0>)
 80014f4:	f005 ffcc 	bl	8007490 <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80014fe:	f000 fa2b 	bl	8001958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001502:	2360      	movs	r3, #96	; 0x60
 8001504:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	4619      	mov	r1, r3
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <MX_TIM3_Init+0xc0>)
 800151a:	f005 fc4b 	bl	8006db4 <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001524:	f000 fa18 	bl	8001958 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2204      	movs	r2, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <MX_TIM3_Init+0xc0>)
 8001530:	f005 fc40 	bl	8006db4 <HAL_TIM_PWM_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800153a:	f000 fa0d 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800153e:	4803      	ldr	r0, [pc, #12]	; (800154c <MX_TIM3_Init+0xc0>)
 8001540:	f000 fc5c 	bl	8001dfc <HAL_TIM_MspPostInit>

}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000770 	.word	0x20000770
 8001550:	40000400 	.word	0x40000400

08001554 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <MX_TIM4_Init+0xc0>)
 8001578:	4a27      	ldr	r2, [pc, #156]	; (8001618 <MX_TIM4_Init+0xc4>)
 800157a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <MX_TIM4_Init+0xc0>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <MX_TIM4_Init+0xc0>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MX_TIM4_Init+0xc0>)
 800158a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800158e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <MX_TIM4_Init+0xc0>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_TIM4_Init+0xc0>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800159c:	481d      	ldr	r0, [pc, #116]	; (8001614 <MX_TIM4_Init+0xc0>)
 800159e:	f005 f9cd 	bl	800693c <HAL_TIM_PWM_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80015a8:	f000 f9d6 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015b4:	f107 0320 	add.w	r3, r7, #32
 80015b8:	4619      	mov	r1, r3
 80015ba:	4816      	ldr	r0, [pc, #88]	; (8001614 <MX_TIM4_Init+0xc0>)
 80015bc:	f005 ff68 	bl	8007490 <HAL_TIMEx_MasterConfigSynchronization>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80015c6:	f000 f9c7 	bl	8001958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ca:	2360      	movs	r3, #96	; 0x60
 80015cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2208      	movs	r2, #8
 80015de:	4619      	mov	r1, r3
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <MX_TIM4_Init+0xc0>)
 80015e2:	f005 fbe7 	bl	8006db4 <HAL_TIM_PWM_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80015ec:	f000 f9b4 	bl	8001958 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	220c      	movs	r2, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	4807      	ldr	r0, [pc, #28]	; (8001614 <MX_TIM4_Init+0xc0>)
 80015f8:	f005 fbdc 	bl	8006db4 <HAL_TIM_PWM_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001602:	f000 f9a9 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001606:	4803      	ldr	r0, [pc, #12]	; (8001614 <MX_TIM4_Init+0xc0>)
 8001608:	f000 fbf8 	bl	8001dfc <HAL_TIM_MspPostInit>

}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200006a8 	.word	0x200006a8
 8001618:	40000800 	.word	0x40000800

0800161c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	2224      	movs	r2, #36	; 0x24
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f006 fce8 	bl	8008000 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001638:	4b20      	ldr	r3, [pc, #128]	; (80016bc <MX_TIM5_Init+0xa0>)
 800163a:	4a21      	ldr	r2, [pc, #132]	; (80016c0 <MX_TIM5_Init+0xa4>)
 800163c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800163e:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <MX_TIM5_Init+0xa0>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <MX_TIM5_Init+0xa0>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <MX_TIM5_Init+0xa0>)
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_TIM5_Init+0xa0>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_TIM5_Init+0xa0>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800165e:	2301      	movs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001666:	2301      	movs	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001672:	2302      	movs	r3, #2
 8001674:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001676:	2301      	movs	r3, #1
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4619      	mov	r1, r3
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <MX_TIM5_Init+0xa0>)
 800168a:	f005 f9c1 	bl	8006a10 <HAL_TIM_Encoder_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001694:	f000 f960 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_TIM5_Init+0xa0>)
 80016a6:	f005 fef3 	bl	8007490 <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80016b0:	f000 f952 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	3730      	adds	r7, #48	; 0x30
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000730 	.word	0x20000730
 80016c0:	40000c00 	.word	0x40000c00

080016c4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_TIM14_Init+0x40>)
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <MX_TIM14_Init+0x44>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000;
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <MX_TIM14_Init+0x40>)
 80016d0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80016d4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_TIM14_Init+0x40>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_TIM14_Init+0x40>)
 80016de:	2232      	movs	r2, #50	; 0x32
 80016e0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_TIM14_Init+0x40>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_TIM14_Init+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_TIM14_Init+0x40>)
 80016f0:	f005 f8aa 	bl	8006848 <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80016fa:	f000 f92d 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000918 	.word	0x20000918
 8001708:	40002000 	.word	0x40002000

0800170c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART1_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001744:	f005 ff86 	bl	8007654 <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f000 f903 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200007f8 	.word	0x200007f8
 800175c:	40011000 	.word	0x40011000

08001760 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_DMA_Init+0x3c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <MX_DMA_Init+0x3c>)
 8001770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_DMA_Init+0x3c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	2038      	movs	r0, #56	; 0x38
 8001788:	f003 fa25 	bl	8004bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800178c:	2038      	movs	r0, #56	; 0x38
 800178e:	f003 fa3e 	bl	8004c0e <HAL_NVIC_EnableIRQ>

}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b60      	ldr	r3, [pc, #384]	; (800193c <MX_GPIO_Init+0x19c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a5f      	ldr	r2, [pc, #380]	; (800193c <MX_GPIO_Init+0x19c>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b5d      	ldr	r3, [pc, #372]	; (800193c <MX_GPIO_Init+0x19c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b59      	ldr	r3, [pc, #356]	; (800193c <MX_GPIO_Init+0x19c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a58      	ldr	r2, [pc, #352]	; (800193c <MX_GPIO_Init+0x19c>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b56      	ldr	r3, [pc, #344]	; (800193c <MX_GPIO_Init+0x19c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b52      	ldr	r3, [pc, #328]	; (800193c <MX_GPIO_Init+0x19c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a51      	ldr	r2, [pc, #324]	; (800193c <MX_GPIO_Init+0x19c>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b4f      	ldr	r3, [pc, #316]	; (800193c <MX_GPIO_Init+0x19c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4b4b      	ldr	r3, [pc, #300]	; (800193c <MX_GPIO_Init+0x19c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a4a      	ldr	r2, [pc, #296]	; (800193c <MX_GPIO_Init+0x19c>)
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b48      	ldr	r3, [pc, #288]	; (800193c <MX_GPIO_Init+0x19c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX3_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	f248 0180 	movw	r1, #32896	; 0x8080
 800182c:	4844      	ldr	r0, [pc, #272]	; (8001940 <MX_GPIO_Init+0x1a0>)
 800182e:	f003 ff29 	bl	8005684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MUX2_Pin|MUX1_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 8001838:	4842      	ldr	r0, [pc, #264]	; (8001944 <MX_GPIO_Init+0x1a4>)
 800183a:	f003 ff23 	bl	8005684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX0_Pin|MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin 
 800183e:	2200      	movs	r2, #0
 8001840:	21f1      	movs	r1, #241	; 0xf1
 8001842:	4841      	ldr	r0, [pc, #260]	; (8001948 <MX_GPIO_Init+0x1a8>)
 8001844:	f003 ff1e 	bl	8005684 <HAL_GPIO_WritePin>
                          |MOTOR_L_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_SELECT_Pin */
  GPIO_InitStruct.Pin = BUTTON_SELECT_Pin;
 8001848:	2308      	movs	r3, #8
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800184c:	4b3f      	ldr	r3, [pc, #252]	; (800194c <MX_GPIO_Init+0x1ac>)
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_SELECT_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	483a      	ldr	r0, [pc, #232]	; (8001944 <MX_GPIO_Init+0x1a4>)
 800185c:	f003 fd60 	bl	8005320 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX3_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = MUX3_Pin|LED_B_Pin;
 8001860:	f248 0380 	movw	r3, #32896	; 0x8080
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4831      	ldr	r0, [pc, #196]	; (8001940 <MX_GPIO_Init+0x1a0>)
 800187a:	f003 fd51 	bl	8005320 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX2_Pin MUX1_Pin LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = MUX2_Pin|MUX1_Pin|LED_G_Pin|LED_R_Pin;
 800187e:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	482b      	ldr	r0, [pc, #172]	; (8001944 <MX_GPIO_Init+0x1a4>)
 8001898:	f003 fd42 	bl	8005320 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX0_Pin MOTOR_R_IN2_Pin MOTOR_R_IN1_Pin MOTOR_L_IN2_Pin 
                           MOTOR_L_IN1_Pin */
  GPIO_InitStruct.Pin = MUX0_Pin|MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin 
 800189c:	23f1      	movs	r3, #241	; 0xf1
 800189e:	617b      	str	r3, [r7, #20]
                          |MOTOR_L_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4825      	ldr	r0, [pc, #148]	; (8001948 <MX_GPIO_Init+0x1a8>)
 80018b4:	f003 fd34 	bl	8005320 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018b8:	2304      	movs	r3, #4
 80018ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	481f      	ldr	r0, [pc, #124]	; (8001948 <MX_GPIO_Init+0x1a8>)
 80018cc:	f003 fd28 	bl	8005320 <HAL_GPIO_Init>

  /*Configure GPIO pin : REMOTE_START_Pin */
  GPIO_InitStruct.Pin = REMOTE_START_Pin;
 80018d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <MX_GPIO_Init+0x1b0>)
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(REMOTE_START_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4817      	ldr	r0, [pc, #92]	; (8001944 <MX_GPIO_Init+0x1a4>)
 80018e6:	f003 fd1b 	bl	8005320 <HAL_GPIO_Init>

  /*Configure GPIO pin : REMOTE_KILL_Pin */
  GPIO_InitStruct.Pin = REMOTE_KILL_Pin;
 80018ea:	2304      	movs	r3, #4
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_GPIO_Init+0x1ac>)
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(REMOTE_KILL_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4815      	ldr	r0, [pc, #84]	; (8001954 <MX_GPIO_Init+0x1b4>)
 80018fe:	f003 fd0f 	bl	8005320 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2008      	movs	r0, #8
 8001908:	f003 f965 	bl	8004bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800190c:	2008      	movs	r0, #8
 800190e:	f003 f97e 	bl	8004c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2009      	movs	r0, #9
 8001918:	f003 f95d 	bl	8004bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800191c:	2009      	movs	r0, #9
 800191e:	f003 f976 	bl	8004c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	2028      	movs	r0, #40	; 0x28
 8001928:	f003 f955 	bl	8004bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800192c:	2028      	movs	r0, #40	; 0x28
 800192e:	f003 f96e 	bl	8004c0e <HAL_NVIC_EnableIRQ>

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40020000 	.word	0x40020000
 8001944:	40020800 	.word	0x40020800
 8001948:	40020400 	.word	0x40020400
 800194c:	10210000 	.word	0x10210000
 8001950:	10110000 	.word	0x10110000
 8001954:	40020c00 	.word	0x40020c00

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <HAL_MspInit+0x4c>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_MspInit+0x4c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_MspInit+0x4c>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_MspInit+0x4c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	; 0x30
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a45      	ldr	r2, [pc, #276]	; (8001aec <HAL_ADC_MspInit+0x134>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d156      	bne.n	8001a88 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <HAL_ADC_MspInit+0x138>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a43      	ldr	r2, [pc, #268]	; (8001af0 <HAL_ADC_MspInit+0x138>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_ADC_MspInit+0x138>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_ADC_MspInit+0x138>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a3c      	ldr	r2, [pc, #240]	; (8001af0 <HAL_ADC_MspInit+0x138>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b3a      	ldr	r3, [pc, #232]	; (8001af0 <HAL_ADC_MspInit+0x138>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = VOLTM_BOOST_Pin|VOLTM_BATT_Pin;
 8001a12:	230c      	movs	r3, #12
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a16:	2303      	movs	r3, #3
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4619      	mov	r1, r3
 8001a24:	4833      	ldr	r0, [pc, #204]	; (8001af4 <HAL_ADC_MspInit+0x13c>)
 8001a26:	f003 fc7b 	bl	8005320 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a2a:	4b33      	ldr	r3, [pc, #204]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a2c:	4a33      	ldr	r2, [pc, #204]	; (8001afc <HAL_ADC_MspInit+0x144>)
 8001a2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a30:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a6a:	4823      	ldr	r0, [pc, #140]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a6c:	f003 f8ea 	bl	8004c44 <HAL_DMA_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001a76:	f7ff ff6f 	bl	8001958 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a1e      	ldr	r2, [pc, #120]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a7e:	639a      	str	r2, [r3, #56]	; 0x38
 8001a80:	4a1d      	ldr	r2, [pc, #116]	; (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a86:	e02c      	b.n	8001ae2 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_ADC_MspInit+0x148>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d127      	bne.n	8001ae2 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_ADC_MspInit+0x138>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <HAL_ADC_MspInit+0x138>)
 8001a9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <HAL_ADC_MspInit+0x138>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_ADC_MspInit+0x138>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_ADC_MspInit+0x138>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_ADC_MspInit+0x138>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = XLINE_Pin;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XLINE_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <HAL_ADC_MspInit+0x14c>)
 8001ade:	f003 fc1f 	bl	8005320 <HAL_GPIO_Init>
}
 8001ae2:	bf00      	nop
 8001ae4:	3730      	adds	r7, #48	; 0x30
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40012000 	.word	0x40012000
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	20000838 	.word	0x20000838
 8001afc:	40026410 	.word	0x40026410
 8001b00:	40012100 	.word	0x40012100
 8001b04:	40020400 	.word	0x40020400

08001b08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <HAL_I2C_MspInit+0xc4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d14b      	bne.n	8001bc2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_I2C_MspInit+0xc8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <HAL_I2C_MspInit+0xc8>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <HAL_I2C_MspInit+0xc8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <HAL_I2C_MspInit+0xc8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a20      	ldr	r2, [pc, #128]	; (8001bd0 <HAL_I2C_MspInit+0xc8>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <HAL_I2C_MspInit+0xc8>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = SDA_Pin;
 8001b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b68:	2312      	movs	r3, #18
 8001b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b74:	2304      	movs	r3, #4
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4815      	ldr	r0, [pc, #84]	; (8001bd4 <HAL_I2C_MspInit+0xcc>)
 8001b80:	f003 fbce 	bl	8005320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCL_Pin;
 8001b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8a:	2312      	movs	r3, #18
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b96:	2304      	movs	r3, #4
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <HAL_I2C_MspInit+0xd0>)
 8001ba2:	f003 fbbd 	bl	8005320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_I2C_MspInit+0xc8>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <HAL_I2C_MspInit+0xc8>)
 8001bb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_I2C_MspInit+0xc8>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001bc2:	bf00      	nop
 8001bc4:	3728      	adds	r7, #40	; 0x28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40005c00 	.word	0x40005c00
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020000 	.word	0x40020000

08001bdc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1f      	ldr	r2, [pc, #124]	; (8001c68 <HAL_TIM_PWM_MspInit+0x8c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10e      	bne.n	8001c0c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_TIM_PWM_MspInit+0x90>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <HAL_TIM_PWM_MspInit+0x90>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_TIM_PWM_MspInit+0x90>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c0a:	e026      	b.n	8001c5a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <HAL_TIM_PWM_MspInit+0x94>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10e      	bne.n	8001c34 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_TIM_PWM_MspInit+0x90>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <HAL_TIM_PWM_MspInit+0x90>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_TIM_PWM_MspInit+0x90>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
}
 8001c32:	e012      	b.n	8001c5a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <HAL_TIM_PWM_MspInit+0x98>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10d      	bne.n	8001c5a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_TIM_PWM_MspInit+0x90>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_TIM_PWM_MspInit+0x90>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <HAL_TIM_PWM_MspInit+0x90>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
}
 8001c5a:	bf00      	nop
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40000400 	.word	0x40000400
 8001c74:	40000800 	.word	0x40000800

08001c78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	; 0x30
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d14a      	bne.n	8001d30 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a3e      	ldr	r2, [pc, #248]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a37      	ldr	r2, [pc, #220]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_L_A_Pin;
 8001cee:	2320      	movs	r3, #32
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4825      	ldr	r0, [pc, #148]	; (8001da0 <HAL_TIM_Encoder_MspInit+0x128>)
 8001d0a:	f003 fb09 	bl	8005320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_L_B_Pin;
 8001d0e:	2308      	movs	r3, #8
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	481e      	ldr	r0, [pc, #120]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001d2a:	f003 faf9 	bl	8005320 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d2e:	e030      	b.n	8001d92 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_TIM_Encoder_MspInit+0x130>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d12b      	bne.n	8001d92 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x124>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_R_B_Pin|ENC_R_A_Pin;
 8001d72:	2303      	movs	r3, #3
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d82:	2302      	movs	r3, #2
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <HAL_TIM_Encoder_MspInit+0x128>)
 8001d8e:	f003 fac7 	bl	8005320 <HAL_GPIO_Init>
}
 8001d92:	bf00      	nop
 8001d94:	3730      	adds	r7, #48	; 0x30
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40000c00 	.word	0x40000c00

08001dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <HAL_TIM_Base_MspInit+0x48>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d115      	bne.n	8001dea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_TIM_Base_MspInit+0x4c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <HAL_TIM_Base_MspInit+0x4c>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_TIM_Base_MspInit+0x4c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	202d      	movs	r0, #45	; 0x2d
 8001de0:	f002 fef9 	bl	8004bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001de4:	202d      	movs	r0, #45	; 0x2d
 8001de6:	f002 ff12 	bl	8004c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40002000 	.word	0x40002000
 8001df8:	40023800 	.word	0x40023800

08001dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a37      	ldr	r2, [pc, #220]	; (8001ef8 <HAL_TIM_MspPostInit+0xfc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d11f      	bne.n	8001e5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b36      	ldr	r3, [pc, #216]	; (8001efc <HAL_TIM_MspPostInit+0x100>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a35      	ldr	r2, [pc, #212]	; (8001efc <HAL_TIM_MspPostInit+0x100>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b33      	ldr	r3, [pc, #204]	; (8001efc <HAL_TIM_MspPostInit+0x100>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	482a      	ldr	r0, [pc, #168]	; (8001f00 <HAL_TIM_MspPostInit+0x104>)
 8001e58:	f003 fa62 	bl	8005320 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e5c:	e047      	b.n	8001eee <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a28      	ldr	r2, [pc, #160]	; (8001f04 <HAL_TIM_MspPostInit+0x108>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d11e      	bne.n	8001ea6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_TIM_MspPostInit+0x100>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	4a22      	ldr	r2, [pc, #136]	; (8001efc <HAL_TIM_MspPostInit+0x100>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	6313      	str	r3, [r2, #48]	; 0x30
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_TIM_MspPostInit+0x100>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_L_PWM_Pin|FAN_R_PWM_Pin;
 8001e84:	23c0      	movs	r3, #192	; 0xc0
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e94:	2302      	movs	r3, #2
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	481a      	ldr	r0, [pc, #104]	; (8001f08 <HAL_TIM_MspPostInit+0x10c>)
 8001ea0:	f003 fa3e 	bl	8005320 <HAL_GPIO_Init>
}
 8001ea4:	e023      	b.n	8001eee <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <HAL_TIM_MspPostInit+0x110>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d11e      	bne.n	8001eee <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_TIM_MspPostInit+0x100>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	4a10      	ldr	r2, [pc, #64]	; (8001efc <HAL_TIM_MspPostInit+0x100>)
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_TIM_MspPostInit+0x100>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin|MOTOR_L_PWM_Pin;
 8001ecc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4809      	ldr	r0, [pc, #36]	; (8001f10 <HAL_TIM_MspPostInit+0x114>)
 8001eea:	f003 fa19 	bl	8005320 <HAL_GPIO_Init>
}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000
 8001f04:	40000400 	.word	0x40000400
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40020400 	.word	0x40020400

08001f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_UART_MspInit+0x84>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12c      	bne.n	8001f90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f40:	f043 0310 	orr.w	r3, r3, #16
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001f6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f80:	2307      	movs	r3, #7
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <HAL_UART_MspInit+0x8c>)
 8001f8c:	f003 f9c8 	bl	8005320 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f90:	bf00      	nop
 8001f92:	3728      	adds	r7, #40	; 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40011000 	.word	0x40011000
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <MemManage_Handler+0x4>

08001fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff8:	f001 ff50 	bl	8003e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002004:	2004      	movs	r0, #4
 8002006:	f003 fb71 	bl	80056ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  //REMTOE KILL ACTIVATED
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800200a:	2201      	movs	r2, #1
 800200c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <EXTI2_IRQHandler+0x30>)
 8002012:	f003 fb37 	bl	8005684 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <EXTI2_IRQHandler+0x30>)
 800201e:	f003 fb31 	bl	8005684 <HAL_GPIO_WritePin>
  fans_disable();
 8002022:	f000 f9ff 	bl	8002424 <fans_disable>
  control_loop_disable();
 8002026:	f000 f987 	bl	8002338 <control_loop_disable>


  /* USER CODE END EXTI2_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40020800 	.word	0x40020800

08002034 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002038:	2008      	movs	r0, #8
 800203a:	f003 fb57 	bl	80056ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  // Button might have been pressed when this interrupt is called
  // Software debounce
  if(!checking){
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <EXTI3_IRQHandler+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d105      	bne.n	8002052 <EXTI3_IRQHandler+0x1e>
		HAL_TIM_Base_Start_IT(&htim14);
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <EXTI3_IRQHandler+0x28>)
 8002048:	f004 fc29 	bl	800689e <HAL_TIM_Base_Start_IT>
		checking = 1;
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <EXTI3_IRQHandler+0x24>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000021c 	.word	0x2000021c
 800205c:	20000918 	.word	0x20000918

08002060 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002064:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002068:	f003 fb40 	bl	80056ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  //REMOTE START ACTIVATED
  if(HAL_GetTick() > 5000){
 800206c:	f001 ff2a 	bl	8003ec4 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	f241 3388 	movw	r3, #5000	; 0x1388
 8002076:	429a      	cmp	r2, r3
 8002078:	d909      	bls.n	800208e <EXTI15_10_IRQHandler+0x2e>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002080:	4804      	ldr	r0, [pc, #16]	; (8002094 <EXTI15_10_IRQHandler+0x34>)
 8002082:	f003 faff 	bl	8005684 <HAL_GPIO_WritePin>
		fans_enable();
 8002086:	f000 f9c1 	bl	800240c <fans_enable>
		control_loop_enable();
 800208a:	f000 f949 	bl	8002320 <control_loop_enable>
  }

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40020800 	.word	0x40020800

08002098 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800209c:	480c      	ldr	r0, [pc, #48]	; (80020d0 <TIM8_TRG_COM_TIM14_IRQHandler+0x38>)
 800209e:	f004 fd80 	bl	8006ba2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
  if(HAL_GPIO_ReadPin(BUTTON_SELECT_GPIO_Port, BUTTON_SELECT_Pin) == GPIO_PIN_RESET){
 80020a2:	2108      	movs	r1, #8
 80020a4:	480b      	ldr	r0, [pc, #44]	; (80020d4 <TIM8_TRG_COM_TIM14_IRQHandler+0x3c>)
 80020a6:	f003 fad5 	bl	8005654 <HAL_GPIO_ReadPin>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10c      	bne.n	80020ca <TIM8_TRG_COM_TIM14_IRQHandler+0x32>
		checking = 0;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim14);
 80020b6:	4806      	ldr	r0, [pc, #24]	; (80020d0 <TIM8_TRG_COM_TIM14_IRQHandler+0x38>)
 80020b8:	f004 fc15 	bl	80068e6 <HAL_TIM_Base_Stop_IT>
		oled_button_press();
 80020bc:	f000 fd80 	bl	8002bc0 <oled_button_press>
		counter++;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3301      	adds	r3, #1
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 80020c8:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000918 	.word	0x20000918
 80020d4:	40020800 	.word	0x40020800
 80020d8:	2000021c 	.word	0x2000021c
 80020dc:	20000220 	.word	0x20000220

080020e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <DMA2_Stream0_IRQHandler+0x10>)
 80020e6:	f002 feb3 	bl	8004e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000838 	.word	0x20000838

080020f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e00a      	b.n	800211c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002106:	f3af 8000 	nop.w
 800210a:	4601      	mov	r1, r0
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	60ba      	str	r2, [r7, #8]
 8002112:	b2ca      	uxtb	r2, r1
 8002114:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf0      	blt.n	8002106 <_read+0x12>
	}

return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e009      	b.n	8002154 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	60ba      	str	r2, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fead 	bl	8000ea8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf1      	blt.n	8002140 <_write+0x12>
	}
	return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_close>:

int _close(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
	return -1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218e:	605a      	str	r2, [r3, #4]
	return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_isatty>:

int _isatty(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
	return 1;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
	return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <_sbrk+0x50>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <_sbrk+0x16>
		heap_end = &end;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <_sbrk+0x50>)
 80021e2:	4a10      	ldr	r2, [pc, #64]	; (8002224 <_sbrk+0x54>)
 80021e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <_sbrk+0x50>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <_sbrk+0x50>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	466a      	mov	r2, sp
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d907      	bls.n	800220a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80021fa:	f005 fed7 	bl	8007fac <__errno>
 80021fe:	4602      	mov	r2, r0
 8002200:	230c      	movs	r3, #12
 8002202:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002204:	f04f 33ff 	mov.w	r3, #4294967295
 8002208:	e006      	b.n	8002218 <_sbrk+0x48>
	}

	heap_end += incr;
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <_sbrk+0x50>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	4a03      	ldr	r2, [pc, #12]	; (8002220 <_sbrk+0x50>)
 8002214:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000224 	.word	0x20000224
 8002224:	20000bf0 	.word	0x20000bf0

08002228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <SystemInit+0x28>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	4a07      	ldr	r2, [pc, #28]	; (8002250 <SystemInit+0x28>)
 8002234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <SystemInit+0x28>)
 800223e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002242:	609a      	str	r2, [r3, #8]
#endif
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <init_buzzer>:
  NOTE_GS5,2,

};


void init_buzzer(void){
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002258:	210c      	movs	r1, #12
 800225a:	4802      	ldr	r0, [pc, #8]	; (8002264 <init_buzzer+0x10>)
 800225c:	f004 fb9a 	bl	8006994 <HAL_TIM_PWM_Start>
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000898 	.word	0x20000898

08002268 <beep>:

void beep(int duration){
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    if(duration > 1000)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002276:	dd02      	ble.n	800227e <beep+0x16>
        duration = 1000;
 8002278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227c:	607b      	str	r3, [r7, #4]
    if(duration < 0)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	da01      	bge.n	8002288 <beep+0x20>
        duration = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	607b      	str	r3, [r7, #4]

    TIM1->CCR4 = 200;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <beep+0x3c>)
 800228a:	22c8      	movs	r2, #200	; 0xc8
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_Delay(duration);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4618      	mov	r0, r3
 8002292:	f001 fe23 	bl	8003edc <HAL_Delay>
    TIM1->CCR4 = 0;
 8002296:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <beep+0x3c>)
 8002298:	2200      	movs	r2, #0
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40010000 	.word	0x40010000

080022a8 <tone>:
 * Plays a frequency for a duration
 *
 * @param int frequency - Hertz [Hz] (MAX 16kHz)
 * @param int duration - miliseconds [ms]
 */
void tone(int frequency, int duration){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	//Check for devision by 0
	if(frequency == 0){
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d104      	bne.n	80022c2 <tone+0x1a>
		HAL_Delay(duration);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 fe0e 	bl	8003edc <HAL_Delay>
		return;
 80022c0:	e015      	b.n	80022ee <tone+0x46>
	}

	//Calculate prescaler value
	int prescalar = 16000000 / 1000 / frequency;
 80022c2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80022cc:	60fb      	str	r3, [r7, #12]
	TIM1->PSC = prescalar;
 80022ce:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <tone+0x4c>)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6293      	str	r3, [r2, #40]	; 0x28

	//Play tone
	TIM1->CCR4 = 200;
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <tone+0x4c>)
 80022d6:	22c8      	movs	r2, #200	; 0xc8
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(duration);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f001 fdfd 	bl	8003edc <HAL_Delay>
	TIM1->CCR4 = 0;
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <tone+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40

	//Base prescalar
	TIM1->PSC = 3;
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <tone+0x4c>)
 80022ea:	2203      	movs	r2, #3
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40010000 	.word	0x40010000

080022f8 <test_buzzer>:
	    // Wait for the specified duration before playing the next note.
	    HAL_Delay(noteDuration);
	  }
}

void test_buzzer(void){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
		tone(659,50);
 80022fc:	2132      	movs	r1, #50	; 0x32
 80022fe:	f240 2093 	movw	r0, #659	; 0x293
 8002302:	f7ff ffd1 	bl	80022a8 <tone>
		HAL_Delay(50);
 8002306:	2032      	movs	r0, #50	; 0x32
 8002308:	f001 fde8 	bl	8003edc <HAL_Delay>

		tone(659,50);
 800230c:	2132      	movs	r1, #50	; 0x32
 800230e:	f240 2093 	movw	r0, #659	; 0x293
 8002312:	f7ff ffc9 	bl	80022a8 <tone>
		HAL_Delay(50);
 8002316:	2032      	movs	r0, #50	; 0x32
 8002318:	f001 fde0 	bl	8003edc <HAL_Delay>
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}

08002320 <control_loop_enable>:
	return 0;
}

*/

void control_loop_enable(void){
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
	control_loop_enabled = 1;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <control_loop_enable+0x14>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	20000228 	.word	0x20000228

08002338 <control_loop_disable>:


void control_loop_disable(void){
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	motors_stop();
 800233c:	f000 f9ea 	bl	8002714 <motors_stop>
	control_loop_enabled = 0;
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <control_loop_disable+0x14>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000228 	.word	0x20000228

08002350 <control_loop>:



void control_loop(void){
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
	if(!control_loop_enabled){
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <control_loop+0x5c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d022      	beq.n	80023a4 <control_loop+0x54>
		return;
	}

	// The most basic control loop one can think of
	int error = xline_read_line();
 800235e:	f001 fc79 	bl	8003c54 <xline_read_line>
 8002362:	60f8      	str	r0, [r7, #12]

	int speed = Kp*error;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <control_loop+0x60>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237c:	ee17 3a90 	vmov	r3, s15
 8002380:	60bb      	str	r3, [r7, #8]

	int left_speed = base_speed - speed;
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <control_loop+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	607b      	str	r3, [r7, #4]
	int right_speed = base_speed + speed;
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <control_loop+0x64>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	4413      	add	r3, r2
 8002394:	603b      	str	r3, [r7, #0]

	motor_l_set_speed(left_speed);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f960 	bl	800265c <motor_l_set_speed>
	motor_r_set_speed(right_speed);
 800239c:	6838      	ldr	r0, [r7, #0]
 800239e:	f000 f98b 	bl	80026b8 <motor_r_set_speed>
 80023a2:	e000      	b.n	80023a6 <control_loop+0x56>
		return;
 80023a4:	bf00      	nop
}
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000228 	.word	0x20000228
 80023b0:	20000008 	.word	0x20000008
 80023b4:	20000004 	.word	0x20000004

080023b8 <init_fans>:
 * @brief Initialize fans
 *
 * Starts PWM timers and runs startup sequence required by the ESCs.
 * Startup/arming sequence is found in KISS_telemetry_protocol.
 */
void init_fans(void){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Right
 80023bc:	2104      	movs	r1, #4
 80023be:	4810      	ldr	r0, [pc, #64]	; (8002400 <init_fans+0x48>)
 80023c0:	f004 fae8 	bl	8006994 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Left
 80023c4:	2100      	movs	r1, #0
 80023c6:	480e      	ldr	r0, [pc, #56]	; (8002400 <init_fans+0x48>)
 80023c8:	f004 fae4 	bl	8006994 <HAL_TIM_PWM_Start>

	// Startup sequence
	// 1. Start arming by applying a OK signal (1000-2000 uS)
	// 2. Finish arming by applying 0 throttle (1500 uS)
	TIM3->CCR2 = 1600;
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <init_fans+0x4c>)
 80023ce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = 1600;
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <init_fans+0x4c>)
 80023d6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80023da:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(3000);
 80023dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023e0:	f001 fd7c 	bl	8003edc <HAL_Delay>

	TIM3->CCR2 = 1500;
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <init_fans+0x4c>)
 80023e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023ea:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = 1500;
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <init_fans+0x4c>)
 80023ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34

	// Do not enable user to set fan speed before "START" signal from remote is send
	fans_enabled = 0;
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <init_fans+0x50>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000770 	.word	0x20000770
 8002404:	40000400 	.word	0x40000400
 8002408:	20000958 	.word	0x20000958

0800240c <fans_enable>:


/**
 * @brief Enable fans
 */
void fans_enable(void){
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	fans_enabled = 1;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <fans_enable+0x14>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	20000958 	.word	0x20000958

08002424 <fans_disable>:


/**
 * @brief Disable fans
 */
void fans_disable(void){
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	fan_l_set_speed(0);
 8002428:	2000      	movs	r0, #0
 800242a:	f000 f8c3 	bl	80025b4 <fan_l_set_speed>
	fan_r_set_speed(0);
 800242e:	2000      	movs	r0, #0
 8002430:	f000 f8a4 	bl	800257c <fan_r_set_speed>
	fans_enabled = 0;
 8002434:	4b02      	ldr	r3, [pc, #8]	; (8002440 <fans_disable+0x1c>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000958 	.word	0x20000958

08002444 <test_fan>:
 * Forward = green, Backwards = red
 * Sequence:
 * 	1. Left forward, wait 1s, left backwards, wait 1s.
 * 	2. Right forward, wait 1s, right backwards, wait 1s.
 */
void test_fan(void){
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	fans_enable();
 8002448:	f7ff ffe0 	bl	800240c <fans_enable>
	//Left forward
	fan_l_set_speed(10);
 800244c:	200a      	movs	r0, #10
 800244e:	f000 f8b1 	bl	80025b4 <fan_l_set_speed>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8002452:	2201      	movs	r2, #1
 8002454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002458:	4833      	ldr	r0, [pc, #204]	; (8002528 <test_fan+0xe4>)
 800245a:	f003 f913 	bl	8005684 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800245e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002462:	f001 fd3b 	bl	8003edc <HAL_Delay>

	//Wait 1s
	fan_l_set_speed(0);
 8002466:	2000      	movs	r0, #0
 8002468:	f000 f8a4 	bl	80025b4 <fan_l_set_speed>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800246c:	2200      	movs	r2, #0
 800246e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002472:	482d      	ldr	r0, [pc, #180]	; (8002528 <test_fan+0xe4>)
 8002474:	f003 f906 	bl	8005684 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800247c:	f001 fd2e 	bl	8003edc <HAL_Delay>

	//Left backwards
	fan_l_set_speed(-10);
 8002480:	f06f 0009 	mvn.w	r0, #9
 8002484:	f000 f896 	bl	80025b4 <fan_l_set_speed>
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8002488:	2201      	movs	r2, #1
 800248a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800248e:	4826      	ldr	r0, [pc, #152]	; (8002528 <test_fan+0xe4>)
 8002490:	f003 f8f8 	bl	8005684 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002498:	f001 fd20 	bl	8003edc <HAL_Delay>

	//Wait 1s
	fan_l_set_speed(0);
 800249c:	2000      	movs	r0, #0
 800249e:	f000 f889 	bl	80025b4 <fan_l_set_speed>
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80024a2:	2200      	movs	r2, #0
 80024a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024a8:	481f      	ldr	r0, [pc, #124]	; (8002528 <test_fan+0xe4>)
 80024aa:	f003 f8eb 	bl	8005684 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80024ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024b2:	f001 fd13 	bl	8003edc <HAL_Delay>




	//Right forward
	fan_r_set_speed(10);
 80024b6:	200a      	movs	r0, #10
 80024b8:	f000 f860 	bl	800257c <fan_r_set_speed>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80024bc:	2201      	movs	r2, #1
 80024be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024c2:	4819      	ldr	r0, [pc, #100]	; (8002528 <test_fan+0xe4>)
 80024c4:	f003 f8de 	bl	8005684 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80024c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024cc:	f001 fd06 	bl	8003edc <HAL_Delay>

	//Wait 1s
	fan_r_set_speed(0);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f000 f853 	bl	800257c <fan_r_set_speed>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80024d6:	2200      	movs	r2, #0
 80024d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024dc:	4812      	ldr	r0, [pc, #72]	; (8002528 <test_fan+0xe4>)
 80024de:	f003 f8d1 	bl	8005684 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80024e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024e6:	f001 fcf9 	bl	8003edc <HAL_Delay>

	//Right backwards
	fan_r_set_speed(-10);
 80024ea:	f06f 0009 	mvn.w	r0, #9
 80024ee:	f000 f845 	bl	800257c <fan_r_set_speed>
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80024f2:	2201      	movs	r2, #1
 80024f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024f8:	480b      	ldr	r0, [pc, #44]	; (8002528 <test_fan+0xe4>)
 80024fa:	f003 f8c3 	bl	8005684 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80024fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002502:	f001 fceb 	bl	8003edc <HAL_Delay>

	//Wait 1s
	fan_r_set_speed(0);
 8002506:	2000      	movs	r0, #0
 8002508:	f000 f838 	bl	800257c <fan_r_set_speed>
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800250c:	2200      	movs	r2, #0
 800250e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002512:	4805      	ldr	r0, [pc, #20]	; (8002528 <test_fan+0xe4>)
 8002514:	f003 f8b6 	bl	8005684 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800251c:	f001 fcde 	bl	8003edc <HAL_Delay>
	fans_disable();
 8002520:	f7ff ff80 	bl	8002424 <fans_disable>
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40020800 	.word	0x40020800

0800252c <fan_limit_speed>:
 *
 * @param int speed - Unlimited speed
 *
 * @return int - Limited speed
 */
int fan_limit_speed(int speed){
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	if(speed > 100)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	dd01      	ble.n	800253e <fan_limit_speed+0x12>
		speed = 100;
 800253a:	2364      	movs	r3, #100	; 0x64
 800253c:	607b      	str	r3, [r7, #4]
	if(speed < -100)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8002544:	da02      	bge.n	800254c <fan_limit_speed+0x20>
		speed = -100;
 8002546:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800254a:	607b      	str	r3, [r7, #4]
	return speed;
 800254c:	687b      	ldr	r3, [r7, #4]
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <fan_convert_speed>:
 *
 * @param int speed - Desired speed
 *
 * @return int - Scaled timer value between [1000, 2000] (uS)
 */
int fan_convert_speed(int speed){
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
	return 1500 + speed * 5;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <fan_r_set_speed>:
 *
 * Will only spin fans if they are enabled
 *
 * @param int speed - Desired fan speed
 */
void fan_r_set_speed(int speed){
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	if(!fans_enabled){
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <fan_r_set_speed+0x30>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <fan_r_set_speed+0x28>
		return;
	}

	int limited_speed = fan_limit_speed(speed);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ffcd 	bl	800252c <fan_limit_speed>
 8002592:	60f8      	str	r0, [r7, #12]
	int CCR_val = fan_convert_speed(limited_speed);
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff ffe0 	bl	800255a <fan_convert_speed>
 800259a:	60b8      	str	r0, [r7, #8]
	TIM3->CCR2 = CCR_val;
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <fan_r_set_speed+0x34>)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	6393      	str	r3, [r2, #56]	; 0x38
 80025a2:	e000      	b.n	80025a6 <fan_r_set_speed+0x2a>
		return;
 80025a4:	bf00      	nop
}
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000958 	.word	0x20000958
 80025b0:	40000400 	.word	0x40000400

080025b4 <fan_l_set_speed>:
 *
 * Will only spin fans if they are enabled
 *
 * @param int speed - Desired fan speed
 */
void fan_l_set_speed(int speed){
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	if(!fans_enabled){
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <fan_l_set_speed+0x30>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00b      	beq.n	80025dc <fan_l_set_speed+0x28>
		return;
	}

	int limited_speed = fan_limit_speed(speed);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ffb1 	bl	800252c <fan_limit_speed>
 80025ca:	60f8      	str	r0, [r7, #12]
	int CCR_val = fan_convert_speed(limited_speed);
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f7ff ffc4 	bl	800255a <fan_convert_speed>
 80025d2:	60b8      	str	r0, [r7, #8]
	TIM3->CCR1 = CCR_val;
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <fan_l_set_speed+0x34>)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	6353      	str	r3, [r2, #52]	; 0x34
 80025da:	e000      	b.n	80025de <fan_l_set_speed+0x2a>
		return;
 80025dc:	bf00      	nop
}
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000958 	.word	0x20000958
 80025e8:	40000400 	.word	0x40000400

080025ec <init_motors>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

void init_motors(void){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
    // Start encoder inputs
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Right
 80025f0:	213c      	movs	r1, #60	; 0x3c
 80025f2:	4809      	ldr	r0, [pc, #36]	; (8002618 <init_motors+0x2c>)
 80025f4:	f004 fa9e 	bl	8006b34 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left
 80025f8:	213c      	movs	r1, #60	; 0x3c
 80025fa:	4808      	ldr	r0, [pc, #32]	; (800261c <init_motors+0x30>)
 80025fc:	f004 fa9a 	bl	8006b34 <HAL_TIM_Encoder_Start>

    // Start PWM generation for motors
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Right
 8002600:	2108      	movs	r1, #8
 8002602:	4807      	ldr	r0, [pc, #28]	; (8002620 <init_motors+0x34>)
 8002604:	f004 f9c6 	bl	8006994 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Left
 8002608:	210c      	movs	r1, #12
 800260a:	4805      	ldr	r0, [pc, #20]	; (8002620 <init_motors+0x34>)
 800260c:	f004 f9c2 	bl	8006994 <HAL_TIM_PWM_Start>


    motors_stop();
 8002610:	f000 f880 	bl	8002714 <motors_stop>
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000730 	.word	0x20000730
 800261c:	200008d8 	.word	0x200008d8
 8002620:	200006a8 	.word	0x200006a8

08002624 <limit_speed>:

int limit_speed(int speed){
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
    if(speed > 1000){
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002632:	dd03      	ble.n	800263c <limit_speed+0x18>
        speed = 1000;
 8002634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	e005      	b.n	8002648 <limit_speed+0x24>
    }else if(speed < -1000){
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002642:	da01      	bge.n	8002648 <limit_speed+0x24>
        speed = -1000;
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <limit_speed+0x34>)
 8002646:	607b      	str	r3, [r7, #4]
    }
    return speed;
 8002648:	687b      	ldr	r3, [r7, #4]
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	fffffc18 	.word	0xfffffc18

0800265c <motor_l_set_speed>:


void motor_l_set_speed(int speed){
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
    int limited_speed = limit_speed(speed);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ffdd 	bl	8002624 <limit_speed>
 800266a:	60f8      	str	r0, [r7, #12]

    if(limited_speed < 0){
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	da0d      	bge.n	800268e <motor_l_set_speed+0x32>
        limited_speed = -limited_speed;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	425b      	negs	r3, r3
 8002676:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(MOTOR_L_IN1_GPIO_Port, MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 8002678:	2200      	movs	r2, #0
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	480c      	ldr	r0, [pc, #48]	; (80026b0 <motor_l_set_speed+0x54>)
 800267e:	f003 f801 	bl	8005684 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR_L_IN2_GPIO_Port, MOTOR_L_IN2_Pin, GPIO_PIN_SET);
 8002682:	2201      	movs	r2, #1
 8002684:	2140      	movs	r1, #64	; 0x40
 8002686:	480a      	ldr	r0, [pc, #40]	; (80026b0 <motor_l_set_speed+0x54>)
 8002688:	f002 fffc 	bl	8005684 <HAL_GPIO_WritePin>
 800268c:	e009      	b.n	80026a2 <motor_l_set_speed+0x46>
    }else{
        HAL_GPIO_WritePin(MOTOR_L_IN1_GPIO_Port, MOTOR_L_IN1_Pin, GPIO_PIN_SET);
 800268e:	2201      	movs	r2, #1
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	4807      	ldr	r0, [pc, #28]	; (80026b0 <motor_l_set_speed+0x54>)
 8002694:	f002 fff6 	bl	8005684 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR_L_IN2_GPIO_Port, MOTOR_L_IN2_Pin, GPIO_PIN_RESET);
 8002698:	2200      	movs	r2, #0
 800269a:	2140      	movs	r1, #64	; 0x40
 800269c:	4804      	ldr	r0, [pc, #16]	; (80026b0 <motor_l_set_speed+0x54>)
 800269e:	f002 fff1 	bl	8005684 <HAL_GPIO_WritePin>
    }

    TIM4->CCR4 = limited_speed;
 80026a2:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <motor_l_set_speed+0x58>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40000800 	.word	0x40000800

080026b8 <motor_r_set_speed>:

void motor_r_set_speed(int speed){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
    int limited_speed = limit_speed(speed);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ffaf 	bl	8002624 <limit_speed>
 80026c6:	60f8      	str	r0, [r7, #12]

    if(limited_speed < 0){
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	da0d      	bge.n	80026ea <motor_r_set_speed+0x32>
        limited_speed = -limited_speed;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	425b      	negs	r3, r3
 80026d2:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(MOTOR_R_IN1_GPIO_Port, MOTOR_R_IN1_Pin, GPIO_PIN_RESET);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2120      	movs	r1, #32
 80026d8:	480c      	ldr	r0, [pc, #48]	; (800270c <motor_r_set_speed+0x54>)
 80026da:	f002 ffd3 	bl	8005684 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_R_IN2_GPIO_Port, MOTOR_R_IN2_Pin, GPIO_PIN_SET);
 80026de:	2201      	movs	r2, #1
 80026e0:	2110      	movs	r1, #16
 80026e2:	480a      	ldr	r0, [pc, #40]	; (800270c <motor_r_set_speed+0x54>)
 80026e4:	f002 ffce 	bl	8005684 <HAL_GPIO_WritePin>
 80026e8:	e009      	b.n	80026fe <motor_r_set_speed+0x46>
        
    }else{   
        HAL_GPIO_WritePin(MOTOR_R_IN1_GPIO_Port, MOTOR_R_IN1_Pin, GPIO_PIN_SET);
 80026ea:	2201      	movs	r2, #1
 80026ec:	2120      	movs	r1, #32
 80026ee:	4807      	ldr	r0, [pc, #28]	; (800270c <motor_r_set_speed+0x54>)
 80026f0:	f002 ffc8 	bl	8005684 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_R_IN2_GPIO_Port, MOTOR_R_IN2_Pin, GPIO_PIN_RESET);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2110      	movs	r1, #16
 80026f8:	4804      	ldr	r0, [pc, #16]	; (800270c <motor_r_set_speed+0x54>)
 80026fa:	f002 ffc3 	bl	8005684 <HAL_GPIO_WritePin>
    }

    TIM4->CCR3 = limited_speed;
 80026fe:	4a04      	ldr	r2, [pc, #16]	; (8002710 <motor_r_set_speed+0x58>)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40020400 	.word	0x40020400
 8002710:	40000800 	.word	0x40000800

08002714 <motors_stop>:

void motors_stop(void){
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
		// Put both motors in Hi-Z (high impedance output => rotate freely)

    TIM4->CCR3 = 0;
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <motors_stop+0x3c>)
 800271a:	2200      	movs	r2, #0
 800271c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_WritePin(MOTOR_R_IN1_GPIO_Port, MOTOR_R_IN1_Pin, GPIO_PIN_RESET);
 800271e:	2200      	movs	r2, #0
 8002720:	2120      	movs	r1, #32
 8002722:	480c      	ldr	r0, [pc, #48]	; (8002754 <motors_stop+0x40>)
 8002724:	f002 ffae 	bl	8005684 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_R_IN2_GPIO_Port, MOTOR_R_IN2_Pin, GPIO_PIN_RESET);
 8002728:	2200      	movs	r2, #0
 800272a:	2110      	movs	r1, #16
 800272c:	4809      	ldr	r0, [pc, #36]	; (8002754 <motors_stop+0x40>)
 800272e:	f002 ffa9 	bl	8005684 <HAL_GPIO_WritePin>

    TIM4->CCR4 = 0;
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <motors_stop+0x3c>)
 8002734:	2200      	movs	r2, #0
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_GPIO_WritePin(MOTOR_L_IN1_GPIO_Port, MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 8002738:	2200      	movs	r2, #0
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	4805      	ldr	r0, [pc, #20]	; (8002754 <motors_stop+0x40>)
 800273e:	f002 ffa1 	bl	8005684 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_L_IN2_GPIO_Port, MOTOR_L_IN2_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	2140      	movs	r1, #64	; 0x40
 8002746:	4803      	ldr	r0, [pc, #12]	; (8002754 <motors_stop+0x40>)
 8002748:	f002 ff9c 	bl	8005684 <HAL_GPIO_WritePin>
};
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40000800 	.word	0x40000800
 8002754:	40020400 	.word	0x40020400

08002758 <test_motors>:
/**
 * Test motors by spinning them and showing directions with LED. Forward = green, Backwards = red
 * 1. Left forward, wait 1s, left backwards, wait 1s.
 * 2. Right forward, wait 1s, right backwards, wait 1s.
 */
void test_motors(void){
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
		//Left forward
		motor_l_set_speed(100);
 800275c:	2064      	movs	r0, #100	; 0x64
 800275e:	f7ff ff7d 	bl	800265c <motor_l_set_speed>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8002762:	2201      	movs	r2, #1
 8002764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002768:	4832      	ldr	r0, [pc, #200]	; (8002834 <test_motors+0xdc>)
 800276a:	f002 ff8b 	bl	8005684 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800276e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002772:	f001 fbb3 	bl	8003edc <HAL_Delay>

		//Wait 1s
		motor_l_set_speed(0);
 8002776:	2000      	movs	r0, #0
 8002778:	f7ff ff70 	bl	800265c <motor_l_set_speed>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800277c:	2200      	movs	r2, #0
 800277e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002782:	482c      	ldr	r0, [pc, #176]	; (8002834 <test_motors+0xdc>)
 8002784:	f002 ff7e 	bl	8005684 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8002788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800278c:	f001 fba6 	bl	8003edc <HAL_Delay>

		//Left backwards
		motor_l_set_speed(-100);
 8002790:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8002794:	f7ff ff62 	bl	800265c <motor_l_set_speed>
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8002798:	2201      	movs	r2, #1
 800279a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800279e:	4825      	ldr	r0, [pc, #148]	; (8002834 <test_motors+0xdc>)
 80027a0:	f002 ff70 	bl	8005684 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80027a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027a8:	f001 fb98 	bl	8003edc <HAL_Delay>

		//Wait 1s
		motor_l_set_speed(0);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7ff ff55 	bl	800265c <motor_l_set_speed>
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80027b2:	2200      	movs	r2, #0
 80027b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027b8:	481e      	ldr	r0, [pc, #120]	; (8002834 <test_motors+0xdc>)
 80027ba:	f002 ff63 	bl	8005684 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80027be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027c2:	f001 fb8b 	bl	8003edc <HAL_Delay>




		//Right forward
		motor_r_set_speed(100);
 80027c6:	2064      	movs	r0, #100	; 0x64
 80027c8:	f7ff ff76 	bl	80026b8 <motor_r_set_speed>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80027cc:	2201      	movs	r2, #1
 80027ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027d2:	4818      	ldr	r0, [pc, #96]	; (8002834 <test_motors+0xdc>)
 80027d4:	f002 ff56 	bl	8005684 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80027d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027dc:	f001 fb7e 	bl	8003edc <HAL_Delay>

		//Wait 1s
		motor_r_set_speed(0);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7ff ff69 	bl	80026b8 <motor_r_set_speed>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027ec:	4811      	ldr	r0, [pc, #68]	; (8002834 <test_motors+0xdc>)
 80027ee:	f002 ff49 	bl	8005684 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80027f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027f6:	f001 fb71 	bl	8003edc <HAL_Delay>

		//Right backwards
		motor_r_set_speed(-100);
 80027fa:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80027fe:	f7ff ff5b 	bl	80026b8 <motor_r_set_speed>
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8002802:	2201      	movs	r2, #1
 8002804:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002808:	480a      	ldr	r0, [pc, #40]	; (8002834 <test_motors+0xdc>)
 800280a:	f002 ff3b 	bl	8005684 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800280e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002812:	f001 fb63 	bl	8003edc <HAL_Delay>

		//Wait 1s
		motor_r_set_speed(0);
 8002816:	2000      	movs	r0, #0
 8002818:	f7ff ff4e 	bl	80026b8 <motor_r_set_speed>
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800281c:	2200      	movs	r2, #0
 800281e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002822:	4804      	ldr	r0, [pc, #16]	; (8002834 <test_motors+0xdc>)
 8002824:	f002 ff2e 	bl	8005684 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8002828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800282c:	f001 fb56 	bl	8003edc <HAL_Delay>
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40020800 	.word	0x40020800

08002838 <oled_nr_items>:
/**
 * @brief Calculate number of items in current menu
 *
 * @return uint8_t - Number of items in current menu
 */
uint8_t oled_nr_items(void){
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
	uint8_t nr_items = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]

	if(curr_submenu == NULL){
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <oled_nr_items+0x58>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <oled_nr_items+0x2e>
		struct menu * sub_menu = main_menu.pNext;
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <oled_nr_items+0x5c>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 8002850:	e005      	b.n	800285e <oled_nr_items+0x26>
			nr_items++;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	3301      	adds	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
			sub_menu = sub_menu->pNext;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f6      	bne.n	8002852 <oled_nr_items+0x1a>
 8002864:	e00d      	b.n	8002882 <oled_nr_items+0x4a>
		}
	}else{
		struct menu_item * item = curr_submenu->head_item;
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <oled_nr_items+0x58>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 800286e:	e005      	b.n	800287c <oled_nr_items+0x44>
			nr_items++;
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	3301      	adds	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
			item = item->pNext;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f6      	bne.n	8002870 <oled_nr_items+0x38>
		}
	}

	return nr_items;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	20000238 	.word	0x20000238
 8002894:	20000a30 	.word	0x20000a30

08002898 <get_edited_val>:
 * Calculates a new updated variable value based on how much the right wheel has been turned.
 *
 * @param int val - Base value
 * @return int 		- Updated value
 */
int get_edited_val(int val){
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	return val + (int)TIM5->CNT / (float)4096 * 15;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <get_edited_val+0x48>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028b6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80028e4 <get_edited_val+0x4c>
 80028ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028be:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80028c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ce:	ee17 3a90 	vmov	r3, s15
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40000c00 	.word	0x40000c00
 80028e4:	45800000 	.word	0x45800000

080028e8 <init_oled>:
	* @brief Initialize the oled screen and a welcome screen. 
	*
	* Initializes the SSD1306 oled driver and draws a image to signal startup.
	* Also initializes all menus/menu items by setting name, callbacks and link them together
*/
void init_oled(void){
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80028ec:	f000 fd58 	bl	80033a0 <ssd1306_Init>
	
	ssd1306_DrawBitmap(case_head_bmp);
 80028f0:	4857      	ldr	r0, [pc, #348]	; (8002a50 <init_oled+0x168>)
 80028f2:	f000 fe6b 	bl	80035cc <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80028f6:	f000 fde3 	bl	80034c0 <ssd1306_UpdateScreen>

	HAL_Delay(500);
 80028fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028fe:	f001 faed 	bl	8003edc <HAL_Delay>
	
	// Show main menu
	active_screen = MENU;
 8002902:	4b54      	ldr	r3, [pc, #336]	; (8002a54 <init_oled+0x16c>)
 8002904:	2201      	movs	r2, #1
 8002906:	801a      	strh	r2, [r3, #0]
	
	// Main Menu
	strcpy(main_menu.name, "Main menu");
 8002908:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <init_oled+0x170>)
 800290a:	4a54      	ldr	r2, [pc, #336]	; (8002a5c <init_oled+0x174>)
 800290c:	ca07      	ldmia	r2, {r0, r1, r2}
 800290e:	c303      	stmia	r3!, {r0, r1}
 8002910:	801a      	strh	r2, [r3, #0]
	main_menu.head_item = NULL; 	// Main menu has no items, only sub menus
 8002912:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <init_oled+0x170>)
 8002914:	2200      	movs	r2, #0
 8002916:	615a      	str	r2, [r3, #20]
	main_menu.pNext  = &sub_menu_1; // Start of submenus
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <init_oled+0x170>)
 800291a:	4a51      	ldr	r2, [pc, #324]	; (8002a60 <init_oled+0x178>)
 800291c:	619a      	str	r2, [r3, #24]
	
	// Back to main menu item
	strcpy(menu_item_back_main.name, "Back");
 800291e:	4b51      	ldr	r3, [pc, #324]	; (8002a64 <init_oled+0x17c>)
 8002920:	4a51      	ldr	r2, [pc, #324]	; (8002a68 <init_oled+0x180>)
 8002922:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002926:	6018      	str	r0, [r3, #0]
 8002928:	3304      	adds	r3, #4
 800292a:	7019      	strb	r1, [r3, #0]
	menu_item_back_main.pNext = NULL;
 800292c:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <init_oled+0x17c>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
	menu_item_back_main.callback = go_back_main;
 8002932:	4b4c      	ldr	r3, [pc, #304]	; (8002a64 <init_oled+0x17c>)
 8002934:	4a4d      	ldr	r2, [pc, #308]	; (8002a6c <init_oled+0x184>)
 8002936:	615a      	str	r2, [r3, #20]
	
	// Sub menu 1 + items
	strcpy(sub_menu_1.name, "General");
 8002938:	4b49      	ldr	r3, [pc, #292]	; (8002a60 <init_oled+0x178>)
 800293a:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <init_oled+0x188>)
 800293c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002940:	e883 0003 	stmia.w	r3, {r0, r1}
	sub_menu_1.pNext = &sub_menu_2;
 8002944:	4b46      	ldr	r3, [pc, #280]	; (8002a60 <init_oled+0x178>)
 8002946:	4a4b      	ldr	r2, [pc, #300]	; (8002a74 <init_oled+0x18c>)
 8002948:	619a      	str	r2, [r3, #24]
	sub_menu_1.head_item = &menu_item_11;
 800294a:	4b45      	ldr	r3, [pc, #276]	; (8002a60 <init_oled+0x178>)
 800294c:	4a4a      	ldr	r2, [pc, #296]	; (8002a78 <init_oled+0x190>)
 800294e:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_11.name, "Peripheral info");
 8002950:	4a49      	ldr	r2, [pc, #292]	; (8002a78 <init_oled+0x190>)
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <init_oled+0x194>)
 8002954:	4614      	mov	r4, r2
 8002956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	menu_item_11.pNext = &menu_item_12;
 800295c:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <init_oled+0x190>)
 800295e:	4a48      	ldr	r2, [pc, #288]	; (8002a80 <init_oled+0x198>)
 8002960:	61da      	str	r2, [r3, #28]
	menu_item_11.callback = oled_show_info;
 8002962:	4b45      	ldr	r3, [pc, #276]	; (8002a78 <init_oled+0x190>)
 8002964:	4a47      	ldr	r2, [pc, #284]	; (8002a84 <init_oled+0x19c>)
 8002966:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_12.name, "Run tests");
 8002968:	4b45      	ldr	r3, [pc, #276]	; (8002a80 <init_oled+0x198>)
 800296a:	4a47      	ldr	r2, [pc, #284]	; (8002a88 <init_oled+0x1a0>)
 800296c:	ca07      	ldmia	r2, {r0, r1, r2}
 800296e:	c303      	stmia	r3!, {r0, r1}
 8002970:	801a      	strh	r2, [r3, #0]
	menu_item_12.pNext = &menu_item_13;
 8002972:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <init_oled+0x198>)
 8002974:	4a45      	ldr	r2, [pc, #276]	; (8002a8c <init_oled+0x1a4>)
 8002976:	61da      	str	r2, [r3, #28]
	menu_item_12.callback = oled_run_tests;
 8002978:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <init_oled+0x198>)
 800297a:	4a45      	ldr	r2, [pc, #276]	; (8002a90 <init_oled+0x1a8>)
 800297c:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_13.name, "Nyx & Iris");
 800297e:	4b43      	ldr	r3, [pc, #268]	; (8002a8c <init_oled+0x1a4>)
 8002980:	4a44      	ldr	r2, [pc, #272]	; (8002a94 <init_oled+0x1ac>)
 8002982:	ca07      	ldmia	r2, {r0, r1, r2}
 8002984:	c303      	stmia	r3!, {r0, r1}
 8002986:	801a      	strh	r2, [r3, #0]
 8002988:	3302      	adds	r3, #2
 800298a:	0c12      	lsrs	r2, r2, #16
 800298c:	701a      	strb	r2, [r3, #0]
	menu_item_13.pNext = &menu_item_back_main;
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <init_oled+0x1a4>)
 8002990:	4a34      	ldr	r2, [pc, #208]	; (8002a64 <init_oled+0x17c>)
 8002992:	61da      	str	r2, [r3, #28]
	menu_item_13.callback = oled_show_cats;
 8002994:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <init_oled+0x1a4>)
 8002996:	4a40      	ldr	r2, [pc, #256]	; (8002a98 <init_oled+0x1b0>)
 8002998:	615a      	str	r2, [r3, #20]
	
	// Sub menu 2 + items
	strcpy(sub_menu_2.name, "Edit vars");
 800299a:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <init_oled+0x18c>)
 800299c:	4a3f      	ldr	r2, [pc, #252]	; (8002a9c <init_oled+0x1b4>)
 800299e:	ca07      	ldmia	r2, {r0, r1, r2}
 80029a0:	c303      	stmia	r3!, {r0, r1}
 80029a2:	801a      	strh	r2, [r3, #0]
	sub_menu_2.pNext = &sub_menu_3;
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <init_oled+0x18c>)
 80029a6:	4a3e      	ldr	r2, [pc, #248]	; (8002aa0 <init_oled+0x1b8>)
 80029a8:	619a      	str	r2, [r3, #24]
	sub_menu_2.head_item = &menu_item_21;
 80029aa:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <init_oled+0x18c>)
 80029ac:	4a3d      	ldr	r2, [pc, #244]	; (8002aa4 <init_oled+0x1bc>)
 80029ae:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_21.name, "Kp");
 80029b0:	4b3c      	ldr	r3, [pc, #240]	; (8002aa4 <init_oled+0x1bc>)
 80029b2:	4a3d      	ldr	r2, [pc, #244]	; (8002aa8 <init_oled+0x1c0>)
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	4611      	mov	r1, r2
 80029b8:	8019      	strh	r1, [r3, #0]
 80029ba:	3302      	adds	r3, #2
 80029bc:	0c12      	lsrs	r2, r2, #16
 80029be:	701a      	strb	r2, [r3, #0]
	menu_item_21.pNext = &menu_item_22;
 80029c0:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <init_oled+0x1bc>)
 80029c2:	4a3a      	ldr	r2, [pc, #232]	; (8002aac <init_oled+0x1c4>)
 80029c4:	61da      	str	r2, [r3, #28]
	menu_item_21.pvar = &kp_test;
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <init_oled+0x1bc>)
 80029c8:	4a39      	ldr	r2, [pc, #228]	; (8002ab0 <init_oled+0x1c8>)
 80029ca:	619a      	str	r2, [r3, #24]
	menu_item_21.callback = oled_edit_var;
 80029cc:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <init_oled+0x1bc>)
 80029ce:	4a39      	ldr	r2, [pc, #228]	; (8002ab4 <init_oled+0x1cc>)
 80029d0:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_22.name, "Ki");
 80029d2:	4b36      	ldr	r3, [pc, #216]	; (8002aac <init_oled+0x1c4>)
 80029d4:	4a38      	ldr	r2, [pc, #224]	; (8002ab8 <init_oled+0x1d0>)
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	4611      	mov	r1, r2
 80029da:	8019      	strh	r1, [r3, #0]
 80029dc:	3302      	adds	r3, #2
 80029de:	0c12      	lsrs	r2, r2, #16
 80029e0:	701a      	strb	r2, [r3, #0]
	menu_item_22.pNext = &menu_item_23;
 80029e2:	4b32      	ldr	r3, [pc, #200]	; (8002aac <init_oled+0x1c4>)
 80029e4:	4a35      	ldr	r2, [pc, #212]	; (8002abc <init_oled+0x1d4>)
 80029e6:	61da      	str	r2, [r3, #28]
	menu_item_22.pvar = &ki_test;
 80029e8:	4b30      	ldr	r3, [pc, #192]	; (8002aac <init_oled+0x1c4>)
 80029ea:	4a35      	ldr	r2, [pc, #212]	; (8002ac0 <init_oled+0x1d8>)
 80029ec:	619a      	str	r2, [r3, #24]
	menu_item_22.callback = oled_edit_var;
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <init_oled+0x1c4>)
 80029f0:	4a30      	ldr	r2, [pc, #192]	; (8002ab4 <init_oled+0x1cc>)
 80029f2:	615a      	str	r2, [r3, #20]

	strcpy(menu_item_23.name, "Without callback");
 80029f4:	4a31      	ldr	r2, [pc, #196]	; (8002abc <init_oled+0x1d4>)
 80029f6:	4b33      	ldr	r3, [pc, #204]	; (8002ac4 <init_oled+0x1dc>)
 80029f8:	4614      	mov	r4, r2
 80029fa:	461d      	mov	r5, r3
 80029fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a00:	682b      	ldr	r3, [r5, #0]
 8002a02:	7023      	strb	r3, [r4, #0]
	menu_item_23.pNext = &menu_item_back_main;
 8002a04:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <init_oled+0x1d4>)
 8002a06:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <init_oled+0x17c>)
 8002a08:	61da      	str	r2, [r3, #28]


	// Sub menu 3 + items
	strcpy(sub_menu_3.name, "Run");
 8002a0a:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <init_oled+0x1b8>)
 8002a0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <init_oled+0x1e0>)
 8002a0e:	601a      	str	r2, [r3, #0]
	sub_menu_3.pNext = NULL;
 8002a10:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <init_oled+0x1b8>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	619a      	str	r2, [r3, #24]
	sub_menu_3.head_item = &menu_item_31;
 8002a16:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <init_oled+0x1b8>)
 8002a18:	4a2c      	ldr	r2, [pc, #176]	; (8002acc <init_oled+0x1e4>)
 8002a1a:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_31.name, "Calibrate XLINE");
 8002a1c:	4a2b      	ldr	r2, [pc, #172]	; (8002acc <init_oled+0x1e4>)
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <init_oled+0x1e8>)
 8002a20:	4614      	mov	r4, r2
 8002a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	menu_item_31.pNext = &menu_item_32;
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <init_oled+0x1e4>)
 8002a2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <init_oled+0x1ec>)
 8002a2c:	61da      	str	r2, [r3, #28]
	menu_item_31.callback = oled_calibrate_xline;
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <init_oled+0x1e4>)
 8002a30:	4a29      	ldr	r2, [pc, #164]	; (8002ad8 <init_oled+0x1f0>)
 8002a32:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_32.name, "Follow line");
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <init_oled+0x1ec>)
 8002a36:	4a29      	ldr	r2, [pc, #164]	; (8002adc <init_oled+0x1f4>)
 8002a38:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	menu_item_32.pNext = &menu_item_back_main;
 8002a3e:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <init_oled+0x1ec>)
 8002a40:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <init_oled+0x17c>)
 8002a42:	61da      	str	r2, [r3, #28]
	menu_item_32.callback = oled_run_line_follow;
 8002a44:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <init_oled+0x1ec>)
 8002a46:	4a26      	ldr	r2, [pc, #152]	; (8002ae0 <init_oled+0x1f8>)
 8002a48:	615a      	str	r2, [r3, #20]
}
 8002a4a:	bf00      	nop
 8002a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	0800ae74 	.word	0x0800ae74
 8002a54:	20000a28 	.word	0x20000a28
 8002a58:	20000a30 	.word	0x20000a30
 8002a5c:	0800abe4 	.word	0x0800abe4
 8002a60:	20000a4c 	.word	0x20000a4c
 8002a64:	20000ac8 	.word	0x20000ac8
 8002a68:	0800abf0 	.word	0x0800abf0
 8002a6c:	08003209 	.word	0x08003209
 8002a70:	0800abf8 	.word	0x0800abf8
 8002a74:	20000984 	.word	0x20000984
 8002a78:	20000a08 	.word	0x20000a08
 8002a7c:	0800ac00 	.word	0x0800ac00
 8002a80:	200009a0 	.word	0x200009a0
 8002a84:	08003255 	.word	0x08003255
 8002a88:	0800ac10 	.word	0x0800ac10
 8002a8c:	20000a68 	.word	0x20000a68
 8002a90:	0800329d 	.word	0x0800329d
 8002a94:	0800ac1c 	.word	0x0800ac1c
 8002a98:	08003229 	.word	0x08003229
 8002a9c:	0800ac28 	.word	0x0800ac28
 8002aa0:	20000ae8 	.word	0x20000ae8
 8002aa4:	20000aa8 	.word	0x20000aa8
 8002aa8:	0800ac34 	.word	0x0800ac34
 8002aac:	2000095c 	.word	0x2000095c
 8002ab0:	2000000c 	.word	0x2000000c
 8002ab4:	08003275 	.word	0x08003275
 8002ab8:	0800ac38 	.word	0x0800ac38
 8002abc:	200009e8 	.word	0x200009e8
 8002ac0:	20000010 	.word	0x20000010
 8002ac4:	0800ac3c 	.word	0x0800ac3c
 8002ac8:	006e7552 	.word	0x006e7552
 8002acc:	20000a88 	.word	0x20000a88
 8002ad0:	0800ac50 	.word	0x0800ac50
 8002ad4:	200009c4 	.word	0x200009c4
 8002ad8:	080032d5 	.word	0x080032d5
 8002adc:	0800ac60 	.word	0x0800ac60
 8002ae0:	0800330d 	.word	0x0800330d

08002ae4 <oled_update>:
	* @brief Update the OLED screen
	*	
	*	Checks flags and active screen to decide which screen gets rendered.
	*	Errors always have priority.
*/
void oled_update(void){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0

	//Check flag for going back to main menu and reset flag.
	if(go_back_main_flag){
 8002ae8:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <oled_update+0xa0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <oled_update+0x1e>
		curr_submenu = NULL;
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <oled_update+0xa4>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
		prev_submenu = NULL;
 8002af6:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <oled_update+0xa8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
		go_back_main_flag = 0;
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <oled_update+0xa0>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
	}

	if(active_screen == ERROR_){
 8002b02:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <oled_update+0xac>)
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <oled_update+0x2c>
		oled_error_screen();
 8002b0a:	f000 fa67 	bl	8002fdc <oled_error_screen>
 8002b0e:	e033      	b.n	8002b78 <oled_update+0x94>
	}else if(active_screen == MENU){
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <oled_update+0xac>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d102      	bne.n	8002b1e <oled_update+0x3a>
		oled_menu_screen();
 8002b18:	f000 f8e4 	bl	8002ce4 <oled_menu_screen>
 8002b1c:	e02c      	b.n	8002b78 <oled_update+0x94>
	}else if(active_screen == INFO){
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <oled_update+0xac>)
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d102      	bne.n	8002b2c <oled_update+0x48>
		oled_info_screen();
 8002b26:	f000 f9cb 	bl	8002ec0 <oled_info_screen>
 8002b2a:	e025      	b.n	8002b78 <oled_update+0x94>
	}else if(active_screen == IMAGE){
 8002b2c:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <oled_update+0xac>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d105      	bne.n	8002b40 <oled_update+0x5c>
		ssd1306_DrawBitmap(curr_image);
 8002b34:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <oled_update+0xb0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fd47 	bl	80035cc <ssd1306_DrawBitmap>
 8002b3e:	e01b      	b.n	8002b78 <oled_update+0x94>
	}else if(active_screen == EDIT_VAR){
 8002b40:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <oled_update+0xac>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d102      	bne.n	8002b4e <oled_update+0x6a>
		oled_edit_var_screen();
 8002b48:	f000 faa2 	bl	8003090 <oled_edit_var_screen>
 8002b4c:	e014      	b.n	8002b78 <oled_update+0x94>
	}else if(active_screen == MESSAGE){
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <oled_update+0xac>)
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	2b05      	cmp	r3, #5
 8002b54:	d102      	bne.n	8002b5c <oled_update+0x78>
		oled_message_screen();
 8002b56:	f000 fa85 	bl	8003064 <oled_message_screen>
 8002b5a:	e00d      	b.n	8002b78 <oled_update+0x94>
	}else if(active_screen == RUN){
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <oled_update+0xac>)
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	2b06      	cmp	r3, #6
 8002b62:	d102      	bne.n	8002b6a <oled_update+0x86>
		oled_run_line_follower_screen();
 8002b64:	f000 fad6 	bl	8003114 <oled_run_line_follower_screen>
 8002b68:	e006      	b.n	8002b78 <oled_update+0x94>
	}else if(active_screen == NOT_IMPLEMENTED){
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <oled_update+0xac>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8002b72:	d101      	bne.n	8002b78 <oled_update+0x94>
		oled_not_implemented_screen();
 8002b74:	f000 fb32 	bl	80031dc <oled_not_implemented_screen>
	}
	
	ssd1306_UpdateScreen();
 8002b78:	f000 fca2 	bl	80034c0 <ssd1306_UpdateScreen>

	// Check if button has been pressed
	oled_button_check();
 8002b7c:	f000 f82c 	bl	8002bd8 <oled_button_check>
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000230 	.word	0x20000230
 8002b88:	20000238 	.word	0x20000238
 8002b8c:	2000023c 	.word	0x2000023c
 8002b90:	20000a28 	.word	0x20000a28
 8002b94:	20000980 	.word	0x20000980

08002b98 <oled_clear_error>:


/**
	* @brief Clear the error and update the screen with normal information.
*/
void oled_clear_error(void){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ba2:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <oled_clear_error+0x20>)
 8002ba4:	f002 fd6e 	bl	8005684 <HAL_GPIO_WritePin>
	active_screen = MENU;
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <oled_clear_error+0x24>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	801a      	strh	r2, [r3, #0]
	oled_update();
 8002bae:	f7ff ff99 	bl	8002ae4 <oled_update>
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40020800 	.word	0x40020800
 8002bbc:	20000a28 	.word	0x20000a28

08002bc0 <oled_button_press>:


void oled_button_press(void){
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
	button_pressed_flag = 1;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <oled_button_press+0x14>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	2000022c 	.word	0x2000022c

08002bd8 <oled_button_check>:
/**
	* @brief Button press callback
	*
	* Decides what happens after a button click depending on state and cursor
*/
void oled_button_check(void){
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
	if(!button_pressed_flag){
 8002bde:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <oled_button_check+0xf0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d06b      	beq.n	8002cbe <oled_button_check+0xe6>
		return;
	}

	button_pressed_flag = 0;
 8002be6:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <oled_button_check+0xf0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
	if(active_screen == ERROR_){
 8002bec:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <oled_button_check+0xf4>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <oled_button_check+0x22>
		oled_clear_error();
 8002bf4:	f7ff ffd0 	bl	8002b98 <oled_clear_error>
		return;
 8002bf8:	e062      	b.n	8002cc0 <oled_button_check+0xe8>
	}else if(active_screen == EDIT_VAR){ // Save new edited value
 8002bfa:	4b34      	ldr	r3, [pc, #208]	; (8002ccc <oled_button_check+0xf4>)
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d10f      	bne.n	8002c22 <oled_button_check+0x4a>
		*edit_var->pvar = get_edited_val(*edit_var->pvar);
 8002c02:	4b33      	ldr	r3, [pc, #204]	; (8002cd0 <oled_button_check+0xf8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b31      	ldr	r3, [pc, #196]	; (8002cd0 <oled_button_check+0xf8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699c      	ldr	r4, [r3, #24]
 8002c10:	4610      	mov	r0, r2
 8002c12:	f7ff fe41 	bl	8002898 <get_edited_val>
 8002c16:	4603      	mov	r3, r0
 8002c18:	6023      	str	r3, [r4, #0]
		active_screen = MENU;
 8002c1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ccc <oled_button_check+0xf4>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	801a      	strh	r2, [r3, #0]
		return;
 8002c20:	e04e      	b.n	8002cc0 <oled_button_check+0xe8>
	}else if(active_screen != MENU){
 8002c22:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <oled_button_check+0xf4>)
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d003      	beq.n	8002c32 <oled_button_check+0x5a>
		active_screen = MENU;
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <oled_button_check+0xf4>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	801a      	strh	r2, [r3, #0]
		return;
 8002c30:	e046      	b.n	8002cc0 <oled_button_check+0xe8>
	}
	
	if(curr_submenu == NULL){ // Main menu => Select sub menu
 8002c32:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <oled_button_check+0xfc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d119      	bne.n	8002c6e <oled_button_check+0x96>
		struct menu * sub_menu = main_menu.pNext;
 8002c3a:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <oled_button_check+0x100>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	60fb      	str	r3, [r7, #12]
		int line = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 8002c44:	e00f      	b.n	8002c66 <oled_button_check+0x8e>
			if (line == cursor){
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <oled_button_check+0x104>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d103      	bne.n	8002c5a <oled_button_check+0x82>
				curr_submenu = sub_menu;
 8002c52:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <oled_button_check+0xfc>)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6013      	str	r3, [r2, #0]
				break;
 8002c58:	e02d      	b.n	8002cb6 <oled_button_check+0xde>
			}
			line++;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
			sub_menu = sub_menu->pNext;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	60fb      	str	r3, [r7, #12]
		while(sub_menu != NULL){
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ec      	bne.n	8002c46 <oled_button_check+0x6e>
 8002c6c:	e023      	b.n	8002cb6 <oled_button_check+0xde>
		}
	}else{ // Sub menu => Select menu item == cursor and run it's callback
		struct menu_item * item = curr_submenu->head_item;
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <oled_button_check+0xfc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	607b      	str	r3, [r7, #4]
		int line = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	603b      	str	r3, [r7, #0]
		while(item != NULL){
 8002c7a:	e019      	b.n	8002cb0 <oled_button_check+0xd8>
			if (line == cursor){
 8002c7c:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <oled_button_check+0x104>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d10d      	bne.n	8002ca4 <oled_button_check+0xcc>
				if(item->callback != NULL){
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <oled_button_check+0xc2>
					item->callback(item);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
				}else{
					active_screen = NOT_IMPLEMENTED;
				}
				break;
 8002c98:	e00d      	b.n	8002cb6 <oled_button_check+0xde>
					active_screen = NOT_IMPLEMENTED;
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <oled_button_check+0xf4>)
 8002c9c:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8002ca0:	801a      	strh	r2, [r3, #0]
				break;
 8002ca2:	e008      	b.n	8002cb6 <oled_button_check+0xde>
			}
			line++;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	603b      	str	r3, [r7, #0]
			item = item->pNext;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e2      	bne.n	8002c7c <oled_button_check+0xa4>
		}
	}
	TIM5->CNT = 0; // Reset counter to reset cursor location
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <oled_button_check+0x108>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24
 8002cbc:	e000      	b.n	8002cc0 <oled_button_check+0xe8>
		return;
 8002cbe:	bf00      	nop
}
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd90      	pop	{r4, r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	2000022c 	.word	0x2000022c
 8002ccc:	20000a28 	.word	0x20000a28
 8002cd0:	200009c0 	.word	0x200009c0
 8002cd4:	20000238 	.word	0x20000238
 8002cd8:	20000a30 	.word	0x20000a30
 8002cdc:	20000234 	.word	0x20000234
 8002ce0:	40000c00 	.word	0x40000c00

08002ce4 <oled_menu_screen>:
	* 
	* The cursor position can be changed by rotating the wheels
	* You can choose menu or function by pressing the "Select Button" on the board 
	*
*/
void oled_menu_screen(void){
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
	// Calculate cursor index based on encoder
	float revolutions = TIM5->CNT / (float)4096 * 10;
 8002cea:	4b6c      	ldr	r3, [pc, #432]	; (8002e9c <oled_menu_screen+0x1b8>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cf6:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8002ea0 <oled_menu_screen+0x1bc>
 8002cfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cfe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d06:	edc7 7a03 	vstr	s15, [r7, #12]
	cursor = (int) revolutions % oled_nr_items();
 8002d0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d12:	ee17 4a90 	vmov	r4, s15
 8002d16:	f7ff fd8f 	bl	8002838 <oled_nr_items>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	fb94 f2f3 	sdiv	r2, r4, r3
 8002d20:	fb03 f302 	mul.w	r3, r3, r2
 8002d24:	1ae3      	subs	r3, r4, r3
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	4b5e      	ldr	r3, [pc, #376]	; (8002ea4 <oled_menu_screen+0x1c0>)
 8002d2a:	701a      	strb	r2, [r3, #0]
	
	ssd1306_Fill(Black);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f000 fba5 	bl	800347c <ssd1306_Fill>
	
	if(curr_submenu == NULL){ // Main menu => draw sub menus
 8002d32:	4b5d      	ldr	r3, [pc, #372]	; (8002ea8 <oled_menu_screen+0x1c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d145      	bne.n	8002dc6 <oled_menu_screen+0xe2>
		ssd1306_SetCursor(0,0);
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f000 fd33 	bl	80037a8 <ssd1306_SetCursor>
		ssd1306_WriteString(main_menu.name, Font_11x18, White);
 8002d42:	4a5a      	ldr	r2, [pc, #360]	; (8002eac <oled_menu_screen+0x1c8>)
 8002d44:	2301      	movs	r3, #1
 8002d46:	ca06      	ldmia	r2, {r1, r2}
 8002d48:	4859      	ldr	r0, [pc, #356]	; (8002eb0 <oled_menu_screen+0x1cc>)
 8002d4a:	f000 fd07 	bl	800375c <ssd1306_WriteString>
		
		menu_t * sub_menu = main_menu.pNext; // Reference to first submenu
 8002d4e:	4b58      	ldr	r3, [pc, #352]	; (8002eb0 <oled_menu_screen+0x1cc>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	61fb      	str	r3, [r7, #28]
		int line = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61bb      	str	r3, [r7, #24]
		
		while(sub_menu != NULL){
 8002d58:	e031      	b.n	8002dbe <oled_menu_screen+0xda>
			if(line == cursor){ // Draw cursor
 8002d5a:	4b52      	ldr	r3, [pc, #328]	; (8002ea4 <oled_menu_screen+0x1c0>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d112      	bne.n	8002d8c <oled_menu_screen+0xa8>
				ssd1306_SetCursor(0, 18 + line*10);
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3312      	adds	r3, #18
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	4619      	mov	r1, r3
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f000 fd14 	bl	80037a8 <ssd1306_SetCursor>
				ssd1306_WriteString(">", Font_7x10, White);
 8002d80:	4a4c      	ldr	r2, [pc, #304]	; (8002eb4 <oled_menu_screen+0x1d0>)
 8002d82:	2301      	movs	r3, #1
 8002d84:	ca06      	ldmia	r2, {r1, r2}
 8002d86:	484c      	ldr	r0, [pc, #304]	; (8002eb8 <oled_menu_screen+0x1d4>)
 8002d88:	f000 fce8 	bl	800375c <ssd1306_WriteString>
			}
			ssd1306_SetCursor(14, 18 + line*10);
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	0092      	lsls	r2, r2, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3312      	adds	r3, #18
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	200e      	movs	r0, #14
 8002da2:	f000 fd01 	bl	80037a8 <ssd1306_SetCursor>
			ssd1306_WriteString(sub_menu->name, Font_7x10, White);
 8002da6:	69f8      	ldr	r0, [r7, #28]
 8002da8:	4a42      	ldr	r2, [pc, #264]	; (8002eb4 <oled_menu_screen+0x1d0>)
 8002daa:	2301      	movs	r3, #1
 8002dac:	ca06      	ldmia	r2, {r1, r2}
 8002dae:	f000 fcd5 	bl	800375c <ssd1306_WriteString>
			line++;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	3301      	adds	r3, #1
 8002db6:	61bb      	str	r3, [r7, #24]
			sub_menu = sub_menu->pNext;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	61fb      	str	r3, [r7, #28]
		while(sub_menu != NULL){
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ca      	bne.n	8002d5a <oled_menu_screen+0x76>
			}
			line++;
			item = item->pNext;
		}		
	}
}
 8002dc4:	e066      	b.n	8002e94 <oled_menu_screen+0x1b0>
		ssd1306_SetCursor(0,0);
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f000 fced 	bl	80037a8 <ssd1306_SetCursor>
		ssd1306_WriteString(curr_submenu->name, Font_11x18, White);
 8002dce:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <oled_menu_screen+0x1c4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	4a35      	ldr	r2, [pc, #212]	; (8002eac <oled_menu_screen+0x1c8>)
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	ca06      	ldmia	r2, {r1, r2}
 8002dda:	f000 fcbf 	bl	800375c <ssd1306_WriteString>
		menu_item_t * item = curr_submenu->head_item;
 8002dde:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <oled_menu_screen+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	617b      	str	r3, [r7, #20]
		int line = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
		while(item != NULL){
 8002dea:	e050      	b.n	8002e8e <oled_menu_screen+0x1aa>
			if (line == cursor){
 8002dec:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <oled_menu_screen+0x1c0>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d112      	bne.n	8002e1e <oled_menu_screen+0x13a>
				ssd1306_SetCursor(0, 18 + line*10);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	0092      	lsls	r2, r2, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3312      	adds	r3, #18
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f000 fccb 	bl	80037a8 <ssd1306_SetCursor>
				ssd1306_WriteString(">", Font_7x10, White);
 8002e12:	4a28      	ldr	r2, [pc, #160]	; (8002eb4 <oled_menu_screen+0x1d0>)
 8002e14:	2301      	movs	r3, #1
 8002e16:	ca06      	ldmia	r2, {r1, r2}
 8002e18:	4827      	ldr	r0, [pc, #156]	; (8002eb8 <oled_menu_screen+0x1d4>)
 8002e1a:	f000 fc9f 	bl	800375c <ssd1306_WriteString>
			ssd1306_SetCursor(14, 18 + line*10);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	0092      	lsls	r2, r2, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3312      	adds	r3, #18
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4619      	mov	r1, r3
 8002e32:	200e      	movs	r0, #14
 8002e34:	f000 fcb8 	bl	80037a8 <ssd1306_SetCursor>
			ssd1306_WriteString(item->name, Font_7x10, White);
 8002e38:	6978      	ldr	r0, [r7, #20]
 8002e3a:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <oled_menu_screen+0x1d0>)
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	ca06      	ldmia	r2, {r1, r2}
 8002e40:	f000 fc8c 	bl	800375c <ssd1306_WriteString>
			if(item->pvar != NULL){ // Show variable value
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01a      	beq.n	8002e82 <oled_menu_screen+0x19e>
				ssd1306_SetCursor(80, 18 + line*10);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	3312      	adds	r3, #18
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	4619      	mov	r1, r3
 8002e60:	2050      	movs	r0, #80	; 0x50
 8002e62:	f000 fca1 	bl	80037a8 <ssd1306_SetCursor>
				snprintf(buff, sizeof(buff), "%d", *item->pvar);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4638      	mov	r0, r7
 8002e6e:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <oled_menu_screen+0x1d8>)
 8002e70:	210a      	movs	r1, #10
 8002e72:	f005 fda5 	bl	80089c0 <sniprintf>
				ssd1306_WriteString(buff, Font_7x10, White);
 8002e76:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <oled_menu_screen+0x1d0>)
 8002e78:	4638      	mov	r0, r7
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	ca06      	ldmia	r2, {r1, r2}
 8002e7e:	f000 fc6d 	bl	800375c <ssd1306_WriteString>
			line++;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	3301      	adds	r3, #1
 8002e86:	613b      	str	r3, [r7, #16]
			item = item->pNext;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	617b      	str	r3, [r7, #20]
		while(item != NULL){
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ab      	bne.n	8002dec <oled_menu_screen+0x108>
}
 8002e94:	bf00      	nop
 8002e96:	3724      	adds	r7, #36	; 0x24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd90      	pop	{r4, r7, pc}
 8002e9c:	40000c00 	.word	0x40000c00
 8002ea0:	45800000 	.word	0x45800000
 8002ea4:	20000234 	.word	0x20000234
 8002ea8:	20000238 	.word	0x20000238
 8002eac:	2000001c 	.word	0x2000001c
 8002eb0:	20000a30 	.word	0x20000a30
 8002eb4:	20000014 	.word	0x20000014
 8002eb8:	0800ac6c 	.word	0x0800ac6c
 8002ebc:	0800ac70 	.word	0x0800ac70

08002ec0 <oled_info_screen>:


/**
	* @brief Show an screen with general info about peripherals.
*/
void oled_info_screen(){
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b093      	sub	sp, #76	; 0x4c
 8002ec4:	af02      	add	r7, sp, #8
	char buff[60];

	ssd1306_Fill(Black);
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f000 fad8 	bl	800347c <ssd1306_Fill>
	ssd1306_SetCursor((128-4*10)/2,0);
 8002ecc:	2100      	movs	r1, #0
 8002ece:	202c      	movs	r0, #44	; 0x2c
 8002ed0:	f000 fc6a 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString("INFO", Font_7x10, White);
 8002ed4:	4a39      	ldr	r2, [pc, #228]	; (8002fbc <oled_info_screen+0xfc>)
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	ca06      	ldmia	r2, {r1, r2}
 8002eda:	4839      	ldr	r0, [pc, #228]	; (8002fc0 <oled_info_screen+0x100>)
 8002edc:	f000 fc3e 	bl	800375c <ssd1306_WriteString>


	snprintf(buff, sizeof(buff), "Battery:  %5.2f V", GET_voltage_battery());
 8002ee0:	f000 fce4 	bl	80038ac <GET_voltage_battery>
 8002ee4:	ee10 3a10 	vmov	r3, s0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fb2d 	bl	8000548 <__aeabi_f2d>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	1d38      	adds	r0, r7, #4
 8002ef4:	e9cd 3400 	strd	r3, r4, [sp]
 8002ef8:	4a32      	ldr	r2, [pc, #200]	; (8002fc4 <oled_info_screen+0x104>)
 8002efa:	213c      	movs	r1, #60	; 0x3c
 8002efc:	f005 fd60 	bl	80089c0 <sniprintf>
	ssd1306_SetCursor(0,10);
 8002f00:	210a      	movs	r1, #10
 8002f02:	2000      	movs	r0, #0
 8002f04:	f000 fc50 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 8002f08:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <oled_info_screen+0xfc>)
 8002f0a:	1d38      	adds	r0, r7, #4
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	ca06      	ldmia	r2, {r1, r2}
 8002f10:	f000 fc24 	bl	800375c <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "Boost:    %5.2f V", GET_voltage_boost());
 8002f14:	f000 fcdc 	bl	80038d0 <GET_voltage_boost>
 8002f18:	ee10 3a10 	vmov	r3, s0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fb13 	bl	8000548 <__aeabi_f2d>
 8002f22:	4603      	mov	r3, r0
 8002f24:	460c      	mov	r4, r1
 8002f26:	1d38      	adds	r0, r7, #4
 8002f28:	e9cd 3400 	strd	r3, r4, [sp]
 8002f2c:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <oled_info_screen+0x108>)
 8002f2e:	213c      	movs	r1, #60	; 0x3c
 8002f30:	f005 fd46 	bl	80089c0 <sniprintf>
	ssd1306_SetCursor(0,20);
 8002f34:	2114      	movs	r1, #20
 8002f36:	2000      	movs	r0, #0
 8002f38:	f000 fc36 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <oled_info_screen+0xfc>)
 8002f3e:	1d38      	adds	r0, r7, #4
 8002f40:	2301      	movs	r3, #1
 8002f42:	ca06      	ldmia	r2, {r1, r2}
 8002f44:	f000 fc0a 	bl	800375c <ssd1306_WriteString>


	snprintf(buff, sizeof(buff), "Enc. R:   %5d", (int)TIM5->CNT);
 8002f48:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <oled_info_screen+0x10c>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	1d38      	adds	r0, r7, #4
 8002f4e:	4a20      	ldr	r2, [pc, #128]	; (8002fd0 <oled_info_screen+0x110>)
 8002f50:	213c      	movs	r1, #60	; 0x3c
 8002f52:	f005 fd35 	bl	80089c0 <sniprintf>
	ssd1306_SetCursor(0,30);
 8002f56:	211e      	movs	r1, #30
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f000 fc25 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 8002f5e:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <oled_info_screen+0xfc>)
 8002f60:	1d38      	adds	r0, r7, #4
 8002f62:	2301      	movs	r3, #1
 8002f64:	ca06      	ldmia	r2, {r1, r2}
 8002f66:	f000 fbf9 	bl	800375c <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "Enc. L:   %5d", (int)TIM2->CNT);
 8002f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	1d38      	adds	r0, r7, #4
 8002f72:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <oled_info_screen+0x114>)
 8002f74:	213c      	movs	r1, #60	; 0x3c
 8002f76:	f005 fd23 	bl	80089c0 <sniprintf>
	ssd1306_SetCursor(0,40);
 8002f7a:	2128      	movs	r1, #40	; 0x28
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f000 fc13 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 8002f82:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <oled_info_screen+0xfc>)
 8002f84:	1d38      	adds	r0, r7, #4
 8002f86:	2301      	movs	r3, #1
 8002f88:	ca06      	ldmia	r2, {r1, r2}
 8002f8a:	f000 fbe7 	bl	800375c <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "XLINE:    %5d", xline_read_line());
 8002f8e:	f000 fe61 	bl	8003c54 <xline_read_line>
 8002f92:	4603      	mov	r3, r0
 8002f94:	1d38      	adds	r0, r7, #4
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <oled_info_screen+0x118>)
 8002f98:	213c      	movs	r1, #60	; 0x3c
 8002f9a:	f005 fd11 	bl	80089c0 <sniprintf>
	ssd1306_SetCursor(0,50);
 8002f9e:	2132      	movs	r1, #50	; 0x32
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f000 fc01 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 8002fa6:	4a05      	ldr	r2, [pc, #20]	; (8002fbc <oled_info_screen+0xfc>)
 8002fa8:	1d38      	adds	r0, r7, #4
 8002faa:	2301      	movs	r3, #1
 8002fac:	ca06      	ldmia	r2, {r1, r2}
 8002fae:	f000 fbd5 	bl	800375c <ssd1306_WriteString>
}
 8002fb2:	bf00      	nop
 8002fb4:	3744      	adds	r7, #68	; 0x44
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd90      	pop	{r4, r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000014 	.word	0x20000014
 8002fc0:	0800ac74 	.word	0x0800ac74
 8002fc4:	0800ac7c 	.word	0x0800ac7c
 8002fc8:	0800ac90 	.word	0x0800ac90
 8002fcc:	40000c00 	.word	0x40000c00
 8002fd0:	0800aca4 	.word	0x0800aca4
 8002fd4:	0800acb4 	.word	0x0800acb4
 8002fd8:	0800acc4 	.word	0x0800acc4

08002fdc <oled_error_screen>:
	* @brief Draws error screen
	*
	* Private function to draw error screen and beep buzzer.
	* Keep the error messages short and concise, e.g "Low batt voltage", MAX 18 characters.
*/
void oled_error_screen(void){
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
	// Status LED RED + Double beep
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fe6:	4819      	ldr	r0, [pc, #100]	; (800304c <oled_error_screen+0x70>)
 8002fe8:	f002 fb4c 	bl	8005684 <HAL_GPIO_WritePin>
	beep(50);
 8002fec:	2032      	movs	r0, #50	; 0x32
 8002fee:	f7ff f93b 	bl	8002268 <beep>
	HAL_Delay(50);
 8002ff2:	2032      	movs	r0, #50	; 0x32
 8002ff4:	f000 ff72 	bl	8003edc <HAL_Delay>
	beep(50);
 8002ff8:	2032      	movs	r0, #50	; 0x32
 8002ffa:	f7ff f935 	bl	8002268 <beep>
	HAL_Delay(50);
 8002ffe:	2032      	movs	r0, #50	; 0x32
 8003000:	f000 ff6c 	bl	8003edc <HAL_Delay>

	ssd1306_Fill(White);
 8003004:	2001      	movs	r0, #1
 8003006:	f000 fa39 	bl	800347c <ssd1306_Fill>
	ssd1306_SetCursor((128-5*11)/2, 0);
 800300a:	2100      	movs	r1, #0
 800300c:	2024      	movs	r0, #36	; 0x24
 800300e:	f000 fbcb 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString("ERROR", Font_11x18, Black);
 8003012:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <oled_error_screen+0x74>)
 8003014:	2300      	movs	r3, #0
 8003016:	ca06      	ldmia	r2, {r1, r2}
 8003018:	480e      	ldr	r0, [pc, #56]	; (8003054 <oled_error_screen+0x78>)
 800301a:	f000 fb9f 	bl	800375c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 20);
 800301e:	2114      	movs	r1, #20
 8003020:	2000      	movs	r0, #0
 8003022:	f000 fbc1 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString(error_message, Font_7x10, Black);
 8003026:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <oled_error_screen+0x7c>)
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	4a0c      	ldr	r2, [pc, #48]	; (800305c <oled_error_screen+0x80>)
 800302c:	2300      	movs	r3, #0
 800302e:	ca06      	ldmia	r2, {r1, r2}
 8003030:	f000 fb94 	bl	800375c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 50);
 8003034:	2132      	movs	r1, #50	; 0x32
 8003036:	2000      	movs	r0, #0
 8003038:	f000 fbb6 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString("Press button", Font_7x10, Black);
 800303c:	4a07      	ldr	r2, [pc, #28]	; (800305c <oled_error_screen+0x80>)
 800303e:	2300      	movs	r3, #0
 8003040:	ca06      	ldmia	r2, {r1, r2}
 8003042:	4807      	ldr	r0, [pc, #28]	; (8003060 <oled_error_screen+0x84>)
 8003044:	f000 fb8a 	bl	800375c <ssd1306_WriteString>
	//HAL_Delay(1000); // Only for beeping every 1s
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40020800 	.word	0x40020800
 8003050:	2000001c 	.word	0x2000001c
 8003054:	0800acd4 	.word	0x0800acd4
 8003058:	200009e4 	.word	0x200009e4
 800305c:	20000014 	.word	0x20000014
 8003060:	0800acdc 	.word	0x0800acdc

08003064 <oled_message_screen>:

void oled_message_screen(void){
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
	//oled_disable();
	ssd1306_Fill(Black);
 8003068:	2000      	movs	r0, #0
 800306a:	f000 fa07 	bl	800347c <ssd1306_Fill>
	ssd1306_SetCursor(0, 32);
 800306e:	2120      	movs	r1, #32
 8003070:	2000      	movs	r0, #0
 8003072:	f000 fb99 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString(disp_message, Font_7x10, White);
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <oled_message_screen+0x24>)
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	4a04      	ldr	r2, [pc, #16]	; (800308c <oled_message_screen+0x28>)
 800307c:	2301      	movs	r3, #1
 800307e:	ca06      	ldmia	r2, {r1, r2}
 8003080:	f000 fb6c 	bl	800375c <ssd1306_WriteString>
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000a2c 	.word	0x20000a2c
 800308c:	20000014 	.word	0x20000014

08003090 <oled_edit_var_screen>:


/**
 * @brief Show edit variable screen
 */
void oled_edit_var_screen(void){
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
	int new_val = get_edited_val(*edit_var->pvar);
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <oled_edit_var_screen+0x70>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fbfa 	bl	8002898 <get_edited_val>
 80030a4:	60f8      	str	r0, [r7, #12]

	char buff[10];

	ssd1306_Fill(Black);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f000 f9e8 	bl	800347c <ssd1306_Fill>
	ssd1306_SetCursor(0,0);
 80030ac:	2100      	movs	r1, #0
 80030ae:	2000      	movs	r0, #0
 80030b0:	f000 fb7a 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString("Edit", Font_11x18, White);
 80030b4:	4a13      	ldr	r2, [pc, #76]	; (8003104 <oled_edit_var_screen+0x74>)
 80030b6:	2301      	movs	r3, #1
 80030b8:	ca06      	ldmia	r2, {r1, r2}
 80030ba:	4813      	ldr	r0, [pc, #76]	; (8003108 <oled_edit_var_screen+0x78>)
 80030bc:	f000 fb4e 	bl	800375c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 40);
 80030c0:	2128      	movs	r1, #40	; 0x28
 80030c2:	2000      	movs	r0, #0
 80030c4:	f000 fb70 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString(edit_var->name, Font_7x10, White);
 80030c8:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <oled_edit_var_screen+0x70>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	4a0f      	ldr	r2, [pc, #60]	; (800310c <oled_edit_var_screen+0x7c>)
 80030d0:	2301      	movs	r3, #1
 80030d2:	ca06      	ldmia	r2, {r1, r2}
 80030d4:	f000 fb42 	bl	800375c <ssd1306_WriteString>

	ssd1306_SetCursor(80, 40);
 80030d8:	2128      	movs	r1, #40	; 0x28
 80030da:	2050      	movs	r0, #80	; 0x50
 80030dc:	f000 fb64 	bl	80037a8 <ssd1306_SetCursor>
	snprintf(buff, sizeof(buff), "%d", new_val);
 80030e0:	4638      	mov	r0, r7
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <oled_edit_var_screen+0x80>)
 80030e6:	210a      	movs	r1, #10
 80030e8:	f005 fc6a 	bl	80089c0 <sniprintf>
	ssd1306_WriteString(buff, Font_7x10, White);
 80030ec:	4a07      	ldr	r2, [pc, #28]	; (800310c <oled_edit_var_screen+0x7c>)
 80030ee:	4638      	mov	r0, r7
 80030f0:	2301      	movs	r3, #1
 80030f2:	ca06      	ldmia	r2, {r1, r2}
 80030f4:	f000 fb32 	bl	800375c <ssd1306_WriteString>
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	200009c0 	.word	0x200009c0
 8003104:	2000001c 	.word	0x2000001c
 8003108:	0800acec 	.word	0x0800acec
 800310c:	20000014 	.word	0x20000014
 8003110:	0800ac70 	.word	0x0800ac70

08003114 <oled_run_line_follower_screen>:

void oled_run_line_follower_screen(void){
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800311a:	2000      	movs	r0, #0
 800311c:	f000 f9ae 	bl	800347c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8003120:	2100      	movs	r1, #0
 8003122:	2000      	movs	r0, #0
 8003124:	f000 fb40 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString("Follow line", Font_7x10, White);
 8003128:	4a24      	ldr	r2, [pc, #144]	; (80031bc <oled_run_line_follower_screen+0xa8>)
 800312a:	2301      	movs	r3, #1
 800312c:	ca06      	ldmia	r2, {r1, r2}
 800312e:	4824      	ldr	r0, [pc, #144]	; (80031c0 <oled_run_line_follower_screen+0xac>)
 8003130:	f000 fb14 	bl	800375c <ssd1306_WriteString>

	if(control_loop_enabled){
 8003134:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <oled_run_line_follower_screen+0xb0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d026      	beq.n	800318a <oled_run_line_follower_screen+0x76>
		char buff[20];

		ssd1306_SetCursor(0, 20);
 800313c:	2114      	movs	r1, #20
 800313e:	2000      	movs	r0, #0
 8003140:	f000 fb32 	bl	80037a8 <ssd1306_SetCursor>
		ssd1306_WriteString("Running control", Font_7x10, White);
 8003144:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <oled_run_line_follower_screen+0xa8>)
 8003146:	2301      	movs	r3, #1
 8003148:	ca06      	ldmia	r2, {r1, r2}
 800314a:	481f      	ldr	r0, [pc, #124]	; (80031c8 <oled_run_line_follower_screen+0xb4>)
 800314c:	f000 fb06 	bl	800375c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 30);
 8003150:	211e      	movs	r1, #30
 8003152:	2000      	movs	r0, #0
 8003154:	f000 fb28 	bl	80037a8 <ssd1306_SetCursor>
		ssd1306_WriteString("loop", Font_7x10, White);
 8003158:	4a18      	ldr	r2, [pc, #96]	; (80031bc <oled_run_line_follower_screen+0xa8>)
 800315a:	2301      	movs	r3, #1
 800315c:	ca06      	ldmia	r2, {r1, r2}
 800315e:	481b      	ldr	r0, [pc, #108]	; (80031cc <oled_run_line_follower_screen+0xb8>)
 8003160:	f000 fafc 	bl	800375c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 50);
 8003164:	2132      	movs	r1, #50	; 0x32
 8003166:	2000      	movs	r0, #0
 8003168:	f000 fb1e 	bl	80037a8 <ssd1306_SetCursor>
		snprintf(buff, sizeof(buff), "XLINE:    %5d", xline_read_line());
 800316c:	f000 fd72 	bl	8003c54 <xline_read_line>
 8003170:	4603      	mov	r3, r0
 8003172:	1d38      	adds	r0, r7, #4
 8003174:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <oled_run_line_follower_screen+0xbc>)
 8003176:	2114      	movs	r1, #20
 8003178:	f005 fc22 	bl	80089c0 <sniprintf>
		ssd1306_WriteString(buff, Font_7x10, White);
 800317c:	4a0f      	ldr	r2, [pc, #60]	; (80031bc <oled_run_line_follower_screen+0xa8>)
 800317e:	1d38      	adds	r0, r7, #4
 8003180:	2301      	movs	r3, #1
 8003182:	ca06      	ldmia	r2, {r1, r2}
 8003184:	f000 faea 	bl	800375c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 30);
		ssd1306_WriteString("Waiting for remote", Font_7x10, White);
		ssd1306_SetCursor(0, 40);
		ssd1306_WriteString("start signal.", Font_7x10, White);
	}
}
 8003188:	e013      	b.n	80031b2 <oled_run_line_follower_screen+0x9e>
		ssd1306_SetCursor(0, 30);
 800318a:	211e      	movs	r1, #30
 800318c:	2000      	movs	r0, #0
 800318e:	f000 fb0b 	bl	80037a8 <ssd1306_SetCursor>
		ssd1306_WriteString("Waiting for remote", Font_7x10, White);
 8003192:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <oled_run_line_follower_screen+0xa8>)
 8003194:	2301      	movs	r3, #1
 8003196:	ca06      	ldmia	r2, {r1, r2}
 8003198:	480e      	ldr	r0, [pc, #56]	; (80031d4 <oled_run_line_follower_screen+0xc0>)
 800319a:	f000 fadf 	bl	800375c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 40);
 800319e:	2128      	movs	r1, #40	; 0x28
 80031a0:	2000      	movs	r0, #0
 80031a2:	f000 fb01 	bl	80037a8 <ssd1306_SetCursor>
		ssd1306_WriteString("start signal.", Font_7x10, White);
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <oled_run_line_follower_screen+0xa8>)
 80031a8:	2301      	movs	r3, #1
 80031aa:	ca06      	ldmia	r2, {r1, r2}
 80031ac:	480a      	ldr	r0, [pc, #40]	; (80031d8 <oled_run_line_follower_screen+0xc4>)
 80031ae:	f000 fad5 	bl	800375c <ssd1306_WriteString>
}
 80031b2:	bf00      	nop
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000014 	.word	0x20000014
 80031c0:	0800ac60 	.word	0x0800ac60
 80031c4:	20000228 	.word	0x20000228
 80031c8:	0800acf4 	.word	0x0800acf4
 80031cc:	0800ad04 	.word	0x0800ad04
 80031d0:	0800acc4 	.word	0x0800acc4
 80031d4:	0800ad0c 	.word	0x0800ad0c
 80031d8:	0800ad20 	.word	0x0800ad20

080031dc <oled_not_implemented_screen>:


/**
 * @brief Show "not implemented" screen
 */
void oled_not_implemented_screen(void){
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f000 f94b 	bl	800347c <ssd1306_Fill>
	ssd1306_SetCursor((128-15*7)/2, 32);
 80031e6:	2120      	movs	r1, #32
 80031e8:	200b      	movs	r0, #11
 80031ea:	f000 fadd 	bl	80037a8 <ssd1306_SetCursor>
	ssd1306_WriteString("NOT IMPLEMENTED", Font_7x10, White);
 80031ee:	4a04      	ldr	r2, [pc, #16]	; (8003200 <oled_not_implemented_screen+0x24>)
 80031f0:	2301      	movs	r3, #1
 80031f2:	ca06      	ldmia	r2, {r1, r2}
 80031f4:	4803      	ldr	r0, [pc, #12]	; (8003204 <oled_not_implemented_screen+0x28>)
 80031f6:	f000 fab1 	bl	800375c <ssd1306_WriteString>
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000014 	.word	0x20000014
 8003204:	0800ad30 	.word	0x0800ad30

08003208 <go_back_main>:
/**
	* @brief Go back to the main menu
	*
	* @param menu_item_t *self - Pointer to itself
*/
void go_back_main(menu_item_t *self){
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	go_back_main_flag = 1;
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <go_back_main+0x1c>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000230 	.word	0x20000230

08003228 <oled_show_cats>:
/**
 * @brief Change screen to IMAGE and show Nyx & Iris
 *
 * @param menu_item_t *self - Pointer to itself
*/
void oled_show_cats(menu_item_t *self){
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	active_screen = IMAGE;
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <oled_show_cats+0x20>)
 8003232:	2203      	movs	r2, #3
 8003234:	801a      	strh	r2, [r3, #0]
	curr_image = cats_bmp;
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <oled_show_cats+0x24>)
 8003238:	4a05      	ldr	r2, [pc, #20]	; (8003250 <oled_show_cats+0x28>)
 800323a:	601a      	str	r2, [r3, #0]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	20000a28 	.word	0x20000a28
 800324c:	20000980 	.word	0x20000980
 8003250:	0800b274 	.word	0x0800b274

08003254 <oled_show_info>:
/**
 * @brief Change screen to INFO
 *
 * @param menu_item_t *self - Pointer to itself
*/
void oled_show_info(menu_item_t *self){
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
	active_screen = INFO;
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <oled_show_info+0x1c>)
 800325e:	2202      	movs	r2, #2
 8003260:	801a      	strh	r2, [r3, #0]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000a28 	.word	0x20000a28

08003274 <oled_edit_var>:
/**
 * @brief Change screen to EDIT
 *
 * @param menu_item_t *self - Pointer to itself
*/
void oled_edit_var(menu_item_t *self){
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	active_screen = EDIT_VAR;
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <oled_edit_var+0x20>)
 800327e:	2204      	movs	r2, #4
 8003280:	801a      	strh	r2, [r3, #0]
	edit_var = self;
 8003282:	4a05      	ldr	r2, [pc, #20]	; (8003298 <oled_edit_var+0x24>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6013      	str	r3, [r2, #0]
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	20000a28 	.word	0x20000a28
 8003298:	200009c0 	.word	0x200009c0

0800329c <oled_run_tests>:


void oled_run_tests(menu_item_t *self){
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  active_screen = MESSAGE;
 80032a4:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <oled_run_tests+0x2c>)
 80032a6:	2205      	movs	r2, #5
 80032a8:	801a      	strh	r2, [r3, #0]
	disp_message = "Running tests";
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <oled_run_tests+0x30>)
 80032ac:	4a08      	ldr	r2, [pc, #32]	; (80032d0 <oled_run_tests+0x34>)
 80032ae:	601a      	str	r2, [r3, #0]
	oled_update();
 80032b0:	f7ff fc18 	bl	8002ae4 <oled_update>
	tests_run();
 80032b4:	f7fd fe0a 	bl	8000ecc <tests_run>
	active_screen = MENU;
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <oled_run_tests+0x2c>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	801a      	strh	r2, [r3, #0]
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000a28 	.word	0x20000a28
 80032cc:	20000a2c 	.word	0x20000a2c
 80032d0:	0800ad40 	.word	0x0800ad40

080032d4 <oled_calibrate_xline>:

void oled_calibrate_xline(menu_item_t *self){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	active_screen = MESSAGE;
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <oled_calibrate_xline+0x2c>)
 80032de:	2205      	movs	r2, #5
 80032e0:	801a      	strh	r2, [r3, #0]
	disp_message = "XLINE calibration";
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <oled_calibrate_xline+0x30>)
 80032e4:	4a08      	ldr	r2, [pc, #32]	; (8003308 <oled_calibrate_xline+0x34>)
 80032e6:	601a      	str	r2, [r3, #0]
	oled_update();
 80032e8:	f7ff fbfc 	bl	8002ae4 <oled_update>
	xline_calibration_sequence();
 80032ec:	f000 fbc4 	bl	8003a78 <xline_calibration_sequence>
	active_screen = MENU;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <oled_calibrate_xline+0x2c>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	801a      	strh	r2, [r3, #0]
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000a28 	.word	0x20000a28
 8003304:	20000a2c 	.word	0x20000a2c
 8003308:	0800ad50 	.word	0x0800ad50

0800330c <oled_run_line_follow>:

void oled_run_line_follow(menu_item_t *self){
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	active_screen = RUN;
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <oled_run_line_follow+0x1c>)
 8003316:	2206      	movs	r2, #6
 8003318:	801a      	strh	r2, [r3, #0]
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000a28 	.word	0x20000a28

0800332c <ssd1306_Reset>:
#include "user/ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af04      	add	r7, sp, #16
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003346:	f04f 33ff 	mov.w	r3, #4294967295
 800334a:	9302      	str	r3, [sp, #8]
 800334c:	2301      	movs	r3, #1
 800334e:	9301      	str	r3, [sp, #4]
 8003350:	1dfb      	adds	r3, r7, #7
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2301      	movs	r3, #1
 8003356:	2200      	movs	r2, #0
 8003358:	2178      	movs	r1, #120	; 0x78
 800335a:	4803      	ldr	r0, [pc, #12]	; (8003368 <ssd1306_WriteCommand+0x2c>)
 800335c:	f002 fb22 	bl	80059a4 <HAL_I2C_Mem_Write>
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000654 	.word	0x20000654

0800336c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af04      	add	r7, sp, #16
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	f04f 32ff 	mov.w	r2, #4294967295
 800337e:	9202      	str	r2, [sp, #8]
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	2301      	movs	r3, #1
 8003388:	2240      	movs	r2, #64	; 0x40
 800338a:	2178      	movs	r1, #120	; 0x78
 800338c:	4803      	ldr	r0, [pc, #12]	; (800339c <ssd1306_WriteData+0x30>)
 800338e:	f002 fb09 	bl	80059a4 <HAL_I2C_Mem_Write>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000654 	.word	0x20000654

080033a0 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80033a4:	f7ff ffc2 	bl	800332c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80033a8:	2064      	movs	r0, #100	; 0x64
 80033aa:	f000 fd97 	bl	8003edc <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80033ae:	20ae      	movs	r0, #174	; 0xae
 80033b0:	f7ff ffc4 	bl	800333c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80033b4:	2020      	movs	r0, #32
 80033b6:	f7ff ffc1 	bl	800333c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 80033ba:	2010      	movs	r0, #16
 80033bc:	f7ff ffbe 	bl	800333c <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80033c0:	20b0      	movs	r0, #176	; 0xb0
 80033c2:	f7ff ffbb 	bl	800333c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80033c6:	20c8      	movs	r0, #200	; 0xc8
 80033c8:	f7ff ffb8 	bl	800333c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7ff ffb5 	bl	800333c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80033d2:	2010      	movs	r0, #16
 80033d4:	f7ff ffb2 	bl	800333c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80033d8:	2040      	movs	r0, #64	; 0x40
 80033da:	f7ff ffaf 	bl	800333c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80033de:	2081      	movs	r0, #129	; 0x81
 80033e0:	f7ff ffac 	bl	800333c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80033e4:	20ff      	movs	r0, #255	; 0xff
 80033e6:	f7ff ffa9 	bl	800333c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80033ea:	20a1      	movs	r0, #161	; 0xa1
 80033ec:	f7ff ffa6 	bl	800333c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80033f0:	20a6      	movs	r0, #166	; 0xa6
 80033f2:	f7ff ffa3 	bl	800333c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80033f6:	20a8      	movs	r0, #168	; 0xa8
 80033f8:	f7ff ffa0 	bl	800333c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80033fc:	203f      	movs	r0, #63	; 0x3f
 80033fe:	f7ff ff9d 	bl	800333c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003402:	20a4      	movs	r0, #164	; 0xa4
 8003404:	f7ff ff9a 	bl	800333c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003408:	20d3      	movs	r0, #211	; 0xd3
 800340a:	f7ff ff97 	bl	800333c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800340e:	2000      	movs	r0, #0
 8003410:	f7ff ff94 	bl	800333c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003414:	20d5      	movs	r0, #213	; 0xd5
 8003416:	f7ff ff91 	bl	800333c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800341a:	20f0      	movs	r0, #240	; 0xf0
 800341c:	f7ff ff8e 	bl	800333c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003420:	20d9      	movs	r0, #217	; 0xd9
 8003422:	f7ff ff8b 	bl	800333c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003426:	2022      	movs	r0, #34	; 0x22
 8003428:	f7ff ff88 	bl	800333c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800342c:	20da      	movs	r0, #218	; 0xda
 800342e:	f7ff ff85 	bl	800333c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8003432:	2012      	movs	r0, #18
 8003434:	f7ff ff82 	bl	800333c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003438:	20db      	movs	r0, #219	; 0xdb
 800343a:	f7ff ff7f 	bl	800333c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800343e:	2020      	movs	r0, #32
 8003440:	f7ff ff7c 	bl	800333c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003444:	208d      	movs	r0, #141	; 0x8d
 8003446:	f7ff ff79 	bl	800333c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800344a:	2014      	movs	r0, #20
 800344c:	f7ff ff76 	bl	800333c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8003450:	20af      	movs	r0, #175	; 0xaf
 8003452:	f7ff ff73 	bl	800333c <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8003456:	2000      	movs	r0, #0
 8003458:	f000 f810 	bl	800347c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800345c:	f000 f830 	bl	80034c0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <ssd1306_Init+0xd8>)
 8003462:	2200      	movs	r2, #0
 8003464:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <ssd1306_Init+0xd8>)
 8003468:	2200      	movs	r2, #0
 800346a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800346c:	4b02      	ldr	r3, [pc, #8]	; (8003478 <ssd1306_Init+0xd8>)
 800346e:	2201      	movs	r2, #1
 8003470:	715a      	strb	r2, [r3, #5]
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000640 	.word	0x20000640

0800347c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e00d      	b.n	80034a8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <ssd1306_Fill+0x1a>
 8003492:	2100      	movs	r1, #0
 8003494:	e000      	b.n	8003498 <ssd1306_Fill+0x1c>
 8003496:	21ff      	movs	r1, #255	; 0xff
 8003498:	4a08      	ldr	r2, [pc, #32]	; (80034bc <ssd1306_Fill+0x40>)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4413      	add	r3, r2
 800349e:	460a      	mov	r2, r1
 80034a0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3301      	adds	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ae:	d3ed      	bcc.n	800348c <ssd1306_Fill+0x10>
    }
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	20000240 	.word	0x20000240

080034c0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 80034c6:	2300      	movs	r3, #0
 80034c8:	71fb      	strb	r3, [r7, #7]
 80034ca:	e016      	b.n	80034fa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	3b50      	subs	r3, #80	; 0x50
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff32 	bl	800333c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80034d8:	2000      	movs	r0, #0
 80034da:	f7ff ff2f 	bl	800333c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80034de:	2010      	movs	r0, #16
 80034e0:	f7ff ff2c 	bl	800333c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	01db      	lsls	r3, r3, #7
 80034e8:	4a07      	ldr	r2, [pc, #28]	; (8003508 <ssd1306_UpdateScreen+0x48>)
 80034ea:	4413      	add	r3, r2
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff ff3c 	bl	800336c <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	3301      	adds	r3, #1
 80034f8:	71fb      	strb	r3, [r7, #7]
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	2b07      	cmp	r3, #7
 80034fe:	d9e5      	bls.n	80034cc <ssd1306_UpdateScreen+0xc>
    }
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000240 	.word	0x20000240

0800350c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
 8003516:	460b      	mov	r3, r1
 8003518:	71bb      	strb	r3, [r7, #6]
 800351a:	4613      	mov	r3, r2
 800351c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	2b00      	cmp	r3, #0
 8003524:	db48      	blt.n	80035b8 <ssd1306_DrawPixel+0xac>
 8003526:	79bb      	ldrb	r3, [r7, #6]
 8003528:	2b3f      	cmp	r3, #63	; 0x3f
 800352a:	d845      	bhi.n	80035b8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800352c:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <ssd1306_DrawPixel+0xb8>)
 800352e:	791b      	ldrb	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d006      	beq.n	8003542 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8003534:	797b      	ldrb	r3, [r7, #5]
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf0c      	ite	eq
 800353a:	2301      	moveq	r3, #1
 800353c:	2300      	movne	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8003542:	797b      	ldrb	r3, [r7, #5]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d11a      	bne.n	800357e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003548:	79fa      	ldrb	r2, [r7, #7]
 800354a:	79bb      	ldrb	r3, [r7, #6]
 800354c:	08db      	lsrs	r3, r3, #3
 800354e:	b2d8      	uxtb	r0, r3
 8003550:	4603      	mov	r3, r0
 8003552:	01db      	lsls	r3, r3, #7
 8003554:	4413      	add	r3, r2
 8003556:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <ssd1306_DrawPixel+0xbc>)
 8003558:	5cd3      	ldrb	r3, [r2, r3]
 800355a:	b25a      	sxtb	r2, r3
 800355c:	79bb      	ldrb	r3, [r7, #6]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	b25b      	sxtb	r3, r3
 800356a:	4313      	orrs	r3, r2
 800356c:	b259      	sxtb	r1, r3
 800356e:	79fa      	ldrb	r2, [r7, #7]
 8003570:	4603      	mov	r3, r0
 8003572:	01db      	lsls	r3, r3, #7
 8003574:	4413      	add	r3, r2
 8003576:	b2c9      	uxtb	r1, r1
 8003578:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <ssd1306_DrawPixel+0xbc>)
 800357a:	54d1      	strb	r1, [r2, r3]
 800357c:	e01d      	b.n	80035ba <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800357e:	79fa      	ldrb	r2, [r7, #7]
 8003580:	79bb      	ldrb	r3, [r7, #6]
 8003582:	08db      	lsrs	r3, r3, #3
 8003584:	b2d8      	uxtb	r0, r3
 8003586:	4603      	mov	r3, r0
 8003588:	01db      	lsls	r3, r3, #7
 800358a:	4413      	add	r3, r2
 800358c:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <ssd1306_DrawPixel+0xbc>)
 800358e:	5cd3      	ldrb	r3, [r2, r3]
 8003590:	b25a      	sxtb	r2, r3
 8003592:	79bb      	ldrb	r3, [r7, #6]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	2101      	movs	r1, #1
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	b25b      	sxtb	r3, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	b25b      	sxtb	r3, r3
 80035a4:	4013      	ands	r3, r2
 80035a6:	b259      	sxtb	r1, r3
 80035a8:	79fa      	ldrb	r2, [r7, #7]
 80035aa:	4603      	mov	r3, r0
 80035ac:	01db      	lsls	r3, r3, #7
 80035ae:	4413      	add	r3, r2
 80035b0:	b2c9      	uxtb	r1, r1
 80035b2:	4a05      	ldr	r2, [pc, #20]	; (80035c8 <ssd1306_DrawPixel+0xbc>)
 80035b4:	54d1      	strb	r1, [r2, r3]
 80035b6:	e000      	b.n	80035ba <ssd1306_DrawPixel+0xae>
        return;
 80035b8:	bf00      	nop
    }
}
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	20000640 	.word	0x20000640
 80035c8:	20000240 	.word	0x20000240

080035cc <ssd1306_DrawBitmap>:

// Draw a 128x64 bitmap image
// pBitmap     => Pointer to the stored byte array (size = 1024) of the image. 
// Convesion done here: https://javl.github.io/image2cpp/
void ssd1306_DrawBitmap(const unsigned char * pBitmap){
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 1024; i++){
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e037      	b.n	800364a <ssd1306_DrawBitmap+0x7e>
			// Extract each byte
			unsigned char byte = pBitmap[i];
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4413      	add	r3, r2
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	75fb      	strb	r3, [r7, #23]
				
			for(int k = 0; k < 8; k++){
 80035e4:	2300      	movs	r3, #0
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	e029      	b.n	800363e <ssd1306_DrawBitmap+0x72>
				unsigned char pixel = (byte >> (7-k)) & 0x01;
 80035ea:	7dfa      	ldrb	r2, [r7, #23]
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f1c3 0307 	rsb	r3, r3, #7
 80035f2:	fa42 f303 	asr.w	r3, r2, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	75bb      	strb	r3, [r7, #22]
				unsigned int x = (i*8 + k) % 128;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	00da      	lsls	r2, r3, #3
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	4413      	add	r3, r2
 8003606:	425a      	negs	r2, r3
 8003608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800360c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003610:	bf58      	it	pl
 8003612:	4253      	negpl	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
				unsigned int y = (i*8 + k)/128;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	00da      	lsls	r2, r3, #3
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4413      	add	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	da00      	bge.n	8003624 <ssd1306_DrawBitmap+0x58>
 8003622:	337f      	adds	r3, #127	; 0x7f
 8003624:	11db      	asrs	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]
				ssd1306_DrawPixel(x, y, (SSD1306_COLOR) pixel);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	b2d1      	uxtb	r1, r2
 8003630:	7dba      	ldrb	r2, [r7, #22]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ff6a 	bl	800350c <ssd1306_DrawPixel>
			for(int k = 0; k < 8; k++){
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	3301      	adds	r3, #1
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b07      	cmp	r3, #7
 8003642:	ddd2      	ble.n	80035ea <ssd1306_DrawBitmap+0x1e>
	for(int i = 0; i < 1024; i++){
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	3301      	adds	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003650:	dbc3      	blt.n	80035da <ssd1306_DrawBitmap+0xe>
			}//for - k
	}//for - i
}
 8003652:	bf00      	nop
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	4604      	mov	r4, r0
 8003664:	1d38      	adds	r0, r7, #4
 8003666:	e880 0006 	stmia.w	r0, {r1, r2}
 800366a:	461a      	mov	r2, r3
 800366c:	4623      	mov	r3, r4
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	4613      	mov	r3, r2
 8003672:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003674:	4b38      	ldr	r3, [pc, #224]	; (8003758 <ssd1306_WriteChar+0xfc>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	793b      	ldrb	r3, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	2b7f      	cmp	r3, #127	; 0x7f
 8003680:	dc06      	bgt.n	8003690 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8003682:	4b35      	ldr	r3, [pc, #212]	; (8003758 <ssd1306_WriteChar+0xfc>)
 8003684:	885b      	ldrh	r3, [r3, #2]
 8003686:	461a      	mov	r2, r3
 8003688:	797b      	ldrb	r3, [r7, #5]
 800368a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800368c:	2b3f      	cmp	r3, #63	; 0x3f
 800368e:	dd01      	ble.n	8003694 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8003690:	2300      	movs	r3, #0
 8003692:	e05d      	b.n	8003750 <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	e04c      	b.n	8003734 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	3b20      	subs	r3, #32
 80036a0:	7979      	ldrb	r1, [r7, #5]
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4619      	mov	r1, r3
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	440b      	add	r3, r1
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80036b4:	2300      	movs	r3, #0
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e034      	b.n	8003724 <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d012      	beq.n	80036f0 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80036ca:	4b23      	ldr	r3, [pc, #140]	; (8003758 <ssd1306_WriteChar+0xfc>)
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	b2d8      	uxtb	r0, r3
 80036d8:	4b1f      	ldr	r3, [pc, #124]	; (8003758 <ssd1306_WriteChar+0xfc>)
 80036da:	885b      	ldrh	r3, [r3, #2]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	7bba      	ldrb	r2, [r7, #14]
 80036e8:	4619      	mov	r1, r3
 80036ea:	f7ff ff0f 	bl	800350c <ssd1306_DrawPixel>
 80036ee:	e016      	b.n	800371e <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <ssd1306_WriteChar+0xfc>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	b2d8      	uxtb	r0, r3
 80036fe:	4b16      	ldr	r3, [pc, #88]	; (8003758 <ssd1306_WriteChar+0xfc>)
 8003700:	885b      	ldrh	r3, [r3, #2]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	4413      	add	r3, r2
 800370a:	b2d9      	uxtb	r1, r3
 800370c:	7bbb      	ldrb	r3, [r7, #14]
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	f7ff fef7 	bl	800350c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	3301      	adds	r3, #1
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	793b      	ldrb	r3, [r7, #4]
 8003726:	461a      	mov	r2, r3
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4293      	cmp	r3, r2
 800372c:	d3c5      	bcc.n	80036ba <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3301      	adds	r3, #1
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	797b      	ldrb	r3, [r7, #5]
 8003736:	461a      	mov	r2, r3
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	4293      	cmp	r3, r2
 800373c:	d3ad      	bcc.n	800369a <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <ssd1306_WriteChar+0xfc>)
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	793b      	ldrb	r3, [r7, #4]
 8003744:	b29b      	uxth	r3, r3
 8003746:	4413      	add	r3, r2
 8003748:	b29a      	uxth	r2, r3
 800374a:	4b03      	ldr	r3, [pc, #12]	; (8003758 <ssd1306_WriteChar+0xfc>)
 800374c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3724      	adds	r7, #36	; 0x24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd90      	pop	{r4, r7, pc}
 8003758:	20000640 	.word	0x20000640

0800375c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	1d38      	adds	r0, r7, #4
 8003766:	e880 0006 	stmia.w	r0, {r1, r2}
 800376a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800376c:	e012      	b.n	8003794 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	7818      	ldrb	r0, [r3, #0]
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	1d3a      	adds	r2, r7, #4
 8003776:	ca06      	ldmia	r2, {r1, r2}
 8003778:	f7ff ff70 	bl	800365c <ssd1306_WriteChar>
 800377c:	4603      	mov	r3, r0
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d002      	beq.n	800378e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	e008      	b.n	80037a0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3301      	adds	r3, #1
 8003792:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e8      	bne.n	800376e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	781b      	ldrb	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	460a      	mov	r2, r1
 80037b2:	71fb      	strb	r3, [r7, #7]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <ssd1306_SetCursor+0x2c>)
 80037be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80037c0:	79bb      	ldrb	r3, [r7, #6]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <ssd1306_SetCursor+0x2c>)
 80037c6:	805a      	strh	r2, [r3, #2]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	20000640 	.word	0x20000640

080037d8 <init_voltmeter>:
#define NR 2					// Number of ADC channels

uint8_t adc_raw[NR*SAMPLES];																	// Array for raw adc samples
uint8_t nr_indices = (sizeof(adc_raw) / sizeof(adc_raw[0]));	// Number or indices in the raw adc array

void init_voltmeter(void){
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_raw, nr_indices);
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <init_voltmeter+0x18>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4904      	ldr	r1, [pc, #16]	; (80037f4 <init_voltmeter+0x1c>)
 80037e4:	4804      	ldr	r0, [pc, #16]	; (80037f8 <init_voltmeter+0x20>)
 80037e6:	f000 fd5d 	bl	80042a4 <HAL_ADC_Start_DMA>
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000024 	.word	0x20000024
 80037f4:	20000b04 	.word	0x20000b04
 80037f8:	200007b0 	.word	0x200007b0

080037fc <adc_average>:

int cmpfunc(const void * a, const void * b) {
   return ( *(int*)a - *(int*)b );
}

uint8_t adc_average(uint8_t index){
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
	// This can be improved by sorting raw values first and then removing a couple of the highest and lowest readings
	// However after inspection the ADC values seem very stable and this is not needed.
	uint8_t average = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
	uint32_t sum = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]

	for(int i = index; i < NR*SAMPLES; i += NR){
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	e00a      	b.n	800382a <adc_average+0x2e>
		sum += adc_raw[i];
 8003814:	4a0b      	ldr	r2, [pc, #44]	; (8003844 <adc_average+0x48>)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4413      	add	r3, r2
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	4413      	add	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
	for(int i = index; i < NR*SAMPLES; i += NR){
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	3302      	adds	r3, #2
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b1f      	cmp	r3, #31
 800382e:	ddf1      	ble.n	8003814 <adc_average+0x18>
	}

	average = sum / SAMPLES;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	73fb      	strb	r3, [r7, #15]
	return average;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
}
 8003838:	4618      	mov	r0, r3
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	20000b04 	.word	0x20000b04

08003848 <adc_to_voltage>:


float adc_to_voltage(uint8_t adc_value, uint32_t R1, uint32_t R2){
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	73fb      	strb	r3, [r7, #15]
	//1. Calculate the voltage between R2 and ground (V_out), (reading / resolution) * V_ref
	//2. Calculate actual voltage (V_in) with the voltage divider. (V_out = V_in * R2/(R1 + R2) or (V_in = V_out * (R1 + R2) / R2
	return (adc_value / 256.0f) * 3.3f * (R1 + R2) / (float)R2;
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	ee07 3a90 	vmov	s15, r3
 800385c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003860:	eddf 6a10 	vldr	s13, [pc, #64]	; 80038a4 <adc_to_voltage+0x5c>
 8003864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003868:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80038a8 <adc_to_voltage+0x60>
 800386c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003890:	eef0 7a66 	vmov.f32	s15, s13

}
 8003894:	eeb0 0a67 	vmov.f32	s0, s15
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	43800000 	.word	0x43800000
 80038a8:	40533333 	.word	0x40533333

080038ac <GET_voltage_battery>:


float GET_voltage_battery(void){
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
	return adc_to_voltage(adc_average(1), 20000, 10000);
 80038b0:	2001      	movs	r0, #1
 80038b2:	f7ff ffa3 	bl	80037fc <adc_average>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80038bc:	f644 6120 	movw	r1, #20000	; 0x4e20
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ffc1 	bl	8003848 <adc_to_voltage>
 80038c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80038ca:	eeb0 0a67 	vmov.f32	s0, s15
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <GET_voltage_boost>:


float GET_voltage_boost(void){
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
	return adc_to_voltage(adc_average(0), 62000, 10000);
 80038d4:	2000      	movs	r0, #0
 80038d6:	f7ff ff91 	bl	80037fc <adc_average>
 80038da:	4603      	mov	r3, r0
 80038dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80038e0:	f24f 2130 	movw	r1, #62000	; 0xf230
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ffaf 	bl	8003848 <adc_to_voltage>
 80038ea:	eef0 7a40 	vmov.f32	s15, s0

}
 80038ee:	eeb0 0a67 	vmov.f32	s0, s15
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <init_xline>:

/**
 * @brief Initialize xline sensors.
 * 
 */
void init_xline(){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
	xline_reset_calibration();
 80038f8:	f000 f904 	bl	8003b04 <xline_reset_calibration>
}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}

08003900 <xline_calibrate>:
 * Reads the sensors 10 times and uses the results for calibration. The sensor values are not returned; instead, the maximum and minimum values 
 * found over time are stored internally and used for the xline_read_calibrated() method.
 * 
 * In order to calibrate, call this function repeatedly under a couple seconds (~5s) when moving the sensor over a line.
 */
void xline_calibrate(void){
 8003900:	b580      	push	{r7, lr}
 8003902:	b0a2      	sub	sp, #136	; 0x88
 8003904:	af00      	add	r7, sp, #0
	//uint32_t sensor_values[_num_sensors] = {0};
	uint32_t max_sensor_values[_num_sensors] = {0};
 8003906:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800390a:	2240      	movs	r2, #64	; 0x40
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f004 fb76 	bl	8008000 <memset>
	uint32_t min_sensor_values[_num_sensors] = {0};
 8003914:	1d3b      	adds	r3, r7, #4
 8003916:	2240      	movs	r2, #64	; 0x40
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f004 fb70 	bl	8008000 <memset>

    
	for(uint8_t j = 0; j < 10; j++){
 8003920:	2300      	movs	r3, #0
 8003922:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003926:	e053      	b.n	80039d0 <xline_calibrate+0xd0>
		xline_read();
 8003928:	f000 f90e 	bl	8003b48 <xline_read>

		for(uint8_t i = 0; i < _num_sensors; i++){
 800392c:	2300      	movs	r3, #0
 800392e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8003932:	e044      	b.n	80039be <xline_calibrate+0xbe>
			// set the min we found THIS time
			if(j == 0 || min_sensor_values[i] > xline[i])
 8003934:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00e      	beq.n	800395a <xline_calibrate+0x5a>
 800393c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003946:	4413      	add	r3, r2
 8003948:	f853 2c84 	ldr.w	r2, [r3, #-132]
 800394c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003950:	4946      	ldr	r1, [pc, #280]	; (8003a6c <xline_calibrate+0x16c>)
 8003952:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003956:	429a      	cmp	r2, r3
 8003958:	d90c      	bls.n	8003974 <xline_calibrate+0x74>
				min_sensor_values[i] = xline[i];
 800395a:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800395e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003962:	4942      	ldr	r1, [pc, #264]	; (8003a6c <xline_calibrate+0x16c>)
 8003964:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800396e:	440b      	add	r3, r1
 8003970:	f843 2c84 	str.w	r2, [r3, #-132]

			// set the max we found THIS time
			if(j == 0 || max_sensor_values[i] < xline[i])
 8003974:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00e      	beq.n	800399a <xline_calibrate+0x9a>
 800397c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003986:	4413      	add	r3, r2
 8003988:	f853 2c44 	ldr.w	r2, [r3, #-68]
 800398c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003990:	4936      	ldr	r1, [pc, #216]	; (8003a6c <xline_calibrate+0x16c>)
 8003992:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003996:	429a      	cmp	r2, r3
 8003998:	d20c      	bcs.n	80039b4 <xline_calibrate+0xb4>
				max_sensor_values[i] = xline[i];
 800399a:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800399e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80039a2:	4932      	ldr	r1, [pc, #200]	; (8003a6c <xline_calibrate+0x16c>)
 80039a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80039ae:	440b      	add	r3, r1
 80039b0:	f843 2c44 	str.w	r2, [r3, #-68]
		for(uint8_t i = 0; i < _num_sensors; i++){
 80039b4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80039b8:	3301      	adds	r3, #1
 80039ba:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80039be:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80039c2:	2b0f      	cmp	r3, #15
 80039c4:	d9b6      	bls.n	8003934 <xline_calibrate+0x34>
	for(uint8_t j = 0; j < 10; j++){
 80039c6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80039ca:	3301      	adds	r3, #1
 80039cc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80039d0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80039d4:	2b09      	cmp	r3, #9
 80039d6:	d9a7      	bls.n	8003928 <xline_calibrate+0x28>
		}
	}

	// Save the min and max calibration values
	for(uint8_t i = 0 ; i < _num_sensors; i++){
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80039de:	e03c      	b.n	8003a5a <xline_calibrate+0x15a>
		if(min_sensor_values[i] > calibrated_max[i])
 80039e0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80039ea:	4413      	add	r3, r2
 80039ec:	f853 2c84 	ldr.w	r2, [r3, #-132]
 80039f0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80039f4:	491e      	ldr	r1, [pc, #120]	; (8003a70 <xline_calibrate+0x170>)
 80039f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d90c      	bls.n	8003a18 <xline_calibrate+0x118>
			calibrated_max[i] = min_sensor_values[i];
 80039fe:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003a02:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003a0c:	440b      	add	r3, r1
 8003a0e:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8003a12:	4917      	ldr	r1, [pc, #92]	; (8003a70 <xline_calibrate+0x170>)
 8003a14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

		if(max_sensor_values[i] < calibrated_min[i])
 8003a18:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003a22:	4413      	add	r3, r2
 8003a24:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8003a28:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003a2c:	4911      	ldr	r1, [pc, #68]	; (8003a74 <xline_calibrate+0x174>)
 8003a2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d20c      	bcs.n	8003a50 <xline_calibrate+0x150>
			calibrated_min[i] = max_sensor_values[i];
 8003a36:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003a3a:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003a44:	440b      	add	r3, r1
 8003a46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003a4a:	490a      	ldr	r1, [pc, #40]	; (8003a74 <xline_calibrate+0x174>)
 8003a4c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for(uint8_t i = 0 ; i < _num_sensors; i++){
 8003a50:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003a54:	3301      	adds	r3, #1
 8003a56:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8003a5a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003a5e:	2b0f      	cmp	r3, #15
 8003a60:	d9be      	bls.n	80039e0 <xline_calibrate+0xe0>
	}
}
 8003a62:	bf00      	nop
 8003a64:	3788      	adds	r7, #136	; 0x88
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000b24 	.word	0x20000b24
 8003a70:	20000b64 	.word	0x20000b64
 8003a74:	20000ba4 	.word	0x20000ba4

08003a78 <xline_calibration_sequence>:
 * @brief Runs full 5s calibration sequence and print result
 *
 * Calibrates be successively calling xline_calibrate over a 5s period
 * Then prints all min/max recorded values for the user.
 */
void xline_calibration_sequence(void){
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
	printf("============ CALIBRATING XLINE ==============\r\n");
 8003a7e:	481a      	ldr	r0, [pc, #104]	; (8003ae8 <xline_calibration_sequence+0x70>)
 8003a80:	f004 ff96 	bl	80089b0 <puts>
	printf("\t - Calibrating over 5S\r\n");
 8003a84:	4819      	ldr	r0, [pc, #100]	; (8003aec <xline_calibration_sequence+0x74>)
 8003a86:	f004 ff93 	bl	80089b0 <puts>
	printf("\t - Move the sensor over the line back and forth with a reasonable speed.\r\n");
 8003a8a:	4819      	ldr	r0, [pc, #100]	; (8003af0 <xline_calibration_sequence+0x78>)
 8003a8c:	f004 ff90 	bl	80089b0 <puts>
	for(uint8_t i = 0; i < 100; i++){
 8003a90:	2300      	movs	r3, #0
 8003a92:	71fb      	strb	r3, [r7, #7]
 8003a94:	e007      	b.n	8003aa6 <xline_calibration_sequence+0x2e>
		xline_calibrate();
 8003a96:	f7ff ff33 	bl	8003900 <xline_calibrate>
		HAL_Delay(50);
 8003a9a:	2032      	movs	r0, #50	; 0x32
 8003a9c:	f000 fa1e 	bl	8003edc <HAL_Delay>
	for(uint8_t i = 0; i < 100; i++){
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	71fb      	strb	r3, [r7, #7]
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	2b63      	cmp	r3, #99	; 0x63
 8003aaa:	d9f4      	bls.n	8003a96 <xline_calibration_sequence+0x1e>
	}
	printf("================ CALIBRATION COMPLETE =============\r\n");
 8003aac:	4811      	ldr	r0, [pc, #68]	; (8003af4 <xline_calibration_sequence+0x7c>)
 8003aae:	f004 ff7f 	bl	80089b0 <puts>
	for(uint8_t i = 0; i < 16; i++){
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	71bb      	strb	r3, [r7, #6]
 8003ab6:	e00f      	b.n	8003ad8 <xline_calibration_sequence+0x60>
			printf("Sensor %d: \r\n\t min: %lu\r\n\t max: %lu\r\n", i, calibrated_min[i], calibrated_max[i]);
 8003ab8:	79b9      	ldrb	r1, [r7, #6]
 8003aba:	79bb      	ldrb	r3, [r7, #6]
 8003abc:	4a0e      	ldr	r2, [pc, #56]	; (8003af8 <xline_calibration_sequence+0x80>)
 8003abe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ac2:	79bb      	ldrb	r3, [r7, #6]
 8003ac4:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <xline_calibration_sequence+0x84>)
 8003ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aca:	4602      	mov	r2, r0
 8003acc:	480c      	ldr	r0, [pc, #48]	; (8003b00 <xline_calibration_sequence+0x88>)
 8003ace:	f004 fefb 	bl	80088c8 <iprintf>
	for(uint8_t i = 0; i < 16; i++){
 8003ad2:	79bb      	ldrb	r3, [r7, #6]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	71bb      	strb	r3, [r7, #6]
 8003ad8:	79bb      	ldrb	r3, [r7, #6]
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	d9ec      	bls.n	8003ab8 <xline_calibration_sequence+0x40>
	}
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	0800ad64 	.word	0x0800ad64
 8003aec:	0800ad94 	.word	0x0800ad94
 8003af0:	0800adb0 	.word	0x0800adb0
 8003af4:	0800adfc 	.word	0x0800adfc
 8003af8:	20000ba4 	.word	0x20000ba4
 8003afc:	20000b64 	.word	0x20000b64
 8003b00:	0800ae34 	.word	0x0800ae34

08003b04 <xline_reset_calibration>:

/**
 * @brief Reset calibration values.
 * 
 */
void xline_reset_calibration(void){
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
    for(uint8_t i = 0 ; i < _num_sensors; i++){
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	71fb      	strb	r3, [r7, #7]
 8003b0e:	e00d      	b.n	8003b2c <xline_reset_calibration+0x28>
        calibrated_min[i] = 1023;
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	4a0b      	ldr	r2, [pc, #44]	; (8003b40 <xline_reset_calibration+0x3c>)
 8003b14:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003b18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        calibrated_max[i] = 0;
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <xline_reset_calibration+0x40>)
 8003b20:	2100      	movs	r1, #0
 8003b22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(uint8_t i = 0 ; i < _num_sensors; i++){
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	71fb      	strb	r3, [r7, #7]
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	2b0f      	cmp	r3, #15
 8003b30:	d9ee      	bls.n	8003b10 <xline_reset_calibration+0xc>
    }
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000ba4 	.word	0x20000ba4
 8003b44:	20000b64 	.word	0x20000b64

08003b48 <xline_read>:
/**
 * @brief Read all sensors and store raw values in supplied array.
 * 
 * @param sensor_values Array to store values. The size needs to be equal or bigger than number of sensors.
 */
void xline_read(void){
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
    // Reset old values
    for(uint8_t i = 0 ; i < _num_sensors; i++){
 8003b4e:	2300      	movs	r3, #0
 8003b50:	71fb      	strb	r3, [r7, #7]
 8003b52:	e007      	b.n	8003b64 <xline_read+0x1c>
        xline[i] = 0;
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <xline_read+0x6c>)
 8003b58:	2100      	movs	r1, #0
 8003b5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(uint8_t i = 0 ; i < _num_sensors; i++){
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	3301      	adds	r3, #1
 8003b62:	71fb      	strb	r3, [r7, #7]
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	2b0f      	cmp	r3, #15
 8003b68:	d9f4      	bls.n	8003b54 <xline_read+0xc>
    }


	for(uint8_t i = 0 ; i < _num_sensors; i++){
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	71bb      	strb	r3, [r7, #6]
 8003b6e:	e019      	b.n	8003ba4 <xline_read+0x5c>
		xline_mux_select(i);
 8003b70:	79bb      	ldrb	r3, [r7, #6]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f8d2 	bl	8003d1c <xline_mux_select>
       
		HAL_ADC_Start(&hadc2);
 8003b78:	480f      	ldr	r0, [pc, #60]	; (8003bb8 <xline_read+0x70>)
 8003b7a:	f000 fa15 	bl	8003fa8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 5);
 8003b7e:	2105      	movs	r1, #5
 8003b80:	480d      	ldr	r0, [pc, #52]	; (8003bb8 <xline_read+0x70>)
 8003b82:	f000 fb0a 	bl	800419a <HAL_ADC_PollForConversion>
		uint32_t raw = HAL_ADC_GetValue(&hadc2);
 8003b86:	480c      	ldr	r0, [pc, #48]	; (8003bb8 <xline_read+0x70>)
 8003b88:	f000 fc7e 	bl	8004488 <HAL_ADC_GetValue>
 8003b8c:	6038      	str	r0, [r7, #0]
		xline[i] = raw;
 8003b8e:	79bb      	ldrb	r3, [r7, #6]
 8003b90:	4908      	ldr	r1, [pc, #32]	; (8003bb4 <xline_read+0x6c>)
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_ADC_Stop(&hadc2);
 8003b98:	4807      	ldr	r0, [pc, #28]	; (8003bb8 <xline_read+0x70>)
 8003b9a:	f000 facb 	bl	8004134 <HAL_ADC_Stop>
	for(uint8_t i = 0 ; i < _num_sensors; i++){
 8003b9e:	79bb      	ldrb	r3, [r7, #6]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	71bb      	strb	r3, [r7, #6]
 8003ba4:	79bb      	ldrb	r3, [r7, #6]
 8003ba6:	2b0f      	cmp	r3, #15
 8003ba8:	d9e2      	bls.n	8003b70 <xline_read+0x28>
	}
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000b24 	.word	0x20000b24
 8003bb8:	200006e8 	.word	0x200006e8

08003bbc <xline_read_calibrated>:
 * corresponds to the maximum value.  Calibration values are
 * stored separately for each sensor, so that differences in the
 * sensors are accounted for automatically.
 * @param sensor_values Array to store values.
 */
void xline_read_calibrated(void){
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
	xline_read();
 8003bc2:	f7ff ffc1 	bl	8003b48 <xline_read>

	for(uint8_t i = 0 ; i < _num_sensors; i++){
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
 8003bca:	e035      	b.n	8003c38 <xline_read_calibrated+0x7c>

		uint32_t denominator = calibrated_max[i] - calibrated_min[i];
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <xline_read_calibrated+0x8c>)
 8003bd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	491d      	ldr	r1, [pc, #116]	; (8003c4c <xline_read_calibrated+0x90>)
 8003bd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	607b      	str	r3, [r7, #4]

		int x = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60bb      	str	r3, [r7, #8]
		if(denominator != 0)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d011      	beq.n	8003c0e <xline_read_calibrated+0x52>
			// Check the real reason for need to cast all to int
			x = ((int)( ((int)xline[i]) - ((int)calibrated_min[i]))) * 1000 / (int)denominator;
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <xline_read_calibrated+0x94>)
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <xline_read_calibrated+0x90>)
 8003bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfc:	1acb      	subs	r3, r1, r3
 8003bfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c02:	fb02 f203 	mul.w	r2, r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c0c:	60bb      	str	r3, [r7, #8]
		if(x < 0)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	da02      	bge.n	8003c1a <xline_read_calibrated+0x5e>
			x = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	e006      	b.n	8003c28 <xline_read_calibrated+0x6c>
		else if(x > 1000)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c20:	dd02      	ble.n	8003c28 <xline_read_calibrated+0x6c>
			x = 1000;
 8003c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c26:	60bb      	str	r3, [r7, #8]
		// Add additional check when sensor is blocked
		xline[i] = x;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4908      	ldr	r1, [pc, #32]	; (8003c50 <xline_read_calibrated+0x94>)
 8003c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0 ; i < _num_sensors; i++){
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	3301      	adds	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b0f      	cmp	r3, #15
 8003c3c:	d9c6      	bls.n	8003bcc <xline_read_calibrated+0x10>
	}
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000b64 	.word	0x20000b64
 8003c4c:	20000ba4 	.word	0x20000ba4
 8003c50:	20000b24 	.word	0x20000b24

08003c54 <xline_read_line>:
 * 		     value0  +  value1  +  value2 + ...
 * 
 * @param sensor_values 
 * @return int Estimated position
 */
int xline_read_line(void){
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
	uint8_t i, on_line = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	75bb      	strb	r3, [r7, #22]
	unsigned long avg = 0; // weighted total
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
	unsigned int sum = 0; // this is for the denominator which is <= 64000
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
	static int last_value = 0; // assume initially that the line is left.
	int return_val = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]


	xline_read_calibrated();
 8003c6a:	f7ff ffa7 	bl	8003bbc <xline_read_calibrated>

	for( i = 0; i < _num_sensors; i++) {
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]
 8003c72:	e01f      	b.n	8003cb4 <xline_read_line+0x60>
		int value = xline[i];
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <xline_read_line+0xbc>)
 8003c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7c:	607b      	str	r3, [r7, #4]
		//if(white_line)
		//	value = 1000 - value;

		// keep track of whether we see the line at all
		if(value > 200) {
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2bc8      	cmp	r3, #200	; 0xc8
 8003c82:	dd01      	ble.n	8003c88 <xline_read_line+0x34>
			on_line = 1;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75bb      	strb	r3, [r7, #22]
		}
		
		// only average in values that are above a noise threshold
		if(value > 50) {
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b32      	cmp	r3, #50	; 0x32
 8003c8c:	dd0f      	ble.n	8003cae <xline_read_line+0x5a>
			avg += (long)(value) * (i * 1000);
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
			sum += value;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
	for( i = 0; i < _num_sensors; i++) {
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	2b0f      	cmp	r3, #15
 8003cb8:	d9dc      	bls.n	8003c74 <xline_read_line+0x20>
		}
	}

	if(!on_line)
 8003cba:	7dbb      	ldrb	r3, [r7, #22]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10c      	bne.n	8003cda <xline_read_line+0x86>
	{
		// If it last read to the left of center, return 0.
		if(last_value < (_num_sensors - 1) *1000 /2)
 8003cc0:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <xline_read_line+0xc0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	dc02      	bgt.n	8003cd2 <xline_read_line+0x7e>
			return_val = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	e00d      	b.n	8003cee <xline_read_line+0x9a>
		
		// If it last read to the right of center, return the max.
		else
			return_val = (_num_sensors - 1)*1000;
 8003cd2:	f643 2398 	movw	r3, #15000	; 0x3a98
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	e009      	b.n	8003cee <xline_read_line+0x9a>

	}else{
		last_value = avg/sum;
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <xline_read_line+0xc0>)
 8003ce6:	601a      	str	r2, [r3, #0]
		return_val = last_value;
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <xline_read_line+0xc0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60bb      	str	r3, [r7, #8]
	}



	return return_val - (16-1)/2.0f * 1000;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	ee07 3a90 	vmov	s15, r3
 8003cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003d18 <xline_read_line+0xc4>
 8003cfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d04:	ee17 3a90 	vmov	r3, s15
};
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20000b24 	.word	0x20000b24
 8003d14:	20000648 	.word	0x20000648
 8003d18:	45ea6000 	.word	0x45ea6000

08003d1c <xline_mux_select>:
/**
 * @brief Selecting which sensor to read from via the MUX. (Multiplexer)
 * 
 * @param sensor_n Sensor to active.
 */
void xline_mux_select(uint8_t sensor){
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(MUX0_GPIO_Port, MUX0_Pin, (sensor & 0b1) > 0);
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bfcc      	ite	gt
 8003d30:	2301      	movgt	r3, #1
 8003d32:	2300      	movle	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4817      	ldr	r0, [pc, #92]	; (8003d98 <xline_mux_select+0x7c>)
 8003d3c:	f001 fca2 	bl	8005684 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX1_GPIO_Port, MUX1_Pin, (sensor & 0b10) > 0);
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bfcc      	ite	gt
 8003d4a:	2301      	movgt	r3, #1
 8003d4c:	2300      	movle	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	2120      	movs	r1, #32
 8003d54:	4811      	ldr	r0, [pc, #68]	; (8003d9c <xline_mux_select+0x80>)
 8003d56:	f001 fc95 	bl	8005684 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX2_GPIO_Port, MUX2_Pin, (sensor & 0b100) > 0);
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bfcc      	ite	gt
 8003d64:	2301      	movgt	r3, #1
 8003d66:	2300      	movle	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2110      	movs	r1, #16
 8003d6e:	480b      	ldr	r0, [pc, #44]	; (8003d9c <xline_mux_select+0x80>)
 8003d70:	f001 fc88 	bl	8005684 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX3_GPIO_Port, MUX3_Pin, (sensor & 0b1000) > 0);
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bfcc      	ite	gt
 8003d7e:	2301      	movgt	r3, #1
 8003d80:	2300      	movle	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	2180      	movs	r1, #128	; 0x80
 8003d88:	4805      	ldr	r0, [pc, #20]	; (8003da0 <xline_mux_select+0x84>)
 8003d8a:	f001 fc7b 	bl	8005684 <HAL_GPIO_WritePin>
};
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40020400 	.word	0x40020400
 8003d9c:	40020800 	.word	0x40020800
 8003da0:	40020000 	.word	0x40020000

08003da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ddc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003da8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003daa:	e003      	b.n	8003db4 <LoopCopyDataInit>

08003dac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003dae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003db0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003db2:	3104      	adds	r1, #4

08003db4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003db4:	480b      	ldr	r0, [pc, #44]	; (8003de4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003db8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003dba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003dbc:	d3f6      	bcc.n	8003dac <CopyDataInit>
  ldr  r2, =_sbss
 8003dbe:	4a0b      	ldr	r2, [pc, #44]	; (8003dec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003dc0:	e002      	b.n	8003dc8 <LoopFillZerobss>

08003dc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003dc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003dc4:	f842 3b04 	str.w	r3, [r2], #4

08003dc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003dca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003dcc:	d3f9      	bcc.n	8003dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dce:	f7fe fa2b 	bl	8002228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dd2:	f004 f8f1 	bl	8007fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dd6:	f7fd f8a3 	bl	8000f20 <main>
  bx  lr    
 8003dda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ddc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003de0:	0800ce18 	.word	0x0800ce18
  ldr  r0, =_sdata
 8003de4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003de8:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8003dec:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8003df0:	20000bec 	.word	0x20000bec

08003df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003df4:	e7fe      	b.n	8003df4 <ADC_IRQHandler>
	...

08003df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <HAL_Init+0x40>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0d      	ldr	r2, [pc, #52]	; (8003e38 <HAL_Init+0x40>)
 8003e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_Init+0x40>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a0a      	ldr	r2, [pc, #40]	; (8003e38 <HAL_Init+0x40>)
 8003e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <HAL_Init+0x40>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <HAL_Init+0x40>)
 8003e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e20:	2003      	movs	r0, #3
 8003e22:	f000 fecd 	bl	8004bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e26:	2000      	movs	r0, #0
 8003e28:	f000 f808 	bl	8003e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e2c:	f7fd fd9c 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40023c00 	.word	0x40023c00

08003e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_InitTick+0x54>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_InitTick+0x58>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fee5 	bl	8004c2a <HAL_SYSTICK_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e00e      	b.n	8003e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b0f      	cmp	r3, #15
 8003e6e:	d80a      	bhi.n	8003e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e70:	2200      	movs	r2, #0
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295
 8003e78:	f000 fead 	bl	8004bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e7c:	4a06      	ldr	r2, [pc, #24]	; (8003e98 <HAL_InitTick+0x5c>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000000 	.word	0x20000000
 8003e94:	2000002c 	.word	0x2000002c
 8003e98:	20000028 	.word	0x20000028

08003e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_IncTick+0x20>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_IncTick+0x24>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4413      	add	r3, r2
 8003eac:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <HAL_IncTick+0x24>)
 8003eae:	6013      	str	r3, [r2, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	2000002c 	.word	0x2000002c
 8003ec0:	20000be4 	.word	0x20000be4

08003ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <HAL_GetTick+0x14>)
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000be4 	.word	0x20000be4

08003edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee4:	f7ff ffee 	bl	8003ec4 <HAL_GetTick>
 8003ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d005      	beq.n	8003f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_Delay+0x40>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f02:	bf00      	nop
 8003f04:	f7ff ffde 	bl	8003ec4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d8f7      	bhi.n	8003f04 <HAL_Delay+0x28>
  {
  }
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	2000002c 	.word	0x2000002c

08003f20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e033      	b.n	8003f9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd fd3a 	bl	80019b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d118      	bne.n	8003f90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f66:	f023 0302 	bic.w	r3, r3, #2
 8003f6a:	f043 0202 	orr.w	r2, r3, #2
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fbd6 	bl	8004724 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8003f8e:	e001      	b.n	8003f94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_ADC_Start+0x1a>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e0a5      	b.n	800410e <HAL_ADC_Start+0x166>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d018      	beq.n	800400a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003fe8:	4b4c      	ldr	r3, [pc, #304]	; (800411c <HAL_ADC_Start+0x174>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a4c      	ldr	r2, [pc, #304]	; (8004120 <HAL_ADC_Start+0x178>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	0c9a      	lsrs	r2, r3, #18
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ffc:	e002      	b.n	8004004 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	3b01      	subs	r3, #1
 8004002:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f9      	bne.n	8003ffe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b01      	cmp	r3, #1
 8004016:	d179      	bne.n	800410c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004042:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	d106      	bne.n	8004066 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	f023 0206 	bic.w	r2, r3, #6
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	645a      	str	r2, [r3, #68]	; 0x44
 8004064:	e002      	b.n	800406c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004074:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <HAL_ADC_Start+0x17c>)
 8004076:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004080:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	2b00      	cmp	r3, #0
 800408c:	d12a      	bne.n	80040e4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a25      	ldr	r2, [pc, #148]	; (8004128 <HAL_ADC_Start+0x180>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d015      	beq.n	80040c4 <HAL_ADC_Start+0x11c>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a23      	ldr	r2, [pc, #140]	; (800412c <HAL_ADC_Start+0x184>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d105      	bne.n	80040ae <HAL_ADC_Start+0x106>
 80040a2:	4b20      	ldr	r3, [pc, #128]	; (8004124 <HAL_ADC_Start+0x17c>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_ADC_Start+0x188>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d129      	bne.n	800410c <HAL_ADC_Start+0x164>
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <HAL_ADC_Start+0x17c>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	2b0f      	cmp	r3, #15
 80040c2:	d823      	bhi.n	800410c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d11c      	bne.n	800410c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80040e0:	609a      	str	r2, [r3, #8]
 80040e2:	e013      	b.n	800410c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a0f      	ldr	r2, [pc, #60]	; (8004128 <HAL_ADC_Start+0x180>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d10e      	bne.n	800410c <HAL_ADC_Start+0x164>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d107      	bne.n	800410c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800410a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000000 	.word	0x20000000
 8004120:	431bde83 	.word	0x431bde83
 8004124:	40012300 	.word	0x40012300
 8004128:	40012000 	.word	0x40012000
 800412c:	40012100 	.word	0x40012100
 8004130:	40012200 	.word	0x40012200

08004134 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_ADC_Stop+0x16>
 8004146:	2302      	movs	r3, #2
 8004148:	e021      	b.n	800418e <HAL_ADC_Stop+0x5a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	f043 0201 	orr.w	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b6:	d113      	bne.n	80041e0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80041c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c6:	d10b      	bne.n	80041e0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e05c      	b.n	800429a <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80041e0:	f7ff fe70 	bl	8003ec4 <HAL_GetTick>
 80041e4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80041e6:	e01a      	b.n	800421e <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d016      	beq.n	800421e <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_ADC_PollForConversion+0x6c>
 80041f6:	f7ff fe65 	bl	8003ec4 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d20b      	bcs.n	800421e <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f043 0204 	orr.w	r2, r3, #4
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e03d      	b.n	800429a <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b02      	cmp	r3, #2
 800422a:	d1dd      	bne.n	80041e8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0212 	mvn.w	r2, #18
 8004234:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d123      	bne.n	8004298 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004254:	2b00      	cmp	r3, #0
 8004256:	d11f      	bne.n	8004298 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004262:	2b00      	cmp	r3, #0
 8004264:	d006      	beq.n	8004274 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004270:	2b00      	cmp	r3, #0
 8004272:	d111      	bne.n	8004298 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	f043 0201 	orr.w	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_ADC_Start_DMA+0x1e>
 80042be:	2302      	movs	r3, #2
 80042c0:	e0cc      	b.n	800445c <HAL_ADC_Start_DMA+0x1b8>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d018      	beq.n	800430a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042e8:	4b5e      	ldr	r3, [pc, #376]	; (8004464 <HAL_ADC_Start_DMA+0x1c0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a5e      	ldr	r2, [pc, #376]	; (8004468 <HAL_ADC_Start_DMA+0x1c4>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0c9a      	lsrs	r2, r3, #18
 80042f4:	4613      	mov	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4413      	add	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80042fc:	e002      	b.n	8004304 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	3b01      	subs	r3, #1
 8004302:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f9      	bne.n	80042fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	f040 80a0 	bne.w	800445a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004344:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004358:	d106      	bne.n	8004368 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f023 0206 	bic.w	r2, r3, #6
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
 8004366:	e002      	b.n	800436e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004376:	4b3d      	ldr	r3, [pc, #244]	; (800446c <HAL_ADC_Start_DMA+0x1c8>)
 8004378:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	4a3c      	ldr	r2, [pc, #240]	; (8004470 <HAL_ADC_Start_DMA+0x1cc>)
 8004380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	4a3b      	ldr	r2, [pc, #236]	; (8004474 <HAL_ADC_Start_DMA+0x1d0>)
 8004388:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	4a3a      	ldr	r2, [pc, #232]	; (8004478 <HAL_ADC_Start_DMA+0x1d4>)
 8004390:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800439a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80043aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	334c      	adds	r3, #76	; 0x4c
 80043c6:	4619      	mov	r1, r3
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f000 fce8 	bl	8004da0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d12a      	bne.n	8004432 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a26      	ldr	r2, [pc, #152]	; (800447c <HAL_ADC_Start_DMA+0x1d8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d015      	beq.n	8004412 <HAL_ADC_Start_DMA+0x16e>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a25      	ldr	r2, [pc, #148]	; (8004480 <HAL_ADC_Start_DMA+0x1dc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d105      	bne.n	80043fc <HAL_ADC_Start_DMA+0x158>
 80043f0:	4b1e      	ldr	r3, [pc, #120]	; (800446c <HAL_ADC_Start_DMA+0x1c8>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a20      	ldr	r2, [pc, #128]	; (8004484 <HAL_ADC_Start_DMA+0x1e0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d129      	bne.n	800445a <HAL_ADC_Start_DMA+0x1b6>
 8004406:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_ADC_Start_DMA+0x1c8>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2b0f      	cmp	r3, #15
 8004410:	d823      	bhi.n	800445a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d11c      	bne.n	800445a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	e013      	b.n	800445a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a11      	ldr	r2, [pc, #68]	; (800447c <HAL_ADC_Start_DMA+0x1d8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d10e      	bne.n	800445a <HAL_ADC_Start_DMA+0x1b6>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d107      	bne.n	800445a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004458:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000000 	.word	0x20000000
 8004468:	431bde83 	.word	0x431bde83
 800446c:	40012300 	.word	0x40012300
 8004470:	0800491d 	.word	0x0800491d
 8004474:	080049d7 	.word	0x080049d7
 8004478:	080049f3 	.word	0x080049f3
 800447c:	40012000 	.word	0x40012000
 8004480:	40012100 	.word	0x40012100
 8004484:	40012200 	.word	0x40012200

08004488 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x1c>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e105      	b.n	8004708 <HAL_ADC_ConfigChannel+0x228>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b09      	cmp	r3, #9
 800450a:	d925      	bls.n	8004558 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68d9      	ldr	r1, [r3, #12]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	4613      	mov	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	3b1e      	subs	r3, #30
 8004522:	2207      	movs	r2, #7
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43da      	mvns	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	400a      	ands	r2, r1
 8004530:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68d9      	ldr	r1, [r3, #12]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	4618      	mov	r0, r3
 8004544:	4603      	mov	r3, r0
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	4403      	add	r3, r0
 800454a:	3b1e      	subs	r3, #30
 800454c:	409a      	lsls	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	e022      	b.n	800459e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6919      	ldr	r1, [r3, #16]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	4613      	mov	r3, r2
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4413      	add	r3, r2
 800456c:	2207      	movs	r2, #7
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43da      	mvns	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	400a      	ands	r2, r1
 800457a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6919      	ldr	r1, [r3, #16]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	b29b      	uxth	r3, r3
 800458c:	4618      	mov	r0, r3
 800458e:	4603      	mov	r3, r0
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	4403      	add	r3, r0
 8004594:	409a      	lsls	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b06      	cmp	r3, #6
 80045a4:	d824      	bhi.n	80045f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	3b05      	subs	r3, #5
 80045b8:	221f      	movs	r2, #31
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	400a      	ands	r2, r1
 80045c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	4618      	mov	r0, r3
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	3b05      	subs	r3, #5
 80045e2:	fa00 f203 	lsl.w	r2, r0, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	635a      	str	r2, [r3, #52]	; 0x34
 80045ee:	e04c      	b.n	800468a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b0c      	cmp	r3, #12
 80045f6:	d824      	bhi.n	8004642 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	3b23      	subs	r3, #35	; 0x23
 800460a:	221f      	movs	r2, #31
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	43da      	mvns	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	400a      	ands	r2, r1
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	4618      	mov	r0, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	3b23      	subs	r3, #35	; 0x23
 8004634:	fa00 f203 	lsl.w	r2, r0, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
 8004640:	e023      	b.n	800468a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	3b41      	subs	r3, #65	; 0x41
 8004654:	221f      	movs	r2, #31
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43da      	mvns	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	400a      	ands	r2, r1
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	4618      	mov	r0, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	3b41      	subs	r3, #65	; 0x41
 800467e:	fa00 f203 	lsl.w	r2, r0, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800468a:	4b22      	ldr	r3, [pc, #136]	; (8004714 <HAL_ADC_ConfigChannel+0x234>)
 800468c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a21      	ldr	r2, [pc, #132]	; (8004718 <HAL_ADC_ConfigChannel+0x238>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d109      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x1cc>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b12      	cmp	r3, #18
 800469e:	d105      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a19      	ldr	r2, [pc, #100]	; (8004718 <HAL_ADC_ConfigChannel+0x238>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d123      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x21e>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d003      	beq.n	80046c6 <HAL_ADC_ConfigChannel+0x1e6>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b11      	cmp	r3, #17
 80046c4:	d11b      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b10      	cmp	r3, #16
 80046d8:	d111      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046da:	4b10      	ldr	r3, [pc, #64]	; (800471c <HAL_ADC_ConfigChannel+0x23c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a10      	ldr	r2, [pc, #64]	; (8004720 <HAL_ADC_ConfigChannel+0x240>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	0c9a      	lsrs	r2, r3, #18
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046f0:	e002      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f9      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40012300 	.word	0x40012300
 8004718:	40012000 	.word	0x40012000
 800471c:	20000000 	.word	0x20000000
 8004720:	431bde83 	.word	0x431bde83

08004724 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800472c:	4b79      	ldr	r3, [pc, #484]	; (8004914 <ADC_Init+0x1f0>)
 800472e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	431a      	orrs	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6859      	ldr	r1, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	021a      	lsls	r2, r3, #8
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800477c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800479e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6899      	ldr	r1, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	4a58      	ldr	r2, [pc, #352]	; (8004918 <ADC_Init+0x1f4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d022      	beq.n	8004802 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6899      	ldr	r1, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6899      	ldr	r1, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	e00f      	b.n	8004822 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004820:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0202 	bic.w	r2, r2, #2
 8004830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6899      	ldr	r1, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7e1b      	ldrb	r3, [r3, #24]
 800483c:	005a      	lsls	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01b      	beq.n	8004888 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800486e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	3b01      	subs	r3, #1
 800487c:	035a      	lsls	r2, r3, #13
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	e007      	b.n	8004898 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004896:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80048a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	051a      	lsls	r2, r3, #20
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048da:	025a      	lsls	r2, r3, #9
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6899      	ldr	r1, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	029a      	lsls	r2, r3, #10
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40012300 	.word	0x40012300
 8004918:	0f000001 	.word	0x0f000001

0800491c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004932:	2b00      	cmp	r3, #0
 8004934:	d13c      	bne.n	80049b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d12b      	bne.n	80049a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004954:	2b00      	cmp	r3, #0
 8004956:	d127      	bne.n	80049a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004970:	2b00      	cmp	r3, #0
 8004972:	d119      	bne.n	80049a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0220 	bic.w	r2, r2, #32
 8004982:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d105      	bne.n	80049a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	f043 0201 	orr.w	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fd7a 	bl	80044a2 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80049ae:	e00e      	b.n	80049ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff fd84 	bl	80044ca <HAL_ADC_ErrorCallback>
}
 80049c2:	e004      	b.n	80049ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
}
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff fd66 	bl	80044b6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	f043 0204 	orr.w	r2, r3, #4
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f7ff fd59 	bl	80044ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <__NVIC_SetPriorityGrouping+0x44>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a52:	4a04      	ldr	r2, [pc, #16]	; (8004a64 <__NVIC_SetPriorityGrouping+0x44>)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	60d3      	str	r3, [r2, #12]
}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a6c:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <__NVIC_GetPriorityGrouping+0x18>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	0a1b      	lsrs	r3, r3, #8
 8004a72:	f003 0307 	and.w	r3, r3, #7
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	db0b      	blt.n	8004aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	f003 021f 	and.w	r2, r3, #31
 8004a9c:	4907      	ldr	r1, [pc, #28]	; (8004abc <__NVIC_EnableIRQ+0x38>)
 8004a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	e000e100 	.word	0xe000e100

08004ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	6039      	str	r1, [r7, #0]
 8004aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	db0a      	blt.n	8004aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	490c      	ldr	r1, [pc, #48]	; (8004b0c <__NVIC_SetPriority+0x4c>)
 8004ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ade:	0112      	lsls	r2, r2, #4
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ae8:	e00a      	b.n	8004b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	4908      	ldr	r1, [pc, #32]	; (8004b10 <__NVIC_SetPriority+0x50>)
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	3b04      	subs	r3, #4
 8004af8:	0112      	lsls	r2, r2, #4
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	440b      	add	r3, r1
 8004afe:	761a      	strb	r2, [r3, #24]
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	e000e100 	.word	0xe000e100
 8004b10:	e000ed00 	.word	0xe000ed00

08004b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b089      	sub	sp, #36	; 0x24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f1c3 0307 	rsb	r3, r3, #7
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	bf28      	it	cs
 8004b32:	2304      	movcs	r3, #4
 8004b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	2b06      	cmp	r3, #6
 8004b3c:	d902      	bls.n	8004b44 <NVIC_EncodePriority+0x30>
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3b03      	subs	r3, #3
 8004b42:	e000      	b.n	8004b46 <NVIC_EncodePriority+0x32>
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b48:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43da      	mvns	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	401a      	ands	r2, r3
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	43d9      	mvns	r1, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b6c:	4313      	orrs	r3, r2
         );
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3724      	adds	r7, #36	; 0x24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b8c:	d301      	bcc.n	8004b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e00f      	b.n	8004bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b92:	4a0a      	ldr	r2, [pc, #40]	; (8004bbc <SysTick_Config+0x40>)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b9a:	210f      	movs	r1, #15
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	f7ff ff8e 	bl	8004ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <SysTick_Config+0x40>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004baa:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <SysTick_Config+0x40>)
 8004bac:	2207      	movs	r2, #7
 8004bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	e000e010 	.word	0xe000e010

08004bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff ff29 	bl	8004a20 <__NVIC_SetPriorityGrouping>
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b086      	sub	sp, #24
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	4603      	mov	r3, r0
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]
 8004be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004be8:	f7ff ff3e 	bl	8004a68 <__NVIC_GetPriorityGrouping>
 8004bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	6978      	ldr	r0, [r7, #20]
 8004bf4:	f7ff ff8e 	bl	8004b14 <NVIC_EncodePriority>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bfe:	4611      	mov	r1, r2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff ff5d 	bl	8004ac0 <__NVIC_SetPriority>
}
 8004c06:	bf00      	nop
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	4603      	mov	r3, r0
 8004c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff ff31 	bl	8004a84 <__NVIC_EnableIRQ>
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff ffa2 	bl	8004b7c <SysTick_Config>
 8004c38:	4603      	mov	r3, r0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c50:	f7ff f938 	bl	8003ec4 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e099      	b.n	8004d94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c80:	e00f      	b.n	8004ca2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c82:	f7ff f91f 	bl	8003ec4 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b05      	cmp	r3, #5
 8004c8e:	d908      	bls.n	8004ca2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2203      	movs	r2, #3
 8004c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e078      	b.n	8004d94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e8      	bne.n	8004c82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4b38      	ldr	r3, [pc, #224]	; (8004d9c <HAL_DMA_Init+0x158>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d107      	bne.n	8004d0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	4313      	orrs	r3, r2
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f023 0307 	bic.w	r3, r3, #7
 8004d22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d117      	bne.n	8004d66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00e      	beq.n	8004d66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fa6f 	bl	800522c <DMA_CheckFifoParam>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2240      	movs	r2, #64	; 0x40
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d62:	2301      	movs	r3, #1
 8004d64:	e016      	b.n	8004d94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa26 	bl	80051c0 <DMA_CalcBaseAndBitshift>
 8004d74:	4603      	mov	r3, r0
 8004d76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7c:	223f      	movs	r2, #63	; 0x3f
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	f010803f 	.word	0xf010803f

08004da0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_DMA_Start_IT+0x26>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e040      	b.n	8004e48 <HAL_DMA_Start_IT+0xa8>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d12f      	bne.n	8004e3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f9b8 	bl	8005164 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df8:	223f      	movs	r2, #63	; 0x3f
 8004dfa:	409a      	lsls	r2, r3
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0216 	orr.w	r2, r2, #22
 8004e0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0208 	orr.w	r2, r2, #8
 8004e26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	e005      	b.n	8004e46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
 8004e44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e5c:	4b92      	ldr	r3, [pc, #584]	; (80050a8 <HAL_DMA_IRQHandler+0x258>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a92      	ldr	r2, [pc, #584]	; (80050ac <HAL_DMA_IRQHandler+0x25c>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	0a9b      	lsrs	r3, r3, #10
 8004e68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01a      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d013      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0204 	bic.w	r2, r2, #4
 8004ea2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	f043 0201 	orr.w	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d012      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	2201      	movs	r2, #1
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	f043 0202 	orr.w	r2, r3, #2
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d012      	beq.n	8004f28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00b      	beq.n	8004f28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f14:	2204      	movs	r2, #4
 8004f16:	409a      	lsls	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	f043 0204 	orr.w	r2, r3, #4
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d043      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d03c      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4a:	2210      	movs	r2, #16
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d018      	beq.n	8004f92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d108      	bne.n	8004f80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d024      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	4798      	blx	r3
 8004f7e:	e01f      	b.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01b      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	4798      	blx	r3
 8004f90:	e016      	b.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d107      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0208 	bic.w	r2, r2, #8
 8004fae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	409a      	lsls	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 808e 	beq.w	80050ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8086 	beq.w	80050ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b05      	cmp	r3, #5
 8004ff8:	d136      	bne.n	8005068 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0216 	bic.w	r2, r2, #22
 8005008:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695a      	ldr	r2, [r3, #20]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005018:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <HAL_DMA_IRQHandler+0x1da>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0208 	bic.w	r2, r2, #8
 8005038:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503e:	223f      	movs	r2, #63	; 0x3f
 8005040:	409a      	lsls	r2, r3
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505a:	2b00      	cmp	r3, #0
 800505c:	d07d      	beq.n	800515a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4798      	blx	r3
        }
        return;
 8005066:	e078      	b.n	800515a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01c      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d108      	bne.n	8005096 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005088:	2b00      	cmp	r3, #0
 800508a:	d030      	beq.n	80050ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
 8005094:	e02b      	b.n	80050ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d027      	beq.n	80050ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
 80050a6:	e022      	b.n	80050ee <HAL_DMA_IRQHandler+0x29e>
 80050a8:	20000000 	.word	0x20000000
 80050ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0210 	bic.w	r2, r2, #16
 80050cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d032      	beq.n	800515c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d022      	beq.n	8005148 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2205      	movs	r2, #5
 8005106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	3301      	adds	r3, #1
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	429a      	cmp	r2, r3
 8005124:	d307      	bcc.n	8005136 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f2      	bne.n	800511a <HAL_DMA_IRQHandler+0x2ca>
 8005134:	e000      	b.n	8005138 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005136:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	4798      	blx	r3
 8005158:	e000      	b.n	800515c <HAL_DMA_IRQHandler+0x30c>
        return;
 800515a:	bf00      	nop
    }
  }
}
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop

08005164 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005180:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b40      	cmp	r3, #64	; 0x40
 8005190:	d108      	bne.n	80051a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80051a2:	e007      	b.n	80051b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	60da      	str	r2, [r3, #12]
}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	3b10      	subs	r3, #16
 80051d0:	4a14      	ldr	r2, [pc, #80]	; (8005224 <DMA_CalcBaseAndBitshift+0x64>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051da:	4a13      	ldr	r2, [pc, #76]	; (8005228 <DMA_CalcBaseAndBitshift+0x68>)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d909      	bls.n	8005202 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051f6:	f023 0303 	bic.w	r3, r3, #3
 80051fa:	1d1a      	adds	r2, r3, #4
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	659a      	str	r2, [r3, #88]	; 0x58
 8005200:	e007      	b.n	8005212 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800520a:	f023 0303 	bic.w	r3, r3, #3
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	aaaaaaab 	.word	0xaaaaaaab
 8005228:	0800cb3c 	.word	0x0800cb3c

0800522c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d11f      	bne.n	8005286 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b03      	cmp	r3, #3
 800524a:	d855      	bhi.n	80052f8 <DMA_CheckFifoParam+0xcc>
 800524c:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <DMA_CheckFifoParam+0x28>)
 800524e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005252:	bf00      	nop
 8005254:	08005265 	.word	0x08005265
 8005258:	08005277 	.word	0x08005277
 800525c:	08005265 	.word	0x08005265
 8005260:	080052f9 	.word	0x080052f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d045      	beq.n	80052fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005274:	e042      	b.n	80052fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800527e:	d13f      	bne.n	8005300 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005284:	e03c      	b.n	8005300 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528e:	d121      	bne.n	80052d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b03      	cmp	r3, #3
 8005294:	d836      	bhi.n	8005304 <DMA_CheckFifoParam+0xd8>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <DMA_CheckFifoParam+0x70>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052ad 	.word	0x080052ad
 80052a0:	080052b3 	.word	0x080052b3
 80052a4:	080052ad 	.word	0x080052ad
 80052a8:	080052c5 	.word	0x080052c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
      break;
 80052b0:	e02f      	b.n	8005312 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d024      	beq.n	8005308 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052c2:	e021      	b.n	8005308 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052cc:	d11e      	bne.n	800530c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052d2:	e01b      	b.n	800530c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d902      	bls.n	80052e0 <DMA_CheckFifoParam+0xb4>
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d003      	beq.n	80052e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052de:	e018      	b.n	8005312 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
      break;
 80052e4:	e015      	b.n	8005312 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00e      	beq.n	8005310 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	73fb      	strb	r3, [r7, #15]
      break;
 80052f6:	e00b      	b.n	8005310 <DMA_CheckFifoParam+0xe4>
      break;
 80052f8:	bf00      	nop
 80052fa:	e00a      	b.n	8005312 <DMA_CheckFifoParam+0xe6>
      break;
 80052fc:	bf00      	nop
 80052fe:	e008      	b.n	8005312 <DMA_CheckFifoParam+0xe6>
      break;
 8005300:	bf00      	nop
 8005302:	e006      	b.n	8005312 <DMA_CheckFifoParam+0xe6>
      break;
 8005304:	bf00      	nop
 8005306:	e004      	b.n	8005312 <DMA_CheckFifoParam+0xe6>
      break;
 8005308:	bf00      	nop
 800530a:	e002      	b.n	8005312 <DMA_CheckFifoParam+0xe6>
      break;   
 800530c:	bf00      	nop
 800530e:	e000      	b.n	8005312 <DMA_CheckFifoParam+0xe6>
      break;
 8005310:	bf00      	nop
    }
  } 
  
  return status; 
 8005312:	7bfb      	ldrb	r3, [r7, #15]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005320:	b480      	push	{r7}
 8005322:	b089      	sub	sp, #36	; 0x24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800532e:	2300      	movs	r3, #0
 8005330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005332:	2300      	movs	r3, #0
 8005334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	e16b      	b.n	8005614 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800533c:	2201      	movs	r2, #1
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4013      	ands	r3, r2
 800534e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	429a      	cmp	r2, r3
 8005356:	f040 815a 	bne.w	800560e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d00b      	beq.n	800537a <HAL_GPIO_Init+0x5a>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d007      	beq.n	800537a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800536e:	2b11      	cmp	r3, #17
 8005370:	d003      	beq.n	800537a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b12      	cmp	r3, #18
 8005378:	d130      	bne.n	80053dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	2203      	movs	r2, #3
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43db      	mvns	r3, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	4013      	ands	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053b0:	2201      	movs	r2, #1
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	43db      	mvns	r3, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4013      	ands	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 0201 	and.w	r2, r3, #1
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	2203      	movs	r2, #3
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	43db      	mvns	r3, r3
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	4013      	ands	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	4313      	orrs	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b02      	cmp	r3, #2
 8005412:	d003      	beq.n	800541c <HAL_GPIO_Init+0xfc>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b12      	cmp	r3, #18
 800541a:	d123      	bne.n	8005464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	08da      	lsrs	r2, r3, #3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3208      	adds	r2, #8
 8005424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	220f      	movs	r2, #15
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	08da      	lsrs	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3208      	adds	r2, #8
 800545e:	69b9      	ldr	r1, [r7, #24]
 8005460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	2203      	movs	r2, #3
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	43db      	mvns	r3, r3
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	4013      	ands	r3, r2
 800547a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f003 0203 	and.w	r2, r3, #3
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4313      	orrs	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80b4 	beq.w	800560e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	4b5f      	ldr	r3, [pc, #380]	; (8005628 <HAL_GPIO_Init+0x308>)
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	4a5e      	ldr	r2, [pc, #376]	; (8005628 <HAL_GPIO_Init+0x308>)
 80054b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054b4:	6453      	str	r3, [r2, #68]	; 0x44
 80054b6:	4b5c      	ldr	r3, [pc, #368]	; (8005628 <HAL_GPIO_Init+0x308>)
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054c2:	4a5a      	ldr	r2, [pc, #360]	; (800562c <HAL_GPIO_Init+0x30c>)
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	089b      	lsrs	r3, r3, #2
 80054c8:	3302      	adds	r3, #2
 80054ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	220f      	movs	r2, #15
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43db      	mvns	r3, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4013      	ands	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a51      	ldr	r2, [pc, #324]	; (8005630 <HAL_GPIO_Init+0x310>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d02b      	beq.n	8005546 <HAL_GPIO_Init+0x226>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a50      	ldr	r2, [pc, #320]	; (8005634 <HAL_GPIO_Init+0x314>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d025      	beq.n	8005542 <HAL_GPIO_Init+0x222>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a4f      	ldr	r2, [pc, #316]	; (8005638 <HAL_GPIO_Init+0x318>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01f      	beq.n	800553e <HAL_GPIO_Init+0x21e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a4e      	ldr	r2, [pc, #312]	; (800563c <HAL_GPIO_Init+0x31c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d019      	beq.n	800553a <HAL_GPIO_Init+0x21a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a4d      	ldr	r2, [pc, #308]	; (8005640 <HAL_GPIO_Init+0x320>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_GPIO_Init+0x216>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a4c      	ldr	r2, [pc, #304]	; (8005644 <HAL_GPIO_Init+0x324>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00d      	beq.n	8005532 <HAL_GPIO_Init+0x212>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a4b      	ldr	r2, [pc, #300]	; (8005648 <HAL_GPIO_Init+0x328>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d007      	beq.n	800552e <HAL_GPIO_Init+0x20e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a4a      	ldr	r2, [pc, #296]	; (800564c <HAL_GPIO_Init+0x32c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d101      	bne.n	800552a <HAL_GPIO_Init+0x20a>
 8005526:	2307      	movs	r3, #7
 8005528:	e00e      	b.n	8005548 <HAL_GPIO_Init+0x228>
 800552a:	2308      	movs	r3, #8
 800552c:	e00c      	b.n	8005548 <HAL_GPIO_Init+0x228>
 800552e:	2306      	movs	r3, #6
 8005530:	e00a      	b.n	8005548 <HAL_GPIO_Init+0x228>
 8005532:	2305      	movs	r3, #5
 8005534:	e008      	b.n	8005548 <HAL_GPIO_Init+0x228>
 8005536:	2304      	movs	r3, #4
 8005538:	e006      	b.n	8005548 <HAL_GPIO_Init+0x228>
 800553a:	2303      	movs	r3, #3
 800553c:	e004      	b.n	8005548 <HAL_GPIO_Init+0x228>
 800553e:	2302      	movs	r3, #2
 8005540:	e002      	b.n	8005548 <HAL_GPIO_Init+0x228>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <HAL_GPIO_Init+0x228>
 8005546:	2300      	movs	r3, #0
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	f002 0203 	and.w	r2, r2, #3
 800554e:	0092      	lsls	r2, r2, #2
 8005550:	4093      	lsls	r3, r2
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	4313      	orrs	r3, r2
 8005556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005558:	4934      	ldr	r1, [pc, #208]	; (800562c <HAL_GPIO_Init+0x30c>)
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	089b      	lsrs	r3, r3, #2
 800555e:	3302      	adds	r3, #2
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005566:	4b3a      	ldr	r3, [pc, #232]	; (8005650 <HAL_GPIO_Init+0x330>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	43db      	mvns	r3, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4013      	ands	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800558a:	4a31      	ldr	r2, [pc, #196]	; (8005650 <HAL_GPIO_Init+0x330>)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005590:	4b2f      	ldr	r3, [pc, #188]	; (8005650 <HAL_GPIO_Init+0x330>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	43db      	mvns	r3, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4013      	ands	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055b4:	4a26      	ldr	r2, [pc, #152]	; (8005650 <HAL_GPIO_Init+0x330>)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055ba:	4b25      	ldr	r3, [pc, #148]	; (8005650 <HAL_GPIO_Init+0x330>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	43db      	mvns	r3, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4013      	ands	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055de:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <HAL_GPIO_Init+0x330>)
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055e4:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <HAL_GPIO_Init+0x330>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	43db      	mvns	r3, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4013      	ands	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005608:	4a11      	ldr	r2, [pc, #68]	; (8005650 <HAL_GPIO_Init+0x330>)
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	3301      	adds	r3, #1
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2b0f      	cmp	r3, #15
 8005618:	f67f ae90 	bls.w	800533c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800561c:	bf00      	nop
 800561e:	3724      	adds	r7, #36	; 0x24
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	40023800 	.word	0x40023800
 800562c:	40013800 	.word	0x40013800
 8005630:	40020000 	.word	0x40020000
 8005634:	40020400 	.word	0x40020400
 8005638:	40020800 	.word	0x40020800
 800563c:	40020c00 	.word	0x40020c00
 8005640:	40021000 	.word	0x40021000
 8005644:	40021400 	.word	0x40021400
 8005648:	40021800 	.word	0x40021800
 800564c:	40021c00 	.word	0x40021c00
 8005650:	40013c00 	.word	0x40013c00

08005654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	887b      	ldrh	r3, [r7, #2]
 8005666:	4013      	ands	r3, r2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
 8005670:	e001      	b.n	8005676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005672:	2300      	movs	r3, #0
 8005674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005676:	7bfb      	ldrb	r3, [r7, #15]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	807b      	strh	r3, [r7, #2]
 8005690:	4613      	mov	r3, r2
 8005692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005694:	787b      	ldrb	r3, [r7, #1]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800569a:	887a      	ldrh	r2, [r7, #2]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056a0:	e003      	b.n	80056aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056a2:	887b      	ldrh	r3, [r7, #2]
 80056a4:	041a      	lsls	r2, r3, #16
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	619a      	str	r2, [r3, #24]
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	695a      	ldr	r2, [r3, #20]
 80056c6:	887b      	ldrh	r3, [r7, #2]
 80056c8:	401a      	ands	r2, r3
 80056ca:	887b      	ldrh	r3, [r7, #2]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d104      	bne.n	80056da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80056d0:	887b      	ldrh	r3, [r7, #2]
 80056d2:	041a      	lsls	r2, r3, #16
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80056d8:	e002      	b.n	80056e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80056da:	887a      	ldrh	r2, [r7, #2]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	619a      	str	r2, [r3, #24]
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80056f6:	4b08      	ldr	r3, [pc, #32]	; (8005718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d006      	beq.n	8005710 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005702:	4a05      	ldr	r2, [pc, #20]	; (8005718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f806 	bl	800571c <HAL_GPIO_EXTI_Callback>
  }
}
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40013c00 	.word	0x40013c00

0800571c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e11f      	b.n	8005986 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fc f9d4 	bl	8001b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2224      	movs	r2, #36	; 0x24
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005798:	f001 f82e 	bl	80067f8 <HAL_RCC_GetPCLK1Freq>
 800579c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	4a7b      	ldr	r2, [pc, #492]	; (8005990 <HAL_I2C_Init+0x25c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d807      	bhi.n	80057b8 <HAL_I2C_Init+0x84>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a7a      	ldr	r2, [pc, #488]	; (8005994 <HAL_I2C_Init+0x260>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	bf94      	ite	ls
 80057b0:	2301      	movls	r3, #1
 80057b2:	2300      	movhi	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	e006      	b.n	80057c6 <HAL_I2C_Init+0x92>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a77      	ldr	r2, [pc, #476]	; (8005998 <HAL_I2C_Init+0x264>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	bf94      	ite	ls
 80057c0:	2301      	movls	r3, #1
 80057c2:	2300      	movhi	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e0db      	b.n	8005986 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a72      	ldr	r2, [pc, #456]	; (800599c <HAL_I2C_Init+0x268>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	0c9b      	lsrs	r3, r3, #18
 80057d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	4a64      	ldr	r2, [pc, #400]	; (8005990 <HAL_I2C_Init+0x25c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d802      	bhi.n	8005808 <HAL_I2C_Init+0xd4>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	3301      	adds	r3, #1
 8005806:	e009      	b.n	800581c <HAL_I2C_Init+0xe8>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	4a63      	ldr	r2, [pc, #396]	; (80059a0 <HAL_I2C_Init+0x26c>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	099b      	lsrs	r3, r3, #6
 800581a:	3301      	adds	r3, #1
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	430b      	orrs	r3, r1
 8005822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800582e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4956      	ldr	r1, [pc, #344]	; (8005990 <HAL_I2C_Init+0x25c>)
 8005838:	428b      	cmp	r3, r1
 800583a:	d80d      	bhi.n	8005858 <HAL_I2C_Init+0x124>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	1e59      	subs	r1, r3, #1
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	fbb1 f3f3 	udiv	r3, r1, r3
 800584a:	3301      	adds	r3, #1
 800584c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005850:	2b04      	cmp	r3, #4
 8005852:	bf38      	it	cc
 8005854:	2304      	movcc	r3, #4
 8005856:	e04f      	b.n	80058f8 <HAL_I2C_Init+0x1c4>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d111      	bne.n	8005884 <HAL_I2C_Init+0x150>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	1e58      	subs	r0, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6859      	ldr	r1, [r3, #4]
 8005868:	460b      	mov	r3, r1
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	440b      	add	r3, r1
 800586e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005872:	3301      	adds	r3, #1
 8005874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005878:	2b00      	cmp	r3, #0
 800587a:	bf0c      	ite	eq
 800587c:	2301      	moveq	r3, #1
 800587e:	2300      	movne	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	e012      	b.n	80058aa <HAL_I2C_Init+0x176>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	1e58      	subs	r0, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6859      	ldr	r1, [r3, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	0099      	lsls	r1, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	fbb0 f3f3 	udiv	r3, r0, r3
 800589a:	3301      	adds	r3, #1
 800589c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	bf0c      	ite	eq
 80058a4:	2301      	moveq	r3, #1
 80058a6:	2300      	movne	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <HAL_I2C_Init+0x17e>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e022      	b.n	80058f8 <HAL_I2C_Init+0x1c4>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10e      	bne.n	80058d8 <HAL_I2C_Init+0x1a4>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1e58      	subs	r0, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6859      	ldr	r1, [r3, #4]
 80058c2:	460b      	mov	r3, r1
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	440b      	add	r3, r1
 80058c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80058cc:	3301      	adds	r3, #1
 80058ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d6:	e00f      	b.n	80058f8 <HAL_I2C_Init+0x1c4>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	1e58      	subs	r0, r3, #1
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6859      	ldr	r1, [r3, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	0099      	lsls	r1, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ee:	3301      	adds	r3, #1
 80058f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	6809      	ldr	r1, [r1, #0]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005926:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6911      	ldr	r1, [r2, #16]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	68d2      	ldr	r2, [r2, #12]
 8005932:	4311      	orrs	r1, r2
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6812      	ldr	r2, [r2, #0]
 8005938:	430b      	orrs	r3, r1
 800593a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695a      	ldr	r2, [r3, #20]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	000186a0 	.word	0x000186a0
 8005994:	001e847f 	.word	0x001e847f
 8005998:	003d08ff 	.word	0x003d08ff
 800599c:	431bde83 	.word	0x431bde83
 80059a0:	10624dd3 	.word	0x10624dd3

080059a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	4608      	mov	r0, r1
 80059ae:	4611      	mov	r1, r2
 80059b0:	461a      	mov	r2, r3
 80059b2:	4603      	mov	r3, r0
 80059b4:	817b      	strh	r3, [r7, #10]
 80059b6:	460b      	mov	r3, r1
 80059b8:	813b      	strh	r3, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059be:	f7fe fa81 	bl	8003ec4 <HAL_GetTick>
 80059c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	f040 80d9 	bne.w	8005b84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	2319      	movs	r3, #25
 80059d8:	2201      	movs	r2, #1
 80059da:	496d      	ldr	r1, [pc, #436]	; (8005b90 <HAL_I2C_Mem_Write+0x1ec>)
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f96f 	bl	8005cc0 <I2C_WaitOnFlagUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80059e8:	2302      	movs	r3, #2
 80059ea:	e0cc      	b.n	8005b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_I2C_Mem_Write+0x56>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e0c5      	b.n	8005b86 <HAL_I2C_Mem_Write+0x1e2>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d007      	beq.n	8005a20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2221      	movs	r2, #33	; 0x21
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2240      	movs	r2, #64	; 0x40
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4a4d      	ldr	r2, [pc, #308]	; (8005b94 <HAL_I2C_Mem_Write+0x1f0>)
 8005a60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a62:	88f8      	ldrh	r0, [r7, #6]
 8005a64:	893a      	ldrh	r2, [r7, #8]
 8005a66:	8979      	ldrh	r1, [r7, #10]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	4603      	mov	r3, r0
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f890 	bl	8005b98 <I2C_RequestMemoryWrite>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d052      	beq.n	8005b24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e081      	b.n	8005b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f9f0 	bl	8005e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00d      	beq.n	8005aae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d107      	bne.n	8005aaa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e06b      	b.n	8005b86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	781a      	ldrb	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d11b      	bne.n	8005b24 <HAL_I2C_Mem_Write+0x180>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d017      	beq.n	8005b24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1aa      	bne.n	8005a82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f9dc 	bl	8005eee <I2C_WaitOnBTFFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00d      	beq.n	8005b58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d107      	bne.n	8005b54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e016      	b.n	8005b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e000      	b.n	8005b86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	00100002 	.word	0x00100002
 8005b94:	ffff0000 	.word	0xffff0000

08005b98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	817b      	strh	r3, [r7, #10]
 8005baa:	460b      	mov	r3, r1
 8005bac:	813b      	strh	r3, [r7, #8]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f876 	bl	8005cc0 <I2C_WaitOnFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00c      	beq.n	8005bf4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e05f      	b.n	8005cb4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bf4:	897b      	ldrh	r3, [r7, #10]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	492c      	ldr	r1, [pc, #176]	; (8005cbc <I2C_RequestMemoryWrite+0x124>)
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f8af 	bl	8005d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e04c      	b.n	8005cb4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c32:	6a39      	ldr	r1, [r7, #32]
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 f919 	bl	8005e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00d      	beq.n	8005c5c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d107      	bne.n	8005c58 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e02b      	b.n	8005cb4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d105      	bne.n	8005c6e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c62:	893b      	ldrh	r3, [r7, #8]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	611a      	str	r2, [r3, #16]
 8005c6c:	e021      	b.n	8005cb2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c6e:	893b      	ldrh	r3, [r7, #8]
 8005c70:	0a1b      	lsrs	r3, r3, #8
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c7e:	6a39      	ldr	r1, [r7, #32]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f8f3 	bl	8005e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00d      	beq.n	8005ca8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d107      	bne.n	8005ca4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e005      	b.n	8005cb4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca8:	893b      	ldrh	r3, [r7, #8]
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	00010002 	.word	0x00010002

08005cc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cd0:	e025      	b.n	8005d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d021      	beq.n	8005d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cda:	f7fe f8f3 	bl	8003ec4 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d302      	bcc.n	8005cf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d116      	bne.n	8005d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f043 0220 	orr.w	r2, r3, #32
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e023      	b.n	8005d66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d10d      	bne.n	8005d44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	43da      	mvns	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4013      	ands	r3, r2
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bf0c      	ite	eq
 8005d3a:	2301      	moveq	r3, #1
 8005d3c:	2300      	movne	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	e00c      	b.n	8005d5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	43da      	mvns	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bf0c      	ite	eq
 8005d56:	2301      	moveq	r3, #1
 8005d58:	2300      	movne	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d0b6      	beq.n	8005cd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	607a      	str	r2, [r7, #4]
 8005d7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d7c:	e051      	b.n	8005e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8c:	d123      	bne.n	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005da6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	f043 0204 	orr.w	r2, r3, #4
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e046      	b.n	8005e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d021      	beq.n	8005e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dde:	f7fe f871 	bl	8003ec4 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d302      	bcc.n	8005df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d116      	bne.n	8005e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f043 0220 	orr.w	r2, r3, #32
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e020      	b.n	8005e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	0c1b      	lsrs	r3, r3, #16
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d10c      	bne.n	8005e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	43da      	mvns	r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4013      	ands	r3, r2
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	bf14      	ite	ne
 8005e3e:	2301      	movne	r3, #1
 8005e40:	2300      	moveq	r3, #0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	e00b      	b.n	8005e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	43da      	mvns	r2, r3
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	4013      	ands	r3, r2
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d18d      	bne.n	8005d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e78:	e02d      	b.n	8005ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f878 	bl	8005f70 <I2C_IsAcknowledgeFailed>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e02d      	b.n	8005ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d021      	beq.n	8005ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e92:	f7fe f817 	bl	8003ec4 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d302      	bcc.n	8005ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d116      	bne.n	8005ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	f043 0220 	orr.w	r2, r3, #32
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e007      	b.n	8005ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee0:	2b80      	cmp	r3, #128	; 0x80
 8005ee2:	d1ca      	bne.n	8005e7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005efa:	e02d      	b.n	8005f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f837 	bl	8005f70 <I2C_IsAcknowledgeFailed>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e02d      	b.n	8005f68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f12:	d021      	beq.n	8005f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f14:	f7fd ffd6 	bl	8003ec4 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d302      	bcc.n	8005f2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d116      	bne.n	8005f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	f043 0220 	orr.w	r2, r3, #32
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e007      	b.n	8005f68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d1ca      	bne.n	8005efc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f86:	d11b      	bne.n	8005fc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	f043 0204 	orr.w	r2, r3, #4
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e000      	b.n	8005fc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e25b      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d075      	beq.n	80060da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fee:	4ba3      	ldr	r3, [pc, #652]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 030c 	and.w	r3, r3, #12
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d00c      	beq.n	8006014 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ffa:	4ba0      	ldr	r3, [pc, #640]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006002:	2b08      	cmp	r3, #8
 8006004:	d112      	bne.n	800602c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006006:	4b9d      	ldr	r3, [pc, #628]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800600e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006012:	d10b      	bne.n	800602c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006014:	4b99      	ldr	r3, [pc, #612]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d05b      	beq.n	80060d8 <HAL_RCC_OscConfig+0x108>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d157      	bne.n	80060d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e236      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006034:	d106      	bne.n	8006044 <HAL_RCC_OscConfig+0x74>
 8006036:	4b91      	ldr	r3, [pc, #580]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a90      	ldr	r2, [pc, #576]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 800603c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	e01d      	b.n	8006080 <HAL_RCC_OscConfig+0xb0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800604c:	d10c      	bne.n	8006068 <HAL_RCC_OscConfig+0x98>
 800604e:	4b8b      	ldr	r3, [pc, #556]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a8a      	ldr	r2, [pc, #552]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	4b88      	ldr	r3, [pc, #544]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a87      	ldr	r2, [pc, #540]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e00b      	b.n	8006080 <HAL_RCC_OscConfig+0xb0>
 8006068:	4b84      	ldr	r3, [pc, #528]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a83      	ldr	r2, [pc, #524]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 800606e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	4b81      	ldr	r3, [pc, #516]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a80      	ldr	r2, [pc, #512]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 800607a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800607e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d013      	beq.n	80060b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006088:	f7fd ff1c 	bl	8003ec4 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006090:	f7fd ff18 	bl	8003ec4 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b64      	cmp	r3, #100	; 0x64
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e1fb      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a2:	4b76      	ldr	r3, [pc, #472]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0f0      	beq.n	8006090 <HAL_RCC_OscConfig+0xc0>
 80060ae:	e014      	b.n	80060da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b0:	f7fd ff08 	bl	8003ec4 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b8:	f7fd ff04 	bl	8003ec4 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b64      	cmp	r3, #100	; 0x64
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e1e7      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ca:	4b6c      	ldr	r3, [pc, #432]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f0      	bne.n	80060b8 <HAL_RCC_OscConfig+0xe8>
 80060d6:	e000      	b.n	80060da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d063      	beq.n	80061ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060e6:	4b65      	ldr	r3, [pc, #404]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 030c 	and.w	r3, r3, #12
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00b      	beq.n	800610a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060f2:	4b62      	ldr	r3, [pc, #392]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d11c      	bne.n	8006138 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060fe:	4b5f      	ldr	r3, [pc, #380]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d116      	bne.n	8006138 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800610a:	4b5c      	ldr	r3, [pc, #368]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_RCC_OscConfig+0x152>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d001      	beq.n	8006122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e1bb      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006122:	4b56      	ldr	r3, [pc, #344]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	4952      	ldr	r1, [pc, #328]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006132:	4313      	orrs	r3, r2
 8006134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006136:	e03a      	b.n	80061ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d020      	beq.n	8006182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006140:	4b4f      	ldr	r3, [pc, #316]	; (8006280 <HAL_RCC_OscConfig+0x2b0>)
 8006142:	2201      	movs	r2, #1
 8006144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006146:	f7fd febd 	bl	8003ec4 <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800614e:	f7fd feb9 	bl	8003ec4 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e19c      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006160:	4b46      	ldr	r3, [pc, #280]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0f0      	beq.n	800614e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800616c:	4b43      	ldr	r3, [pc, #268]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	4940      	ldr	r1, [pc, #256]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 800617c:	4313      	orrs	r3, r2
 800617e:	600b      	str	r3, [r1, #0]
 8006180:	e015      	b.n	80061ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006182:	4b3f      	ldr	r3, [pc, #252]	; (8006280 <HAL_RCC_OscConfig+0x2b0>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006188:	f7fd fe9c 	bl	8003ec4 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006190:	f7fd fe98 	bl	8003ec4 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e17b      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061a2:	4b36      	ldr	r3, [pc, #216]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f0      	bne.n	8006190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d030      	beq.n	800621c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d016      	beq.n	80061f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061c2:	4b30      	ldr	r3, [pc, #192]	; (8006284 <HAL_RCC_OscConfig+0x2b4>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c8:	f7fd fe7c 	bl	8003ec4 <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061d0:	f7fd fe78 	bl	8003ec4 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e15b      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061e2:	4b26      	ldr	r3, [pc, #152]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 80061e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0f0      	beq.n	80061d0 <HAL_RCC_OscConfig+0x200>
 80061ee:	e015      	b.n	800621c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061f0:	4b24      	ldr	r3, [pc, #144]	; (8006284 <HAL_RCC_OscConfig+0x2b4>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061f6:	f7fd fe65 	bl	8003ec4 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061fe:	f7fd fe61 	bl	8003ec4 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e144      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006210:	4b1a      	ldr	r3, [pc, #104]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f0      	bne.n	80061fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 80a0 	beq.w	800636a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800622a:	2300      	movs	r3, #0
 800622c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800622e:	4b13      	ldr	r3, [pc, #76]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10f      	bne.n	800625a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800623a:	2300      	movs	r3, #0
 800623c:	60bb      	str	r3, [r7, #8]
 800623e:	4b0f      	ldr	r3, [pc, #60]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	4a0e      	ldr	r2, [pc, #56]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 8006244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006248:	6413      	str	r3, [r2, #64]	; 0x40
 800624a:	4b0c      	ldr	r3, [pc, #48]	; (800627c <HAL_RCC_OscConfig+0x2ac>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006252:	60bb      	str	r3, [r7, #8]
 8006254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006256:	2301      	movs	r3, #1
 8006258:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <HAL_RCC_OscConfig+0x2b8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006262:	2b00      	cmp	r3, #0
 8006264:	d121      	bne.n	80062aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006266:	4b08      	ldr	r3, [pc, #32]	; (8006288 <HAL_RCC_OscConfig+0x2b8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a07      	ldr	r2, [pc, #28]	; (8006288 <HAL_RCC_OscConfig+0x2b8>)
 800626c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006272:	f7fd fe27 	bl	8003ec4 <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006278:	e011      	b.n	800629e <HAL_RCC_OscConfig+0x2ce>
 800627a:	bf00      	nop
 800627c:	40023800 	.word	0x40023800
 8006280:	42470000 	.word	0x42470000
 8006284:	42470e80 	.word	0x42470e80
 8006288:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800628c:	f7fd fe1a 	bl	8003ec4 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e0fd      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800629e:	4b81      	ldr	r3, [pc, #516]	; (80064a4 <HAL_RCC_OscConfig+0x4d4>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0f0      	beq.n	800628c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d106      	bne.n	80062c0 <HAL_RCC_OscConfig+0x2f0>
 80062b2:	4b7d      	ldr	r3, [pc, #500]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	4a7c      	ldr	r2, [pc, #496]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	6713      	str	r3, [r2, #112]	; 0x70
 80062be:	e01c      	b.n	80062fa <HAL_RCC_OscConfig+0x32a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	2b05      	cmp	r3, #5
 80062c6:	d10c      	bne.n	80062e2 <HAL_RCC_OscConfig+0x312>
 80062c8:	4b77      	ldr	r3, [pc, #476]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 80062ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062cc:	4a76      	ldr	r2, [pc, #472]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 80062ce:	f043 0304 	orr.w	r3, r3, #4
 80062d2:	6713      	str	r3, [r2, #112]	; 0x70
 80062d4:	4b74      	ldr	r3, [pc, #464]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 80062d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d8:	4a73      	ldr	r2, [pc, #460]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 80062da:	f043 0301 	orr.w	r3, r3, #1
 80062de:	6713      	str	r3, [r2, #112]	; 0x70
 80062e0:	e00b      	b.n	80062fa <HAL_RCC_OscConfig+0x32a>
 80062e2:	4b71      	ldr	r3, [pc, #452]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 80062e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e6:	4a70      	ldr	r2, [pc, #448]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	6713      	str	r3, [r2, #112]	; 0x70
 80062ee:	4b6e      	ldr	r3, [pc, #440]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f2:	4a6d      	ldr	r2, [pc, #436]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 80062f4:	f023 0304 	bic.w	r3, r3, #4
 80062f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d015      	beq.n	800632e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006302:	f7fd fddf 	bl	8003ec4 <HAL_GetTick>
 8006306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006308:	e00a      	b.n	8006320 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800630a:	f7fd fddb 	bl	8003ec4 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	f241 3288 	movw	r2, #5000	; 0x1388
 8006318:	4293      	cmp	r3, r2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e0bc      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006320:	4b61      	ldr	r3, [pc, #388]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 8006322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0ee      	beq.n	800630a <HAL_RCC_OscConfig+0x33a>
 800632c:	e014      	b.n	8006358 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800632e:	f7fd fdc9 	bl	8003ec4 <HAL_GetTick>
 8006332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006334:	e00a      	b.n	800634c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006336:	f7fd fdc5 	bl	8003ec4 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	f241 3288 	movw	r2, #5000	; 0x1388
 8006344:	4293      	cmp	r3, r2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e0a6      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800634c:	4b56      	ldr	r3, [pc, #344]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1ee      	bne.n	8006336 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006358:	7dfb      	ldrb	r3, [r7, #23]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d105      	bne.n	800636a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800635e:	4b52      	ldr	r3, [pc, #328]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	4a51      	ldr	r2, [pc, #324]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 8006364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006368:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 8092 	beq.w	8006498 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006374:	4b4c      	ldr	r3, [pc, #304]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f003 030c 	and.w	r3, r3, #12
 800637c:	2b08      	cmp	r3, #8
 800637e:	d05c      	beq.n	800643a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d141      	bne.n	800640c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006388:	4b48      	ldr	r3, [pc, #288]	; (80064ac <HAL_RCC_OscConfig+0x4dc>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638e:	f7fd fd99 	bl	8003ec4 <HAL_GetTick>
 8006392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006394:	e008      	b.n	80063a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006396:	f7fd fd95 	bl	8003ec4 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e078      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a8:	4b3f      	ldr	r3, [pc, #252]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f0      	bne.n	8006396 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	019b      	lsls	r3, r3, #6
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	3b01      	subs	r3, #1
 80063ce:	041b      	lsls	r3, r3, #16
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	061b      	lsls	r3, r3, #24
 80063d8:	4933      	ldr	r1, [pc, #204]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063de:	4b33      	ldr	r3, [pc, #204]	; (80064ac <HAL_RCC_OscConfig+0x4dc>)
 80063e0:	2201      	movs	r2, #1
 80063e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e4:	f7fd fd6e 	bl	8003ec4 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fd fd6a 	bl	8003ec4 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e04d      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063fe:	4b2a      	ldr	r3, [pc, #168]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0f0      	beq.n	80063ec <HAL_RCC_OscConfig+0x41c>
 800640a:	e045      	b.n	8006498 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800640c:	4b27      	ldr	r3, [pc, #156]	; (80064ac <HAL_RCC_OscConfig+0x4dc>)
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006412:	f7fd fd57 	bl	8003ec4 <HAL_GetTick>
 8006416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800641a:	f7fd fd53 	bl	8003ec4 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e036      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800642c:	4b1e      	ldr	r3, [pc, #120]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1f0      	bne.n	800641a <HAL_RCC_OscConfig+0x44a>
 8006438:	e02e      	b.n	8006498 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d101      	bne.n	8006446 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e029      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006446:	4b18      	ldr	r3, [pc, #96]	; (80064a8 <HAL_RCC_OscConfig+0x4d8>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	429a      	cmp	r2, r3
 8006458:	d11c      	bne.n	8006494 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006464:	429a      	cmp	r2, r3
 8006466:	d115      	bne.n	8006494 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800646e:	4013      	ands	r3, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006474:	4293      	cmp	r3, r2
 8006476:	d10d      	bne.n	8006494 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006482:	429a      	cmp	r2, r3
 8006484:	d106      	bne.n	8006494 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006490:	429a      	cmp	r2, r3
 8006492:	d001      	beq.n	8006498 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40007000 	.word	0x40007000
 80064a8:	40023800 	.word	0x40023800
 80064ac:	42470060 	.word	0x42470060

080064b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e0cc      	b.n	800665e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064c4:	4b68      	ldr	r3, [pc, #416]	; (8006668 <HAL_RCC_ClockConfig+0x1b8>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d90c      	bls.n	80064ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d2:	4b65      	ldr	r3, [pc, #404]	; (8006668 <HAL_RCC_ClockConfig+0x1b8>)
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064da:	4b63      	ldr	r3, [pc, #396]	; (8006668 <HAL_RCC_ClockConfig+0x1b8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d001      	beq.n	80064ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e0b8      	b.n	800665e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d020      	beq.n	800653a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006504:	4b59      	ldr	r3, [pc, #356]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	4a58      	ldr	r2, [pc, #352]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 800650a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800650e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800651c:	4b53      	ldr	r3, [pc, #332]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	4a52      	ldr	r2, [pc, #328]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006528:	4b50      	ldr	r3, [pc, #320]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	494d      	ldr	r1, [pc, #308]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	4313      	orrs	r3, r2
 8006538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d044      	beq.n	80065d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d107      	bne.n	800655e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800654e:	4b47      	ldr	r3, [pc, #284]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d119      	bne.n	800658e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e07f      	b.n	800665e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d003      	beq.n	800656e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800656a:	2b03      	cmp	r3, #3
 800656c:	d107      	bne.n	800657e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800656e:	4b3f      	ldr	r3, [pc, #252]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d109      	bne.n	800658e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e06f      	b.n	800665e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800657e:	4b3b      	ldr	r3, [pc, #236]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e067      	b.n	800665e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800658e:	4b37      	ldr	r3, [pc, #220]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f023 0203 	bic.w	r2, r3, #3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	4934      	ldr	r1, [pc, #208]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 800659c:	4313      	orrs	r3, r2
 800659e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065a0:	f7fd fc90 	bl	8003ec4 <HAL_GetTick>
 80065a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065a6:	e00a      	b.n	80065be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065a8:	f7fd fc8c 	bl	8003ec4 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e04f      	b.n	800665e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065be:	4b2b      	ldr	r3, [pc, #172]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 020c 	and.w	r2, r3, #12
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d1eb      	bne.n	80065a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065d0:	4b25      	ldr	r3, [pc, #148]	; (8006668 <HAL_RCC_ClockConfig+0x1b8>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d20c      	bcs.n	80065f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065de:	4b22      	ldr	r3, [pc, #136]	; (8006668 <HAL_RCC_ClockConfig+0x1b8>)
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e6:	4b20      	ldr	r3, [pc, #128]	; (8006668 <HAL_RCC_ClockConfig+0x1b8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d001      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e032      	b.n	800665e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	d008      	beq.n	8006616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006604:	4b19      	ldr	r3, [pc, #100]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	4916      	ldr	r1, [pc, #88]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 8006612:	4313      	orrs	r3, r2
 8006614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006622:	4b12      	ldr	r3, [pc, #72]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	490e      	ldr	r1, [pc, #56]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 8006632:	4313      	orrs	r3, r2
 8006634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006636:	f000 f821 	bl	800667c <HAL_RCC_GetSysClockFreq>
 800663a:	4601      	mov	r1, r0
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <HAL_RCC_ClockConfig+0x1bc>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	091b      	lsrs	r3, r3, #4
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <HAL_RCC_ClockConfig+0x1c0>)
 8006648:	5cd3      	ldrb	r3, [r2, r3]
 800664a:	fa21 f303 	lsr.w	r3, r1, r3
 800664e:	4a09      	ldr	r2, [pc, #36]	; (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 8006650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006652:	4b09      	ldr	r3, [pc, #36]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f7fd fbf0 	bl	8003e3c <HAL_InitTick>

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	40023c00 	.word	0x40023c00
 800666c:	40023800 	.word	0x40023800
 8006670:	0800ae5c 	.word	0x0800ae5c
 8006674:	20000000 	.word	0x20000000
 8006678:	20000028 	.word	0x20000028

0800667c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800667c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	607b      	str	r3, [r7, #4]
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	2300      	movs	r3, #0
 800668c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006692:	4b50      	ldr	r3, [pc, #320]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
 800669a:	2b04      	cmp	r3, #4
 800669c:	d007      	beq.n	80066ae <HAL_RCC_GetSysClockFreq+0x32>
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d008      	beq.n	80066b4 <HAL_RCC_GetSysClockFreq+0x38>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f040 808d 	bne.w	80067c2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066a8:	4b4b      	ldr	r3, [pc, #300]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80066aa:	60bb      	str	r3, [r7, #8]
       break;
 80066ac:	e08c      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066ae:	4b4b      	ldr	r3, [pc, #300]	; (80067dc <HAL_RCC_GetSysClockFreq+0x160>)
 80066b0:	60bb      	str	r3, [r7, #8]
      break;
 80066b2:	e089      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066b4:	4b47      	ldr	r3, [pc, #284]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066be:	4b45      	ldr	r3, [pc, #276]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d023      	beq.n	8006712 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ca:	4b42      	ldr	r3, [pc, #264]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	099b      	lsrs	r3, r3, #6
 80066d0:	f04f 0400 	mov.w	r4, #0
 80066d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	ea03 0501 	and.w	r5, r3, r1
 80066e0:	ea04 0602 	and.w	r6, r4, r2
 80066e4:	4a3d      	ldr	r2, [pc, #244]	; (80067dc <HAL_RCC_GetSysClockFreq+0x160>)
 80066e6:	fb02 f106 	mul.w	r1, r2, r6
 80066ea:	2200      	movs	r2, #0
 80066ec:	fb02 f205 	mul.w	r2, r2, r5
 80066f0:	440a      	add	r2, r1
 80066f2:	493a      	ldr	r1, [pc, #232]	; (80067dc <HAL_RCC_GetSysClockFreq+0x160>)
 80066f4:	fba5 0101 	umull	r0, r1, r5, r1
 80066f8:	1853      	adds	r3, r2, r1
 80066fa:	4619      	mov	r1, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f04f 0400 	mov.w	r4, #0
 8006702:	461a      	mov	r2, r3
 8006704:	4623      	mov	r3, r4
 8006706:	f7fa fa4f 	bl	8000ba8 <__aeabi_uldivmod>
 800670a:	4603      	mov	r3, r0
 800670c:	460c      	mov	r4, r1
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	e049      	b.n	80067a6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006712:	4b30      	ldr	r3, [pc, #192]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	099b      	lsrs	r3, r3, #6
 8006718:	f04f 0400 	mov.w	r4, #0
 800671c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	ea03 0501 	and.w	r5, r3, r1
 8006728:	ea04 0602 	and.w	r6, r4, r2
 800672c:	4629      	mov	r1, r5
 800672e:	4632      	mov	r2, r6
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	f04f 0400 	mov.w	r4, #0
 8006738:	0154      	lsls	r4, r2, #5
 800673a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800673e:	014b      	lsls	r3, r1, #5
 8006740:	4619      	mov	r1, r3
 8006742:	4622      	mov	r2, r4
 8006744:	1b49      	subs	r1, r1, r5
 8006746:	eb62 0206 	sbc.w	r2, r2, r6
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	f04f 0400 	mov.w	r4, #0
 8006752:	0194      	lsls	r4, r2, #6
 8006754:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006758:	018b      	lsls	r3, r1, #6
 800675a:	1a5b      	subs	r3, r3, r1
 800675c:	eb64 0402 	sbc.w	r4, r4, r2
 8006760:	f04f 0100 	mov.w	r1, #0
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	00e2      	lsls	r2, r4, #3
 800676a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800676e:	00d9      	lsls	r1, r3, #3
 8006770:	460b      	mov	r3, r1
 8006772:	4614      	mov	r4, r2
 8006774:	195b      	adds	r3, r3, r5
 8006776:	eb44 0406 	adc.w	r4, r4, r6
 800677a:	f04f 0100 	mov.w	r1, #0
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	02a2      	lsls	r2, r4, #10
 8006784:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006788:	0299      	lsls	r1, r3, #10
 800678a:	460b      	mov	r3, r1
 800678c:	4614      	mov	r4, r2
 800678e:	4618      	mov	r0, r3
 8006790:	4621      	mov	r1, r4
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f04f 0400 	mov.w	r4, #0
 8006798:	461a      	mov	r2, r3
 800679a:	4623      	mov	r3, r4
 800679c:	f7fa fa04 	bl	8000ba8 <__aeabi_uldivmod>
 80067a0:	4603      	mov	r3, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067a6:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	0c1b      	lsrs	r3, r3, #16
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	3301      	adds	r3, #1
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80067be:	60bb      	str	r3, [r7, #8]
      break;
 80067c0:	e002      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067c2:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80067c4:	60bb      	str	r3, [r7, #8]
      break;
 80067c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067c8:	68bb      	ldr	r3, [r7, #8]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40023800 	.word	0x40023800
 80067d8:	00f42400 	.word	0x00f42400
 80067dc:	017d7840 	.word	0x017d7840

080067e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067e4:	4b03      	ldr	r3, [pc, #12]	; (80067f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067e6:	681b      	ldr	r3, [r3, #0]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000000 	.word	0x20000000

080067f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067fc:	f7ff fff0 	bl	80067e0 <HAL_RCC_GetHCLKFreq>
 8006800:	4601      	mov	r1, r0
 8006802:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	0a9b      	lsrs	r3, r3, #10
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	4a03      	ldr	r2, [pc, #12]	; (800681c <HAL_RCC_GetPCLK1Freq+0x24>)
 800680e:	5cd3      	ldrb	r3, [r2, r3]
 8006810:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006814:	4618      	mov	r0, r3
 8006816:	bd80      	pop	{r7, pc}
 8006818:	40023800 	.word	0x40023800
 800681c:	0800ae6c 	.word	0x0800ae6c

08006820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006824:	f7ff ffdc 	bl	80067e0 <HAL_RCC_GetHCLKFreq>
 8006828:	4601      	mov	r1, r0
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	0b5b      	lsrs	r3, r3, #13
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	4a03      	ldr	r2, [pc, #12]	; (8006844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006836:	5cd3      	ldrb	r3, [r2, r3]
 8006838:	fa21 f303 	lsr.w	r3, r1, r3
}
 800683c:	4618      	mov	r0, r3
 800683e:	bd80      	pop	{r7, pc}
 8006840:	40023800 	.word	0x40023800
 8006844:	0800ae6c 	.word	0x0800ae6c

08006848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e01d      	b.n	8006896 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fb fa9c 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f000 fb8c 	bl	8006fa4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800689e:	b480      	push	{r7}
 80068a0:	b085      	sub	sp, #20
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0201 	orr.w	r2, r2, #1
 80068b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b06      	cmp	r3, #6
 80068c6:	d007      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0201 	bic.w	r2, r2, #1
 80068fc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6a1a      	ldr	r2, [r3, #32]
 8006904:	f241 1311 	movw	r3, #4369	; 0x1111
 8006908:	4013      	ands	r3, r2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10f      	bne.n	800692e <HAL_TIM_Base_Stop_IT+0x48>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6a1a      	ldr	r2, [r3, #32]
 8006914:	f240 4344 	movw	r3, #1092	; 0x444
 8006918:	4013      	ands	r3, r2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d107      	bne.n	800692e <HAL_TIM_Base_Stop_IT+0x48>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0201 	bic.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e01d      	b.n	800698a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7fb f93a 	bl	8001bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3304      	adds	r3, #4
 8006978:	4619      	mov	r1, r3
 800697a:	4610      	mov	r0, r2
 800697c:	f000 fb12 	bl	8006fa4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2201      	movs	r2, #1
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fd4c 	bl	8007444 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a15      	ldr	r2, [pc, #84]	; (8006a08 <HAL_TIM_PWM_Start+0x74>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d004      	beq.n	80069c0 <HAL_TIM_PWM_Start+0x2c>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a14      	ldr	r2, [pc, #80]	; (8006a0c <HAL_TIM_PWM_Start+0x78>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d101      	bne.n	80069c4 <HAL_TIM_PWM_Start+0x30>
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <HAL_TIM_PWM_Start+0x32>
 80069c4:	2300      	movs	r3, #0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d007      	beq.n	80069da <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b06      	cmp	r3, #6
 80069ea:	d007      	beq.n	80069fc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40010400 	.word	0x40010400

08006a10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e083      	b.n	8006b2c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d106      	bne.n	8006a3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7fb f91d 	bl	8001c78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2202      	movs	r2, #2
 8006a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6812      	ldr	r2, [r2, #0]
 8006a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a54:	f023 0307 	bic.w	r3, r3, #7
 8006a58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f000 fa9d 	bl	8006fa4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a92:	f023 0303 	bic.w	r3, r3, #3
 8006a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006ab0:	f023 030c 	bic.w	r3, r3, #12
 8006ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006abc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	4313      	orrs	r3, r2
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	011a      	lsls	r2, r3, #4
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	031b      	lsls	r3, r3, #12
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006aee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006af6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	4313      	orrs	r3, r2
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_TIM_Encoder_Start+0x16>
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d008      	beq.n	8006b5a <HAL_TIM_Encoder_Start+0x26>
 8006b48:	e00f      	b.n	8006b6a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	2100      	movs	r1, #0
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fc76 	bl	8007444 <TIM_CCxChannelCmd>
      break;
 8006b58:	e016      	b.n	8006b88 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	2104      	movs	r1, #4
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fc6e 	bl	8007444 <TIM_CCxChannelCmd>
      break;
 8006b68:	e00e      	b.n	8006b88 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	2100      	movs	r1, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fc66 	bl	8007444 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	2104      	movs	r1, #4
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fc5f 	bl	8007444 <TIM_CCxChannelCmd>
      break;
 8006b86:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d122      	bne.n	8006bfe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d11b      	bne.n	8006bfe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f06f 0202 	mvn.w	r2, #2
 8006bce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f9bf 	bl	8006f68 <HAL_TIM_IC_CaptureCallback>
 8006bea:	e005      	b.n	8006bf8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f9b1 	bl	8006f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f9c2 	bl	8006f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d122      	bne.n	8006c52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d11b      	bne.n	8006c52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f06f 0204 	mvn.w	r2, #4
 8006c22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f995 	bl	8006f68 <HAL_TIM_IC_CaptureCallback>
 8006c3e:	e005      	b.n	8006c4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f987 	bl	8006f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f998 	bl	8006f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d122      	bne.n	8006ca6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b08      	cmp	r3, #8
 8006c6c:	d11b      	bne.n	8006ca6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f06f 0208 	mvn.w	r2, #8
 8006c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2204      	movs	r2, #4
 8006c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	f003 0303 	and.w	r3, r3, #3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f96b 	bl	8006f68 <HAL_TIM_IC_CaptureCallback>
 8006c92:	e005      	b.n	8006ca0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f95d 	bl	8006f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f96e 	bl	8006f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b10      	cmp	r3, #16
 8006cb2:	d122      	bne.n	8006cfa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b10      	cmp	r3, #16
 8006cc0:	d11b      	bne.n	8006cfa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f06f 0210 	mvn.w	r2, #16
 8006cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2208      	movs	r2, #8
 8006cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f941 	bl	8006f68 <HAL_TIM_IC_CaptureCallback>
 8006ce6:	e005      	b.n	8006cf4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f933 	bl	8006f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f944 	bl	8006f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d10e      	bne.n	8006d26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d107      	bne.n	8006d26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f06f 0201 	mvn.w	r2, #1
 8006d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f90d 	bl	8006f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d30:	2b80      	cmp	r3, #128	; 0x80
 8006d32:	d10e      	bne.n	8006d52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3e:	2b80      	cmp	r3, #128	; 0x80
 8006d40:	d107      	bne.n	8006d52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fc77 	bl	8007640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5c:	2b40      	cmp	r3, #64	; 0x40
 8006d5e:	d10e      	bne.n	8006d7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6a:	2b40      	cmp	r3, #64	; 0x40
 8006d6c:	d107      	bne.n	8006d7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f909 	bl	8006f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d10e      	bne.n	8006daa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d107      	bne.n	8006daa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f06f 0220 	mvn.w	r2, #32
 8006da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fc41 	bl	800762c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e0b4      	b.n	8006f38 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b0c      	cmp	r3, #12
 8006de2:	f200 809f 	bhi.w	8006f24 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006de6:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e21 	.word	0x08006e21
 8006df0:	08006f25 	.word	0x08006f25
 8006df4:	08006f25 	.word	0x08006f25
 8006df8:	08006f25 	.word	0x08006f25
 8006dfc:	08006e61 	.word	0x08006e61
 8006e00:	08006f25 	.word	0x08006f25
 8006e04:	08006f25 	.word	0x08006f25
 8006e08:	08006f25 	.word	0x08006f25
 8006e0c:	08006ea3 	.word	0x08006ea3
 8006e10:	08006f25 	.word	0x08006f25
 8006e14:	08006f25 	.word	0x08006f25
 8006e18:	08006f25 	.word	0x08006f25
 8006e1c:	08006ee3 	.word	0x08006ee3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68b9      	ldr	r1, [r7, #8]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 f95c 	bl	80070e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699a      	ldr	r2, [r3, #24]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0208 	orr.w	r2, r2, #8
 8006e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0204 	bic.w	r2, r2, #4
 8006e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6999      	ldr	r1, [r3, #24]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	619a      	str	r2, [r3, #24]
      break;
 8006e5e:	e062      	b.n	8006f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 f9ac 	bl	80071c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699a      	ldr	r2, [r3, #24]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699a      	ldr	r2, [r3, #24]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6999      	ldr	r1, [r3, #24]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	021a      	lsls	r2, r3, #8
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	619a      	str	r2, [r3, #24]
      break;
 8006ea0:	e041      	b.n	8006f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68b9      	ldr	r1, [r7, #8]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fa01 	bl	80072b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69da      	ldr	r2, [r3, #28]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0208 	orr.w	r2, r2, #8
 8006ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0204 	bic.w	r2, r2, #4
 8006ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69d9      	ldr	r1, [r3, #28]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	61da      	str	r2, [r3, #28]
      break;
 8006ee0:	e021      	b.n	8006f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fa55 	bl	8007398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69da      	ldr	r2, [r3, #28]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69d9      	ldr	r1, [r3, #28]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	021a      	lsls	r2, r3, #8
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	61da      	str	r2, [r3, #28]
      break;
 8006f22:	e000      	b.n	8006f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006f24:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a40      	ldr	r2, [pc, #256]	; (80070b8 <TIM_Base_SetConfig+0x114>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d013      	beq.n	8006fe4 <TIM_Base_SetConfig+0x40>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc2:	d00f      	beq.n	8006fe4 <TIM_Base_SetConfig+0x40>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a3d      	ldr	r2, [pc, #244]	; (80070bc <TIM_Base_SetConfig+0x118>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00b      	beq.n	8006fe4 <TIM_Base_SetConfig+0x40>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a3c      	ldr	r2, [pc, #240]	; (80070c0 <TIM_Base_SetConfig+0x11c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d007      	beq.n	8006fe4 <TIM_Base_SetConfig+0x40>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a3b      	ldr	r2, [pc, #236]	; (80070c4 <TIM_Base_SetConfig+0x120>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d003      	beq.n	8006fe4 <TIM_Base_SetConfig+0x40>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a3a      	ldr	r2, [pc, #232]	; (80070c8 <TIM_Base_SetConfig+0x124>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d108      	bne.n	8006ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a2f      	ldr	r2, [pc, #188]	; (80070b8 <TIM_Base_SetConfig+0x114>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d02b      	beq.n	8007056 <TIM_Base_SetConfig+0xb2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007004:	d027      	beq.n	8007056 <TIM_Base_SetConfig+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a2c      	ldr	r2, [pc, #176]	; (80070bc <TIM_Base_SetConfig+0x118>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d023      	beq.n	8007056 <TIM_Base_SetConfig+0xb2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a2b      	ldr	r2, [pc, #172]	; (80070c0 <TIM_Base_SetConfig+0x11c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d01f      	beq.n	8007056 <TIM_Base_SetConfig+0xb2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a2a      	ldr	r2, [pc, #168]	; (80070c4 <TIM_Base_SetConfig+0x120>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d01b      	beq.n	8007056 <TIM_Base_SetConfig+0xb2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a29      	ldr	r2, [pc, #164]	; (80070c8 <TIM_Base_SetConfig+0x124>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d017      	beq.n	8007056 <TIM_Base_SetConfig+0xb2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a28      	ldr	r2, [pc, #160]	; (80070cc <TIM_Base_SetConfig+0x128>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d013      	beq.n	8007056 <TIM_Base_SetConfig+0xb2>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a27      	ldr	r2, [pc, #156]	; (80070d0 <TIM_Base_SetConfig+0x12c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00f      	beq.n	8007056 <TIM_Base_SetConfig+0xb2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a26      	ldr	r2, [pc, #152]	; (80070d4 <TIM_Base_SetConfig+0x130>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d00b      	beq.n	8007056 <TIM_Base_SetConfig+0xb2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a25      	ldr	r2, [pc, #148]	; (80070d8 <TIM_Base_SetConfig+0x134>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d007      	beq.n	8007056 <TIM_Base_SetConfig+0xb2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a24      	ldr	r2, [pc, #144]	; (80070dc <TIM_Base_SetConfig+0x138>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d003      	beq.n	8007056 <TIM_Base_SetConfig+0xb2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a23      	ldr	r2, [pc, #140]	; (80070e0 <TIM_Base_SetConfig+0x13c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d108      	bne.n	8007068 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800705c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4313      	orrs	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <TIM_Base_SetConfig+0x114>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_Base_SetConfig+0xf8>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a0c      	ldr	r2, [pc, #48]	; (80070c8 <TIM_Base_SetConfig+0x124>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d103      	bne.n	80070a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	615a      	str	r2, [r3, #20]
}
 80070aa:	bf00      	nop
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40010000 	.word	0x40010000
 80070bc:	40000400 	.word	0x40000400
 80070c0:	40000800 	.word	0x40000800
 80070c4:	40000c00 	.word	0x40000c00
 80070c8:	40010400 	.word	0x40010400
 80070cc:	40014000 	.word	0x40014000
 80070d0:	40014400 	.word	0x40014400
 80070d4:	40014800 	.word	0x40014800
 80070d8:	40001800 	.word	0x40001800
 80070dc:	40001c00 	.word	0x40001c00
 80070e0:	40002000 	.word	0x40002000

080070e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	f023 0201 	bic.w	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f023 0302 	bic.w	r3, r3, #2
 800712c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a20      	ldr	r2, [pc, #128]	; (80071bc <TIM_OC1_SetConfig+0xd8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d003      	beq.n	8007148 <TIM_OC1_SetConfig+0x64>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a1f      	ldr	r2, [pc, #124]	; (80071c0 <TIM_OC1_SetConfig+0xdc>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d10c      	bne.n	8007162 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f023 0308 	bic.w	r3, r3, #8
 800714e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	4313      	orrs	r3, r2
 8007158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f023 0304 	bic.w	r3, r3, #4
 8007160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a15      	ldr	r2, [pc, #84]	; (80071bc <TIM_OC1_SetConfig+0xd8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d003      	beq.n	8007172 <TIM_OC1_SetConfig+0x8e>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a14      	ldr	r2, [pc, #80]	; (80071c0 <TIM_OC1_SetConfig+0xdc>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d111      	bne.n	8007196 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	4313      	orrs	r3, r2
 800718a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	4313      	orrs	r3, r2
 8007194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	621a      	str	r2, [r3, #32]
}
 80071b0:	bf00      	nop
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40010000 	.word	0x40010000
 80071c0:	40010400 	.word	0x40010400

080071c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0210 	bic.w	r2, r3, #16
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	021b      	lsls	r3, r3, #8
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	4313      	orrs	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f023 0320 	bic.w	r3, r3, #32
 800720e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a22      	ldr	r2, [pc, #136]	; (80072a8 <TIM_OC2_SetConfig+0xe4>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d003      	beq.n	800722c <TIM_OC2_SetConfig+0x68>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a21      	ldr	r2, [pc, #132]	; (80072ac <TIM_OC2_SetConfig+0xe8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d10d      	bne.n	8007248 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007246:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <TIM_OC2_SetConfig+0xe4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_OC2_SetConfig+0x94>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a16      	ldr	r2, [pc, #88]	; (80072ac <TIM_OC2_SetConfig+0xe8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d113      	bne.n	8007280 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800725e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	4313      	orrs	r3, r2
 8007272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4313      	orrs	r3, r2
 800727e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	621a      	str	r2, [r3, #32]
}
 800729a:	bf00      	nop
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40010000 	.word	0x40010000
 80072ac:	40010400 	.word	0x40010400

080072b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0303 	bic.w	r3, r3, #3
 80072e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	021b      	lsls	r3, r3, #8
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a21      	ldr	r2, [pc, #132]	; (8007390 <TIM_OC3_SetConfig+0xe0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d003      	beq.n	8007316 <TIM_OC3_SetConfig+0x66>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a20      	ldr	r2, [pc, #128]	; (8007394 <TIM_OC3_SetConfig+0xe4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d10d      	bne.n	8007332 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800731c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a16      	ldr	r2, [pc, #88]	; (8007390 <TIM_OC3_SetConfig+0xe0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d003      	beq.n	8007342 <TIM_OC3_SetConfig+0x92>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a15      	ldr	r2, [pc, #84]	; (8007394 <TIM_OC3_SetConfig+0xe4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d113      	bne.n	800736a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	4313      	orrs	r3, r2
 8007368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	621a      	str	r2, [r3, #32]
}
 8007384:	bf00      	nop
 8007386:	371c      	adds	r7, #28
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	40010000 	.word	0x40010000
 8007394:	40010400 	.word	0x40010400

08007398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	021b      	lsls	r3, r3, #8
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	031b      	lsls	r3, r3, #12
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a12      	ldr	r2, [pc, #72]	; (800743c <TIM_OC4_SetConfig+0xa4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d003      	beq.n	8007400 <TIM_OC4_SetConfig+0x68>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a11      	ldr	r2, [pc, #68]	; (8007440 <TIM_OC4_SetConfig+0xa8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d109      	bne.n	8007414 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	019b      	lsls	r3, r3, #6
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	40010000 	.word	0x40010000
 8007440:	40010400 	.word	0x40010400

08007444 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f003 031f 	and.w	r3, r3, #31
 8007456:	2201      	movs	r2, #1
 8007458:	fa02 f303 	lsl.w	r3, r2, r3
 800745c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a1a      	ldr	r2, [r3, #32]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	43db      	mvns	r3, r3
 8007466:	401a      	ands	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a1a      	ldr	r2, [r3, #32]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f003 031f 	and.w	r3, r3, #31
 8007476:	6879      	ldr	r1, [r7, #4]
 8007478:	fa01 f303 	lsl.w	r3, r1, r3
 800747c:	431a      	orrs	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	621a      	str	r2, [r3, #32]
}
 8007482:	bf00      	nop
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
	...

08007490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e05a      	b.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a21      	ldr	r2, [pc, #132]	; (800756c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d022      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f4:	d01d      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a1d      	ldr	r2, [pc, #116]	; (8007570 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d018      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1b      	ldr	r2, [pc, #108]	; (8007574 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d013      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a1a      	ldr	r2, [pc, #104]	; (8007578 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00e      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a18      	ldr	r2, [pc, #96]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d009      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a17      	ldr	r2, [pc, #92]	; (8007580 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d004      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a15      	ldr	r2, [pc, #84]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d10c      	bne.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	4313      	orrs	r3, r2
 8007542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40010000 	.word	0x40010000
 8007570:	40000400 	.word	0x40000400
 8007574:	40000800 	.word	0x40000800
 8007578:	40000c00 	.word	0x40000c00
 800757c:	40010400 	.word	0x40010400
 8007580:	40014000 	.word	0x40014000
 8007584:	40001800 	.word	0x40001800

08007588 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e03d      	b.n	8007620 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e03f      	b.n	80076e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d106      	bne.n	8007680 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7fa fc4a 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2224      	movs	r2, #36	; 0x24
 8007684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007696:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f90b 	bl	80078b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695a      	ldr	r2, [r3, #20]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2220      	movs	r2, #32
 80076e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b088      	sub	sp, #32
 80076f2:	af02      	add	r7, sp, #8
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	603b      	str	r3, [r7, #0]
 80076fa:	4613      	mov	r3, r2
 80076fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b20      	cmp	r3, #32
 800770c:	f040 8083 	bne.w	8007816 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <HAL_UART_Transmit+0x2e>
 8007716:	88fb      	ldrh	r3, [r7, #6]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e07b      	b.n	8007818 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007726:	2b01      	cmp	r3, #1
 8007728:	d101      	bne.n	800772e <HAL_UART_Transmit+0x40>
 800772a:	2302      	movs	r3, #2
 800772c:	e074      	b.n	8007818 <HAL_UART_Transmit+0x12a>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2221      	movs	r2, #33	; 0x21
 8007740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007744:	f7fc fbbe 	bl	8003ec4 <HAL_GetTick>
 8007748:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	88fa      	ldrh	r2, [r7, #6]
 800774e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	88fa      	ldrh	r2, [r7, #6]
 8007754:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800775e:	e042      	b.n	80077e6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007776:	d122      	bne.n	80077be <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2200      	movs	r2, #0
 8007780:	2180      	movs	r1, #128	; 0x80
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 f84c 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e042      	b.n	8007818 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077a4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d103      	bne.n	80077b6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	3302      	adds	r3, #2
 80077b2:	60bb      	str	r3, [r7, #8]
 80077b4:	e017      	b.n	80077e6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	3301      	adds	r3, #1
 80077ba:	60bb      	str	r3, [r7, #8]
 80077bc:	e013      	b.n	80077e6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2200      	movs	r2, #0
 80077c6:	2180      	movs	r1, #128	; 0x80
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f829 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e01f      	b.n	8007818 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	60ba      	str	r2, [r7, #8]
 80077de:	781a      	ldrb	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1b7      	bne.n	8007760 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2200      	movs	r2, #0
 80077f8:	2140      	movs	r1, #64	; 0x40
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f810 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e006      	b.n	8007818 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2220      	movs	r2, #32
 800780e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	e000      	b.n	8007818 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007816:	2302      	movs	r3, #2
  }
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	4613      	mov	r3, r2
 800782e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007830:	e02c      	b.n	800788c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d028      	beq.n	800788c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d007      	beq.n	8007850 <UART_WaitOnFlagUntilTimeout+0x30>
 8007840:	f7fc fb40 	bl	8003ec4 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	429a      	cmp	r2, r3
 800784e:	d21d      	bcs.n	800788c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800785e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695a      	ldr	r2, [r3, #20]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0201 	bic.w	r2, r2, #1
 800786e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e00f      	b.n	80078ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	4013      	ands	r3, r2
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	429a      	cmp	r2, r3
 800789a:	bf0c      	ite	eq
 800789c:	2301      	moveq	r3, #1
 800789e:	2300      	movne	r3, #0
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	461a      	mov	r2, r3
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d0c3      	beq.n	8007832 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	431a      	orrs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80078f6:	f023 030c 	bic.w	r3, r3, #12
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	68f9      	ldr	r1, [r7, #12]
 8007900:	430b      	orrs	r3, r1
 8007902:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699a      	ldr	r2, [r3, #24]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007922:	f040 818b 	bne.w	8007c3c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4ac1      	ldr	r2, [pc, #772]	; (8007c30 <UART_SetConfig+0x37c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d005      	beq.n	800793c <UART_SetConfig+0x88>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4abf      	ldr	r2, [pc, #764]	; (8007c34 <UART_SetConfig+0x380>)
 8007936:	4293      	cmp	r3, r2
 8007938:	f040 80bd 	bne.w	8007ab6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800793c:	f7fe ff70 	bl	8006820 <HAL_RCC_GetPCLK2Freq>
 8007940:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	461d      	mov	r5, r3
 8007946:	f04f 0600 	mov.w	r6, #0
 800794a:	46a8      	mov	r8, r5
 800794c:	46b1      	mov	r9, r6
 800794e:	eb18 0308 	adds.w	r3, r8, r8
 8007952:	eb49 0409 	adc.w	r4, r9, r9
 8007956:	4698      	mov	r8, r3
 8007958:	46a1      	mov	r9, r4
 800795a:	eb18 0805 	adds.w	r8, r8, r5
 800795e:	eb49 0906 	adc.w	r9, r9, r6
 8007962:	f04f 0100 	mov.w	r1, #0
 8007966:	f04f 0200 	mov.w	r2, #0
 800796a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800796e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007972:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007976:	4688      	mov	r8, r1
 8007978:	4691      	mov	r9, r2
 800797a:	eb18 0005 	adds.w	r0, r8, r5
 800797e:	eb49 0106 	adc.w	r1, r9, r6
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	461d      	mov	r5, r3
 8007988:	f04f 0600 	mov.w	r6, #0
 800798c:	196b      	adds	r3, r5, r5
 800798e:	eb46 0406 	adc.w	r4, r6, r6
 8007992:	461a      	mov	r2, r3
 8007994:	4623      	mov	r3, r4
 8007996:	f7f9 f907 	bl	8000ba8 <__aeabi_uldivmod>
 800799a:	4603      	mov	r3, r0
 800799c:	460c      	mov	r4, r1
 800799e:	461a      	mov	r2, r3
 80079a0:	4ba5      	ldr	r3, [pc, #660]	; (8007c38 <UART_SetConfig+0x384>)
 80079a2:	fba3 2302 	umull	r2, r3, r3, r2
 80079a6:	095b      	lsrs	r3, r3, #5
 80079a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	461d      	mov	r5, r3
 80079b0:	f04f 0600 	mov.w	r6, #0
 80079b4:	46a9      	mov	r9, r5
 80079b6:	46b2      	mov	sl, r6
 80079b8:	eb19 0309 	adds.w	r3, r9, r9
 80079bc:	eb4a 040a 	adc.w	r4, sl, sl
 80079c0:	4699      	mov	r9, r3
 80079c2:	46a2      	mov	sl, r4
 80079c4:	eb19 0905 	adds.w	r9, r9, r5
 80079c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80079cc:	f04f 0100 	mov.w	r1, #0
 80079d0:	f04f 0200 	mov.w	r2, #0
 80079d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079e0:	4689      	mov	r9, r1
 80079e2:	4692      	mov	sl, r2
 80079e4:	eb19 0005 	adds.w	r0, r9, r5
 80079e8:	eb4a 0106 	adc.w	r1, sl, r6
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	461d      	mov	r5, r3
 80079f2:	f04f 0600 	mov.w	r6, #0
 80079f6:	196b      	adds	r3, r5, r5
 80079f8:	eb46 0406 	adc.w	r4, r6, r6
 80079fc:	461a      	mov	r2, r3
 80079fe:	4623      	mov	r3, r4
 8007a00:	f7f9 f8d2 	bl	8000ba8 <__aeabi_uldivmod>
 8007a04:	4603      	mov	r3, r0
 8007a06:	460c      	mov	r4, r1
 8007a08:	461a      	mov	r2, r3
 8007a0a:	4b8b      	ldr	r3, [pc, #556]	; (8007c38 <UART_SetConfig+0x384>)
 8007a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a10:	095b      	lsrs	r3, r3, #5
 8007a12:	2164      	movs	r1, #100	; 0x64
 8007a14:	fb01 f303 	mul.w	r3, r1, r3
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	3332      	adds	r3, #50	; 0x32
 8007a1e:	4a86      	ldr	r2, [pc, #536]	; (8007c38 <UART_SetConfig+0x384>)
 8007a20:	fba2 2303 	umull	r2, r3, r2, r3
 8007a24:	095b      	lsrs	r3, r3, #5
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a2c:	4498      	add	r8, r3
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	461d      	mov	r5, r3
 8007a32:	f04f 0600 	mov.w	r6, #0
 8007a36:	46a9      	mov	r9, r5
 8007a38:	46b2      	mov	sl, r6
 8007a3a:	eb19 0309 	adds.w	r3, r9, r9
 8007a3e:	eb4a 040a 	adc.w	r4, sl, sl
 8007a42:	4699      	mov	r9, r3
 8007a44:	46a2      	mov	sl, r4
 8007a46:	eb19 0905 	adds.w	r9, r9, r5
 8007a4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a4e:	f04f 0100 	mov.w	r1, #0
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a62:	4689      	mov	r9, r1
 8007a64:	4692      	mov	sl, r2
 8007a66:	eb19 0005 	adds.w	r0, r9, r5
 8007a6a:	eb4a 0106 	adc.w	r1, sl, r6
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	461d      	mov	r5, r3
 8007a74:	f04f 0600 	mov.w	r6, #0
 8007a78:	196b      	adds	r3, r5, r5
 8007a7a:	eb46 0406 	adc.w	r4, r6, r6
 8007a7e:	461a      	mov	r2, r3
 8007a80:	4623      	mov	r3, r4
 8007a82:	f7f9 f891 	bl	8000ba8 <__aeabi_uldivmod>
 8007a86:	4603      	mov	r3, r0
 8007a88:	460c      	mov	r4, r1
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4b6a      	ldr	r3, [pc, #424]	; (8007c38 <UART_SetConfig+0x384>)
 8007a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	2164      	movs	r1, #100	; 0x64
 8007a96:	fb01 f303 	mul.w	r3, r1, r3
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	00db      	lsls	r3, r3, #3
 8007a9e:	3332      	adds	r3, #50	; 0x32
 8007aa0:	4a65      	ldr	r2, [pc, #404]	; (8007c38 <UART_SetConfig+0x384>)
 8007aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	f003 0207 	and.w	r2, r3, #7
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4442      	add	r2, r8
 8007ab2:	609a      	str	r2, [r3, #8]
 8007ab4:	e26f      	b.n	8007f96 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ab6:	f7fe fe9f 	bl	80067f8 <HAL_RCC_GetPCLK1Freq>
 8007aba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	461d      	mov	r5, r3
 8007ac0:	f04f 0600 	mov.w	r6, #0
 8007ac4:	46a8      	mov	r8, r5
 8007ac6:	46b1      	mov	r9, r6
 8007ac8:	eb18 0308 	adds.w	r3, r8, r8
 8007acc:	eb49 0409 	adc.w	r4, r9, r9
 8007ad0:	4698      	mov	r8, r3
 8007ad2:	46a1      	mov	r9, r4
 8007ad4:	eb18 0805 	adds.w	r8, r8, r5
 8007ad8:	eb49 0906 	adc.w	r9, r9, r6
 8007adc:	f04f 0100 	mov.w	r1, #0
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ae8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007aec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007af0:	4688      	mov	r8, r1
 8007af2:	4691      	mov	r9, r2
 8007af4:	eb18 0005 	adds.w	r0, r8, r5
 8007af8:	eb49 0106 	adc.w	r1, r9, r6
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	461d      	mov	r5, r3
 8007b02:	f04f 0600 	mov.w	r6, #0
 8007b06:	196b      	adds	r3, r5, r5
 8007b08:	eb46 0406 	adc.w	r4, r6, r6
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	4623      	mov	r3, r4
 8007b10:	f7f9 f84a 	bl	8000ba8 <__aeabi_uldivmod>
 8007b14:	4603      	mov	r3, r0
 8007b16:	460c      	mov	r4, r1
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4b47      	ldr	r3, [pc, #284]	; (8007c38 <UART_SetConfig+0x384>)
 8007b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	461d      	mov	r5, r3
 8007b2a:	f04f 0600 	mov.w	r6, #0
 8007b2e:	46a9      	mov	r9, r5
 8007b30:	46b2      	mov	sl, r6
 8007b32:	eb19 0309 	adds.w	r3, r9, r9
 8007b36:	eb4a 040a 	adc.w	r4, sl, sl
 8007b3a:	4699      	mov	r9, r3
 8007b3c:	46a2      	mov	sl, r4
 8007b3e:	eb19 0905 	adds.w	r9, r9, r5
 8007b42:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b46:	f04f 0100 	mov.w	r1, #0
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b5a:	4689      	mov	r9, r1
 8007b5c:	4692      	mov	sl, r2
 8007b5e:	eb19 0005 	adds.w	r0, r9, r5
 8007b62:	eb4a 0106 	adc.w	r1, sl, r6
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	461d      	mov	r5, r3
 8007b6c:	f04f 0600 	mov.w	r6, #0
 8007b70:	196b      	adds	r3, r5, r5
 8007b72:	eb46 0406 	adc.w	r4, r6, r6
 8007b76:	461a      	mov	r2, r3
 8007b78:	4623      	mov	r3, r4
 8007b7a:	f7f9 f815 	bl	8000ba8 <__aeabi_uldivmod>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	460c      	mov	r4, r1
 8007b82:	461a      	mov	r2, r3
 8007b84:	4b2c      	ldr	r3, [pc, #176]	; (8007c38 <UART_SetConfig+0x384>)
 8007b86:	fba3 1302 	umull	r1, r3, r3, r2
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	2164      	movs	r1, #100	; 0x64
 8007b8e:	fb01 f303 	mul.w	r3, r1, r3
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	3332      	adds	r3, #50	; 0x32
 8007b98:	4a27      	ldr	r2, [pc, #156]	; (8007c38 <UART_SetConfig+0x384>)
 8007b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9e:	095b      	lsrs	r3, r3, #5
 8007ba0:	005b      	lsls	r3, r3, #1
 8007ba2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ba6:	4498      	add	r8, r3
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	461d      	mov	r5, r3
 8007bac:	f04f 0600 	mov.w	r6, #0
 8007bb0:	46a9      	mov	r9, r5
 8007bb2:	46b2      	mov	sl, r6
 8007bb4:	eb19 0309 	adds.w	r3, r9, r9
 8007bb8:	eb4a 040a 	adc.w	r4, sl, sl
 8007bbc:	4699      	mov	r9, r3
 8007bbe:	46a2      	mov	sl, r4
 8007bc0:	eb19 0905 	adds.w	r9, r9, r5
 8007bc4:	eb4a 0a06 	adc.w	sl, sl, r6
 8007bc8:	f04f 0100 	mov.w	r1, #0
 8007bcc:	f04f 0200 	mov.w	r2, #0
 8007bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bdc:	4689      	mov	r9, r1
 8007bde:	4692      	mov	sl, r2
 8007be0:	eb19 0005 	adds.w	r0, r9, r5
 8007be4:	eb4a 0106 	adc.w	r1, sl, r6
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	461d      	mov	r5, r3
 8007bee:	f04f 0600 	mov.w	r6, #0
 8007bf2:	196b      	adds	r3, r5, r5
 8007bf4:	eb46 0406 	adc.w	r4, r6, r6
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	4623      	mov	r3, r4
 8007bfc:	f7f8 ffd4 	bl	8000ba8 <__aeabi_uldivmod>
 8007c00:	4603      	mov	r3, r0
 8007c02:	460c      	mov	r4, r1
 8007c04:	461a      	mov	r2, r3
 8007c06:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <UART_SetConfig+0x384>)
 8007c08:	fba3 1302 	umull	r1, r3, r3, r2
 8007c0c:	095b      	lsrs	r3, r3, #5
 8007c0e:	2164      	movs	r1, #100	; 0x64
 8007c10:	fb01 f303 	mul.w	r3, r1, r3
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	3332      	adds	r3, #50	; 0x32
 8007c1a:	4a07      	ldr	r2, [pc, #28]	; (8007c38 <UART_SetConfig+0x384>)
 8007c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c20:	095b      	lsrs	r3, r3, #5
 8007c22:	f003 0207 	and.w	r2, r3, #7
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4442      	add	r2, r8
 8007c2c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007c2e:	e1b2      	b.n	8007f96 <UART_SetConfig+0x6e2>
 8007c30:	40011000 	.word	0x40011000
 8007c34:	40011400 	.word	0x40011400
 8007c38:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4ad7      	ldr	r2, [pc, #860]	; (8007fa0 <UART_SetConfig+0x6ec>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d005      	beq.n	8007c52 <UART_SetConfig+0x39e>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4ad6      	ldr	r2, [pc, #856]	; (8007fa4 <UART_SetConfig+0x6f0>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	f040 80d1 	bne.w	8007df4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c52:	f7fe fde5 	bl	8006820 <HAL_RCC_GetPCLK2Freq>
 8007c56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	469a      	mov	sl, r3
 8007c5c:	f04f 0b00 	mov.w	fp, #0
 8007c60:	46d0      	mov	r8, sl
 8007c62:	46d9      	mov	r9, fp
 8007c64:	eb18 0308 	adds.w	r3, r8, r8
 8007c68:	eb49 0409 	adc.w	r4, r9, r9
 8007c6c:	4698      	mov	r8, r3
 8007c6e:	46a1      	mov	r9, r4
 8007c70:	eb18 080a 	adds.w	r8, r8, sl
 8007c74:	eb49 090b 	adc.w	r9, r9, fp
 8007c78:	f04f 0100 	mov.w	r1, #0
 8007c7c:	f04f 0200 	mov.w	r2, #0
 8007c80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c8c:	4688      	mov	r8, r1
 8007c8e:	4691      	mov	r9, r2
 8007c90:	eb1a 0508 	adds.w	r5, sl, r8
 8007c94:	eb4b 0609 	adc.w	r6, fp, r9
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	f04f 0200 	mov.w	r2, #0
 8007ca2:	f04f 0300 	mov.w	r3, #0
 8007ca6:	f04f 0400 	mov.w	r4, #0
 8007caa:	0094      	lsls	r4, r2, #2
 8007cac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cb0:	008b      	lsls	r3, r1, #2
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	4623      	mov	r3, r4
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	4631      	mov	r1, r6
 8007cba:	f7f8 ff75 	bl	8000ba8 <__aeabi_uldivmod>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	4bb8      	ldr	r3, [pc, #736]	; (8007fa8 <UART_SetConfig+0x6f4>)
 8007cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cca:	095b      	lsrs	r3, r3, #5
 8007ccc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	469b      	mov	fp, r3
 8007cd4:	f04f 0c00 	mov.w	ip, #0
 8007cd8:	46d9      	mov	r9, fp
 8007cda:	46e2      	mov	sl, ip
 8007cdc:	eb19 0309 	adds.w	r3, r9, r9
 8007ce0:	eb4a 040a 	adc.w	r4, sl, sl
 8007ce4:	4699      	mov	r9, r3
 8007ce6:	46a2      	mov	sl, r4
 8007ce8:	eb19 090b 	adds.w	r9, r9, fp
 8007cec:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007cf0:	f04f 0100 	mov.w	r1, #0
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d04:	4689      	mov	r9, r1
 8007d06:	4692      	mov	sl, r2
 8007d08:	eb1b 0509 	adds.w	r5, fp, r9
 8007d0c:	eb4c 060a 	adc.w	r6, ip, sl
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	4619      	mov	r1, r3
 8007d16:	f04f 0200 	mov.w	r2, #0
 8007d1a:	f04f 0300 	mov.w	r3, #0
 8007d1e:	f04f 0400 	mov.w	r4, #0
 8007d22:	0094      	lsls	r4, r2, #2
 8007d24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d28:	008b      	lsls	r3, r1, #2
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	4623      	mov	r3, r4
 8007d2e:	4628      	mov	r0, r5
 8007d30:	4631      	mov	r1, r6
 8007d32:	f7f8 ff39 	bl	8000ba8 <__aeabi_uldivmod>
 8007d36:	4603      	mov	r3, r0
 8007d38:	460c      	mov	r4, r1
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	4b9a      	ldr	r3, [pc, #616]	; (8007fa8 <UART_SetConfig+0x6f4>)
 8007d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8007d42:	095b      	lsrs	r3, r3, #5
 8007d44:	2164      	movs	r1, #100	; 0x64
 8007d46:	fb01 f303 	mul.w	r3, r1, r3
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	3332      	adds	r3, #50	; 0x32
 8007d50:	4a95      	ldr	r2, [pc, #596]	; (8007fa8 <UART_SetConfig+0x6f4>)
 8007d52:	fba2 2303 	umull	r2, r3, r2, r3
 8007d56:	095b      	lsrs	r3, r3, #5
 8007d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d5c:	4498      	add	r8, r3
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	469b      	mov	fp, r3
 8007d62:	f04f 0c00 	mov.w	ip, #0
 8007d66:	46d9      	mov	r9, fp
 8007d68:	46e2      	mov	sl, ip
 8007d6a:	eb19 0309 	adds.w	r3, r9, r9
 8007d6e:	eb4a 040a 	adc.w	r4, sl, sl
 8007d72:	4699      	mov	r9, r3
 8007d74:	46a2      	mov	sl, r4
 8007d76:	eb19 090b 	adds.w	r9, r9, fp
 8007d7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d7e:	f04f 0100 	mov.w	r1, #0
 8007d82:	f04f 0200 	mov.w	r2, #0
 8007d86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d92:	4689      	mov	r9, r1
 8007d94:	4692      	mov	sl, r2
 8007d96:	eb1b 0509 	adds.w	r5, fp, r9
 8007d9a:	eb4c 060a 	adc.w	r6, ip, sl
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	4619      	mov	r1, r3
 8007da4:	f04f 0200 	mov.w	r2, #0
 8007da8:	f04f 0300 	mov.w	r3, #0
 8007dac:	f04f 0400 	mov.w	r4, #0
 8007db0:	0094      	lsls	r4, r2, #2
 8007db2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007db6:	008b      	lsls	r3, r1, #2
 8007db8:	461a      	mov	r2, r3
 8007dba:	4623      	mov	r3, r4
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	f7f8 fef2 	bl	8000ba8 <__aeabi_uldivmod>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4b77      	ldr	r3, [pc, #476]	; (8007fa8 <UART_SetConfig+0x6f4>)
 8007dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd0:	095b      	lsrs	r3, r3, #5
 8007dd2:	2164      	movs	r1, #100	; 0x64
 8007dd4:	fb01 f303 	mul.w	r3, r1, r3
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	011b      	lsls	r3, r3, #4
 8007ddc:	3332      	adds	r3, #50	; 0x32
 8007dde:	4a72      	ldr	r2, [pc, #456]	; (8007fa8 <UART_SetConfig+0x6f4>)
 8007de0:	fba2 2303 	umull	r2, r3, r2, r3
 8007de4:	095b      	lsrs	r3, r3, #5
 8007de6:	f003 020f 	and.w	r2, r3, #15
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4442      	add	r2, r8
 8007df0:	609a      	str	r2, [r3, #8]
 8007df2:	e0d0      	b.n	8007f96 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007df4:	f7fe fd00 	bl	80067f8 <HAL_RCC_GetPCLK1Freq>
 8007df8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	469a      	mov	sl, r3
 8007dfe:	f04f 0b00 	mov.w	fp, #0
 8007e02:	46d0      	mov	r8, sl
 8007e04:	46d9      	mov	r9, fp
 8007e06:	eb18 0308 	adds.w	r3, r8, r8
 8007e0a:	eb49 0409 	adc.w	r4, r9, r9
 8007e0e:	4698      	mov	r8, r3
 8007e10:	46a1      	mov	r9, r4
 8007e12:	eb18 080a 	adds.w	r8, r8, sl
 8007e16:	eb49 090b 	adc.w	r9, r9, fp
 8007e1a:	f04f 0100 	mov.w	r1, #0
 8007e1e:	f04f 0200 	mov.w	r2, #0
 8007e22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e2e:	4688      	mov	r8, r1
 8007e30:	4691      	mov	r9, r2
 8007e32:	eb1a 0508 	adds.w	r5, sl, r8
 8007e36:	eb4b 0609 	adc.w	r6, fp, r9
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	f04f 0200 	mov.w	r2, #0
 8007e44:	f04f 0300 	mov.w	r3, #0
 8007e48:	f04f 0400 	mov.w	r4, #0
 8007e4c:	0094      	lsls	r4, r2, #2
 8007e4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e52:	008b      	lsls	r3, r1, #2
 8007e54:	461a      	mov	r2, r3
 8007e56:	4623      	mov	r3, r4
 8007e58:	4628      	mov	r0, r5
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	f7f8 fea4 	bl	8000ba8 <__aeabi_uldivmod>
 8007e60:	4603      	mov	r3, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	461a      	mov	r2, r3
 8007e66:	4b50      	ldr	r3, [pc, #320]	; (8007fa8 <UART_SetConfig+0x6f4>)
 8007e68:	fba3 2302 	umull	r2, r3, r3, r2
 8007e6c:	095b      	lsrs	r3, r3, #5
 8007e6e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	469b      	mov	fp, r3
 8007e76:	f04f 0c00 	mov.w	ip, #0
 8007e7a:	46d9      	mov	r9, fp
 8007e7c:	46e2      	mov	sl, ip
 8007e7e:	eb19 0309 	adds.w	r3, r9, r9
 8007e82:	eb4a 040a 	adc.w	r4, sl, sl
 8007e86:	4699      	mov	r9, r3
 8007e88:	46a2      	mov	sl, r4
 8007e8a:	eb19 090b 	adds.w	r9, r9, fp
 8007e8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e92:	f04f 0100 	mov.w	r1, #0
 8007e96:	f04f 0200 	mov.w	r2, #0
 8007e9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ea2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ea6:	4689      	mov	r9, r1
 8007ea8:	4692      	mov	sl, r2
 8007eaa:	eb1b 0509 	adds.w	r5, fp, r9
 8007eae:	eb4c 060a 	adc.w	r6, ip, sl
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	f04f 0200 	mov.w	r2, #0
 8007ebc:	f04f 0300 	mov.w	r3, #0
 8007ec0:	f04f 0400 	mov.w	r4, #0
 8007ec4:	0094      	lsls	r4, r2, #2
 8007ec6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007eca:	008b      	lsls	r3, r1, #2
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4623      	mov	r3, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	f7f8 fe68 	bl	8000ba8 <__aeabi_uldivmod>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	461a      	mov	r2, r3
 8007ede:	4b32      	ldr	r3, [pc, #200]	; (8007fa8 <UART_SetConfig+0x6f4>)
 8007ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ee4:	095b      	lsrs	r3, r3, #5
 8007ee6:	2164      	movs	r1, #100	; 0x64
 8007ee8:	fb01 f303 	mul.w	r3, r1, r3
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	3332      	adds	r3, #50	; 0x32
 8007ef2:	4a2d      	ldr	r2, [pc, #180]	; (8007fa8 <UART_SetConfig+0x6f4>)
 8007ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef8:	095b      	lsrs	r3, r3, #5
 8007efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007efe:	4498      	add	r8, r3
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	469b      	mov	fp, r3
 8007f04:	f04f 0c00 	mov.w	ip, #0
 8007f08:	46d9      	mov	r9, fp
 8007f0a:	46e2      	mov	sl, ip
 8007f0c:	eb19 0309 	adds.w	r3, r9, r9
 8007f10:	eb4a 040a 	adc.w	r4, sl, sl
 8007f14:	4699      	mov	r9, r3
 8007f16:	46a2      	mov	sl, r4
 8007f18:	eb19 090b 	adds.w	r9, r9, fp
 8007f1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f20:	f04f 0100 	mov.w	r1, #0
 8007f24:	f04f 0200 	mov.w	r2, #0
 8007f28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f34:	4689      	mov	r9, r1
 8007f36:	4692      	mov	sl, r2
 8007f38:	eb1b 0509 	adds.w	r5, fp, r9
 8007f3c:	eb4c 060a 	adc.w	r6, ip, sl
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	4619      	mov	r1, r3
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	f04f 0400 	mov.w	r4, #0
 8007f52:	0094      	lsls	r4, r2, #2
 8007f54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f58:	008b      	lsls	r3, r1, #2
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	4623      	mov	r3, r4
 8007f5e:	4628      	mov	r0, r5
 8007f60:	4631      	mov	r1, r6
 8007f62:	f7f8 fe21 	bl	8000ba8 <__aeabi_uldivmod>
 8007f66:	4603      	mov	r3, r0
 8007f68:	460c      	mov	r4, r1
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	4b0e      	ldr	r3, [pc, #56]	; (8007fa8 <UART_SetConfig+0x6f4>)
 8007f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8007f72:	095b      	lsrs	r3, r3, #5
 8007f74:	2164      	movs	r1, #100	; 0x64
 8007f76:	fb01 f303 	mul.w	r3, r1, r3
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	011b      	lsls	r3, r3, #4
 8007f7e:	3332      	adds	r3, #50	; 0x32
 8007f80:	4a09      	ldr	r2, [pc, #36]	; (8007fa8 <UART_SetConfig+0x6f4>)
 8007f82:	fba2 2303 	umull	r2, r3, r2, r3
 8007f86:	095b      	lsrs	r3, r3, #5
 8007f88:	f003 020f 	and.w	r2, r3, #15
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4442      	add	r2, r8
 8007f92:	609a      	str	r2, [r3, #8]
}
 8007f94:	e7ff      	b.n	8007f96 <UART_SetConfig+0x6e2>
 8007f96:	bf00      	nop
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa0:	40011000 	.word	0x40011000
 8007fa4:	40011400 	.word	0x40011400
 8007fa8:	51eb851f 	.word	0x51eb851f

08007fac <__errno>:
 8007fac:	4b01      	ldr	r3, [pc, #4]	; (8007fb4 <__errno+0x8>)
 8007fae:	6818      	ldr	r0, [r3, #0]
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20000030 	.word	0x20000030

08007fb8 <__libc_init_array>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	4e0d      	ldr	r6, [pc, #52]	; (8007ff0 <__libc_init_array+0x38>)
 8007fbc:	4c0d      	ldr	r4, [pc, #52]	; (8007ff4 <__libc_init_array+0x3c>)
 8007fbe:	1ba4      	subs	r4, r4, r6
 8007fc0:	10a4      	asrs	r4, r4, #2
 8007fc2:	2500      	movs	r5, #0
 8007fc4:	42a5      	cmp	r5, r4
 8007fc6:	d109      	bne.n	8007fdc <__libc_init_array+0x24>
 8007fc8:	4e0b      	ldr	r6, [pc, #44]	; (8007ff8 <__libc_init_array+0x40>)
 8007fca:	4c0c      	ldr	r4, [pc, #48]	; (8007ffc <__libc_init_array+0x44>)
 8007fcc:	f002 fd78 	bl	800aac0 <_init>
 8007fd0:	1ba4      	subs	r4, r4, r6
 8007fd2:	10a4      	asrs	r4, r4, #2
 8007fd4:	2500      	movs	r5, #0
 8007fd6:	42a5      	cmp	r5, r4
 8007fd8:	d105      	bne.n	8007fe6 <__libc_init_array+0x2e>
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
 8007fdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fe0:	4798      	blx	r3
 8007fe2:	3501      	adds	r5, #1
 8007fe4:	e7ee      	b.n	8007fc4 <__libc_init_array+0xc>
 8007fe6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fea:	4798      	blx	r3
 8007fec:	3501      	adds	r5, #1
 8007fee:	e7f2      	b.n	8007fd6 <__libc_init_array+0x1e>
 8007ff0:	0800ce10 	.word	0x0800ce10
 8007ff4:	0800ce10 	.word	0x0800ce10
 8007ff8:	0800ce10 	.word	0x0800ce10
 8007ffc:	0800ce14 	.word	0x0800ce14

08008000 <memset>:
 8008000:	4402      	add	r2, r0
 8008002:	4603      	mov	r3, r0
 8008004:	4293      	cmp	r3, r2
 8008006:	d100      	bne.n	800800a <memset+0xa>
 8008008:	4770      	bx	lr
 800800a:	f803 1b01 	strb.w	r1, [r3], #1
 800800e:	e7f9      	b.n	8008004 <memset+0x4>

08008010 <__cvt>:
 8008010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008014:	ec55 4b10 	vmov	r4, r5, d0
 8008018:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800801a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800801e:	2d00      	cmp	r5, #0
 8008020:	460e      	mov	r6, r1
 8008022:	4691      	mov	r9, r2
 8008024:	4619      	mov	r1, r3
 8008026:	bfb8      	it	lt
 8008028:	4622      	movlt	r2, r4
 800802a:	462b      	mov	r3, r5
 800802c:	f027 0720 	bic.w	r7, r7, #32
 8008030:	bfbb      	ittet	lt
 8008032:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008036:	461d      	movlt	r5, r3
 8008038:	2300      	movge	r3, #0
 800803a:	232d      	movlt	r3, #45	; 0x2d
 800803c:	bfb8      	it	lt
 800803e:	4614      	movlt	r4, r2
 8008040:	2f46      	cmp	r7, #70	; 0x46
 8008042:	700b      	strb	r3, [r1, #0]
 8008044:	d004      	beq.n	8008050 <__cvt+0x40>
 8008046:	2f45      	cmp	r7, #69	; 0x45
 8008048:	d100      	bne.n	800804c <__cvt+0x3c>
 800804a:	3601      	adds	r6, #1
 800804c:	2102      	movs	r1, #2
 800804e:	e000      	b.n	8008052 <__cvt+0x42>
 8008050:	2103      	movs	r1, #3
 8008052:	ab03      	add	r3, sp, #12
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	ab02      	add	r3, sp, #8
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	4632      	mov	r2, r6
 800805c:	4653      	mov	r3, sl
 800805e:	ec45 4b10 	vmov	d0, r4, r5
 8008062:	f000 fe2d 	bl	8008cc0 <_dtoa_r>
 8008066:	2f47      	cmp	r7, #71	; 0x47
 8008068:	4680      	mov	r8, r0
 800806a:	d102      	bne.n	8008072 <__cvt+0x62>
 800806c:	f019 0f01 	tst.w	r9, #1
 8008070:	d026      	beq.n	80080c0 <__cvt+0xb0>
 8008072:	2f46      	cmp	r7, #70	; 0x46
 8008074:	eb08 0906 	add.w	r9, r8, r6
 8008078:	d111      	bne.n	800809e <__cvt+0x8e>
 800807a:	f898 3000 	ldrb.w	r3, [r8]
 800807e:	2b30      	cmp	r3, #48	; 0x30
 8008080:	d10a      	bne.n	8008098 <__cvt+0x88>
 8008082:	2200      	movs	r2, #0
 8008084:	2300      	movs	r3, #0
 8008086:	4620      	mov	r0, r4
 8008088:	4629      	mov	r1, r5
 800808a:	f7f8 fd1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800808e:	b918      	cbnz	r0, 8008098 <__cvt+0x88>
 8008090:	f1c6 0601 	rsb	r6, r6, #1
 8008094:	f8ca 6000 	str.w	r6, [sl]
 8008098:	f8da 3000 	ldr.w	r3, [sl]
 800809c:	4499      	add	r9, r3
 800809e:	2200      	movs	r2, #0
 80080a0:	2300      	movs	r3, #0
 80080a2:	4620      	mov	r0, r4
 80080a4:	4629      	mov	r1, r5
 80080a6:	f7f8 fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80080aa:	b938      	cbnz	r0, 80080bc <__cvt+0xac>
 80080ac:	2230      	movs	r2, #48	; 0x30
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	454b      	cmp	r3, r9
 80080b2:	d205      	bcs.n	80080c0 <__cvt+0xb0>
 80080b4:	1c59      	adds	r1, r3, #1
 80080b6:	9103      	str	r1, [sp, #12]
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	e7f8      	b.n	80080ae <__cvt+0x9e>
 80080bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80080c0:	9b03      	ldr	r3, [sp, #12]
 80080c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080c4:	eba3 0308 	sub.w	r3, r3, r8
 80080c8:	4640      	mov	r0, r8
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	b004      	add	sp, #16
 80080ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080080d2 <__exponent>:
 80080d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080d4:	2900      	cmp	r1, #0
 80080d6:	4604      	mov	r4, r0
 80080d8:	bfba      	itte	lt
 80080da:	4249      	neglt	r1, r1
 80080dc:	232d      	movlt	r3, #45	; 0x2d
 80080de:	232b      	movge	r3, #43	; 0x2b
 80080e0:	2909      	cmp	r1, #9
 80080e2:	f804 2b02 	strb.w	r2, [r4], #2
 80080e6:	7043      	strb	r3, [r0, #1]
 80080e8:	dd20      	ble.n	800812c <__exponent+0x5a>
 80080ea:	f10d 0307 	add.w	r3, sp, #7
 80080ee:	461f      	mov	r7, r3
 80080f0:	260a      	movs	r6, #10
 80080f2:	fb91 f5f6 	sdiv	r5, r1, r6
 80080f6:	fb06 1115 	mls	r1, r6, r5, r1
 80080fa:	3130      	adds	r1, #48	; 0x30
 80080fc:	2d09      	cmp	r5, #9
 80080fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008102:	f103 32ff 	add.w	r2, r3, #4294967295
 8008106:	4629      	mov	r1, r5
 8008108:	dc09      	bgt.n	800811e <__exponent+0x4c>
 800810a:	3130      	adds	r1, #48	; 0x30
 800810c:	3b02      	subs	r3, #2
 800810e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008112:	42bb      	cmp	r3, r7
 8008114:	4622      	mov	r2, r4
 8008116:	d304      	bcc.n	8008122 <__exponent+0x50>
 8008118:	1a10      	subs	r0, r2, r0
 800811a:	b003      	add	sp, #12
 800811c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800811e:	4613      	mov	r3, r2
 8008120:	e7e7      	b.n	80080f2 <__exponent+0x20>
 8008122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008126:	f804 2b01 	strb.w	r2, [r4], #1
 800812a:	e7f2      	b.n	8008112 <__exponent+0x40>
 800812c:	2330      	movs	r3, #48	; 0x30
 800812e:	4419      	add	r1, r3
 8008130:	7083      	strb	r3, [r0, #2]
 8008132:	1d02      	adds	r2, r0, #4
 8008134:	70c1      	strb	r1, [r0, #3]
 8008136:	e7ef      	b.n	8008118 <__exponent+0x46>

08008138 <_printf_float>:
 8008138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	b08d      	sub	sp, #52	; 0x34
 800813e:	460c      	mov	r4, r1
 8008140:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008144:	4616      	mov	r6, r2
 8008146:	461f      	mov	r7, r3
 8008148:	4605      	mov	r5, r0
 800814a:	f001 fceb 	bl	8009b24 <_localeconv_r>
 800814e:	6803      	ldr	r3, [r0, #0]
 8008150:	9304      	str	r3, [sp, #16]
 8008152:	4618      	mov	r0, r3
 8008154:	f7f8 f83c 	bl	80001d0 <strlen>
 8008158:	2300      	movs	r3, #0
 800815a:	930a      	str	r3, [sp, #40]	; 0x28
 800815c:	f8d8 3000 	ldr.w	r3, [r8]
 8008160:	9005      	str	r0, [sp, #20]
 8008162:	3307      	adds	r3, #7
 8008164:	f023 0307 	bic.w	r3, r3, #7
 8008168:	f103 0208 	add.w	r2, r3, #8
 800816c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008170:	f8d4 b000 	ldr.w	fp, [r4]
 8008174:	f8c8 2000 	str.w	r2, [r8]
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008180:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008184:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008188:	9307      	str	r3, [sp, #28]
 800818a:	f8cd 8018 	str.w	r8, [sp, #24]
 800818e:	f04f 32ff 	mov.w	r2, #4294967295
 8008192:	4ba7      	ldr	r3, [pc, #668]	; (8008430 <_printf_float+0x2f8>)
 8008194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008198:	f7f8 fcc8 	bl	8000b2c <__aeabi_dcmpun>
 800819c:	bb70      	cbnz	r0, 80081fc <_printf_float+0xc4>
 800819e:	f04f 32ff 	mov.w	r2, #4294967295
 80081a2:	4ba3      	ldr	r3, [pc, #652]	; (8008430 <_printf_float+0x2f8>)
 80081a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081a8:	f7f8 fca2 	bl	8000af0 <__aeabi_dcmple>
 80081ac:	bb30      	cbnz	r0, 80081fc <_printf_float+0xc4>
 80081ae:	2200      	movs	r2, #0
 80081b0:	2300      	movs	r3, #0
 80081b2:	4640      	mov	r0, r8
 80081b4:	4649      	mov	r1, r9
 80081b6:	f7f8 fc91 	bl	8000adc <__aeabi_dcmplt>
 80081ba:	b110      	cbz	r0, 80081c2 <_printf_float+0x8a>
 80081bc:	232d      	movs	r3, #45	; 0x2d
 80081be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c2:	4a9c      	ldr	r2, [pc, #624]	; (8008434 <_printf_float+0x2fc>)
 80081c4:	4b9c      	ldr	r3, [pc, #624]	; (8008438 <_printf_float+0x300>)
 80081c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80081ca:	bf8c      	ite	hi
 80081cc:	4690      	movhi	r8, r2
 80081ce:	4698      	movls	r8, r3
 80081d0:	2303      	movs	r3, #3
 80081d2:	f02b 0204 	bic.w	r2, fp, #4
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	6022      	str	r2, [r4, #0]
 80081da:	f04f 0900 	mov.w	r9, #0
 80081de:	9700      	str	r7, [sp, #0]
 80081e0:	4633      	mov	r3, r6
 80081e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80081e4:	4621      	mov	r1, r4
 80081e6:	4628      	mov	r0, r5
 80081e8:	f000 f9e6 	bl	80085b8 <_printf_common>
 80081ec:	3001      	adds	r0, #1
 80081ee:	f040 808d 	bne.w	800830c <_printf_float+0x1d4>
 80081f2:	f04f 30ff 	mov.w	r0, #4294967295
 80081f6:	b00d      	add	sp, #52	; 0x34
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	4642      	mov	r2, r8
 80081fe:	464b      	mov	r3, r9
 8008200:	4640      	mov	r0, r8
 8008202:	4649      	mov	r1, r9
 8008204:	f7f8 fc92 	bl	8000b2c <__aeabi_dcmpun>
 8008208:	b110      	cbz	r0, 8008210 <_printf_float+0xd8>
 800820a:	4a8c      	ldr	r2, [pc, #560]	; (800843c <_printf_float+0x304>)
 800820c:	4b8c      	ldr	r3, [pc, #560]	; (8008440 <_printf_float+0x308>)
 800820e:	e7da      	b.n	80081c6 <_printf_float+0x8e>
 8008210:	6861      	ldr	r1, [r4, #4]
 8008212:	1c4b      	adds	r3, r1, #1
 8008214:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008218:	a80a      	add	r0, sp, #40	; 0x28
 800821a:	d13e      	bne.n	800829a <_printf_float+0x162>
 800821c:	2306      	movs	r3, #6
 800821e:	6063      	str	r3, [r4, #4]
 8008220:	2300      	movs	r3, #0
 8008222:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008226:	ab09      	add	r3, sp, #36	; 0x24
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	ec49 8b10 	vmov	d0, r8, r9
 800822e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008232:	6022      	str	r2, [r4, #0]
 8008234:	f8cd a004 	str.w	sl, [sp, #4]
 8008238:	6861      	ldr	r1, [r4, #4]
 800823a:	4628      	mov	r0, r5
 800823c:	f7ff fee8 	bl	8008010 <__cvt>
 8008240:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008244:	2b47      	cmp	r3, #71	; 0x47
 8008246:	4680      	mov	r8, r0
 8008248:	d109      	bne.n	800825e <_printf_float+0x126>
 800824a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800824c:	1cd8      	adds	r0, r3, #3
 800824e:	db02      	blt.n	8008256 <_printf_float+0x11e>
 8008250:	6862      	ldr	r2, [r4, #4]
 8008252:	4293      	cmp	r3, r2
 8008254:	dd47      	ble.n	80082e6 <_printf_float+0x1ae>
 8008256:	f1aa 0a02 	sub.w	sl, sl, #2
 800825a:	fa5f fa8a 	uxtb.w	sl, sl
 800825e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008262:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008264:	d824      	bhi.n	80082b0 <_printf_float+0x178>
 8008266:	3901      	subs	r1, #1
 8008268:	4652      	mov	r2, sl
 800826a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800826e:	9109      	str	r1, [sp, #36]	; 0x24
 8008270:	f7ff ff2f 	bl	80080d2 <__exponent>
 8008274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008276:	1813      	adds	r3, r2, r0
 8008278:	2a01      	cmp	r2, #1
 800827a:	4681      	mov	r9, r0
 800827c:	6123      	str	r3, [r4, #16]
 800827e:	dc02      	bgt.n	8008286 <_printf_float+0x14e>
 8008280:	6822      	ldr	r2, [r4, #0]
 8008282:	07d1      	lsls	r1, r2, #31
 8008284:	d501      	bpl.n	800828a <_printf_float+0x152>
 8008286:	3301      	adds	r3, #1
 8008288:	6123      	str	r3, [r4, #16]
 800828a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0a5      	beq.n	80081de <_printf_float+0xa6>
 8008292:	232d      	movs	r3, #45	; 0x2d
 8008294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008298:	e7a1      	b.n	80081de <_printf_float+0xa6>
 800829a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800829e:	f000 8177 	beq.w	8008590 <_printf_float+0x458>
 80082a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80082a6:	d1bb      	bne.n	8008220 <_printf_float+0xe8>
 80082a8:	2900      	cmp	r1, #0
 80082aa:	d1b9      	bne.n	8008220 <_printf_float+0xe8>
 80082ac:	2301      	movs	r3, #1
 80082ae:	e7b6      	b.n	800821e <_printf_float+0xe6>
 80082b0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80082b4:	d119      	bne.n	80082ea <_printf_float+0x1b2>
 80082b6:	2900      	cmp	r1, #0
 80082b8:	6863      	ldr	r3, [r4, #4]
 80082ba:	dd0c      	ble.n	80082d6 <_printf_float+0x19e>
 80082bc:	6121      	str	r1, [r4, #16]
 80082be:	b913      	cbnz	r3, 80082c6 <_printf_float+0x18e>
 80082c0:	6822      	ldr	r2, [r4, #0]
 80082c2:	07d2      	lsls	r2, r2, #31
 80082c4:	d502      	bpl.n	80082cc <_printf_float+0x194>
 80082c6:	3301      	adds	r3, #1
 80082c8:	440b      	add	r3, r1
 80082ca:	6123      	str	r3, [r4, #16]
 80082cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80082d0:	f04f 0900 	mov.w	r9, #0
 80082d4:	e7d9      	b.n	800828a <_printf_float+0x152>
 80082d6:	b913      	cbnz	r3, 80082de <_printf_float+0x1a6>
 80082d8:	6822      	ldr	r2, [r4, #0]
 80082da:	07d0      	lsls	r0, r2, #31
 80082dc:	d501      	bpl.n	80082e2 <_printf_float+0x1aa>
 80082de:	3302      	adds	r3, #2
 80082e0:	e7f3      	b.n	80082ca <_printf_float+0x192>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e7f1      	b.n	80082ca <_printf_float+0x192>
 80082e6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80082ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082ee:	4293      	cmp	r3, r2
 80082f0:	db05      	blt.n	80082fe <_printf_float+0x1c6>
 80082f2:	6822      	ldr	r2, [r4, #0]
 80082f4:	6123      	str	r3, [r4, #16]
 80082f6:	07d1      	lsls	r1, r2, #31
 80082f8:	d5e8      	bpl.n	80082cc <_printf_float+0x194>
 80082fa:	3301      	adds	r3, #1
 80082fc:	e7e5      	b.n	80082ca <_printf_float+0x192>
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bfd4      	ite	le
 8008302:	f1c3 0302 	rsble	r3, r3, #2
 8008306:	2301      	movgt	r3, #1
 8008308:	4413      	add	r3, r2
 800830a:	e7de      	b.n	80082ca <_printf_float+0x192>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	055a      	lsls	r2, r3, #21
 8008310:	d407      	bmi.n	8008322 <_printf_float+0x1ea>
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	4642      	mov	r2, r8
 8008316:	4631      	mov	r1, r6
 8008318:	4628      	mov	r0, r5
 800831a:	47b8      	blx	r7
 800831c:	3001      	adds	r0, #1
 800831e:	d12b      	bne.n	8008378 <_printf_float+0x240>
 8008320:	e767      	b.n	80081f2 <_printf_float+0xba>
 8008322:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008326:	f240 80dc 	bls.w	80084e2 <_printf_float+0x3aa>
 800832a:	2200      	movs	r2, #0
 800832c:	2300      	movs	r3, #0
 800832e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008332:	f7f8 fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008336:	2800      	cmp	r0, #0
 8008338:	d033      	beq.n	80083a2 <_printf_float+0x26a>
 800833a:	2301      	movs	r3, #1
 800833c:	4a41      	ldr	r2, [pc, #260]	; (8008444 <_printf_float+0x30c>)
 800833e:	4631      	mov	r1, r6
 8008340:	4628      	mov	r0, r5
 8008342:	47b8      	blx	r7
 8008344:	3001      	adds	r0, #1
 8008346:	f43f af54 	beq.w	80081f2 <_printf_float+0xba>
 800834a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800834e:	429a      	cmp	r2, r3
 8008350:	db02      	blt.n	8008358 <_printf_float+0x220>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	07d8      	lsls	r0, r3, #31
 8008356:	d50f      	bpl.n	8008378 <_printf_float+0x240>
 8008358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800835c:	4631      	mov	r1, r6
 800835e:	4628      	mov	r0, r5
 8008360:	47b8      	blx	r7
 8008362:	3001      	adds	r0, #1
 8008364:	f43f af45 	beq.w	80081f2 <_printf_float+0xba>
 8008368:	f04f 0800 	mov.w	r8, #0
 800836c:	f104 091a 	add.w	r9, r4, #26
 8008370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008372:	3b01      	subs	r3, #1
 8008374:	4543      	cmp	r3, r8
 8008376:	dc09      	bgt.n	800838c <_printf_float+0x254>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	079b      	lsls	r3, r3, #30
 800837c:	f100 8103 	bmi.w	8008586 <_printf_float+0x44e>
 8008380:	68e0      	ldr	r0, [r4, #12]
 8008382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008384:	4298      	cmp	r0, r3
 8008386:	bfb8      	it	lt
 8008388:	4618      	movlt	r0, r3
 800838a:	e734      	b.n	80081f6 <_printf_float+0xbe>
 800838c:	2301      	movs	r3, #1
 800838e:	464a      	mov	r2, r9
 8008390:	4631      	mov	r1, r6
 8008392:	4628      	mov	r0, r5
 8008394:	47b8      	blx	r7
 8008396:	3001      	adds	r0, #1
 8008398:	f43f af2b 	beq.w	80081f2 <_printf_float+0xba>
 800839c:	f108 0801 	add.w	r8, r8, #1
 80083a0:	e7e6      	b.n	8008370 <_printf_float+0x238>
 80083a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	dc2b      	bgt.n	8008400 <_printf_float+0x2c8>
 80083a8:	2301      	movs	r3, #1
 80083aa:	4a26      	ldr	r2, [pc, #152]	; (8008444 <_printf_float+0x30c>)
 80083ac:	4631      	mov	r1, r6
 80083ae:	4628      	mov	r0, r5
 80083b0:	47b8      	blx	r7
 80083b2:	3001      	adds	r0, #1
 80083b4:	f43f af1d 	beq.w	80081f2 <_printf_float+0xba>
 80083b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ba:	b923      	cbnz	r3, 80083c6 <_printf_float+0x28e>
 80083bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083be:	b913      	cbnz	r3, 80083c6 <_printf_float+0x28e>
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	07d9      	lsls	r1, r3, #31
 80083c4:	d5d8      	bpl.n	8008378 <_printf_float+0x240>
 80083c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ca:	4631      	mov	r1, r6
 80083cc:	4628      	mov	r0, r5
 80083ce:	47b8      	blx	r7
 80083d0:	3001      	adds	r0, #1
 80083d2:	f43f af0e 	beq.w	80081f2 <_printf_float+0xba>
 80083d6:	f04f 0900 	mov.w	r9, #0
 80083da:	f104 0a1a 	add.w	sl, r4, #26
 80083de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e0:	425b      	negs	r3, r3
 80083e2:	454b      	cmp	r3, r9
 80083e4:	dc01      	bgt.n	80083ea <_printf_float+0x2b2>
 80083e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e8:	e794      	b.n	8008314 <_printf_float+0x1dc>
 80083ea:	2301      	movs	r3, #1
 80083ec:	4652      	mov	r2, sl
 80083ee:	4631      	mov	r1, r6
 80083f0:	4628      	mov	r0, r5
 80083f2:	47b8      	blx	r7
 80083f4:	3001      	adds	r0, #1
 80083f6:	f43f aefc 	beq.w	80081f2 <_printf_float+0xba>
 80083fa:	f109 0901 	add.w	r9, r9, #1
 80083fe:	e7ee      	b.n	80083de <_printf_float+0x2a6>
 8008400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008402:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008404:	429a      	cmp	r2, r3
 8008406:	bfa8      	it	ge
 8008408:	461a      	movge	r2, r3
 800840a:	2a00      	cmp	r2, #0
 800840c:	4691      	mov	r9, r2
 800840e:	dd07      	ble.n	8008420 <_printf_float+0x2e8>
 8008410:	4613      	mov	r3, r2
 8008412:	4631      	mov	r1, r6
 8008414:	4642      	mov	r2, r8
 8008416:	4628      	mov	r0, r5
 8008418:	47b8      	blx	r7
 800841a:	3001      	adds	r0, #1
 800841c:	f43f aee9 	beq.w	80081f2 <_printf_float+0xba>
 8008420:	f104 031a 	add.w	r3, r4, #26
 8008424:	f04f 0b00 	mov.w	fp, #0
 8008428:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800842c:	9306      	str	r3, [sp, #24]
 800842e:	e015      	b.n	800845c <_printf_float+0x324>
 8008430:	7fefffff 	.word	0x7fefffff
 8008434:	0800cb4c 	.word	0x0800cb4c
 8008438:	0800cb48 	.word	0x0800cb48
 800843c:	0800cb54 	.word	0x0800cb54
 8008440:	0800cb50 	.word	0x0800cb50
 8008444:	0800cb58 	.word	0x0800cb58
 8008448:	2301      	movs	r3, #1
 800844a:	9a06      	ldr	r2, [sp, #24]
 800844c:	4631      	mov	r1, r6
 800844e:	4628      	mov	r0, r5
 8008450:	47b8      	blx	r7
 8008452:	3001      	adds	r0, #1
 8008454:	f43f aecd 	beq.w	80081f2 <_printf_float+0xba>
 8008458:	f10b 0b01 	add.w	fp, fp, #1
 800845c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008460:	ebaa 0309 	sub.w	r3, sl, r9
 8008464:	455b      	cmp	r3, fp
 8008466:	dcef      	bgt.n	8008448 <_printf_float+0x310>
 8008468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800846c:	429a      	cmp	r2, r3
 800846e:	44d0      	add	r8, sl
 8008470:	db15      	blt.n	800849e <_printf_float+0x366>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	07da      	lsls	r2, r3, #31
 8008476:	d412      	bmi.n	800849e <_printf_float+0x366>
 8008478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800847a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800847c:	eba3 020a 	sub.w	r2, r3, sl
 8008480:	eba3 0a01 	sub.w	sl, r3, r1
 8008484:	4592      	cmp	sl, r2
 8008486:	bfa8      	it	ge
 8008488:	4692      	movge	sl, r2
 800848a:	f1ba 0f00 	cmp.w	sl, #0
 800848e:	dc0e      	bgt.n	80084ae <_printf_float+0x376>
 8008490:	f04f 0800 	mov.w	r8, #0
 8008494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008498:	f104 091a 	add.w	r9, r4, #26
 800849c:	e019      	b.n	80084d2 <_printf_float+0x39a>
 800849e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084a2:	4631      	mov	r1, r6
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b8      	blx	r7
 80084a8:	3001      	adds	r0, #1
 80084aa:	d1e5      	bne.n	8008478 <_printf_float+0x340>
 80084ac:	e6a1      	b.n	80081f2 <_printf_float+0xba>
 80084ae:	4653      	mov	r3, sl
 80084b0:	4642      	mov	r2, r8
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	d1e9      	bne.n	8008490 <_printf_float+0x358>
 80084bc:	e699      	b.n	80081f2 <_printf_float+0xba>
 80084be:	2301      	movs	r3, #1
 80084c0:	464a      	mov	r2, r9
 80084c2:	4631      	mov	r1, r6
 80084c4:	4628      	mov	r0, r5
 80084c6:	47b8      	blx	r7
 80084c8:	3001      	adds	r0, #1
 80084ca:	f43f ae92 	beq.w	80081f2 <_printf_float+0xba>
 80084ce:	f108 0801 	add.w	r8, r8, #1
 80084d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084d6:	1a9b      	subs	r3, r3, r2
 80084d8:	eba3 030a 	sub.w	r3, r3, sl
 80084dc:	4543      	cmp	r3, r8
 80084de:	dcee      	bgt.n	80084be <_printf_float+0x386>
 80084e0:	e74a      	b.n	8008378 <_printf_float+0x240>
 80084e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084e4:	2a01      	cmp	r2, #1
 80084e6:	dc01      	bgt.n	80084ec <_printf_float+0x3b4>
 80084e8:	07db      	lsls	r3, r3, #31
 80084ea:	d53a      	bpl.n	8008562 <_printf_float+0x42a>
 80084ec:	2301      	movs	r3, #1
 80084ee:	4642      	mov	r2, r8
 80084f0:	4631      	mov	r1, r6
 80084f2:	4628      	mov	r0, r5
 80084f4:	47b8      	blx	r7
 80084f6:	3001      	adds	r0, #1
 80084f8:	f43f ae7b 	beq.w	80081f2 <_printf_float+0xba>
 80084fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008500:	4631      	mov	r1, r6
 8008502:	4628      	mov	r0, r5
 8008504:	47b8      	blx	r7
 8008506:	3001      	adds	r0, #1
 8008508:	f108 0801 	add.w	r8, r8, #1
 800850c:	f43f ae71 	beq.w	80081f2 <_printf_float+0xba>
 8008510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008512:	2200      	movs	r2, #0
 8008514:	f103 3aff 	add.w	sl, r3, #4294967295
 8008518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800851c:	2300      	movs	r3, #0
 800851e:	f7f8 fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008522:	b9c8      	cbnz	r0, 8008558 <_printf_float+0x420>
 8008524:	4653      	mov	r3, sl
 8008526:	4642      	mov	r2, r8
 8008528:	4631      	mov	r1, r6
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	d10e      	bne.n	8008550 <_printf_float+0x418>
 8008532:	e65e      	b.n	80081f2 <_printf_float+0xba>
 8008534:	2301      	movs	r3, #1
 8008536:	4652      	mov	r2, sl
 8008538:	4631      	mov	r1, r6
 800853a:	4628      	mov	r0, r5
 800853c:	47b8      	blx	r7
 800853e:	3001      	adds	r0, #1
 8008540:	f43f ae57 	beq.w	80081f2 <_printf_float+0xba>
 8008544:	f108 0801 	add.w	r8, r8, #1
 8008548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854a:	3b01      	subs	r3, #1
 800854c:	4543      	cmp	r3, r8
 800854e:	dcf1      	bgt.n	8008534 <_printf_float+0x3fc>
 8008550:	464b      	mov	r3, r9
 8008552:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008556:	e6de      	b.n	8008316 <_printf_float+0x1de>
 8008558:	f04f 0800 	mov.w	r8, #0
 800855c:	f104 0a1a 	add.w	sl, r4, #26
 8008560:	e7f2      	b.n	8008548 <_printf_float+0x410>
 8008562:	2301      	movs	r3, #1
 8008564:	e7df      	b.n	8008526 <_printf_float+0x3ee>
 8008566:	2301      	movs	r3, #1
 8008568:	464a      	mov	r2, r9
 800856a:	4631      	mov	r1, r6
 800856c:	4628      	mov	r0, r5
 800856e:	47b8      	blx	r7
 8008570:	3001      	adds	r0, #1
 8008572:	f43f ae3e 	beq.w	80081f2 <_printf_float+0xba>
 8008576:	f108 0801 	add.w	r8, r8, #1
 800857a:	68e3      	ldr	r3, [r4, #12]
 800857c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	4543      	cmp	r3, r8
 8008582:	dcf0      	bgt.n	8008566 <_printf_float+0x42e>
 8008584:	e6fc      	b.n	8008380 <_printf_float+0x248>
 8008586:	f04f 0800 	mov.w	r8, #0
 800858a:	f104 0919 	add.w	r9, r4, #25
 800858e:	e7f4      	b.n	800857a <_printf_float+0x442>
 8008590:	2900      	cmp	r1, #0
 8008592:	f43f ae8b 	beq.w	80082ac <_printf_float+0x174>
 8008596:	2300      	movs	r3, #0
 8008598:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800859c:	ab09      	add	r3, sp, #36	; 0x24
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	ec49 8b10 	vmov	d0, r8, r9
 80085a4:	6022      	str	r2, [r4, #0]
 80085a6:	f8cd a004 	str.w	sl, [sp, #4]
 80085aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80085ae:	4628      	mov	r0, r5
 80085b0:	f7ff fd2e 	bl	8008010 <__cvt>
 80085b4:	4680      	mov	r8, r0
 80085b6:	e648      	b.n	800824a <_printf_float+0x112>

080085b8 <_printf_common>:
 80085b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085bc:	4691      	mov	r9, r2
 80085be:	461f      	mov	r7, r3
 80085c0:	688a      	ldr	r2, [r1, #8]
 80085c2:	690b      	ldr	r3, [r1, #16]
 80085c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085c8:	4293      	cmp	r3, r2
 80085ca:	bfb8      	it	lt
 80085cc:	4613      	movlt	r3, r2
 80085ce:	f8c9 3000 	str.w	r3, [r9]
 80085d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085d6:	4606      	mov	r6, r0
 80085d8:	460c      	mov	r4, r1
 80085da:	b112      	cbz	r2, 80085e2 <_printf_common+0x2a>
 80085dc:	3301      	adds	r3, #1
 80085de:	f8c9 3000 	str.w	r3, [r9]
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	0699      	lsls	r1, r3, #26
 80085e6:	bf42      	ittt	mi
 80085e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80085ec:	3302      	addmi	r3, #2
 80085ee:	f8c9 3000 	strmi.w	r3, [r9]
 80085f2:	6825      	ldr	r5, [r4, #0]
 80085f4:	f015 0506 	ands.w	r5, r5, #6
 80085f8:	d107      	bne.n	800860a <_printf_common+0x52>
 80085fa:	f104 0a19 	add.w	sl, r4, #25
 80085fe:	68e3      	ldr	r3, [r4, #12]
 8008600:	f8d9 2000 	ldr.w	r2, [r9]
 8008604:	1a9b      	subs	r3, r3, r2
 8008606:	42ab      	cmp	r3, r5
 8008608:	dc28      	bgt.n	800865c <_printf_common+0xa4>
 800860a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800860e:	6822      	ldr	r2, [r4, #0]
 8008610:	3300      	adds	r3, #0
 8008612:	bf18      	it	ne
 8008614:	2301      	movne	r3, #1
 8008616:	0692      	lsls	r2, r2, #26
 8008618:	d42d      	bmi.n	8008676 <_printf_common+0xbe>
 800861a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800861e:	4639      	mov	r1, r7
 8008620:	4630      	mov	r0, r6
 8008622:	47c0      	blx	r8
 8008624:	3001      	adds	r0, #1
 8008626:	d020      	beq.n	800866a <_printf_common+0xb2>
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	68e5      	ldr	r5, [r4, #12]
 800862c:	f8d9 2000 	ldr.w	r2, [r9]
 8008630:	f003 0306 	and.w	r3, r3, #6
 8008634:	2b04      	cmp	r3, #4
 8008636:	bf08      	it	eq
 8008638:	1aad      	subeq	r5, r5, r2
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	6922      	ldr	r2, [r4, #16]
 800863e:	bf0c      	ite	eq
 8008640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008644:	2500      	movne	r5, #0
 8008646:	4293      	cmp	r3, r2
 8008648:	bfc4      	itt	gt
 800864a:	1a9b      	subgt	r3, r3, r2
 800864c:	18ed      	addgt	r5, r5, r3
 800864e:	f04f 0900 	mov.w	r9, #0
 8008652:	341a      	adds	r4, #26
 8008654:	454d      	cmp	r5, r9
 8008656:	d11a      	bne.n	800868e <_printf_common+0xd6>
 8008658:	2000      	movs	r0, #0
 800865a:	e008      	b.n	800866e <_printf_common+0xb6>
 800865c:	2301      	movs	r3, #1
 800865e:	4652      	mov	r2, sl
 8008660:	4639      	mov	r1, r7
 8008662:	4630      	mov	r0, r6
 8008664:	47c0      	blx	r8
 8008666:	3001      	adds	r0, #1
 8008668:	d103      	bne.n	8008672 <_printf_common+0xba>
 800866a:	f04f 30ff 	mov.w	r0, #4294967295
 800866e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008672:	3501      	adds	r5, #1
 8008674:	e7c3      	b.n	80085fe <_printf_common+0x46>
 8008676:	18e1      	adds	r1, r4, r3
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	2030      	movs	r0, #48	; 0x30
 800867c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008680:	4422      	add	r2, r4
 8008682:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008686:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800868a:	3302      	adds	r3, #2
 800868c:	e7c5      	b.n	800861a <_printf_common+0x62>
 800868e:	2301      	movs	r3, #1
 8008690:	4622      	mov	r2, r4
 8008692:	4639      	mov	r1, r7
 8008694:	4630      	mov	r0, r6
 8008696:	47c0      	blx	r8
 8008698:	3001      	adds	r0, #1
 800869a:	d0e6      	beq.n	800866a <_printf_common+0xb2>
 800869c:	f109 0901 	add.w	r9, r9, #1
 80086a0:	e7d8      	b.n	8008654 <_printf_common+0x9c>
	...

080086a4 <_printf_i>:
 80086a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80086ac:	460c      	mov	r4, r1
 80086ae:	7e09      	ldrb	r1, [r1, #24]
 80086b0:	b085      	sub	sp, #20
 80086b2:	296e      	cmp	r1, #110	; 0x6e
 80086b4:	4617      	mov	r7, r2
 80086b6:	4606      	mov	r6, r0
 80086b8:	4698      	mov	r8, r3
 80086ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086bc:	f000 80b3 	beq.w	8008826 <_printf_i+0x182>
 80086c0:	d822      	bhi.n	8008708 <_printf_i+0x64>
 80086c2:	2963      	cmp	r1, #99	; 0x63
 80086c4:	d036      	beq.n	8008734 <_printf_i+0x90>
 80086c6:	d80a      	bhi.n	80086de <_printf_i+0x3a>
 80086c8:	2900      	cmp	r1, #0
 80086ca:	f000 80b9 	beq.w	8008840 <_printf_i+0x19c>
 80086ce:	2958      	cmp	r1, #88	; 0x58
 80086d0:	f000 8083 	beq.w	80087da <_printf_i+0x136>
 80086d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80086dc:	e032      	b.n	8008744 <_printf_i+0xa0>
 80086de:	2964      	cmp	r1, #100	; 0x64
 80086e0:	d001      	beq.n	80086e6 <_printf_i+0x42>
 80086e2:	2969      	cmp	r1, #105	; 0x69
 80086e4:	d1f6      	bne.n	80086d4 <_printf_i+0x30>
 80086e6:	6820      	ldr	r0, [r4, #0]
 80086e8:	6813      	ldr	r3, [r2, #0]
 80086ea:	0605      	lsls	r5, r0, #24
 80086ec:	f103 0104 	add.w	r1, r3, #4
 80086f0:	d52a      	bpl.n	8008748 <_printf_i+0xa4>
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6011      	str	r1, [r2, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	da03      	bge.n	8008702 <_printf_i+0x5e>
 80086fa:	222d      	movs	r2, #45	; 0x2d
 80086fc:	425b      	negs	r3, r3
 80086fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008702:	486f      	ldr	r0, [pc, #444]	; (80088c0 <_printf_i+0x21c>)
 8008704:	220a      	movs	r2, #10
 8008706:	e039      	b.n	800877c <_printf_i+0xd8>
 8008708:	2973      	cmp	r1, #115	; 0x73
 800870a:	f000 809d 	beq.w	8008848 <_printf_i+0x1a4>
 800870e:	d808      	bhi.n	8008722 <_printf_i+0x7e>
 8008710:	296f      	cmp	r1, #111	; 0x6f
 8008712:	d020      	beq.n	8008756 <_printf_i+0xb2>
 8008714:	2970      	cmp	r1, #112	; 0x70
 8008716:	d1dd      	bne.n	80086d4 <_printf_i+0x30>
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	f043 0320 	orr.w	r3, r3, #32
 800871e:	6023      	str	r3, [r4, #0]
 8008720:	e003      	b.n	800872a <_printf_i+0x86>
 8008722:	2975      	cmp	r1, #117	; 0x75
 8008724:	d017      	beq.n	8008756 <_printf_i+0xb2>
 8008726:	2978      	cmp	r1, #120	; 0x78
 8008728:	d1d4      	bne.n	80086d4 <_printf_i+0x30>
 800872a:	2378      	movs	r3, #120	; 0x78
 800872c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008730:	4864      	ldr	r0, [pc, #400]	; (80088c4 <_printf_i+0x220>)
 8008732:	e055      	b.n	80087e0 <_printf_i+0x13c>
 8008734:	6813      	ldr	r3, [r2, #0]
 8008736:	1d19      	adds	r1, r3, #4
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6011      	str	r1, [r2, #0]
 800873c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008744:	2301      	movs	r3, #1
 8008746:	e08c      	b.n	8008862 <_printf_i+0x1be>
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6011      	str	r1, [r2, #0]
 800874c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008750:	bf18      	it	ne
 8008752:	b21b      	sxthne	r3, r3
 8008754:	e7cf      	b.n	80086f6 <_printf_i+0x52>
 8008756:	6813      	ldr	r3, [r2, #0]
 8008758:	6825      	ldr	r5, [r4, #0]
 800875a:	1d18      	adds	r0, r3, #4
 800875c:	6010      	str	r0, [r2, #0]
 800875e:	0628      	lsls	r0, r5, #24
 8008760:	d501      	bpl.n	8008766 <_printf_i+0xc2>
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	e002      	b.n	800876c <_printf_i+0xc8>
 8008766:	0668      	lsls	r0, r5, #25
 8008768:	d5fb      	bpl.n	8008762 <_printf_i+0xbe>
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	4854      	ldr	r0, [pc, #336]	; (80088c0 <_printf_i+0x21c>)
 800876e:	296f      	cmp	r1, #111	; 0x6f
 8008770:	bf14      	ite	ne
 8008772:	220a      	movne	r2, #10
 8008774:	2208      	moveq	r2, #8
 8008776:	2100      	movs	r1, #0
 8008778:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800877c:	6865      	ldr	r5, [r4, #4]
 800877e:	60a5      	str	r5, [r4, #8]
 8008780:	2d00      	cmp	r5, #0
 8008782:	f2c0 8095 	blt.w	80088b0 <_printf_i+0x20c>
 8008786:	6821      	ldr	r1, [r4, #0]
 8008788:	f021 0104 	bic.w	r1, r1, #4
 800878c:	6021      	str	r1, [r4, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d13d      	bne.n	800880e <_printf_i+0x16a>
 8008792:	2d00      	cmp	r5, #0
 8008794:	f040 808e 	bne.w	80088b4 <_printf_i+0x210>
 8008798:	4665      	mov	r5, ip
 800879a:	2a08      	cmp	r2, #8
 800879c:	d10b      	bne.n	80087b6 <_printf_i+0x112>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	07db      	lsls	r3, r3, #31
 80087a2:	d508      	bpl.n	80087b6 <_printf_i+0x112>
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	6862      	ldr	r2, [r4, #4]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	bfde      	ittt	le
 80087ac:	2330      	movle	r3, #48	; 0x30
 80087ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087b6:	ebac 0305 	sub.w	r3, ip, r5
 80087ba:	6123      	str	r3, [r4, #16]
 80087bc:	f8cd 8000 	str.w	r8, [sp]
 80087c0:	463b      	mov	r3, r7
 80087c2:	aa03      	add	r2, sp, #12
 80087c4:	4621      	mov	r1, r4
 80087c6:	4630      	mov	r0, r6
 80087c8:	f7ff fef6 	bl	80085b8 <_printf_common>
 80087cc:	3001      	adds	r0, #1
 80087ce:	d14d      	bne.n	800886c <_printf_i+0x1c8>
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295
 80087d4:	b005      	add	sp, #20
 80087d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087da:	4839      	ldr	r0, [pc, #228]	; (80088c0 <_printf_i+0x21c>)
 80087dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80087e0:	6813      	ldr	r3, [r2, #0]
 80087e2:	6821      	ldr	r1, [r4, #0]
 80087e4:	1d1d      	adds	r5, r3, #4
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6015      	str	r5, [r2, #0]
 80087ea:	060a      	lsls	r2, r1, #24
 80087ec:	d50b      	bpl.n	8008806 <_printf_i+0x162>
 80087ee:	07ca      	lsls	r2, r1, #31
 80087f0:	bf44      	itt	mi
 80087f2:	f041 0120 	orrmi.w	r1, r1, #32
 80087f6:	6021      	strmi	r1, [r4, #0]
 80087f8:	b91b      	cbnz	r3, 8008802 <_printf_i+0x15e>
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	f022 0220 	bic.w	r2, r2, #32
 8008800:	6022      	str	r2, [r4, #0]
 8008802:	2210      	movs	r2, #16
 8008804:	e7b7      	b.n	8008776 <_printf_i+0xd2>
 8008806:	064d      	lsls	r5, r1, #25
 8008808:	bf48      	it	mi
 800880a:	b29b      	uxthmi	r3, r3
 800880c:	e7ef      	b.n	80087ee <_printf_i+0x14a>
 800880e:	4665      	mov	r5, ip
 8008810:	fbb3 f1f2 	udiv	r1, r3, r2
 8008814:	fb02 3311 	mls	r3, r2, r1, r3
 8008818:	5cc3      	ldrb	r3, [r0, r3]
 800881a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800881e:	460b      	mov	r3, r1
 8008820:	2900      	cmp	r1, #0
 8008822:	d1f5      	bne.n	8008810 <_printf_i+0x16c>
 8008824:	e7b9      	b.n	800879a <_printf_i+0xf6>
 8008826:	6813      	ldr	r3, [r2, #0]
 8008828:	6825      	ldr	r5, [r4, #0]
 800882a:	6961      	ldr	r1, [r4, #20]
 800882c:	1d18      	adds	r0, r3, #4
 800882e:	6010      	str	r0, [r2, #0]
 8008830:	0628      	lsls	r0, r5, #24
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	d501      	bpl.n	800883a <_printf_i+0x196>
 8008836:	6019      	str	r1, [r3, #0]
 8008838:	e002      	b.n	8008840 <_printf_i+0x19c>
 800883a:	066a      	lsls	r2, r5, #25
 800883c:	d5fb      	bpl.n	8008836 <_printf_i+0x192>
 800883e:	8019      	strh	r1, [r3, #0]
 8008840:	2300      	movs	r3, #0
 8008842:	6123      	str	r3, [r4, #16]
 8008844:	4665      	mov	r5, ip
 8008846:	e7b9      	b.n	80087bc <_printf_i+0x118>
 8008848:	6813      	ldr	r3, [r2, #0]
 800884a:	1d19      	adds	r1, r3, #4
 800884c:	6011      	str	r1, [r2, #0]
 800884e:	681d      	ldr	r5, [r3, #0]
 8008850:	6862      	ldr	r2, [r4, #4]
 8008852:	2100      	movs	r1, #0
 8008854:	4628      	mov	r0, r5
 8008856:	f7f7 fcc3 	bl	80001e0 <memchr>
 800885a:	b108      	cbz	r0, 8008860 <_printf_i+0x1bc>
 800885c:	1b40      	subs	r0, r0, r5
 800885e:	6060      	str	r0, [r4, #4]
 8008860:	6863      	ldr	r3, [r4, #4]
 8008862:	6123      	str	r3, [r4, #16]
 8008864:	2300      	movs	r3, #0
 8008866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800886a:	e7a7      	b.n	80087bc <_printf_i+0x118>
 800886c:	6923      	ldr	r3, [r4, #16]
 800886e:	462a      	mov	r2, r5
 8008870:	4639      	mov	r1, r7
 8008872:	4630      	mov	r0, r6
 8008874:	47c0      	blx	r8
 8008876:	3001      	adds	r0, #1
 8008878:	d0aa      	beq.n	80087d0 <_printf_i+0x12c>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	079b      	lsls	r3, r3, #30
 800887e:	d413      	bmi.n	80088a8 <_printf_i+0x204>
 8008880:	68e0      	ldr	r0, [r4, #12]
 8008882:	9b03      	ldr	r3, [sp, #12]
 8008884:	4298      	cmp	r0, r3
 8008886:	bfb8      	it	lt
 8008888:	4618      	movlt	r0, r3
 800888a:	e7a3      	b.n	80087d4 <_printf_i+0x130>
 800888c:	2301      	movs	r3, #1
 800888e:	464a      	mov	r2, r9
 8008890:	4639      	mov	r1, r7
 8008892:	4630      	mov	r0, r6
 8008894:	47c0      	blx	r8
 8008896:	3001      	adds	r0, #1
 8008898:	d09a      	beq.n	80087d0 <_printf_i+0x12c>
 800889a:	3501      	adds	r5, #1
 800889c:	68e3      	ldr	r3, [r4, #12]
 800889e:	9a03      	ldr	r2, [sp, #12]
 80088a0:	1a9b      	subs	r3, r3, r2
 80088a2:	42ab      	cmp	r3, r5
 80088a4:	dcf2      	bgt.n	800888c <_printf_i+0x1e8>
 80088a6:	e7eb      	b.n	8008880 <_printf_i+0x1dc>
 80088a8:	2500      	movs	r5, #0
 80088aa:	f104 0919 	add.w	r9, r4, #25
 80088ae:	e7f5      	b.n	800889c <_printf_i+0x1f8>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1ac      	bne.n	800880e <_printf_i+0x16a>
 80088b4:	7803      	ldrb	r3, [r0, #0]
 80088b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088be:	e76c      	b.n	800879a <_printf_i+0xf6>
 80088c0:	0800cb5a 	.word	0x0800cb5a
 80088c4:	0800cb6b 	.word	0x0800cb6b

080088c8 <iprintf>:
 80088c8:	b40f      	push	{r0, r1, r2, r3}
 80088ca:	4b0a      	ldr	r3, [pc, #40]	; (80088f4 <iprintf+0x2c>)
 80088cc:	b513      	push	{r0, r1, r4, lr}
 80088ce:	681c      	ldr	r4, [r3, #0]
 80088d0:	b124      	cbz	r4, 80088dc <iprintf+0x14>
 80088d2:	69a3      	ldr	r3, [r4, #24]
 80088d4:	b913      	cbnz	r3, 80088dc <iprintf+0x14>
 80088d6:	4620      	mov	r0, r4
 80088d8:	f001 f89a 	bl	8009a10 <__sinit>
 80088dc:	ab05      	add	r3, sp, #20
 80088de:	9a04      	ldr	r2, [sp, #16]
 80088e0:	68a1      	ldr	r1, [r4, #8]
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	4620      	mov	r0, r4
 80088e6:	f001 feaf 	bl	800a648 <_vfiprintf_r>
 80088ea:	b002      	add	sp, #8
 80088ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088f0:	b004      	add	sp, #16
 80088f2:	4770      	bx	lr
 80088f4:	20000030 	.word	0x20000030

080088f8 <_puts_r>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	460e      	mov	r6, r1
 80088fc:	4605      	mov	r5, r0
 80088fe:	b118      	cbz	r0, 8008908 <_puts_r+0x10>
 8008900:	6983      	ldr	r3, [r0, #24]
 8008902:	b90b      	cbnz	r3, 8008908 <_puts_r+0x10>
 8008904:	f001 f884 	bl	8009a10 <__sinit>
 8008908:	69ab      	ldr	r3, [r5, #24]
 800890a:	68ac      	ldr	r4, [r5, #8]
 800890c:	b913      	cbnz	r3, 8008914 <_puts_r+0x1c>
 800890e:	4628      	mov	r0, r5
 8008910:	f001 f87e 	bl	8009a10 <__sinit>
 8008914:	4b23      	ldr	r3, [pc, #140]	; (80089a4 <_puts_r+0xac>)
 8008916:	429c      	cmp	r4, r3
 8008918:	d117      	bne.n	800894a <_puts_r+0x52>
 800891a:	686c      	ldr	r4, [r5, #4]
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	071b      	lsls	r3, r3, #28
 8008920:	d51d      	bpl.n	800895e <_puts_r+0x66>
 8008922:	6923      	ldr	r3, [r4, #16]
 8008924:	b1db      	cbz	r3, 800895e <_puts_r+0x66>
 8008926:	3e01      	subs	r6, #1
 8008928:	68a3      	ldr	r3, [r4, #8]
 800892a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800892e:	3b01      	subs	r3, #1
 8008930:	60a3      	str	r3, [r4, #8]
 8008932:	b9e9      	cbnz	r1, 8008970 <_puts_r+0x78>
 8008934:	2b00      	cmp	r3, #0
 8008936:	da2e      	bge.n	8008996 <_puts_r+0x9e>
 8008938:	4622      	mov	r2, r4
 800893a:	210a      	movs	r1, #10
 800893c:	4628      	mov	r0, r5
 800893e:	f000 f873 	bl	8008a28 <__swbuf_r>
 8008942:	3001      	adds	r0, #1
 8008944:	d011      	beq.n	800896a <_puts_r+0x72>
 8008946:	200a      	movs	r0, #10
 8008948:	e011      	b.n	800896e <_puts_r+0x76>
 800894a:	4b17      	ldr	r3, [pc, #92]	; (80089a8 <_puts_r+0xb0>)
 800894c:	429c      	cmp	r4, r3
 800894e:	d101      	bne.n	8008954 <_puts_r+0x5c>
 8008950:	68ac      	ldr	r4, [r5, #8]
 8008952:	e7e3      	b.n	800891c <_puts_r+0x24>
 8008954:	4b15      	ldr	r3, [pc, #84]	; (80089ac <_puts_r+0xb4>)
 8008956:	429c      	cmp	r4, r3
 8008958:	bf08      	it	eq
 800895a:	68ec      	ldreq	r4, [r5, #12]
 800895c:	e7de      	b.n	800891c <_puts_r+0x24>
 800895e:	4621      	mov	r1, r4
 8008960:	4628      	mov	r0, r5
 8008962:	f000 f8b3 	bl	8008acc <__swsetup_r>
 8008966:	2800      	cmp	r0, #0
 8008968:	d0dd      	beq.n	8008926 <_puts_r+0x2e>
 800896a:	f04f 30ff 	mov.w	r0, #4294967295
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	2b00      	cmp	r3, #0
 8008972:	da04      	bge.n	800897e <_puts_r+0x86>
 8008974:	69a2      	ldr	r2, [r4, #24]
 8008976:	429a      	cmp	r2, r3
 8008978:	dc06      	bgt.n	8008988 <_puts_r+0x90>
 800897a:	290a      	cmp	r1, #10
 800897c:	d004      	beq.n	8008988 <_puts_r+0x90>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	6022      	str	r2, [r4, #0]
 8008984:	7019      	strb	r1, [r3, #0]
 8008986:	e7cf      	b.n	8008928 <_puts_r+0x30>
 8008988:	4622      	mov	r2, r4
 800898a:	4628      	mov	r0, r5
 800898c:	f000 f84c 	bl	8008a28 <__swbuf_r>
 8008990:	3001      	adds	r0, #1
 8008992:	d1c9      	bne.n	8008928 <_puts_r+0x30>
 8008994:	e7e9      	b.n	800896a <_puts_r+0x72>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	200a      	movs	r0, #10
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	6022      	str	r2, [r4, #0]
 800899e:	7018      	strb	r0, [r3, #0]
 80089a0:	e7e5      	b.n	800896e <_puts_r+0x76>
 80089a2:	bf00      	nop
 80089a4:	0800cbac 	.word	0x0800cbac
 80089a8:	0800cbcc 	.word	0x0800cbcc
 80089ac:	0800cb8c 	.word	0x0800cb8c

080089b0 <puts>:
 80089b0:	4b02      	ldr	r3, [pc, #8]	; (80089bc <puts+0xc>)
 80089b2:	4601      	mov	r1, r0
 80089b4:	6818      	ldr	r0, [r3, #0]
 80089b6:	f7ff bf9f 	b.w	80088f8 <_puts_r>
 80089ba:	bf00      	nop
 80089bc:	20000030 	.word	0x20000030

080089c0 <sniprintf>:
 80089c0:	b40c      	push	{r2, r3}
 80089c2:	b530      	push	{r4, r5, lr}
 80089c4:	4b17      	ldr	r3, [pc, #92]	; (8008a24 <sniprintf+0x64>)
 80089c6:	1e0c      	subs	r4, r1, #0
 80089c8:	b09d      	sub	sp, #116	; 0x74
 80089ca:	681d      	ldr	r5, [r3, #0]
 80089cc:	da08      	bge.n	80089e0 <sniprintf+0x20>
 80089ce:	238b      	movs	r3, #139	; 0x8b
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	f04f 30ff 	mov.w	r0, #4294967295
 80089d6:	b01d      	add	sp, #116	; 0x74
 80089d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089dc:	b002      	add	sp, #8
 80089de:	4770      	bx	lr
 80089e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80089e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80089e8:	bf14      	ite	ne
 80089ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80089ee:	4623      	moveq	r3, r4
 80089f0:	9304      	str	r3, [sp, #16]
 80089f2:	9307      	str	r3, [sp, #28]
 80089f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089f8:	9002      	str	r0, [sp, #8]
 80089fa:	9006      	str	r0, [sp, #24]
 80089fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008a00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008a02:	ab21      	add	r3, sp, #132	; 0x84
 8008a04:	a902      	add	r1, sp, #8
 8008a06:	4628      	mov	r0, r5
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	f001 fcfb 	bl	800a404 <_svfiprintf_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	bfbc      	itt	lt
 8008a12:	238b      	movlt	r3, #139	; 0x8b
 8008a14:	602b      	strlt	r3, [r5, #0]
 8008a16:	2c00      	cmp	r4, #0
 8008a18:	d0dd      	beq.n	80089d6 <sniprintf+0x16>
 8008a1a:	9b02      	ldr	r3, [sp, #8]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	e7d9      	b.n	80089d6 <sniprintf+0x16>
 8008a22:	bf00      	nop
 8008a24:	20000030 	.word	0x20000030

08008a28 <__swbuf_r>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	460e      	mov	r6, r1
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	4605      	mov	r5, r0
 8008a30:	b118      	cbz	r0, 8008a3a <__swbuf_r+0x12>
 8008a32:	6983      	ldr	r3, [r0, #24]
 8008a34:	b90b      	cbnz	r3, 8008a3a <__swbuf_r+0x12>
 8008a36:	f000 ffeb 	bl	8009a10 <__sinit>
 8008a3a:	4b21      	ldr	r3, [pc, #132]	; (8008ac0 <__swbuf_r+0x98>)
 8008a3c:	429c      	cmp	r4, r3
 8008a3e:	d12a      	bne.n	8008a96 <__swbuf_r+0x6e>
 8008a40:	686c      	ldr	r4, [r5, #4]
 8008a42:	69a3      	ldr	r3, [r4, #24]
 8008a44:	60a3      	str	r3, [r4, #8]
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	071a      	lsls	r2, r3, #28
 8008a4a:	d52e      	bpl.n	8008aaa <__swbuf_r+0x82>
 8008a4c:	6923      	ldr	r3, [r4, #16]
 8008a4e:	b363      	cbz	r3, 8008aaa <__swbuf_r+0x82>
 8008a50:	6923      	ldr	r3, [r4, #16]
 8008a52:	6820      	ldr	r0, [r4, #0]
 8008a54:	1ac0      	subs	r0, r0, r3
 8008a56:	6963      	ldr	r3, [r4, #20]
 8008a58:	b2f6      	uxtb	r6, r6
 8008a5a:	4283      	cmp	r3, r0
 8008a5c:	4637      	mov	r7, r6
 8008a5e:	dc04      	bgt.n	8008a6a <__swbuf_r+0x42>
 8008a60:	4621      	mov	r1, r4
 8008a62:	4628      	mov	r0, r5
 8008a64:	f000 ff6a 	bl	800993c <_fflush_r>
 8008a68:	bb28      	cbnz	r0, 8008ab6 <__swbuf_r+0x8e>
 8008a6a:	68a3      	ldr	r3, [r4, #8]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	60a3      	str	r3, [r4, #8]
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	6022      	str	r2, [r4, #0]
 8008a76:	701e      	strb	r6, [r3, #0]
 8008a78:	6963      	ldr	r3, [r4, #20]
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	4283      	cmp	r3, r0
 8008a7e:	d004      	beq.n	8008a8a <__swbuf_r+0x62>
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	07db      	lsls	r3, r3, #31
 8008a84:	d519      	bpl.n	8008aba <__swbuf_r+0x92>
 8008a86:	2e0a      	cmp	r6, #10
 8008a88:	d117      	bne.n	8008aba <__swbuf_r+0x92>
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f000 ff55 	bl	800993c <_fflush_r>
 8008a92:	b190      	cbz	r0, 8008aba <__swbuf_r+0x92>
 8008a94:	e00f      	b.n	8008ab6 <__swbuf_r+0x8e>
 8008a96:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <__swbuf_r+0x9c>)
 8008a98:	429c      	cmp	r4, r3
 8008a9a:	d101      	bne.n	8008aa0 <__swbuf_r+0x78>
 8008a9c:	68ac      	ldr	r4, [r5, #8]
 8008a9e:	e7d0      	b.n	8008a42 <__swbuf_r+0x1a>
 8008aa0:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <__swbuf_r+0xa0>)
 8008aa2:	429c      	cmp	r4, r3
 8008aa4:	bf08      	it	eq
 8008aa6:	68ec      	ldreq	r4, [r5, #12]
 8008aa8:	e7cb      	b.n	8008a42 <__swbuf_r+0x1a>
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4628      	mov	r0, r5
 8008aae:	f000 f80d 	bl	8008acc <__swsetup_r>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d0cc      	beq.n	8008a50 <__swbuf_r+0x28>
 8008ab6:	f04f 37ff 	mov.w	r7, #4294967295
 8008aba:	4638      	mov	r0, r7
 8008abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	0800cbac 	.word	0x0800cbac
 8008ac4:	0800cbcc 	.word	0x0800cbcc
 8008ac8:	0800cb8c 	.word	0x0800cb8c

08008acc <__swsetup_r>:
 8008acc:	4b32      	ldr	r3, [pc, #200]	; (8008b98 <__swsetup_r+0xcc>)
 8008ace:	b570      	push	{r4, r5, r6, lr}
 8008ad0:	681d      	ldr	r5, [r3, #0]
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	b125      	cbz	r5, 8008ae2 <__swsetup_r+0x16>
 8008ad8:	69ab      	ldr	r3, [r5, #24]
 8008ada:	b913      	cbnz	r3, 8008ae2 <__swsetup_r+0x16>
 8008adc:	4628      	mov	r0, r5
 8008ade:	f000 ff97 	bl	8009a10 <__sinit>
 8008ae2:	4b2e      	ldr	r3, [pc, #184]	; (8008b9c <__swsetup_r+0xd0>)
 8008ae4:	429c      	cmp	r4, r3
 8008ae6:	d10f      	bne.n	8008b08 <__swsetup_r+0x3c>
 8008ae8:	686c      	ldr	r4, [r5, #4]
 8008aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	0715      	lsls	r5, r2, #28
 8008af2:	d42c      	bmi.n	8008b4e <__swsetup_r+0x82>
 8008af4:	06d0      	lsls	r0, r2, #27
 8008af6:	d411      	bmi.n	8008b1c <__swsetup_r+0x50>
 8008af8:	2209      	movs	r2, #9
 8008afa:	6032      	str	r2, [r6, #0]
 8008afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b00:	81a3      	strh	r3, [r4, #12]
 8008b02:	f04f 30ff 	mov.w	r0, #4294967295
 8008b06:	e03e      	b.n	8008b86 <__swsetup_r+0xba>
 8008b08:	4b25      	ldr	r3, [pc, #148]	; (8008ba0 <__swsetup_r+0xd4>)
 8008b0a:	429c      	cmp	r4, r3
 8008b0c:	d101      	bne.n	8008b12 <__swsetup_r+0x46>
 8008b0e:	68ac      	ldr	r4, [r5, #8]
 8008b10:	e7eb      	b.n	8008aea <__swsetup_r+0x1e>
 8008b12:	4b24      	ldr	r3, [pc, #144]	; (8008ba4 <__swsetup_r+0xd8>)
 8008b14:	429c      	cmp	r4, r3
 8008b16:	bf08      	it	eq
 8008b18:	68ec      	ldreq	r4, [r5, #12]
 8008b1a:	e7e6      	b.n	8008aea <__swsetup_r+0x1e>
 8008b1c:	0751      	lsls	r1, r2, #29
 8008b1e:	d512      	bpl.n	8008b46 <__swsetup_r+0x7a>
 8008b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b22:	b141      	cbz	r1, 8008b36 <__swsetup_r+0x6a>
 8008b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b28:	4299      	cmp	r1, r3
 8008b2a:	d002      	beq.n	8008b32 <__swsetup_r+0x66>
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f001 fb67 	bl	800a200 <_free_r>
 8008b32:	2300      	movs	r3, #0
 8008b34:	6363      	str	r3, [r4, #52]	; 0x34
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b3c:	81a3      	strh	r3, [r4, #12]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	6063      	str	r3, [r4, #4]
 8008b42:	6923      	ldr	r3, [r4, #16]
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	f043 0308 	orr.w	r3, r3, #8
 8008b4c:	81a3      	strh	r3, [r4, #12]
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	b94b      	cbnz	r3, 8008b66 <__swsetup_r+0x9a>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b5c:	d003      	beq.n	8008b66 <__swsetup_r+0x9a>
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4630      	mov	r0, r6
 8008b62:	f001 f811 	bl	8009b88 <__smakebuf_r>
 8008b66:	89a2      	ldrh	r2, [r4, #12]
 8008b68:	f012 0301 	ands.w	r3, r2, #1
 8008b6c:	d00c      	beq.n	8008b88 <__swsetup_r+0xbc>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60a3      	str	r3, [r4, #8]
 8008b72:	6963      	ldr	r3, [r4, #20]
 8008b74:	425b      	negs	r3, r3
 8008b76:	61a3      	str	r3, [r4, #24]
 8008b78:	6923      	ldr	r3, [r4, #16]
 8008b7a:	b953      	cbnz	r3, 8008b92 <__swsetup_r+0xc6>
 8008b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b80:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008b84:	d1ba      	bne.n	8008afc <__swsetup_r+0x30>
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	0792      	lsls	r2, r2, #30
 8008b8a:	bf58      	it	pl
 8008b8c:	6963      	ldrpl	r3, [r4, #20]
 8008b8e:	60a3      	str	r3, [r4, #8]
 8008b90:	e7f2      	b.n	8008b78 <__swsetup_r+0xac>
 8008b92:	2000      	movs	r0, #0
 8008b94:	e7f7      	b.n	8008b86 <__swsetup_r+0xba>
 8008b96:	bf00      	nop
 8008b98:	20000030 	.word	0x20000030
 8008b9c:	0800cbac 	.word	0x0800cbac
 8008ba0:	0800cbcc 	.word	0x0800cbcc
 8008ba4:	0800cb8c 	.word	0x0800cb8c

08008ba8 <quorem>:
 8008ba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	6903      	ldr	r3, [r0, #16]
 8008bae:	690c      	ldr	r4, [r1, #16]
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	4680      	mov	r8, r0
 8008bb4:	f2c0 8082 	blt.w	8008cbc <quorem+0x114>
 8008bb8:	3c01      	subs	r4, #1
 8008bba:	f101 0714 	add.w	r7, r1, #20
 8008bbe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008bc2:	f100 0614 	add.w	r6, r0, #20
 8008bc6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008bca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008bce:	eb06 030c 	add.w	r3, r6, ip
 8008bd2:	3501      	adds	r5, #1
 8008bd4:	eb07 090c 	add.w	r9, r7, ip
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	fbb0 f5f5 	udiv	r5, r0, r5
 8008bde:	b395      	cbz	r5, 8008c46 <quorem+0x9e>
 8008be0:	f04f 0a00 	mov.w	sl, #0
 8008be4:	4638      	mov	r0, r7
 8008be6:	46b6      	mov	lr, r6
 8008be8:	46d3      	mov	fp, sl
 8008bea:	f850 2b04 	ldr.w	r2, [r0], #4
 8008bee:	b293      	uxth	r3, r2
 8008bf0:	fb05 a303 	mla	r3, r5, r3, sl
 8008bf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	ebab 0303 	sub.w	r3, fp, r3
 8008bfe:	0c12      	lsrs	r2, r2, #16
 8008c00:	f8de b000 	ldr.w	fp, [lr]
 8008c04:	fb05 a202 	mla	r2, r5, r2, sl
 8008c08:	fa13 f38b 	uxtah	r3, r3, fp
 8008c0c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008c10:	fa1f fb82 	uxth.w	fp, r2
 8008c14:	f8de 2000 	ldr.w	r2, [lr]
 8008c18:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008c1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c26:	4581      	cmp	r9, r0
 8008c28:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008c2c:	f84e 3b04 	str.w	r3, [lr], #4
 8008c30:	d2db      	bcs.n	8008bea <quorem+0x42>
 8008c32:	f856 300c 	ldr.w	r3, [r6, ip]
 8008c36:	b933      	cbnz	r3, 8008c46 <quorem+0x9e>
 8008c38:	9b01      	ldr	r3, [sp, #4]
 8008c3a:	3b04      	subs	r3, #4
 8008c3c:	429e      	cmp	r6, r3
 8008c3e:	461a      	mov	r2, r3
 8008c40:	d330      	bcc.n	8008ca4 <quorem+0xfc>
 8008c42:	f8c8 4010 	str.w	r4, [r8, #16]
 8008c46:	4640      	mov	r0, r8
 8008c48:	f001 fa06 	bl	800a058 <__mcmp>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	db25      	blt.n	8008c9c <quorem+0xf4>
 8008c50:	3501      	adds	r5, #1
 8008c52:	4630      	mov	r0, r6
 8008c54:	f04f 0c00 	mov.w	ip, #0
 8008c58:	f857 2b04 	ldr.w	r2, [r7], #4
 8008c5c:	f8d0 e000 	ldr.w	lr, [r0]
 8008c60:	b293      	uxth	r3, r2
 8008c62:	ebac 0303 	sub.w	r3, ip, r3
 8008c66:	0c12      	lsrs	r2, r2, #16
 8008c68:	fa13 f38e 	uxtah	r3, r3, lr
 8008c6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c7a:	45b9      	cmp	r9, r7
 8008c7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c80:	f840 3b04 	str.w	r3, [r0], #4
 8008c84:	d2e8      	bcs.n	8008c58 <quorem+0xb0>
 8008c86:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008c8a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008c8e:	b92a      	cbnz	r2, 8008c9c <quorem+0xf4>
 8008c90:	3b04      	subs	r3, #4
 8008c92:	429e      	cmp	r6, r3
 8008c94:	461a      	mov	r2, r3
 8008c96:	d30b      	bcc.n	8008cb0 <quorem+0x108>
 8008c98:	f8c8 4010 	str.w	r4, [r8, #16]
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	b003      	add	sp, #12
 8008ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca4:	6812      	ldr	r2, [r2, #0]
 8008ca6:	3b04      	subs	r3, #4
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	d1ca      	bne.n	8008c42 <quorem+0x9a>
 8008cac:	3c01      	subs	r4, #1
 8008cae:	e7c5      	b.n	8008c3c <quorem+0x94>
 8008cb0:	6812      	ldr	r2, [r2, #0]
 8008cb2:	3b04      	subs	r3, #4
 8008cb4:	2a00      	cmp	r2, #0
 8008cb6:	d1ef      	bne.n	8008c98 <quorem+0xf0>
 8008cb8:	3c01      	subs	r4, #1
 8008cba:	e7ea      	b.n	8008c92 <quorem+0xea>
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	e7ee      	b.n	8008c9e <quorem+0xf6>

08008cc0 <_dtoa_r>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	ec57 6b10 	vmov	r6, r7, d0
 8008cc8:	b097      	sub	sp, #92	; 0x5c
 8008cca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ccc:	9106      	str	r1, [sp, #24]
 8008cce:	4604      	mov	r4, r0
 8008cd0:	920b      	str	r2, [sp, #44]	; 0x2c
 8008cd2:	9312      	str	r3, [sp, #72]	; 0x48
 8008cd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008cd8:	e9cd 6700 	strd	r6, r7, [sp]
 8008cdc:	b93d      	cbnz	r5, 8008cee <_dtoa_r+0x2e>
 8008cde:	2010      	movs	r0, #16
 8008ce0:	f000 ff92 	bl	8009c08 <malloc>
 8008ce4:	6260      	str	r0, [r4, #36]	; 0x24
 8008ce6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008cea:	6005      	str	r5, [r0, #0]
 8008cec:	60c5      	str	r5, [r0, #12]
 8008cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cf0:	6819      	ldr	r1, [r3, #0]
 8008cf2:	b151      	cbz	r1, 8008d0a <_dtoa_r+0x4a>
 8008cf4:	685a      	ldr	r2, [r3, #4]
 8008cf6:	604a      	str	r2, [r1, #4]
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	4093      	lsls	r3, r2
 8008cfc:	608b      	str	r3, [r1, #8]
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f000 ffc9 	bl	8009c96 <_Bfree>
 8008d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d06:	2200      	movs	r2, #0
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	1e3b      	subs	r3, r7, #0
 8008d0c:	bfbb      	ittet	lt
 8008d0e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d12:	9301      	strlt	r3, [sp, #4]
 8008d14:	2300      	movge	r3, #0
 8008d16:	2201      	movlt	r2, #1
 8008d18:	bfac      	ite	ge
 8008d1a:	f8c8 3000 	strge.w	r3, [r8]
 8008d1e:	f8c8 2000 	strlt.w	r2, [r8]
 8008d22:	4baf      	ldr	r3, [pc, #700]	; (8008fe0 <_dtoa_r+0x320>)
 8008d24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d28:	ea33 0308 	bics.w	r3, r3, r8
 8008d2c:	d114      	bne.n	8008d58 <_dtoa_r+0x98>
 8008d2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d30:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d34:	6013      	str	r3, [r2, #0]
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	b923      	cbnz	r3, 8008d44 <_dtoa_r+0x84>
 8008d3a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	f000 8542 	beq.w	80097c8 <_dtoa_r+0xb08>
 8008d44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d46:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008ff4 <_dtoa_r+0x334>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 8544 	beq.w	80097d8 <_dtoa_r+0xb18>
 8008d50:	f10b 0303 	add.w	r3, fp, #3
 8008d54:	f000 bd3e 	b.w	80097d4 <_dtoa_r+0xb14>
 8008d58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2300      	movs	r3, #0
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	f7f7 feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d68:	4681      	mov	r9, r0
 8008d6a:	b168      	cbz	r0, 8008d88 <_dtoa_r+0xc8>
 8008d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d6e:	2301      	movs	r3, #1
 8008d70:	6013      	str	r3, [r2, #0]
 8008d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 8524 	beq.w	80097c2 <_dtoa_r+0xb02>
 8008d7a:	4b9a      	ldr	r3, [pc, #616]	; (8008fe4 <_dtoa_r+0x324>)
 8008d7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d7e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	f000 bd28 	b.w	80097d8 <_dtoa_r+0xb18>
 8008d88:	aa14      	add	r2, sp, #80	; 0x50
 8008d8a:	a915      	add	r1, sp, #84	; 0x54
 8008d8c:	ec47 6b10 	vmov	d0, r6, r7
 8008d90:	4620      	mov	r0, r4
 8008d92:	f001 f9d8 	bl	800a146 <__d2b>
 8008d96:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008d9a:	9004      	str	r0, [sp, #16]
 8008d9c:	2d00      	cmp	r5, #0
 8008d9e:	d07c      	beq.n	8008e9a <_dtoa_r+0x1da>
 8008da0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008da4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008da8:	46b2      	mov	sl, r6
 8008daa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008dae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008db2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008db6:	2200      	movs	r2, #0
 8008db8:	4b8b      	ldr	r3, [pc, #556]	; (8008fe8 <_dtoa_r+0x328>)
 8008dba:	4650      	mov	r0, sl
 8008dbc:	4659      	mov	r1, fp
 8008dbe:	f7f7 fa63 	bl	8000288 <__aeabi_dsub>
 8008dc2:	a381      	add	r3, pc, #516	; (adr r3, 8008fc8 <_dtoa_r+0x308>)
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f7f7 fc16 	bl	80005f8 <__aeabi_dmul>
 8008dcc:	a380      	add	r3, pc, #512	; (adr r3, 8008fd0 <_dtoa_r+0x310>)
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	f7f7 fa5b 	bl	800028c <__adddf3>
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	4628      	mov	r0, r5
 8008dda:	460f      	mov	r7, r1
 8008ddc:	f7f7 fba2 	bl	8000524 <__aeabi_i2d>
 8008de0:	a37d      	add	r3, pc, #500	; (adr r3, 8008fd8 <_dtoa_r+0x318>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	f7f7 fc07 	bl	80005f8 <__aeabi_dmul>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4630      	mov	r0, r6
 8008df0:	4639      	mov	r1, r7
 8008df2:	f7f7 fa4b 	bl	800028c <__adddf3>
 8008df6:	4606      	mov	r6, r0
 8008df8:	460f      	mov	r7, r1
 8008dfa:	f7f7 fead 	bl	8000b58 <__aeabi_d2iz>
 8008dfe:	2200      	movs	r2, #0
 8008e00:	4682      	mov	sl, r0
 8008e02:	2300      	movs	r3, #0
 8008e04:	4630      	mov	r0, r6
 8008e06:	4639      	mov	r1, r7
 8008e08:	f7f7 fe68 	bl	8000adc <__aeabi_dcmplt>
 8008e0c:	b148      	cbz	r0, 8008e22 <_dtoa_r+0x162>
 8008e0e:	4650      	mov	r0, sl
 8008e10:	f7f7 fb88 	bl	8000524 <__aeabi_i2d>
 8008e14:	4632      	mov	r2, r6
 8008e16:	463b      	mov	r3, r7
 8008e18:	f7f7 fe56 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e1c:	b908      	cbnz	r0, 8008e22 <_dtoa_r+0x162>
 8008e1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e22:	f1ba 0f16 	cmp.w	sl, #22
 8008e26:	d859      	bhi.n	8008edc <_dtoa_r+0x21c>
 8008e28:	4970      	ldr	r1, [pc, #448]	; (8008fec <_dtoa_r+0x32c>)
 8008e2a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e36:	f7f7 fe6f 	bl	8000b18 <__aeabi_dcmpgt>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	d050      	beq.n	8008ee0 <_dtoa_r+0x220>
 8008e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e42:	2300      	movs	r3, #0
 8008e44:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e48:	1b5d      	subs	r5, r3, r5
 8008e4a:	f1b5 0801 	subs.w	r8, r5, #1
 8008e4e:	bf49      	itett	mi
 8008e50:	f1c5 0301 	rsbmi	r3, r5, #1
 8008e54:	2300      	movpl	r3, #0
 8008e56:	9305      	strmi	r3, [sp, #20]
 8008e58:	f04f 0800 	movmi.w	r8, #0
 8008e5c:	bf58      	it	pl
 8008e5e:	9305      	strpl	r3, [sp, #20]
 8008e60:	f1ba 0f00 	cmp.w	sl, #0
 8008e64:	db3e      	blt.n	8008ee4 <_dtoa_r+0x224>
 8008e66:	2300      	movs	r3, #0
 8008e68:	44d0      	add	r8, sl
 8008e6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008e6e:	9307      	str	r3, [sp, #28]
 8008e70:	9b06      	ldr	r3, [sp, #24]
 8008e72:	2b09      	cmp	r3, #9
 8008e74:	f200 8090 	bhi.w	8008f98 <_dtoa_r+0x2d8>
 8008e78:	2b05      	cmp	r3, #5
 8008e7a:	bfc4      	itt	gt
 8008e7c:	3b04      	subgt	r3, #4
 8008e7e:	9306      	strgt	r3, [sp, #24]
 8008e80:	9b06      	ldr	r3, [sp, #24]
 8008e82:	f1a3 0302 	sub.w	r3, r3, #2
 8008e86:	bfcc      	ite	gt
 8008e88:	2500      	movgt	r5, #0
 8008e8a:	2501      	movle	r5, #1
 8008e8c:	2b03      	cmp	r3, #3
 8008e8e:	f200 808f 	bhi.w	8008fb0 <_dtoa_r+0x2f0>
 8008e92:	e8df f003 	tbb	[pc, r3]
 8008e96:	7f7d      	.short	0x7f7d
 8008e98:	7131      	.short	0x7131
 8008e9a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008e9e:	441d      	add	r5, r3
 8008ea0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008ea4:	2820      	cmp	r0, #32
 8008ea6:	dd13      	ble.n	8008ed0 <_dtoa_r+0x210>
 8008ea8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008eac:	9b00      	ldr	r3, [sp, #0]
 8008eae:	fa08 f800 	lsl.w	r8, r8, r0
 8008eb2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008eb6:	fa23 f000 	lsr.w	r0, r3, r0
 8008eba:	ea48 0000 	orr.w	r0, r8, r0
 8008ebe:	f7f7 fb21 	bl	8000504 <__aeabi_ui2d>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	4682      	mov	sl, r0
 8008ec6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008eca:	3d01      	subs	r5, #1
 8008ecc:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ece:	e772      	b.n	8008db6 <_dtoa_r+0xf6>
 8008ed0:	9b00      	ldr	r3, [sp, #0]
 8008ed2:	f1c0 0020 	rsb	r0, r0, #32
 8008ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8008eda:	e7f0      	b.n	8008ebe <_dtoa_r+0x1fe>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e7b1      	b.n	8008e44 <_dtoa_r+0x184>
 8008ee0:	900f      	str	r0, [sp, #60]	; 0x3c
 8008ee2:	e7b0      	b.n	8008e46 <_dtoa_r+0x186>
 8008ee4:	9b05      	ldr	r3, [sp, #20]
 8008ee6:	eba3 030a 	sub.w	r3, r3, sl
 8008eea:	9305      	str	r3, [sp, #20]
 8008eec:	f1ca 0300 	rsb	r3, sl, #0
 8008ef0:	9307      	str	r3, [sp, #28]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ef6:	e7bb      	b.n	8008e70 <_dtoa_r+0x1b0>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	930a      	str	r3, [sp, #40]	; 0x28
 8008efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	dd59      	ble.n	8008fb6 <_dtoa_r+0x2f6>
 8008f02:	9302      	str	r3, [sp, #8]
 8008f04:	4699      	mov	r9, r3
 8008f06:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f08:	2200      	movs	r2, #0
 8008f0a:	6072      	str	r2, [r6, #4]
 8008f0c:	2204      	movs	r2, #4
 8008f0e:	f102 0014 	add.w	r0, r2, #20
 8008f12:	4298      	cmp	r0, r3
 8008f14:	6871      	ldr	r1, [r6, #4]
 8008f16:	d953      	bls.n	8008fc0 <_dtoa_r+0x300>
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f000 fe88 	bl	8009c2e <_Balloc>
 8008f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f20:	6030      	str	r0, [r6, #0]
 8008f22:	f1b9 0f0e 	cmp.w	r9, #14
 8008f26:	f8d3 b000 	ldr.w	fp, [r3]
 8008f2a:	f200 80e6 	bhi.w	80090fa <_dtoa_r+0x43a>
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	f000 80e3 	beq.w	80090fa <_dtoa_r+0x43a>
 8008f34:	ed9d 7b00 	vldr	d7, [sp]
 8008f38:	f1ba 0f00 	cmp.w	sl, #0
 8008f3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008f40:	dd74      	ble.n	800902c <_dtoa_r+0x36c>
 8008f42:	4a2a      	ldr	r2, [pc, #168]	; (8008fec <_dtoa_r+0x32c>)
 8008f44:	f00a 030f 	and.w	r3, sl, #15
 8008f48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f4c:	ed93 7b00 	vldr	d7, [r3]
 8008f50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008f54:	06f0      	lsls	r0, r6, #27
 8008f56:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008f5a:	d565      	bpl.n	8009028 <_dtoa_r+0x368>
 8008f5c:	4b24      	ldr	r3, [pc, #144]	; (8008ff0 <_dtoa_r+0x330>)
 8008f5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f66:	f7f7 fc71 	bl	800084c <__aeabi_ddiv>
 8008f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f6e:	f006 060f 	and.w	r6, r6, #15
 8008f72:	2503      	movs	r5, #3
 8008f74:	4f1e      	ldr	r7, [pc, #120]	; (8008ff0 <_dtoa_r+0x330>)
 8008f76:	e04c      	b.n	8009012 <_dtoa_r+0x352>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f7e:	4453      	add	r3, sl
 8008f80:	f103 0901 	add.w	r9, r3, #1
 8008f84:	9302      	str	r3, [sp, #8]
 8008f86:	464b      	mov	r3, r9
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	bfb8      	it	lt
 8008f8c:	2301      	movlt	r3, #1
 8008f8e:	e7ba      	b.n	8008f06 <_dtoa_r+0x246>
 8008f90:	2300      	movs	r3, #0
 8008f92:	e7b2      	b.n	8008efa <_dtoa_r+0x23a>
 8008f94:	2300      	movs	r3, #0
 8008f96:	e7f0      	b.n	8008f7a <_dtoa_r+0x2ba>
 8008f98:	2501      	movs	r5, #1
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9306      	str	r3, [sp, #24]
 8008f9e:	950a      	str	r5, [sp, #40]	; 0x28
 8008fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa4:	9302      	str	r3, [sp, #8]
 8008fa6:	4699      	mov	r9, r3
 8008fa8:	2200      	movs	r2, #0
 8008faa:	2312      	movs	r3, #18
 8008fac:	920b      	str	r2, [sp, #44]	; 0x2c
 8008fae:	e7aa      	b.n	8008f06 <_dtoa_r+0x246>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8008fb4:	e7f4      	b.n	8008fa0 <_dtoa_r+0x2e0>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	9302      	str	r3, [sp, #8]
 8008fba:	4699      	mov	r9, r3
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	e7f5      	b.n	8008fac <_dtoa_r+0x2ec>
 8008fc0:	3101      	adds	r1, #1
 8008fc2:	6071      	str	r1, [r6, #4]
 8008fc4:	0052      	lsls	r2, r2, #1
 8008fc6:	e7a2      	b.n	8008f0e <_dtoa_r+0x24e>
 8008fc8:	636f4361 	.word	0x636f4361
 8008fcc:	3fd287a7 	.word	0x3fd287a7
 8008fd0:	8b60c8b3 	.word	0x8b60c8b3
 8008fd4:	3fc68a28 	.word	0x3fc68a28
 8008fd8:	509f79fb 	.word	0x509f79fb
 8008fdc:	3fd34413 	.word	0x3fd34413
 8008fe0:	7ff00000 	.word	0x7ff00000
 8008fe4:	0800cb59 	.word	0x0800cb59
 8008fe8:	3ff80000 	.word	0x3ff80000
 8008fec:	0800cc18 	.word	0x0800cc18
 8008ff0:	0800cbf0 	.word	0x0800cbf0
 8008ff4:	0800cb85 	.word	0x0800cb85
 8008ff8:	07f1      	lsls	r1, r6, #31
 8008ffa:	d508      	bpl.n	800900e <_dtoa_r+0x34e>
 8008ffc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009004:	f7f7 faf8 	bl	80005f8 <__aeabi_dmul>
 8009008:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800900c:	3501      	adds	r5, #1
 800900e:	1076      	asrs	r6, r6, #1
 8009010:	3708      	adds	r7, #8
 8009012:	2e00      	cmp	r6, #0
 8009014:	d1f0      	bne.n	8008ff8 <_dtoa_r+0x338>
 8009016:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800901a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800901e:	f7f7 fc15 	bl	800084c <__aeabi_ddiv>
 8009022:	e9cd 0100 	strd	r0, r1, [sp]
 8009026:	e01a      	b.n	800905e <_dtoa_r+0x39e>
 8009028:	2502      	movs	r5, #2
 800902a:	e7a3      	b.n	8008f74 <_dtoa_r+0x2b4>
 800902c:	f000 80a0 	beq.w	8009170 <_dtoa_r+0x4b0>
 8009030:	f1ca 0600 	rsb	r6, sl, #0
 8009034:	4b9f      	ldr	r3, [pc, #636]	; (80092b4 <_dtoa_r+0x5f4>)
 8009036:	4fa0      	ldr	r7, [pc, #640]	; (80092b8 <_dtoa_r+0x5f8>)
 8009038:	f006 020f 	and.w	r2, r6, #15
 800903c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009044:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009048:	f7f7 fad6 	bl	80005f8 <__aeabi_dmul>
 800904c:	e9cd 0100 	strd	r0, r1, [sp]
 8009050:	1136      	asrs	r6, r6, #4
 8009052:	2300      	movs	r3, #0
 8009054:	2502      	movs	r5, #2
 8009056:	2e00      	cmp	r6, #0
 8009058:	d17f      	bne.n	800915a <_dtoa_r+0x49a>
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e1      	bne.n	8009022 <_dtoa_r+0x362>
 800905e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 8087 	beq.w	8009174 <_dtoa_r+0x4b4>
 8009066:	e9dd 6700 	ldrd	r6, r7, [sp]
 800906a:	2200      	movs	r2, #0
 800906c:	4b93      	ldr	r3, [pc, #588]	; (80092bc <_dtoa_r+0x5fc>)
 800906e:	4630      	mov	r0, r6
 8009070:	4639      	mov	r1, r7
 8009072:	f7f7 fd33 	bl	8000adc <__aeabi_dcmplt>
 8009076:	2800      	cmp	r0, #0
 8009078:	d07c      	beq.n	8009174 <_dtoa_r+0x4b4>
 800907a:	f1b9 0f00 	cmp.w	r9, #0
 800907e:	d079      	beq.n	8009174 <_dtoa_r+0x4b4>
 8009080:	9b02      	ldr	r3, [sp, #8]
 8009082:	2b00      	cmp	r3, #0
 8009084:	dd35      	ble.n	80090f2 <_dtoa_r+0x432>
 8009086:	f10a 33ff 	add.w	r3, sl, #4294967295
 800908a:	9308      	str	r3, [sp, #32]
 800908c:	4639      	mov	r1, r7
 800908e:	2200      	movs	r2, #0
 8009090:	4b8b      	ldr	r3, [pc, #556]	; (80092c0 <_dtoa_r+0x600>)
 8009092:	4630      	mov	r0, r6
 8009094:	f7f7 fab0 	bl	80005f8 <__aeabi_dmul>
 8009098:	e9cd 0100 	strd	r0, r1, [sp]
 800909c:	9f02      	ldr	r7, [sp, #8]
 800909e:	3501      	adds	r5, #1
 80090a0:	4628      	mov	r0, r5
 80090a2:	f7f7 fa3f 	bl	8000524 <__aeabi_i2d>
 80090a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090aa:	f7f7 faa5 	bl	80005f8 <__aeabi_dmul>
 80090ae:	2200      	movs	r2, #0
 80090b0:	4b84      	ldr	r3, [pc, #528]	; (80092c4 <_dtoa_r+0x604>)
 80090b2:	f7f7 f8eb 	bl	800028c <__adddf3>
 80090b6:	4605      	mov	r5, r0
 80090b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80090bc:	2f00      	cmp	r7, #0
 80090be:	d15d      	bne.n	800917c <_dtoa_r+0x4bc>
 80090c0:	2200      	movs	r2, #0
 80090c2:	4b81      	ldr	r3, [pc, #516]	; (80092c8 <_dtoa_r+0x608>)
 80090c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090c8:	f7f7 f8de 	bl	8000288 <__aeabi_dsub>
 80090cc:	462a      	mov	r2, r5
 80090ce:	4633      	mov	r3, r6
 80090d0:	e9cd 0100 	strd	r0, r1, [sp]
 80090d4:	f7f7 fd20 	bl	8000b18 <__aeabi_dcmpgt>
 80090d8:	2800      	cmp	r0, #0
 80090da:	f040 8288 	bne.w	80095ee <_dtoa_r+0x92e>
 80090de:	462a      	mov	r2, r5
 80090e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80090e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090e8:	f7f7 fcf8 	bl	8000adc <__aeabi_dcmplt>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	f040 827c 	bne.w	80095ea <_dtoa_r+0x92a>
 80090f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090f6:	e9cd 2300 	strd	r2, r3, [sp]
 80090fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f2c0 8150 	blt.w	80093a2 <_dtoa_r+0x6e2>
 8009102:	f1ba 0f0e 	cmp.w	sl, #14
 8009106:	f300 814c 	bgt.w	80093a2 <_dtoa_r+0x6e2>
 800910a:	4b6a      	ldr	r3, [pc, #424]	; (80092b4 <_dtoa_r+0x5f4>)
 800910c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009110:	ed93 7b00 	vldr	d7, [r3]
 8009114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009116:	2b00      	cmp	r3, #0
 8009118:	ed8d 7b02 	vstr	d7, [sp, #8]
 800911c:	f280 80d8 	bge.w	80092d0 <_dtoa_r+0x610>
 8009120:	f1b9 0f00 	cmp.w	r9, #0
 8009124:	f300 80d4 	bgt.w	80092d0 <_dtoa_r+0x610>
 8009128:	f040 825e 	bne.w	80095e8 <_dtoa_r+0x928>
 800912c:	2200      	movs	r2, #0
 800912e:	4b66      	ldr	r3, [pc, #408]	; (80092c8 <_dtoa_r+0x608>)
 8009130:	ec51 0b17 	vmov	r0, r1, d7
 8009134:	f7f7 fa60 	bl	80005f8 <__aeabi_dmul>
 8009138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800913c:	f7f7 fce2 	bl	8000b04 <__aeabi_dcmpge>
 8009140:	464f      	mov	r7, r9
 8009142:	464e      	mov	r6, r9
 8009144:	2800      	cmp	r0, #0
 8009146:	f040 8234 	bne.w	80095b2 <_dtoa_r+0x8f2>
 800914a:	2331      	movs	r3, #49	; 0x31
 800914c:	f10b 0501 	add.w	r5, fp, #1
 8009150:	f88b 3000 	strb.w	r3, [fp]
 8009154:	f10a 0a01 	add.w	sl, sl, #1
 8009158:	e22f      	b.n	80095ba <_dtoa_r+0x8fa>
 800915a:	07f2      	lsls	r2, r6, #31
 800915c:	d505      	bpl.n	800916a <_dtoa_r+0x4aa>
 800915e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009162:	f7f7 fa49 	bl	80005f8 <__aeabi_dmul>
 8009166:	3501      	adds	r5, #1
 8009168:	2301      	movs	r3, #1
 800916a:	1076      	asrs	r6, r6, #1
 800916c:	3708      	adds	r7, #8
 800916e:	e772      	b.n	8009056 <_dtoa_r+0x396>
 8009170:	2502      	movs	r5, #2
 8009172:	e774      	b.n	800905e <_dtoa_r+0x39e>
 8009174:	f8cd a020 	str.w	sl, [sp, #32]
 8009178:	464f      	mov	r7, r9
 800917a:	e791      	b.n	80090a0 <_dtoa_r+0x3e0>
 800917c:	4b4d      	ldr	r3, [pc, #308]	; (80092b4 <_dtoa_r+0x5f4>)
 800917e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009182:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009188:	2b00      	cmp	r3, #0
 800918a:	d047      	beq.n	800921c <_dtoa_r+0x55c>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	2000      	movs	r0, #0
 8009192:	494e      	ldr	r1, [pc, #312]	; (80092cc <_dtoa_r+0x60c>)
 8009194:	f7f7 fb5a 	bl	800084c <__aeabi_ddiv>
 8009198:	462a      	mov	r2, r5
 800919a:	4633      	mov	r3, r6
 800919c:	f7f7 f874 	bl	8000288 <__aeabi_dsub>
 80091a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80091a4:	465d      	mov	r5, fp
 80091a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091aa:	f7f7 fcd5 	bl	8000b58 <__aeabi_d2iz>
 80091ae:	4606      	mov	r6, r0
 80091b0:	f7f7 f9b8 	bl	8000524 <__aeabi_i2d>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091bc:	f7f7 f864 	bl	8000288 <__aeabi_dsub>
 80091c0:	3630      	adds	r6, #48	; 0x30
 80091c2:	f805 6b01 	strb.w	r6, [r5], #1
 80091c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80091ca:	e9cd 0100 	strd	r0, r1, [sp]
 80091ce:	f7f7 fc85 	bl	8000adc <__aeabi_dcmplt>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d163      	bne.n	800929e <_dtoa_r+0x5de>
 80091d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091da:	2000      	movs	r0, #0
 80091dc:	4937      	ldr	r1, [pc, #220]	; (80092bc <_dtoa_r+0x5fc>)
 80091de:	f7f7 f853 	bl	8000288 <__aeabi_dsub>
 80091e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80091e6:	f7f7 fc79 	bl	8000adc <__aeabi_dcmplt>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	f040 80b7 	bne.w	800935e <_dtoa_r+0x69e>
 80091f0:	eba5 030b 	sub.w	r3, r5, fp
 80091f4:	429f      	cmp	r7, r3
 80091f6:	f77f af7c 	ble.w	80090f2 <_dtoa_r+0x432>
 80091fa:	2200      	movs	r2, #0
 80091fc:	4b30      	ldr	r3, [pc, #192]	; (80092c0 <_dtoa_r+0x600>)
 80091fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009202:	f7f7 f9f9 	bl	80005f8 <__aeabi_dmul>
 8009206:	2200      	movs	r2, #0
 8009208:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800920c:	4b2c      	ldr	r3, [pc, #176]	; (80092c0 <_dtoa_r+0x600>)
 800920e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009212:	f7f7 f9f1 	bl	80005f8 <__aeabi_dmul>
 8009216:	e9cd 0100 	strd	r0, r1, [sp]
 800921a:	e7c4      	b.n	80091a6 <_dtoa_r+0x4e6>
 800921c:	462a      	mov	r2, r5
 800921e:	4633      	mov	r3, r6
 8009220:	f7f7 f9ea 	bl	80005f8 <__aeabi_dmul>
 8009224:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009228:	eb0b 0507 	add.w	r5, fp, r7
 800922c:	465e      	mov	r6, fp
 800922e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009232:	f7f7 fc91 	bl	8000b58 <__aeabi_d2iz>
 8009236:	4607      	mov	r7, r0
 8009238:	f7f7 f974 	bl	8000524 <__aeabi_i2d>
 800923c:	3730      	adds	r7, #48	; 0x30
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009246:	f7f7 f81f 	bl	8000288 <__aeabi_dsub>
 800924a:	f806 7b01 	strb.w	r7, [r6], #1
 800924e:	42ae      	cmp	r6, r5
 8009250:	e9cd 0100 	strd	r0, r1, [sp]
 8009254:	f04f 0200 	mov.w	r2, #0
 8009258:	d126      	bne.n	80092a8 <_dtoa_r+0x5e8>
 800925a:	4b1c      	ldr	r3, [pc, #112]	; (80092cc <_dtoa_r+0x60c>)
 800925c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009260:	f7f7 f814 	bl	800028c <__adddf3>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800926c:	f7f7 fc54 	bl	8000b18 <__aeabi_dcmpgt>
 8009270:	2800      	cmp	r0, #0
 8009272:	d174      	bne.n	800935e <_dtoa_r+0x69e>
 8009274:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009278:	2000      	movs	r0, #0
 800927a:	4914      	ldr	r1, [pc, #80]	; (80092cc <_dtoa_r+0x60c>)
 800927c:	f7f7 f804 	bl	8000288 <__aeabi_dsub>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009288:	f7f7 fc28 	bl	8000adc <__aeabi_dcmplt>
 800928c:	2800      	cmp	r0, #0
 800928e:	f43f af30 	beq.w	80090f2 <_dtoa_r+0x432>
 8009292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009296:	2b30      	cmp	r3, #48	; 0x30
 8009298:	f105 32ff 	add.w	r2, r5, #4294967295
 800929c:	d002      	beq.n	80092a4 <_dtoa_r+0x5e4>
 800929e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80092a2:	e04a      	b.n	800933a <_dtoa_r+0x67a>
 80092a4:	4615      	mov	r5, r2
 80092a6:	e7f4      	b.n	8009292 <_dtoa_r+0x5d2>
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <_dtoa_r+0x600>)
 80092aa:	f7f7 f9a5 	bl	80005f8 <__aeabi_dmul>
 80092ae:	e9cd 0100 	strd	r0, r1, [sp]
 80092b2:	e7bc      	b.n	800922e <_dtoa_r+0x56e>
 80092b4:	0800cc18 	.word	0x0800cc18
 80092b8:	0800cbf0 	.word	0x0800cbf0
 80092bc:	3ff00000 	.word	0x3ff00000
 80092c0:	40240000 	.word	0x40240000
 80092c4:	401c0000 	.word	0x401c0000
 80092c8:	40140000 	.word	0x40140000
 80092cc:	3fe00000 	.word	0x3fe00000
 80092d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80092d4:	465d      	mov	r5, fp
 80092d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092da:	4630      	mov	r0, r6
 80092dc:	4639      	mov	r1, r7
 80092de:	f7f7 fab5 	bl	800084c <__aeabi_ddiv>
 80092e2:	f7f7 fc39 	bl	8000b58 <__aeabi_d2iz>
 80092e6:	4680      	mov	r8, r0
 80092e8:	f7f7 f91c 	bl	8000524 <__aeabi_i2d>
 80092ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092f0:	f7f7 f982 	bl	80005f8 <__aeabi_dmul>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4630      	mov	r0, r6
 80092fa:	4639      	mov	r1, r7
 80092fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009300:	f7f6 ffc2 	bl	8000288 <__aeabi_dsub>
 8009304:	f805 6b01 	strb.w	r6, [r5], #1
 8009308:	eba5 060b 	sub.w	r6, r5, fp
 800930c:	45b1      	cmp	r9, r6
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	d139      	bne.n	8009388 <_dtoa_r+0x6c8>
 8009314:	f7f6 ffba 	bl	800028c <__adddf3>
 8009318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800931c:	4606      	mov	r6, r0
 800931e:	460f      	mov	r7, r1
 8009320:	f7f7 fbfa 	bl	8000b18 <__aeabi_dcmpgt>
 8009324:	b9c8      	cbnz	r0, 800935a <_dtoa_r+0x69a>
 8009326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800932a:	4630      	mov	r0, r6
 800932c:	4639      	mov	r1, r7
 800932e:	f7f7 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009332:	b110      	cbz	r0, 800933a <_dtoa_r+0x67a>
 8009334:	f018 0f01 	tst.w	r8, #1
 8009338:	d10f      	bne.n	800935a <_dtoa_r+0x69a>
 800933a:	9904      	ldr	r1, [sp, #16]
 800933c:	4620      	mov	r0, r4
 800933e:	f000 fcaa 	bl	8009c96 <_Bfree>
 8009342:	2300      	movs	r3, #0
 8009344:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009346:	702b      	strb	r3, [r5, #0]
 8009348:	f10a 0301 	add.w	r3, sl, #1
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 8241 	beq.w	80097d8 <_dtoa_r+0xb18>
 8009356:	601d      	str	r5, [r3, #0]
 8009358:	e23e      	b.n	80097d8 <_dtoa_r+0xb18>
 800935a:	f8cd a020 	str.w	sl, [sp, #32]
 800935e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009362:	2a39      	cmp	r2, #57	; 0x39
 8009364:	f105 33ff 	add.w	r3, r5, #4294967295
 8009368:	d108      	bne.n	800937c <_dtoa_r+0x6bc>
 800936a:	459b      	cmp	fp, r3
 800936c:	d10a      	bne.n	8009384 <_dtoa_r+0x6c4>
 800936e:	9b08      	ldr	r3, [sp, #32]
 8009370:	3301      	adds	r3, #1
 8009372:	9308      	str	r3, [sp, #32]
 8009374:	2330      	movs	r3, #48	; 0x30
 8009376:	f88b 3000 	strb.w	r3, [fp]
 800937a:	465b      	mov	r3, fp
 800937c:	781a      	ldrb	r2, [r3, #0]
 800937e:	3201      	adds	r2, #1
 8009380:	701a      	strb	r2, [r3, #0]
 8009382:	e78c      	b.n	800929e <_dtoa_r+0x5de>
 8009384:	461d      	mov	r5, r3
 8009386:	e7ea      	b.n	800935e <_dtoa_r+0x69e>
 8009388:	2200      	movs	r2, #0
 800938a:	4b9b      	ldr	r3, [pc, #620]	; (80095f8 <_dtoa_r+0x938>)
 800938c:	f7f7 f934 	bl	80005f8 <__aeabi_dmul>
 8009390:	2200      	movs	r2, #0
 8009392:	2300      	movs	r3, #0
 8009394:	4606      	mov	r6, r0
 8009396:	460f      	mov	r7, r1
 8009398:	f7f7 fb96 	bl	8000ac8 <__aeabi_dcmpeq>
 800939c:	2800      	cmp	r0, #0
 800939e:	d09a      	beq.n	80092d6 <_dtoa_r+0x616>
 80093a0:	e7cb      	b.n	800933a <_dtoa_r+0x67a>
 80093a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093a4:	2a00      	cmp	r2, #0
 80093a6:	f000 808b 	beq.w	80094c0 <_dtoa_r+0x800>
 80093aa:	9a06      	ldr	r2, [sp, #24]
 80093ac:	2a01      	cmp	r2, #1
 80093ae:	dc6e      	bgt.n	800948e <_dtoa_r+0x7ce>
 80093b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80093b2:	2a00      	cmp	r2, #0
 80093b4:	d067      	beq.n	8009486 <_dtoa_r+0x7c6>
 80093b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093ba:	9f07      	ldr	r7, [sp, #28]
 80093bc:	9d05      	ldr	r5, [sp, #20]
 80093be:	9a05      	ldr	r2, [sp, #20]
 80093c0:	2101      	movs	r1, #1
 80093c2:	441a      	add	r2, r3
 80093c4:	4620      	mov	r0, r4
 80093c6:	9205      	str	r2, [sp, #20]
 80093c8:	4498      	add	r8, r3
 80093ca:	f000 fd04 	bl	8009dd6 <__i2b>
 80093ce:	4606      	mov	r6, r0
 80093d0:	2d00      	cmp	r5, #0
 80093d2:	dd0c      	ble.n	80093ee <_dtoa_r+0x72e>
 80093d4:	f1b8 0f00 	cmp.w	r8, #0
 80093d8:	dd09      	ble.n	80093ee <_dtoa_r+0x72e>
 80093da:	4545      	cmp	r5, r8
 80093dc:	9a05      	ldr	r2, [sp, #20]
 80093de:	462b      	mov	r3, r5
 80093e0:	bfa8      	it	ge
 80093e2:	4643      	movge	r3, r8
 80093e4:	1ad2      	subs	r2, r2, r3
 80093e6:	9205      	str	r2, [sp, #20]
 80093e8:	1aed      	subs	r5, r5, r3
 80093ea:	eba8 0803 	sub.w	r8, r8, r3
 80093ee:	9b07      	ldr	r3, [sp, #28]
 80093f0:	b1eb      	cbz	r3, 800942e <_dtoa_r+0x76e>
 80093f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d067      	beq.n	80094c8 <_dtoa_r+0x808>
 80093f8:	b18f      	cbz	r7, 800941e <_dtoa_r+0x75e>
 80093fa:	4631      	mov	r1, r6
 80093fc:	463a      	mov	r2, r7
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 fd88 	bl	8009f14 <__pow5mult>
 8009404:	9a04      	ldr	r2, [sp, #16]
 8009406:	4601      	mov	r1, r0
 8009408:	4606      	mov	r6, r0
 800940a:	4620      	mov	r0, r4
 800940c:	f000 fcec 	bl	8009de8 <__multiply>
 8009410:	9904      	ldr	r1, [sp, #16]
 8009412:	9008      	str	r0, [sp, #32]
 8009414:	4620      	mov	r0, r4
 8009416:	f000 fc3e 	bl	8009c96 <_Bfree>
 800941a:	9b08      	ldr	r3, [sp, #32]
 800941c:	9304      	str	r3, [sp, #16]
 800941e:	9b07      	ldr	r3, [sp, #28]
 8009420:	1bda      	subs	r2, r3, r7
 8009422:	d004      	beq.n	800942e <_dtoa_r+0x76e>
 8009424:	9904      	ldr	r1, [sp, #16]
 8009426:	4620      	mov	r0, r4
 8009428:	f000 fd74 	bl	8009f14 <__pow5mult>
 800942c:	9004      	str	r0, [sp, #16]
 800942e:	2101      	movs	r1, #1
 8009430:	4620      	mov	r0, r4
 8009432:	f000 fcd0 	bl	8009dd6 <__i2b>
 8009436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009438:	4607      	mov	r7, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 81d0 	beq.w	80097e0 <_dtoa_r+0xb20>
 8009440:	461a      	mov	r2, r3
 8009442:	4601      	mov	r1, r0
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fd65 	bl	8009f14 <__pow5mult>
 800944a:	9b06      	ldr	r3, [sp, #24]
 800944c:	2b01      	cmp	r3, #1
 800944e:	4607      	mov	r7, r0
 8009450:	dc40      	bgt.n	80094d4 <_dtoa_r+0x814>
 8009452:	9b00      	ldr	r3, [sp, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d139      	bne.n	80094cc <_dtoa_r+0x80c>
 8009458:	9b01      	ldr	r3, [sp, #4]
 800945a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800945e:	2b00      	cmp	r3, #0
 8009460:	d136      	bne.n	80094d0 <_dtoa_r+0x810>
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009468:	0d1b      	lsrs	r3, r3, #20
 800946a:	051b      	lsls	r3, r3, #20
 800946c:	b12b      	cbz	r3, 800947a <_dtoa_r+0x7ba>
 800946e:	9b05      	ldr	r3, [sp, #20]
 8009470:	3301      	adds	r3, #1
 8009472:	9305      	str	r3, [sp, #20]
 8009474:	f108 0801 	add.w	r8, r8, #1
 8009478:	2301      	movs	r3, #1
 800947a:	9307      	str	r3, [sp, #28]
 800947c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800947e:	2b00      	cmp	r3, #0
 8009480:	d12a      	bne.n	80094d8 <_dtoa_r+0x818>
 8009482:	2001      	movs	r0, #1
 8009484:	e030      	b.n	80094e8 <_dtoa_r+0x828>
 8009486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009488:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800948c:	e795      	b.n	80093ba <_dtoa_r+0x6fa>
 800948e:	9b07      	ldr	r3, [sp, #28]
 8009490:	f109 37ff 	add.w	r7, r9, #4294967295
 8009494:	42bb      	cmp	r3, r7
 8009496:	bfbf      	itttt	lt
 8009498:	9b07      	ldrlt	r3, [sp, #28]
 800949a:	9707      	strlt	r7, [sp, #28]
 800949c:	1afa      	sublt	r2, r7, r3
 800949e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80094a0:	bfbb      	ittet	lt
 80094a2:	189b      	addlt	r3, r3, r2
 80094a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80094a6:	1bdf      	subge	r7, r3, r7
 80094a8:	2700      	movlt	r7, #0
 80094aa:	f1b9 0f00 	cmp.w	r9, #0
 80094ae:	bfb5      	itete	lt
 80094b0:	9b05      	ldrlt	r3, [sp, #20]
 80094b2:	9d05      	ldrge	r5, [sp, #20]
 80094b4:	eba3 0509 	sublt.w	r5, r3, r9
 80094b8:	464b      	movge	r3, r9
 80094ba:	bfb8      	it	lt
 80094bc:	2300      	movlt	r3, #0
 80094be:	e77e      	b.n	80093be <_dtoa_r+0x6fe>
 80094c0:	9f07      	ldr	r7, [sp, #28]
 80094c2:	9d05      	ldr	r5, [sp, #20]
 80094c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80094c6:	e783      	b.n	80093d0 <_dtoa_r+0x710>
 80094c8:	9a07      	ldr	r2, [sp, #28]
 80094ca:	e7ab      	b.n	8009424 <_dtoa_r+0x764>
 80094cc:	2300      	movs	r3, #0
 80094ce:	e7d4      	b.n	800947a <_dtoa_r+0x7ba>
 80094d0:	9b00      	ldr	r3, [sp, #0]
 80094d2:	e7d2      	b.n	800947a <_dtoa_r+0x7ba>
 80094d4:	2300      	movs	r3, #0
 80094d6:	9307      	str	r3, [sp, #28]
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80094de:	6918      	ldr	r0, [r3, #16]
 80094e0:	f000 fc2b 	bl	8009d3a <__hi0bits>
 80094e4:	f1c0 0020 	rsb	r0, r0, #32
 80094e8:	4440      	add	r0, r8
 80094ea:	f010 001f 	ands.w	r0, r0, #31
 80094ee:	d047      	beq.n	8009580 <_dtoa_r+0x8c0>
 80094f0:	f1c0 0320 	rsb	r3, r0, #32
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	dd3b      	ble.n	8009570 <_dtoa_r+0x8b0>
 80094f8:	9b05      	ldr	r3, [sp, #20]
 80094fa:	f1c0 001c 	rsb	r0, r0, #28
 80094fe:	4403      	add	r3, r0
 8009500:	9305      	str	r3, [sp, #20]
 8009502:	4405      	add	r5, r0
 8009504:	4480      	add	r8, r0
 8009506:	9b05      	ldr	r3, [sp, #20]
 8009508:	2b00      	cmp	r3, #0
 800950a:	dd05      	ble.n	8009518 <_dtoa_r+0x858>
 800950c:	461a      	mov	r2, r3
 800950e:	9904      	ldr	r1, [sp, #16]
 8009510:	4620      	mov	r0, r4
 8009512:	f000 fd4d 	bl	8009fb0 <__lshift>
 8009516:	9004      	str	r0, [sp, #16]
 8009518:	f1b8 0f00 	cmp.w	r8, #0
 800951c:	dd05      	ble.n	800952a <_dtoa_r+0x86a>
 800951e:	4639      	mov	r1, r7
 8009520:	4642      	mov	r2, r8
 8009522:	4620      	mov	r0, r4
 8009524:	f000 fd44 	bl	8009fb0 <__lshift>
 8009528:	4607      	mov	r7, r0
 800952a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800952c:	b353      	cbz	r3, 8009584 <_dtoa_r+0x8c4>
 800952e:	4639      	mov	r1, r7
 8009530:	9804      	ldr	r0, [sp, #16]
 8009532:	f000 fd91 	bl	800a058 <__mcmp>
 8009536:	2800      	cmp	r0, #0
 8009538:	da24      	bge.n	8009584 <_dtoa_r+0x8c4>
 800953a:	2300      	movs	r3, #0
 800953c:	220a      	movs	r2, #10
 800953e:	9904      	ldr	r1, [sp, #16]
 8009540:	4620      	mov	r0, r4
 8009542:	f000 fbbf 	bl	8009cc4 <__multadd>
 8009546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009548:	9004      	str	r0, [sp, #16]
 800954a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800954e:	2b00      	cmp	r3, #0
 8009550:	f000 814d 	beq.w	80097ee <_dtoa_r+0xb2e>
 8009554:	2300      	movs	r3, #0
 8009556:	4631      	mov	r1, r6
 8009558:	220a      	movs	r2, #10
 800955a:	4620      	mov	r0, r4
 800955c:	f000 fbb2 	bl	8009cc4 <__multadd>
 8009560:	9b02      	ldr	r3, [sp, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	4606      	mov	r6, r0
 8009566:	dc4f      	bgt.n	8009608 <_dtoa_r+0x948>
 8009568:	9b06      	ldr	r3, [sp, #24]
 800956a:	2b02      	cmp	r3, #2
 800956c:	dd4c      	ble.n	8009608 <_dtoa_r+0x948>
 800956e:	e011      	b.n	8009594 <_dtoa_r+0x8d4>
 8009570:	d0c9      	beq.n	8009506 <_dtoa_r+0x846>
 8009572:	9a05      	ldr	r2, [sp, #20]
 8009574:	331c      	adds	r3, #28
 8009576:	441a      	add	r2, r3
 8009578:	9205      	str	r2, [sp, #20]
 800957a:	441d      	add	r5, r3
 800957c:	4498      	add	r8, r3
 800957e:	e7c2      	b.n	8009506 <_dtoa_r+0x846>
 8009580:	4603      	mov	r3, r0
 8009582:	e7f6      	b.n	8009572 <_dtoa_r+0x8b2>
 8009584:	f1b9 0f00 	cmp.w	r9, #0
 8009588:	dc38      	bgt.n	80095fc <_dtoa_r+0x93c>
 800958a:	9b06      	ldr	r3, [sp, #24]
 800958c:	2b02      	cmp	r3, #2
 800958e:	dd35      	ble.n	80095fc <_dtoa_r+0x93c>
 8009590:	f8cd 9008 	str.w	r9, [sp, #8]
 8009594:	9b02      	ldr	r3, [sp, #8]
 8009596:	b963      	cbnz	r3, 80095b2 <_dtoa_r+0x8f2>
 8009598:	4639      	mov	r1, r7
 800959a:	2205      	movs	r2, #5
 800959c:	4620      	mov	r0, r4
 800959e:	f000 fb91 	bl	8009cc4 <__multadd>
 80095a2:	4601      	mov	r1, r0
 80095a4:	4607      	mov	r7, r0
 80095a6:	9804      	ldr	r0, [sp, #16]
 80095a8:	f000 fd56 	bl	800a058 <__mcmp>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	f73f adcc 	bgt.w	800914a <_dtoa_r+0x48a>
 80095b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095b4:	465d      	mov	r5, fp
 80095b6:	ea6f 0a03 	mvn.w	sl, r3
 80095ba:	f04f 0900 	mov.w	r9, #0
 80095be:	4639      	mov	r1, r7
 80095c0:	4620      	mov	r0, r4
 80095c2:	f000 fb68 	bl	8009c96 <_Bfree>
 80095c6:	2e00      	cmp	r6, #0
 80095c8:	f43f aeb7 	beq.w	800933a <_dtoa_r+0x67a>
 80095cc:	f1b9 0f00 	cmp.w	r9, #0
 80095d0:	d005      	beq.n	80095de <_dtoa_r+0x91e>
 80095d2:	45b1      	cmp	r9, r6
 80095d4:	d003      	beq.n	80095de <_dtoa_r+0x91e>
 80095d6:	4649      	mov	r1, r9
 80095d8:	4620      	mov	r0, r4
 80095da:	f000 fb5c 	bl	8009c96 <_Bfree>
 80095de:	4631      	mov	r1, r6
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 fb58 	bl	8009c96 <_Bfree>
 80095e6:	e6a8      	b.n	800933a <_dtoa_r+0x67a>
 80095e8:	2700      	movs	r7, #0
 80095ea:	463e      	mov	r6, r7
 80095ec:	e7e1      	b.n	80095b2 <_dtoa_r+0x8f2>
 80095ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80095f2:	463e      	mov	r6, r7
 80095f4:	e5a9      	b.n	800914a <_dtoa_r+0x48a>
 80095f6:	bf00      	nop
 80095f8:	40240000 	.word	0x40240000
 80095fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 80fa 	beq.w	80097fc <_dtoa_r+0xb3c>
 8009608:	2d00      	cmp	r5, #0
 800960a:	dd05      	ble.n	8009618 <_dtoa_r+0x958>
 800960c:	4631      	mov	r1, r6
 800960e:	462a      	mov	r2, r5
 8009610:	4620      	mov	r0, r4
 8009612:	f000 fccd 	bl	8009fb0 <__lshift>
 8009616:	4606      	mov	r6, r0
 8009618:	9b07      	ldr	r3, [sp, #28]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d04c      	beq.n	80096b8 <_dtoa_r+0x9f8>
 800961e:	6871      	ldr	r1, [r6, #4]
 8009620:	4620      	mov	r0, r4
 8009622:	f000 fb04 	bl	8009c2e <_Balloc>
 8009626:	6932      	ldr	r2, [r6, #16]
 8009628:	3202      	adds	r2, #2
 800962a:	4605      	mov	r5, r0
 800962c:	0092      	lsls	r2, r2, #2
 800962e:	f106 010c 	add.w	r1, r6, #12
 8009632:	300c      	adds	r0, #12
 8009634:	f000 faf0 	bl	8009c18 <memcpy>
 8009638:	2201      	movs	r2, #1
 800963a:	4629      	mov	r1, r5
 800963c:	4620      	mov	r0, r4
 800963e:	f000 fcb7 	bl	8009fb0 <__lshift>
 8009642:	9b00      	ldr	r3, [sp, #0]
 8009644:	f8cd b014 	str.w	fp, [sp, #20]
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	46b1      	mov	r9, r6
 800964e:	9307      	str	r3, [sp, #28]
 8009650:	4606      	mov	r6, r0
 8009652:	4639      	mov	r1, r7
 8009654:	9804      	ldr	r0, [sp, #16]
 8009656:	f7ff faa7 	bl	8008ba8 <quorem>
 800965a:	4649      	mov	r1, r9
 800965c:	4605      	mov	r5, r0
 800965e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009662:	9804      	ldr	r0, [sp, #16]
 8009664:	f000 fcf8 	bl	800a058 <__mcmp>
 8009668:	4632      	mov	r2, r6
 800966a:	9000      	str	r0, [sp, #0]
 800966c:	4639      	mov	r1, r7
 800966e:	4620      	mov	r0, r4
 8009670:	f000 fd0c 	bl	800a08c <__mdiff>
 8009674:	68c3      	ldr	r3, [r0, #12]
 8009676:	4602      	mov	r2, r0
 8009678:	bb03      	cbnz	r3, 80096bc <_dtoa_r+0x9fc>
 800967a:	4601      	mov	r1, r0
 800967c:	9008      	str	r0, [sp, #32]
 800967e:	9804      	ldr	r0, [sp, #16]
 8009680:	f000 fcea 	bl	800a058 <__mcmp>
 8009684:	9a08      	ldr	r2, [sp, #32]
 8009686:	4603      	mov	r3, r0
 8009688:	4611      	mov	r1, r2
 800968a:	4620      	mov	r0, r4
 800968c:	9308      	str	r3, [sp, #32]
 800968e:	f000 fb02 	bl	8009c96 <_Bfree>
 8009692:	9b08      	ldr	r3, [sp, #32]
 8009694:	b9a3      	cbnz	r3, 80096c0 <_dtoa_r+0xa00>
 8009696:	9a06      	ldr	r2, [sp, #24]
 8009698:	b992      	cbnz	r2, 80096c0 <_dtoa_r+0xa00>
 800969a:	9a07      	ldr	r2, [sp, #28]
 800969c:	b982      	cbnz	r2, 80096c0 <_dtoa_r+0xa00>
 800969e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80096a2:	d029      	beq.n	80096f8 <_dtoa_r+0xa38>
 80096a4:	9b00      	ldr	r3, [sp, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	dd01      	ble.n	80096ae <_dtoa_r+0x9ee>
 80096aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80096ae:	9b05      	ldr	r3, [sp, #20]
 80096b0:	1c5d      	adds	r5, r3, #1
 80096b2:	f883 8000 	strb.w	r8, [r3]
 80096b6:	e782      	b.n	80095be <_dtoa_r+0x8fe>
 80096b8:	4630      	mov	r0, r6
 80096ba:	e7c2      	b.n	8009642 <_dtoa_r+0x982>
 80096bc:	2301      	movs	r3, #1
 80096be:	e7e3      	b.n	8009688 <_dtoa_r+0x9c8>
 80096c0:	9a00      	ldr	r2, [sp, #0]
 80096c2:	2a00      	cmp	r2, #0
 80096c4:	db04      	blt.n	80096d0 <_dtoa_r+0xa10>
 80096c6:	d125      	bne.n	8009714 <_dtoa_r+0xa54>
 80096c8:	9a06      	ldr	r2, [sp, #24]
 80096ca:	bb1a      	cbnz	r2, 8009714 <_dtoa_r+0xa54>
 80096cc:	9a07      	ldr	r2, [sp, #28]
 80096ce:	bb0a      	cbnz	r2, 8009714 <_dtoa_r+0xa54>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	ddec      	ble.n	80096ae <_dtoa_r+0x9ee>
 80096d4:	2201      	movs	r2, #1
 80096d6:	9904      	ldr	r1, [sp, #16]
 80096d8:	4620      	mov	r0, r4
 80096da:	f000 fc69 	bl	8009fb0 <__lshift>
 80096de:	4639      	mov	r1, r7
 80096e0:	9004      	str	r0, [sp, #16]
 80096e2:	f000 fcb9 	bl	800a058 <__mcmp>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	dc03      	bgt.n	80096f2 <_dtoa_r+0xa32>
 80096ea:	d1e0      	bne.n	80096ae <_dtoa_r+0x9ee>
 80096ec:	f018 0f01 	tst.w	r8, #1
 80096f0:	d0dd      	beq.n	80096ae <_dtoa_r+0x9ee>
 80096f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80096f6:	d1d8      	bne.n	80096aa <_dtoa_r+0x9ea>
 80096f8:	9b05      	ldr	r3, [sp, #20]
 80096fa:	9a05      	ldr	r2, [sp, #20]
 80096fc:	1c5d      	adds	r5, r3, #1
 80096fe:	2339      	movs	r3, #57	; 0x39
 8009700:	7013      	strb	r3, [r2, #0]
 8009702:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009706:	2b39      	cmp	r3, #57	; 0x39
 8009708:	f105 32ff 	add.w	r2, r5, #4294967295
 800970c:	d04f      	beq.n	80097ae <_dtoa_r+0xaee>
 800970e:	3301      	adds	r3, #1
 8009710:	7013      	strb	r3, [r2, #0]
 8009712:	e754      	b.n	80095be <_dtoa_r+0x8fe>
 8009714:	9a05      	ldr	r2, [sp, #20]
 8009716:	2b00      	cmp	r3, #0
 8009718:	f102 0501 	add.w	r5, r2, #1
 800971c:	dd06      	ble.n	800972c <_dtoa_r+0xa6c>
 800971e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009722:	d0e9      	beq.n	80096f8 <_dtoa_r+0xa38>
 8009724:	f108 0801 	add.w	r8, r8, #1
 8009728:	9b05      	ldr	r3, [sp, #20]
 800972a:	e7c2      	b.n	80096b2 <_dtoa_r+0x9f2>
 800972c:	9a02      	ldr	r2, [sp, #8]
 800972e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009732:	eba5 030b 	sub.w	r3, r5, fp
 8009736:	4293      	cmp	r3, r2
 8009738:	d021      	beq.n	800977e <_dtoa_r+0xabe>
 800973a:	2300      	movs	r3, #0
 800973c:	220a      	movs	r2, #10
 800973e:	9904      	ldr	r1, [sp, #16]
 8009740:	4620      	mov	r0, r4
 8009742:	f000 fabf 	bl	8009cc4 <__multadd>
 8009746:	45b1      	cmp	r9, r6
 8009748:	9004      	str	r0, [sp, #16]
 800974a:	f04f 0300 	mov.w	r3, #0
 800974e:	f04f 020a 	mov.w	r2, #10
 8009752:	4649      	mov	r1, r9
 8009754:	4620      	mov	r0, r4
 8009756:	d105      	bne.n	8009764 <_dtoa_r+0xaa4>
 8009758:	f000 fab4 	bl	8009cc4 <__multadd>
 800975c:	4681      	mov	r9, r0
 800975e:	4606      	mov	r6, r0
 8009760:	9505      	str	r5, [sp, #20]
 8009762:	e776      	b.n	8009652 <_dtoa_r+0x992>
 8009764:	f000 faae 	bl	8009cc4 <__multadd>
 8009768:	4631      	mov	r1, r6
 800976a:	4681      	mov	r9, r0
 800976c:	2300      	movs	r3, #0
 800976e:	220a      	movs	r2, #10
 8009770:	4620      	mov	r0, r4
 8009772:	f000 faa7 	bl	8009cc4 <__multadd>
 8009776:	4606      	mov	r6, r0
 8009778:	e7f2      	b.n	8009760 <_dtoa_r+0xaa0>
 800977a:	f04f 0900 	mov.w	r9, #0
 800977e:	2201      	movs	r2, #1
 8009780:	9904      	ldr	r1, [sp, #16]
 8009782:	4620      	mov	r0, r4
 8009784:	f000 fc14 	bl	8009fb0 <__lshift>
 8009788:	4639      	mov	r1, r7
 800978a:	9004      	str	r0, [sp, #16]
 800978c:	f000 fc64 	bl	800a058 <__mcmp>
 8009790:	2800      	cmp	r0, #0
 8009792:	dcb6      	bgt.n	8009702 <_dtoa_r+0xa42>
 8009794:	d102      	bne.n	800979c <_dtoa_r+0xadc>
 8009796:	f018 0f01 	tst.w	r8, #1
 800979a:	d1b2      	bne.n	8009702 <_dtoa_r+0xa42>
 800979c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097a0:	2b30      	cmp	r3, #48	; 0x30
 80097a2:	f105 32ff 	add.w	r2, r5, #4294967295
 80097a6:	f47f af0a 	bne.w	80095be <_dtoa_r+0x8fe>
 80097aa:	4615      	mov	r5, r2
 80097ac:	e7f6      	b.n	800979c <_dtoa_r+0xadc>
 80097ae:	4593      	cmp	fp, r2
 80097b0:	d105      	bne.n	80097be <_dtoa_r+0xafe>
 80097b2:	2331      	movs	r3, #49	; 0x31
 80097b4:	f10a 0a01 	add.w	sl, sl, #1
 80097b8:	f88b 3000 	strb.w	r3, [fp]
 80097bc:	e6ff      	b.n	80095be <_dtoa_r+0x8fe>
 80097be:	4615      	mov	r5, r2
 80097c0:	e79f      	b.n	8009702 <_dtoa_r+0xa42>
 80097c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009828 <_dtoa_r+0xb68>
 80097c6:	e007      	b.n	80097d8 <_dtoa_r+0xb18>
 80097c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800982c <_dtoa_r+0xb6c>
 80097ce:	b11b      	cbz	r3, 80097d8 <_dtoa_r+0xb18>
 80097d0:	f10b 0308 	add.w	r3, fp, #8
 80097d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097d6:	6013      	str	r3, [r2, #0]
 80097d8:	4658      	mov	r0, fp
 80097da:	b017      	add	sp, #92	; 0x5c
 80097dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e0:	9b06      	ldr	r3, [sp, #24]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	f77f ae35 	ble.w	8009452 <_dtoa_r+0x792>
 80097e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097ea:	9307      	str	r3, [sp, #28]
 80097ec:	e649      	b.n	8009482 <_dtoa_r+0x7c2>
 80097ee:	9b02      	ldr	r3, [sp, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dc03      	bgt.n	80097fc <_dtoa_r+0xb3c>
 80097f4:	9b06      	ldr	r3, [sp, #24]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	f73f aecc 	bgt.w	8009594 <_dtoa_r+0x8d4>
 80097fc:	465d      	mov	r5, fp
 80097fe:	4639      	mov	r1, r7
 8009800:	9804      	ldr	r0, [sp, #16]
 8009802:	f7ff f9d1 	bl	8008ba8 <quorem>
 8009806:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800980a:	f805 8b01 	strb.w	r8, [r5], #1
 800980e:	9a02      	ldr	r2, [sp, #8]
 8009810:	eba5 030b 	sub.w	r3, r5, fp
 8009814:	429a      	cmp	r2, r3
 8009816:	ddb0      	ble.n	800977a <_dtoa_r+0xaba>
 8009818:	2300      	movs	r3, #0
 800981a:	220a      	movs	r2, #10
 800981c:	9904      	ldr	r1, [sp, #16]
 800981e:	4620      	mov	r0, r4
 8009820:	f000 fa50 	bl	8009cc4 <__multadd>
 8009824:	9004      	str	r0, [sp, #16]
 8009826:	e7ea      	b.n	80097fe <_dtoa_r+0xb3e>
 8009828:	0800cb58 	.word	0x0800cb58
 800982c:	0800cb7c 	.word	0x0800cb7c

08009830 <__sflush_r>:
 8009830:	898a      	ldrh	r2, [r1, #12]
 8009832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009836:	4605      	mov	r5, r0
 8009838:	0710      	lsls	r0, r2, #28
 800983a:	460c      	mov	r4, r1
 800983c:	d458      	bmi.n	80098f0 <__sflush_r+0xc0>
 800983e:	684b      	ldr	r3, [r1, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	dc05      	bgt.n	8009850 <__sflush_r+0x20>
 8009844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	dc02      	bgt.n	8009850 <__sflush_r+0x20>
 800984a:	2000      	movs	r0, #0
 800984c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009852:	2e00      	cmp	r6, #0
 8009854:	d0f9      	beq.n	800984a <__sflush_r+0x1a>
 8009856:	2300      	movs	r3, #0
 8009858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800985c:	682f      	ldr	r7, [r5, #0]
 800985e:	6a21      	ldr	r1, [r4, #32]
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	d032      	beq.n	80098ca <__sflush_r+0x9a>
 8009864:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	075a      	lsls	r2, r3, #29
 800986a:	d505      	bpl.n	8009878 <__sflush_r+0x48>
 800986c:	6863      	ldr	r3, [r4, #4]
 800986e:	1ac0      	subs	r0, r0, r3
 8009870:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009872:	b10b      	cbz	r3, 8009878 <__sflush_r+0x48>
 8009874:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009876:	1ac0      	subs	r0, r0, r3
 8009878:	2300      	movs	r3, #0
 800987a:	4602      	mov	r2, r0
 800987c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800987e:	6a21      	ldr	r1, [r4, #32]
 8009880:	4628      	mov	r0, r5
 8009882:	47b0      	blx	r6
 8009884:	1c43      	adds	r3, r0, #1
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	d106      	bne.n	8009898 <__sflush_r+0x68>
 800988a:	6829      	ldr	r1, [r5, #0]
 800988c:	291d      	cmp	r1, #29
 800988e:	d848      	bhi.n	8009922 <__sflush_r+0xf2>
 8009890:	4a29      	ldr	r2, [pc, #164]	; (8009938 <__sflush_r+0x108>)
 8009892:	40ca      	lsrs	r2, r1
 8009894:	07d6      	lsls	r6, r2, #31
 8009896:	d544      	bpl.n	8009922 <__sflush_r+0xf2>
 8009898:	2200      	movs	r2, #0
 800989a:	6062      	str	r2, [r4, #4]
 800989c:	04d9      	lsls	r1, r3, #19
 800989e:	6922      	ldr	r2, [r4, #16]
 80098a0:	6022      	str	r2, [r4, #0]
 80098a2:	d504      	bpl.n	80098ae <__sflush_r+0x7e>
 80098a4:	1c42      	adds	r2, r0, #1
 80098a6:	d101      	bne.n	80098ac <__sflush_r+0x7c>
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	b903      	cbnz	r3, 80098ae <__sflush_r+0x7e>
 80098ac:	6560      	str	r0, [r4, #84]	; 0x54
 80098ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098b0:	602f      	str	r7, [r5, #0]
 80098b2:	2900      	cmp	r1, #0
 80098b4:	d0c9      	beq.n	800984a <__sflush_r+0x1a>
 80098b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098ba:	4299      	cmp	r1, r3
 80098bc:	d002      	beq.n	80098c4 <__sflush_r+0x94>
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 fc9e 	bl	800a200 <_free_r>
 80098c4:	2000      	movs	r0, #0
 80098c6:	6360      	str	r0, [r4, #52]	; 0x34
 80098c8:	e7c0      	b.n	800984c <__sflush_r+0x1c>
 80098ca:	2301      	movs	r3, #1
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b0      	blx	r6
 80098d0:	1c41      	adds	r1, r0, #1
 80098d2:	d1c8      	bne.n	8009866 <__sflush_r+0x36>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0c5      	beq.n	8009866 <__sflush_r+0x36>
 80098da:	2b1d      	cmp	r3, #29
 80098dc:	d001      	beq.n	80098e2 <__sflush_r+0xb2>
 80098de:	2b16      	cmp	r3, #22
 80098e0:	d101      	bne.n	80098e6 <__sflush_r+0xb6>
 80098e2:	602f      	str	r7, [r5, #0]
 80098e4:	e7b1      	b.n	800984a <__sflush_r+0x1a>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	e7ad      	b.n	800984c <__sflush_r+0x1c>
 80098f0:	690f      	ldr	r7, [r1, #16]
 80098f2:	2f00      	cmp	r7, #0
 80098f4:	d0a9      	beq.n	800984a <__sflush_r+0x1a>
 80098f6:	0793      	lsls	r3, r2, #30
 80098f8:	680e      	ldr	r6, [r1, #0]
 80098fa:	bf08      	it	eq
 80098fc:	694b      	ldreq	r3, [r1, #20]
 80098fe:	600f      	str	r7, [r1, #0]
 8009900:	bf18      	it	ne
 8009902:	2300      	movne	r3, #0
 8009904:	eba6 0807 	sub.w	r8, r6, r7
 8009908:	608b      	str	r3, [r1, #8]
 800990a:	f1b8 0f00 	cmp.w	r8, #0
 800990e:	dd9c      	ble.n	800984a <__sflush_r+0x1a>
 8009910:	4643      	mov	r3, r8
 8009912:	463a      	mov	r2, r7
 8009914:	6a21      	ldr	r1, [r4, #32]
 8009916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009918:	4628      	mov	r0, r5
 800991a:	47b0      	blx	r6
 800991c:	2800      	cmp	r0, #0
 800991e:	dc06      	bgt.n	800992e <__sflush_r+0xfe>
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009926:	81a3      	strh	r3, [r4, #12]
 8009928:	f04f 30ff 	mov.w	r0, #4294967295
 800992c:	e78e      	b.n	800984c <__sflush_r+0x1c>
 800992e:	4407      	add	r7, r0
 8009930:	eba8 0800 	sub.w	r8, r8, r0
 8009934:	e7e9      	b.n	800990a <__sflush_r+0xda>
 8009936:	bf00      	nop
 8009938:	20400001 	.word	0x20400001

0800993c <_fflush_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	690b      	ldr	r3, [r1, #16]
 8009940:	4605      	mov	r5, r0
 8009942:	460c      	mov	r4, r1
 8009944:	b1db      	cbz	r3, 800997e <_fflush_r+0x42>
 8009946:	b118      	cbz	r0, 8009950 <_fflush_r+0x14>
 8009948:	6983      	ldr	r3, [r0, #24]
 800994a:	b90b      	cbnz	r3, 8009950 <_fflush_r+0x14>
 800994c:	f000 f860 	bl	8009a10 <__sinit>
 8009950:	4b0c      	ldr	r3, [pc, #48]	; (8009984 <_fflush_r+0x48>)
 8009952:	429c      	cmp	r4, r3
 8009954:	d109      	bne.n	800996a <_fflush_r+0x2e>
 8009956:	686c      	ldr	r4, [r5, #4]
 8009958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800995c:	b17b      	cbz	r3, 800997e <_fflush_r+0x42>
 800995e:	4621      	mov	r1, r4
 8009960:	4628      	mov	r0, r5
 8009962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009966:	f7ff bf63 	b.w	8009830 <__sflush_r>
 800996a:	4b07      	ldr	r3, [pc, #28]	; (8009988 <_fflush_r+0x4c>)
 800996c:	429c      	cmp	r4, r3
 800996e:	d101      	bne.n	8009974 <_fflush_r+0x38>
 8009970:	68ac      	ldr	r4, [r5, #8]
 8009972:	e7f1      	b.n	8009958 <_fflush_r+0x1c>
 8009974:	4b05      	ldr	r3, [pc, #20]	; (800998c <_fflush_r+0x50>)
 8009976:	429c      	cmp	r4, r3
 8009978:	bf08      	it	eq
 800997a:	68ec      	ldreq	r4, [r5, #12]
 800997c:	e7ec      	b.n	8009958 <_fflush_r+0x1c>
 800997e:	2000      	movs	r0, #0
 8009980:	bd38      	pop	{r3, r4, r5, pc}
 8009982:	bf00      	nop
 8009984:	0800cbac 	.word	0x0800cbac
 8009988:	0800cbcc 	.word	0x0800cbcc
 800998c:	0800cb8c 	.word	0x0800cb8c

08009990 <std>:
 8009990:	2300      	movs	r3, #0
 8009992:	b510      	push	{r4, lr}
 8009994:	4604      	mov	r4, r0
 8009996:	e9c0 3300 	strd	r3, r3, [r0]
 800999a:	6083      	str	r3, [r0, #8]
 800999c:	8181      	strh	r1, [r0, #12]
 800999e:	6643      	str	r3, [r0, #100]	; 0x64
 80099a0:	81c2      	strh	r2, [r0, #14]
 80099a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099a6:	6183      	str	r3, [r0, #24]
 80099a8:	4619      	mov	r1, r3
 80099aa:	2208      	movs	r2, #8
 80099ac:	305c      	adds	r0, #92	; 0x5c
 80099ae:	f7fe fb27 	bl	8008000 <memset>
 80099b2:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <std+0x38>)
 80099b4:	6263      	str	r3, [r4, #36]	; 0x24
 80099b6:	4b05      	ldr	r3, [pc, #20]	; (80099cc <std+0x3c>)
 80099b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80099ba:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <std+0x40>)
 80099bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099be:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <std+0x44>)
 80099c0:	6224      	str	r4, [r4, #32]
 80099c2:	6323      	str	r3, [r4, #48]	; 0x30
 80099c4:	bd10      	pop	{r4, pc}
 80099c6:	bf00      	nop
 80099c8:	0800a895 	.word	0x0800a895
 80099cc:	0800a8b7 	.word	0x0800a8b7
 80099d0:	0800a8ef 	.word	0x0800a8ef
 80099d4:	0800a913 	.word	0x0800a913

080099d8 <_cleanup_r>:
 80099d8:	4901      	ldr	r1, [pc, #4]	; (80099e0 <_cleanup_r+0x8>)
 80099da:	f000 b885 	b.w	8009ae8 <_fwalk_reent>
 80099de:	bf00      	nop
 80099e0:	0800993d 	.word	0x0800993d

080099e4 <__sfmoreglue>:
 80099e4:	b570      	push	{r4, r5, r6, lr}
 80099e6:	1e4a      	subs	r2, r1, #1
 80099e8:	2568      	movs	r5, #104	; 0x68
 80099ea:	4355      	muls	r5, r2
 80099ec:	460e      	mov	r6, r1
 80099ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099f2:	f000 fc53 	bl	800a29c <_malloc_r>
 80099f6:	4604      	mov	r4, r0
 80099f8:	b140      	cbz	r0, 8009a0c <__sfmoreglue+0x28>
 80099fa:	2100      	movs	r1, #0
 80099fc:	e9c0 1600 	strd	r1, r6, [r0]
 8009a00:	300c      	adds	r0, #12
 8009a02:	60a0      	str	r0, [r4, #8]
 8009a04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a08:	f7fe fafa 	bl	8008000 <memset>
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}

08009a10 <__sinit>:
 8009a10:	6983      	ldr	r3, [r0, #24]
 8009a12:	b510      	push	{r4, lr}
 8009a14:	4604      	mov	r4, r0
 8009a16:	bb33      	cbnz	r3, 8009a66 <__sinit+0x56>
 8009a18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009a1c:	6503      	str	r3, [r0, #80]	; 0x50
 8009a1e:	4b12      	ldr	r3, [pc, #72]	; (8009a68 <__sinit+0x58>)
 8009a20:	4a12      	ldr	r2, [pc, #72]	; (8009a6c <__sinit+0x5c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6282      	str	r2, [r0, #40]	; 0x28
 8009a26:	4298      	cmp	r0, r3
 8009a28:	bf04      	itt	eq
 8009a2a:	2301      	moveq	r3, #1
 8009a2c:	6183      	streq	r3, [r0, #24]
 8009a2e:	f000 f81f 	bl	8009a70 <__sfp>
 8009a32:	6060      	str	r0, [r4, #4]
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 f81b 	bl	8009a70 <__sfp>
 8009a3a:	60a0      	str	r0, [r4, #8]
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 f817 	bl	8009a70 <__sfp>
 8009a42:	2200      	movs	r2, #0
 8009a44:	60e0      	str	r0, [r4, #12]
 8009a46:	2104      	movs	r1, #4
 8009a48:	6860      	ldr	r0, [r4, #4]
 8009a4a:	f7ff ffa1 	bl	8009990 <std>
 8009a4e:	2201      	movs	r2, #1
 8009a50:	2109      	movs	r1, #9
 8009a52:	68a0      	ldr	r0, [r4, #8]
 8009a54:	f7ff ff9c 	bl	8009990 <std>
 8009a58:	2202      	movs	r2, #2
 8009a5a:	2112      	movs	r1, #18
 8009a5c:	68e0      	ldr	r0, [r4, #12]
 8009a5e:	f7ff ff97 	bl	8009990 <std>
 8009a62:	2301      	movs	r3, #1
 8009a64:	61a3      	str	r3, [r4, #24]
 8009a66:	bd10      	pop	{r4, pc}
 8009a68:	0800cb44 	.word	0x0800cb44
 8009a6c:	080099d9 	.word	0x080099d9

08009a70 <__sfp>:
 8009a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a72:	4b1b      	ldr	r3, [pc, #108]	; (8009ae0 <__sfp+0x70>)
 8009a74:	681e      	ldr	r6, [r3, #0]
 8009a76:	69b3      	ldr	r3, [r6, #24]
 8009a78:	4607      	mov	r7, r0
 8009a7a:	b913      	cbnz	r3, 8009a82 <__sfp+0x12>
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f7ff ffc7 	bl	8009a10 <__sinit>
 8009a82:	3648      	adds	r6, #72	; 0x48
 8009a84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	d503      	bpl.n	8009a94 <__sfp+0x24>
 8009a8c:	6833      	ldr	r3, [r6, #0]
 8009a8e:	b133      	cbz	r3, 8009a9e <__sfp+0x2e>
 8009a90:	6836      	ldr	r6, [r6, #0]
 8009a92:	e7f7      	b.n	8009a84 <__sfp+0x14>
 8009a94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a98:	b16d      	cbz	r5, 8009ab6 <__sfp+0x46>
 8009a9a:	3468      	adds	r4, #104	; 0x68
 8009a9c:	e7f4      	b.n	8009a88 <__sfp+0x18>
 8009a9e:	2104      	movs	r1, #4
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	f7ff ff9f 	bl	80099e4 <__sfmoreglue>
 8009aa6:	6030      	str	r0, [r6, #0]
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d1f1      	bne.n	8009a90 <__sfp+0x20>
 8009aac:	230c      	movs	r3, #12
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab6:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <__sfp+0x74>)
 8009ab8:	6665      	str	r5, [r4, #100]	; 0x64
 8009aba:	e9c4 5500 	strd	r5, r5, [r4]
 8009abe:	60a5      	str	r5, [r4, #8]
 8009ac0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009ac4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009ac8:	2208      	movs	r2, #8
 8009aca:	4629      	mov	r1, r5
 8009acc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ad0:	f7fe fa96 	bl	8008000 <memset>
 8009ad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009adc:	e7e9      	b.n	8009ab2 <__sfp+0x42>
 8009ade:	bf00      	nop
 8009ae0:	0800cb44 	.word	0x0800cb44
 8009ae4:	ffff0001 	.word	0xffff0001

08009ae8 <_fwalk_reent>:
 8009ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aec:	4680      	mov	r8, r0
 8009aee:	4689      	mov	r9, r1
 8009af0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009af4:	2600      	movs	r6, #0
 8009af6:	b914      	cbnz	r4, 8009afe <_fwalk_reent+0x16>
 8009af8:	4630      	mov	r0, r6
 8009afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009afe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009b02:	3f01      	subs	r7, #1
 8009b04:	d501      	bpl.n	8009b0a <_fwalk_reent+0x22>
 8009b06:	6824      	ldr	r4, [r4, #0]
 8009b08:	e7f5      	b.n	8009af6 <_fwalk_reent+0xe>
 8009b0a:	89ab      	ldrh	r3, [r5, #12]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d907      	bls.n	8009b20 <_fwalk_reent+0x38>
 8009b10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b14:	3301      	adds	r3, #1
 8009b16:	d003      	beq.n	8009b20 <_fwalk_reent+0x38>
 8009b18:	4629      	mov	r1, r5
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	47c8      	blx	r9
 8009b1e:	4306      	orrs	r6, r0
 8009b20:	3568      	adds	r5, #104	; 0x68
 8009b22:	e7ee      	b.n	8009b02 <_fwalk_reent+0x1a>

08009b24 <_localeconv_r>:
 8009b24:	4b04      	ldr	r3, [pc, #16]	; (8009b38 <_localeconv_r+0x14>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6a18      	ldr	r0, [r3, #32]
 8009b2a:	4b04      	ldr	r3, [pc, #16]	; (8009b3c <_localeconv_r+0x18>)
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	bf08      	it	eq
 8009b30:	4618      	moveq	r0, r3
 8009b32:	30f0      	adds	r0, #240	; 0xf0
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	20000030 	.word	0x20000030
 8009b3c:	20000094 	.word	0x20000094

08009b40 <__swhatbuf_r>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	460e      	mov	r6, r1
 8009b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	b096      	sub	sp, #88	; 0x58
 8009b4c:	4614      	mov	r4, r2
 8009b4e:	461d      	mov	r5, r3
 8009b50:	da07      	bge.n	8009b62 <__swhatbuf_r+0x22>
 8009b52:	2300      	movs	r3, #0
 8009b54:	602b      	str	r3, [r5, #0]
 8009b56:	89b3      	ldrh	r3, [r6, #12]
 8009b58:	061a      	lsls	r2, r3, #24
 8009b5a:	d410      	bmi.n	8009b7e <__swhatbuf_r+0x3e>
 8009b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b60:	e00e      	b.n	8009b80 <__swhatbuf_r+0x40>
 8009b62:	466a      	mov	r2, sp
 8009b64:	f000 fefc 	bl	800a960 <_fstat_r>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	dbf2      	blt.n	8009b52 <__swhatbuf_r+0x12>
 8009b6c:	9a01      	ldr	r2, [sp, #4]
 8009b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b76:	425a      	negs	r2, r3
 8009b78:	415a      	adcs	r2, r3
 8009b7a:	602a      	str	r2, [r5, #0]
 8009b7c:	e7ee      	b.n	8009b5c <__swhatbuf_r+0x1c>
 8009b7e:	2340      	movs	r3, #64	; 0x40
 8009b80:	2000      	movs	r0, #0
 8009b82:	6023      	str	r3, [r4, #0]
 8009b84:	b016      	add	sp, #88	; 0x58
 8009b86:	bd70      	pop	{r4, r5, r6, pc}

08009b88 <__smakebuf_r>:
 8009b88:	898b      	ldrh	r3, [r1, #12]
 8009b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b8c:	079d      	lsls	r5, r3, #30
 8009b8e:	4606      	mov	r6, r0
 8009b90:	460c      	mov	r4, r1
 8009b92:	d507      	bpl.n	8009ba4 <__smakebuf_r+0x1c>
 8009b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	6123      	str	r3, [r4, #16]
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	6163      	str	r3, [r4, #20]
 8009ba0:	b002      	add	sp, #8
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}
 8009ba4:	ab01      	add	r3, sp, #4
 8009ba6:	466a      	mov	r2, sp
 8009ba8:	f7ff ffca 	bl	8009b40 <__swhatbuf_r>
 8009bac:	9900      	ldr	r1, [sp, #0]
 8009bae:	4605      	mov	r5, r0
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f000 fb73 	bl	800a29c <_malloc_r>
 8009bb6:	b948      	cbnz	r0, 8009bcc <__smakebuf_r+0x44>
 8009bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bbc:	059a      	lsls	r2, r3, #22
 8009bbe:	d4ef      	bmi.n	8009ba0 <__smakebuf_r+0x18>
 8009bc0:	f023 0303 	bic.w	r3, r3, #3
 8009bc4:	f043 0302 	orr.w	r3, r3, #2
 8009bc8:	81a3      	strh	r3, [r4, #12]
 8009bca:	e7e3      	b.n	8009b94 <__smakebuf_r+0xc>
 8009bcc:	4b0d      	ldr	r3, [pc, #52]	; (8009c04 <__smakebuf_r+0x7c>)
 8009bce:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	6020      	str	r0, [r4, #0]
 8009bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd8:	81a3      	strh	r3, [r4, #12]
 8009bda:	9b00      	ldr	r3, [sp, #0]
 8009bdc:	6163      	str	r3, [r4, #20]
 8009bde:	9b01      	ldr	r3, [sp, #4]
 8009be0:	6120      	str	r0, [r4, #16]
 8009be2:	b15b      	cbz	r3, 8009bfc <__smakebuf_r+0x74>
 8009be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009be8:	4630      	mov	r0, r6
 8009bea:	f000 fecb 	bl	800a984 <_isatty_r>
 8009bee:	b128      	cbz	r0, 8009bfc <__smakebuf_r+0x74>
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	f023 0303 	bic.w	r3, r3, #3
 8009bf6:	f043 0301 	orr.w	r3, r3, #1
 8009bfa:	81a3      	strh	r3, [r4, #12]
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	431d      	orrs	r5, r3
 8009c00:	81a5      	strh	r5, [r4, #12]
 8009c02:	e7cd      	b.n	8009ba0 <__smakebuf_r+0x18>
 8009c04:	080099d9 	.word	0x080099d9

08009c08 <malloc>:
 8009c08:	4b02      	ldr	r3, [pc, #8]	; (8009c14 <malloc+0xc>)
 8009c0a:	4601      	mov	r1, r0
 8009c0c:	6818      	ldr	r0, [r3, #0]
 8009c0e:	f000 bb45 	b.w	800a29c <_malloc_r>
 8009c12:	bf00      	nop
 8009c14:	20000030 	.word	0x20000030

08009c18 <memcpy>:
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	1e43      	subs	r3, r0, #1
 8009c1c:	440a      	add	r2, r1
 8009c1e:	4291      	cmp	r1, r2
 8009c20:	d100      	bne.n	8009c24 <memcpy+0xc>
 8009c22:	bd10      	pop	{r4, pc}
 8009c24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c2c:	e7f7      	b.n	8009c1e <memcpy+0x6>

08009c2e <_Balloc>:
 8009c2e:	b570      	push	{r4, r5, r6, lr}
 8009c30:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c32:	4604      	mov	r4, r0
 8009c34:	460e      	mov	r6, r1
 8009c36:	b93d      	cbnz	r5, 8009c48 <_Balloc+0x1a>
 8009c38:	2010      	movs	r0, #16
 8009c3a:	f7ff ffe5 	bl	8009c08 <malloc>
 8009c3e:	6260      	str	r0, [r4, #36]	; 0x24
 8009c40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c44:	6005      	str	r5, [r0, #0]
 8009c46:	60c5      	str	r5, [r0, #12]
 8009c48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009c4a:	68eb      	ldr	r3, [r5, #12]
 8009c4c:	b183      	cbz	r3, 8009c70 <_Balloc+0x42>
 8009c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009c56:	b9b8      	cbnz	r0, 8009c88 <_Balloc+0x5a>
 8009c58:	2101      	movs	r1, #1
 8009c5a:	fa01 f506 	lsl.w	r5, r1, r6
 8009c5e:	1d6a      	adds	r2, r5, #5
 8009c60:	0092      	lsls	r2, r2, #2
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fabe 	bl	800a1e4 <_calloc_r>
 8009c68:	b160      	cbz	r0, 8009c84 <_Balloc+0x56>
 8009c6a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009c6e:	e00e      	b.n	8009c8e <_Balloc+0x60>
 8009c70:	2221      	movs	r2, #33	; 0x21
 8009c72:	2104      	movs	r1, #4
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 fab5 	bl	800a1e4 <_calloc_r>
 8009c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c7c:	60e8      	str	r0, [r5, #12]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1e4      	bne.n	8009c4e <_Balloc+0x20>
 8009c84:	2000      	movs	r0, #0
 8009c86:	bd70      	pop	{r4, r5, r6, pc}
 8009c88:	6802      	ldr	r2, [r0, #0]
 8009c8a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c94:	e7f7      	b.n	8009c86 <_Balloc+0x58>

08009c96 <_Bfree>:
 8009c96:	b570      	push	{r4, r5, r6, lr}
 8009c98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	b93c      	cbnz	r4, 8009cb0 <_Bfree+0x1a>
 8009ca0:	2010      	movs	r0, #16
 8009ca2:	f7ff ffb1 	bl	8009c08 <malloc>
 8009ca6:	6270      	str	r0, [r6, #36]	; 0x24
 8009ca8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cac:	6004      	str	r4, [r0, #0]
 8009cae:	60c4      	str	r4, [r0, #12]
 8009cb0:	b13d      	cbz	r5, 8009cc2 <_Bfree+0x2c>
 8009cb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009cb4:	686a      	ldr	r2, [r5, #4]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cbc:	6029      	str	r1, [r5, #0]
 8009cbe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}

08009cc4 <__multadd>:
 8009cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc8:	690d      	ldr	r5, [r1, #16]
 8009cca:	461f      	mov	r7, r3
 8009ccc:	4606      	mov	r6, r0
 8009cce:	460c      	mov	r4, r1
 8009cd0:	f101 0c14 	add.w	ip, r1, #20
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f8dc 0000 	ldr.w	r0, [ip]
 8009cda:	b281      	uxth	r1, r0
 8009cdc:	fb02 7101 	mla	r1, r2, r1, r7
 8009ce0:	0c0f      	lsrs	r7, r1, #16
 8009ce2:	0c00      	lsrs	r0, r0, #16
 8009ce4:	fb02 7000 	mla	r0, r2, r0, r7
 8009ce8:	b289      	uxth	r1, r1
 8009cea:	3301      	adds	r3, #1
 8009cec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009cf0:	429d      	cmp	r5, r3
 8009cf2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009cf6:	f84c 1b04 	str.w	r1, [ip], #4
 8009cfa:	dcec      	bgt.n	8009cd6 <__multadd+0x12>
 8009cfc:	b1d7      	cbz	r7, 8009d34 <__multadd+0x70>
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	42ab      	cmp	r3, r5
 8009d02:	dc12      	bgt.n	8009d2a <__multadd+0x66>
 8009d04:	6861      	ldr	r1, [r4, #4]
 8009d06:	4630      	mov	r0, r6
 8009d08:	3101      	adds	r1, #1
 8009d0a:	f7ff ff90 	bl	8009c2e <_Balloc>
 8009d0e:	6922      	ldr	r2, [r4, #16]
 8009d10:	3202      	adds	r2, #2
 8009d12:	f104 010c 	add.w	r1, r4, #12
 8009d16:	4680      	mov	r8, r0
 8009d18:	0092      	lsls	r2, r2, #2
 8009d1a:	300c      	adds	r0, #12
 8009d1c:	f7ff ff7c 	bl	8009c18 <memcpy>
 8009d20:	4621      	mov	r1, r4
 8009d22:	4630      	mov	r0, r6
 8009d24:	f7ff ffb7 	bl	8009c96 <_Bfree>
 8009d28:	4644      	mov	r4, r8
 8009d2a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d2e:	3501      	adds	r5, #1
 8009d30:	615f      	str	r7, [r3, #20]
 8009d32:	6125      	str	r5, [r4, #16]
 8009d34:	4620      	mov	r0, r4
 8009d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d3a <__hi0bits>:
 8009d3a:	0c02      	lsrs	r2, r0, #16
 8009d3c:	0412      	lsls	r2, r2, #16
 8009d3e:	4603      	mov	r3, r0
 8009d40:	b9b2      	cbnz	r2, 8009d70 <__hi0bits+0x36>
 8009d42:	0403      	lsls	r3, r0, #16
 8009d44:	2010      	movs	r0, #16
 8009d46:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009d4a:	bf04      	itt	eq
 8009d4c:	021b      	lsleq	r3, r3, #8
 8009d4e:	3008      	addeq	r0, #8
 8009d50:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d54:	bf04      	itt	eq
 8009d56:	011b      	lsleq	r3, r3, #4
 8009d58:	3004      	addeq	r0, #4
 8009d5a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d5e:	bf04      	itt	eq
 8009d60:	009b      	lsleq	r3, r3, #2
 8009d62:	3002      	addeq	r0, #2
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	db06      	blt.n	8009d76 <__hi0bits+0x3c>
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	d503      	bpl.n	8009d74 <__hi0bits+0x3a>
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	4770      	bx	lr
 8009d70:	2000      	movs	r0, #0
 8009d72:	e7e8      	b.n	8009d46 <__hi0bits+0xc>
 8009d74:	2020      	movs	r0, #32
 8009d76:	4770      	bx	lr

08009d78 <__lo0bits>:
 8009d78:	6803      	ldr	r3, [r0, #0]
 8009d7a:	f013 0207 	ands.w	r2, r3, #7
 8009d7e:	4601      	mov	r1, r0
 8009d80:	d00b      	beq.n	8009d9a <__lo0bits+0x22>
 8009d82:	07da      	lsls	r2, r3, #31
 8009d84:	d423      	bmi.n	8009dce <__lo0bits+0x56>
 8009d86:	0798      	lsls	r0, r3, #30
 8009d88:	bf49      	itett	mi
 8009d8a:	085b      	lsrmi	r3, r3, #1
 8009d8c:	089b      	lsrpl	r3, r3, #2
 8009d8e:	2001      	movmi	r0, #1
 8009d90:	600b      	strmi	r3, [r1, #0]
 8009d92:	bf5c      	itt	pl
 8009d94:	600b      	strpl	r3, [r1, #0]
 8009d96:	2002      	movpl	r0, #2
 8009d98:	4770      	bx	lr
 8009d9a:	b298      	uxth	r0, r3
 8009d9c:	b9a8      	cbnz	r0, 8009dca <__lo0bits+0x52>
 8009d9e:	0c1b      	lsrs	r3, r3, #16
 8009da0:	2010      	movs	r0, #16
 8009da2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009da6:	bf04      	itt	eq
 8009da8:	0a1b      	lsreq	r3, r3, #8
 8009daa:	3008      	addeq	r0, #8
 8009dac:	071a      	lsls	r2, r3, #28
 8009dae:	bf04      	itt	eq
 8009db0:	091b      	lsreq	r3, r3, #4
 8009db2:	3004      	addeq	r0, #4
 8009db4:	079a      	lsls	r2, r3, #30
 8009db6:	bf04      	itt	eq
 8009db8:	089b      	lsreq	r3, r3, #2
 8009dba:	3002      	addeq	r0, #2
 8009dbc:	07da      	lsls	r2, r3, #31
 8009dbe:	d402      	bmi.n	8009dc6 <__lo0bits+0x4e>
 8009dc0:	085b      	lsrs	r3, r3, #1
 8009dc2:	d006      	beq.n	8009dd2 <__lo0bits+0x5a>
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	600b      	str	r3, [r1, #0]
 8009dc8:	4770      	bx	lr
 8009dca:	4610      	mov	r0, r2
 8009dcc:	e7e9      	b.n	8009da2 <__lo0bits+0x2a>
 8009dce:	2000      	movs	r0, #0
 8009dd0:	4770      	bx	lr
 8009dd2:	2020      	movs	r0, #32
 8009dd4:	4770      	bx	lr

08009dd6 <__i2b>:
 8009dd6:	b510      	push	{r4, lr}
 8009dd8:	460c      	mov	r4, r1
 8009dda:	2101      	movs	r1, #1
 8009ddc:	f7ff ff27 	bl	8009c2e <_Balloc>
 8009de0:	2201      	movs	r2, #1
 8009de2:	6144      	str	r4, [r0, #20]
 8009de4:	6102      	str	r2, [r0, #16]
 8009de6:	bd10      	pop	{r4, pc}

08009de8 <__multiply>:
 8009de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	4614      	mov	r4, r2
 8009dee:	690a      	ldr	r2, [r1, #16]
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	bfb8      	it	lt
 8009df6:	460b      	movlt	r3, r1
 8009df8:	4688      	mov	r8, r1
 8009dfa:	bfbc      	itt	lt
 8009dfc:	46a0      	movlt	r8, r4
 8009dfe:	461c      	movlt	r4, r3
 8009e00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009e08:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e10:	eb07 0609 	add.w	r6, r7, r9
 8009e14:	42b3      	cmp	r3, r6
 8009e16:	bfb8      	it	lt
 8009e18:	3101      	addlt	r1, #1
 8009e1a:	f7ff ff08 	bl	8009c2e <_Balloc>
 8009e1e:	f100 0514 	add.w	r5, r0, #20
 8009e22:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009e26:	462b      	mov	r3, r5
 8009e28:	2200      	movs	r2, #0
 8009e2a:	4573      	cmp	r3, lr
 8009e2c:	d316      	bcc.n	8009e5c <__multiply+0x74>
 8009e2e:	f104 0214 	add.w	r2, r4, #20
 8009e32:	f108 0114 	add.w	r1, r8, #20
 8009e36:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009e3a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	9b00      	ldr	r3, [sp, #0]
 8009e42:	9201      	str	r2, [sp, #4]
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d80c      	bhi.n	8009e62 <__multiply+0x7a>
 8009e48:	2e00      	cmp	r6, #0
 8009e4a:	dd03      	ble.n	8009e54 <__multiply+0x6c>
 8009e4c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d05d      	beq.n	8009f10 <__multiply+0x128>
 8009e54:	6106      	str	r6, [r0, #16]
 8009e56:	b003      	add	sp, #12
 8009e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5c:	f843 2b04 	str.w	r2, [r3], #4
 8009e60:	e7e3      	b.n	8009e2a <__multiply+0x42>
 8009e62:	f8b2 b000 	ldrh.w	fp, [r2]
 8009e66:	f1bb 0f00 	cmp.w	fp, #0
 8009e6a:	d023      	beq.n	8009eb4 <__multiply+0xcc>
 8009e6c:	4689      	mov	r9, r1
 8009e6e:	46ac      	mov	ip, r5
 8009e70:	f04f 0800 	mov.w	r8, #0
 8009e74:	f859 4b04 	ldr.w	r4, [r9], #4
 8009e78:	f8dc a000 	ldr.w	sl, [ip]
 8009e7c:	b2a3      	uxth	r3, r4
 8009e7e:	fa1f fa8a 	uxth.w	sl, sl
 8009e82:	fb0b a303 	mla	r3, fp, r3, sl
 8009e86:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009e8a:	f8dc 4000 	ldr.w	r4, [ip]
 8009e8e:	4443      	add	r3, r8
 8009e90:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009e94:	fb0b 840a 	mla	r4, fp, sl, r8
 8009e98:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009e9c:	46e2      	mov	sl, ip
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ea4:	454f      	cmp	r7, r9
 8009ea6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009eaa:	f84a 3b04 	str.w	r3, [sl], #4
 8009eae:	d82b      	bhi.n	8009f08 <__multiply+0x120>
 8009eb0:	f8cc 8004 	str.w	r8, [ip, #4]
 8009eb4:	9b01      	ldr	r3, [sp, #4]
 8009eb6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009eba:	3204      	adds	r2, #4
 8009ebc:	f1ba 0f00 	cmp.w	sl, #0
 8009ec0:	d020      	beq.n	8009f04 <__multiply+0x11c>
 8009ec2:	682b      	ldr	r3, [r5, #0]
 8009ec4:	4689      	mov	r9, r1
 8009ec6:	46a8      	mov	r8, r5
 8009ec8:	f04f 0b00 	mov.w	fp, #0
 8009ecc:	f8b9 c000 	ldrh.w	ip, [r9]
 8009ed0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009ed4:	fb0a 440c 	mla	r4, sl, ip, r4
 8009ed8:	445c      	add	r4, fp
 8009eda:	46c4      	mov	ip, r8
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ee2:	f84c 3b04 	str.w	r3, [ip], #4
 8009ee6:	f859 3b04 	ldr.w	r3, [r9], #4
 8009eea:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009eee:	0c1b      	lsrs	r3, r3, #16
 8009ef0:	fb0a b303 	mla	r3, sl, r3, fp
 8009ef4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009ef8:	454f      	cmp	r7, r9
 8009efa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009efe:	d805      	bhi.n	8009f0c <__multiply+0x124>
 8009f00:	f8c8 3004 	str.w	r3, [r8, #4]
 8009f04:	3504      	adds	r5, #4
 8009f06:	e79b      	b.n	8009e40 <__multiply+0x58>
 8009f08:	46d4      	mov	ip, sl
 8009f0a:	e7b3      	b.n	8009e74 <__multiply+0x8c>
 8009f0c:	46e0      	mov	r8, ip
 8009f0e:	e7dd      	b.n	8009ecc <__multiply+0xe4>
 8009f10:	3e01      	subs	r6, #1
 8009f12:	e799      	b.n	8009e48 <__multiply+0x60>

08009f14 <__pow5mult>:
 8009f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f18:	4615      	mov	r5, r2
 8009f1a:	f012 0203 	ands.w	r2, r2, #3
 8009f1e:	4606      	mov	r6, r0
 8009f20:	460f      	mov	r7, r1
 8009f22:	d007      	beq.n	8009f34 <__pow5mult+0x20>
 8009f24:	3a01      	subs	r2, #1
 8009f26:	4c21      	ldr	r4, [pc, #132]	; (8009fac <__pow5mult+0x98>)
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f2e:	f7ff fec9 	bl	8009cc4 <__multadd>
 8009f32:	4607      	mov	r7, r0
 8009f34:	10ad      	asrs	r5, r5, #2
 8009f36:	d035      	beq.n	8009fa4 <__pow5mult+0x90>
 8009f38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f3a:	b93c      	cbnz	r4, 8009f4c <__pow5mult+0x38>
 8009f3c:	2010      	movs	r0, #16
 8009f3e:	f7ff fe63 	bl	8009c08 <malloc>
 8009f42:	6270      	str	r0, [r6, #36]	; 0x24
 8009f44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f48:	6004      	str	r4, [r0, #0]
 8009f4a:	60c4      	str	r4, [r0, #12]
 8009f4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f54:	b94c      	cbnz	r4, 8009f6a <__pow5mult+0x56>
 8009f56:	f240 2171 	movw	r1, #625	; 0x271
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7ff ff3b 	bl	8009dd6 <__i2b>
 8009f60:	2300      	movs	r3, #0
 8009f62:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f66:	4604      	mov	r4, r0
 8009f68:	6003      	str	r3, [r0, #0]
 8009f6a:	f04f 0800 	mov.w	r8, #0
 8009f6e:	07eb      	lsls	r3, r5, #31
 8009f70:	d50a      	bpl.n	8009f88 <__pow5mult+0x74>
 8009f72:	4639      	mov	r1, r7
 8009f74:	4622      	mov	r2, r4
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7ff ff36 	bl	8009de8 <__multiply>
 8009f7c:	4639      	mov	r1, r7
 8009f7e:	4681      	mov	r9, r0
 8009f80:	4630      	mov	r0, r6
 8009f82:	f7ff fe88 	bl	8009c96 <_Bfree>
 8009f86:	464f      	mov	r7, r9
 8009f88:	106d      	asrs	r5, r5, #1
 8009f8a:	d00b      	beq.n	8009fa4 <__pow5mult+0x90>
 8009f8c:	6820      	ldr	r0, [r4, #0]
 8009f8e:	b938      	cbnz	r0, 8009fa0 <__pow5mult+0x8c>
 8009f90:	4622      	mov	r2, r4
 8009f92:	4621      	mov	r1, r4
 8009f94:	4630      	mov	r0, r6
 8009f96:	f7ff ff27 	bl	8009de8 <__multiply>
 8009f9a:	6020      	str	r0, [r4, #0]
 8009f9c:	f8c0 8000 	str.w	r8, [r0]
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	e7e4      	b.n	8009f6e <__pow5mult+0x5a>
 8009fa4:	4638      	mov	r0, r7
 8009fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009faa:	bf00      	nop
 8009fac:	0800cce0 	.word	0x0800cce0

08009fb0 <__lshift>:
 8009fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	6849      	ldr	r1, [r1, #4]
 8009fbe:	eb0a 0903 	add.w	r9, sl, r3
 8009fc2:	68a3      	ldr	r3, [r4, #8]
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	4616      	mov	r6, r2
 8009fc8:	f109 0501 	add.w	r5, r9, #1
 8009fcc:	42ab      	cmp	r3, r5
 8009fce:	db32      	blt.n	800a036 <__lshift+0x86>
 8009fd0:	4638      	mov	r0, r7
 8009fd2:	f7ff fe2c 	bl	8009c2e <_Balloc>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	4680      	mov	r8, r0
 8009fda:	f100 0114 	add.w	r1, r0, #20
 8009fde:	461a      	mov	r2, r3
 8009fe0:	4553      	cmp	r3, sl
 8009fe2:	db2b      	blt.n	800a03c <__lshift+0x8c>
 8009fe4:	6920      	ldr	r0, [r4, #16]
 8009fe6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fea:	f104 0314 	add.w	r3, r4, #20
 8009fee:	f016 021f 	ands.w	r2, r6, #31
 8009ff2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ff6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ffa:	d025      	beq.n	800a048 <__lshift+0x98>
 8009ffc:	f1c2 0e20 	rsb	lr, r2, #32
 800a000:	2000      	movs	r0, #0
 800a002:	681e      	ldr	r6, [r3, #0]
 800a004:	468a      	mov	sl, r1
 800a006:	4096      	lsls	r6, r2
 800a008:	4330      	orrs	r0, r6
 800a00a:	f84a 0b04 	str.w	r0, [sl], #4
 800a00e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a012:	459c      	cmp	ip, r3
 800a014:	fa20 f00e 	lsr.w	r0, r0, lr
 800a018:	d814      	bhi.n	800a044 <__lshift+0x94>
 800a01a:	6048      	str	r0, [r1, #4]
 800a01c:	b108      	cbz	r0, 800a022 <__lshift+0x72>
 800a01e:	f109 0502 	add.w	r5, r9, #2
 800a022:	3d01      	subs	r5, #1
 800a024:	4638      	mov	r0, r7
 800a026:	f8c8 5010 	str.w	r5, [r8, #16]
 800a02a:	4621      	mov	r1, r4
 800a02c:	f7ff fe33 	bl	8009c96 <_Bfree>
 800a030:	4640      	mov	r0, r8
 800a032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a036:	3101      	adds	r1, #1
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	e7c7      	b.n	8009fcc <__lshift+0x1c>
 800a03c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a040:	3301      	adds	r3, #1
 800a042:	e7cd      	b.n	8009fe0 <__lshift+0x30>
 800a044:	4651      	mov	r1, sl
 800a046:	e7dc      	b.n	800a002 <__lshift+0x52>
 800a048:	3904      	subs	r1, #4
 800a04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a052:	459c      	cmp	ip, r3
 800a054:	d8f9      	bhi.n	800a04a <__lshift+0x9a>
 800a056:	e7e4      	b.n	800a022 <__lshift+0x72>

0800a058 <__mcmp>:
 800a058:	6903      	ldr	r3, [r0, #16]
 800a05a:	690a      	ldr	r2, [r1, #16]
 800a05c:	1a9b      	subs	r3, r3, r2
 800a05e:	b530      	push	{r4, r5, lr}
 800a060:	d10c      	bne.n	800a07c <__mcmp+0x24>
 800a062:	0092      	lsls	r2, r2, #2
 800a064:	3014      	adds	r0, #20
 800a066:	3114      	adds	r1, #20
 800a068:	1884      	adds	r4, r0, r2
 800a06a:	4411      	add	r1, r2
 800a06c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a070:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a074:	4295      	cmp	r5, r2
 800a076:	d003      	beq.n	800a080 <__mcmp+0x28>
 800a078:	d305      	bcc.n	800a086 <__mcmp+0x2e>
 800a07a:	2301      	movs	r3, #1
 800a07c:	4618      	mov	r0, r3
 800a07e:	bd30      	pop	{r4, r5, pc}
 800a080:	42a0      	cmp	r0, r4
 800a082:	d3f3      	bcc.n	800a06c <__mcmp+0x14>
 800a084:	e7fa      	b.n	800a07c <__mcmp+0x24>
 800a086:	f04f 33ff 	mov.w	r3, #4294967295
 800a08a:	e7f7      	b.n	800a07c <__mcmp+0x24>

0800a08c <__mdiff>:
 800a08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a090:	460d      	mov	r5, r1
 800a092:	4607      	mov	r7, r0
 800a094:	4611      	mov	r1, r2
 800a096:	4628      	mov	r0, r5
 800a098:	4614      	mov	r4, r2
 800a09a:	f7ff ffdd 	bl	800a058 <__mcmp>
 800a09e:	1e06      	subs	r6, r0, #0
 800a0a0:	d108      	bne.n	800a0b4 <__mdiff+0x28>
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	4638      	mov	r0, r7
 800a0a6:	f7ff fdc2 	bl	8009c2e <_Balloc>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b4:	bfa4      	itt	ge
 800a0b6:	4623      	movge	r3, r4
 800a0b8:	462c      	movge	r4, r5
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	6861      	ldr	r1, [r4, #4]
 800a0be:	bfa6      	itte	ge
 800a0c0:	461d      	movge	r5, r3
 800a0c2:	2600      	movge	r6, #0
 800a0c4:	2601      	movlt	r6, #1
 800a0c6:	f7ff fdb2 	bl	8009c2e <_Balloc>
 800a0ca:	692b      	ldr	r3, [r5, #16]
 800a0cc:	60c6      	str	r6, [r0, #12]
 800a0ce:	6926      	ldr	r6, [r4, #16]
 800a0d0:	f105 0914 	add.w	r9, r5, #20
 800a0d4:	f104 0214 	add.w	r2, r4, #20
 800a0d8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a0dc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a0e0:	f100 0514 	add.w	r5, r0, #20
 800a0e4:	f04f 0e00 	mov.w	lr, #0
 800a0e8:	f852 ab04 	ldr.w	sl, [r2], #4
 800a0ec:	f859 4b04 	ldr.w	r4, [r9], #4
 800a0f0:	fa1e f18a 	uxtah	r1, lr, sl
 800a0f4:	b2a3      	uxth	r3, r4
 800a0f6:	1ac9      	subs	r1, r1, r3
 800a0f8:	0c23      	lsrs	r3, r4, #16
 800a0fa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a0fe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a102:	b289      	uxth	r1, r1
 800a104:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a108:	45c8      	cmp	r8, r9
 800a10a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a10e:	4694      	mov	ip, r2
 800a110:	f845 3b04 	str.w	r3, [r5], #4
 800a114:	d8e8      	bhi.n	800a0e8 <__mdiff+0x5c>
 800a116:	45bc      	cmp	ip, r7
 800a118:	d304      	bcc.n	800a124 <__mdiff+0x98>
 800a11a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a11e:	b183      	cbz	r3, 800a142 <__mdiff+0xb6>
 800a120:	6106      	str	r6, [r0, #16]
 800a122:	e7c5      	b.n	800a0b0 <__mdiff+0x24>
 800a124:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a128:	fa1e f381 	uxtah	r3, lr, r1
 800a12c:	141a      	asrs	r2, r3, #16
 800a12e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a132:	b29b      	uxth	r3, r3
 800a134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a138:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a13c:	f845 3b04 	str.w	r3, [r5], #4
 800a140:	e7e9      	b.n	800a116 <__mdiff+0x8a>
 800a142:	3e01      	subs	r6, #1
 800a144:	e7e9      	b.n	800a11a <__mdiff+0x8e>

0800a146 <__d2b>:
 800a146:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a14a:	460e      	mov	r6, r1
 800a14c:	2101      	movs	r1, #1
 800a14e:	ec59 8b10 	vmov	r8, r9, d0
 800a152:	4615      	mov	r5, r2
 800a154:	f7ff fd6b 	bl	8009c2e <_Balloc>
 800a158:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a15c:	4607      	mov	r7, r0
 800a15e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a162:	bb34      	cbnz	r4, 800a1b2 <__d2b+0x6c>
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	f1b8 0300 	subs.w	r3, r8, #0
 800a16a:	d027      	beq.n	800a1bc <__d2b+0x76>
 800a16c:	a802      	add	r0, sp, #8
 800a16e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a172:	f7ff fe01 	bl	8009d78 <__lo0bits>
 800a176:	9900      	ldr	r1, [sp, #0]
 800a178:	b1f0      	cbz	r0, 800a1b8 <__d2b+0x72>
 800a17a:	9a01      	ldr	r2, [sp, #4]
 800a17c:	f1c0 0320 	rsb	r3, r0, #32
 800a180:	fa02 f303 	lsl.w	r3, r2, r3
 800a184:	430b      	orrs	r3, r1
 800a186:	40c2      	lsrs	r2, r0
 800a188:	617b      	str	r3, [r7, #20]
 800a18a:	9201      	str	r2, [sp, #4]
 800a18c:	9b01      	ldr	r3, [sp, #4]
 800a18e:	61bb      	str	r3, [r7, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	bf14      	ite	ne
 800a194:	2102      	movne	r1, #2
 800a196:	2101      	moveq	r1, #1
 800a198:	6139      	str	r1, [r7, #16]
 800a19a:	b1c4      	cbz	r4, 800a1ce <__d2b+0x88>
 800a19c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a1a0:	4404      	add	r4, r0
 800a1a2:	6034      	str	r4, [r6, #0]
 800a1a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1a8:	6028      	str	r0, [r5, #0]
 800a1aa:	4638      	mov	r0, r7
 800a1ac:	b003      	add	sp, #12
 800a1ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1b6:	e7d5      	b.n	800a164 <__d2b+0x1e>
 800a1b8:	6179      	str	r1, [r7, #20]
 800a1ba:	e7e7      	b.n	800a18c <__d2b+0x46>
 800a1bc:	a801      	add	r0, sp, #4
 800a1be:	f7ff fddb 	bl	8009d78 <__lo0bits>
 800a1c2:	9b01      	ldr	r3, [sp, #4]
 800a1c4:	617b      	str	r3, [r7, #20]
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	6139      	str	r1, [r7, #16]
 800a1ca:	3020      	adds	r0, #32
 800a1cc:	e7e5      	b.n	800a19a <__d2b+0x54>
 800a1ce:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a1d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1d6:	6030      	str	r0, [r6, #0]
 800a1d8:	6918      	ldr	r0, [r3, #16]
 800a1da:	f7ff fdae 	bl	8009d3a <__hi0bits>
 800a1de:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a1e2:	e7e1      	b.n	800a1a8 <__d2b+0x62>

0800a1e4 <_calloc_r>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	fb02 f401 	mul.w	r4, r2, r1
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	f000 f856 	bl	800a29c <_malloc_r>
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	b118      	cbz	r0, 800a1fc <_calloc_r+0x18>
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	f7fd ff02 	bl	8008000 <memset>
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	bd38      	pop	{r3, r4, r5, pc}

0800a200 <_free_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4605      	mov	r5, r0
 800a204:	2900      	cmp	r1, #0
 800a206:	d045      	beq.n	800a294 <_free_r+0x94>
 800a208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a20c:	1f0c      	subs	r4, r1, #4
 800a20e:	2b00      	cmp	r3, #0
 800a210:	bfb8      	it	lt
 800a212:	18e4      	addlt	r4, r4, r3
 800a214:	f000 fc03 	bl	800aa1e <__malloc_lock>
 800a218:	4a1f      	ldr	r2, [pc, #124]	; (800a298 <_free_r+0x98>)
 800a21a:	6813      	ldr	r3, [r2, #0]
 800a21c:	4610      	mov	r0, r2
 800a21e:	b933      	cbnz	r3, 800a22e <_free_r+0x2e>
 800a220:	6063      	str	r3, [r4, #4]
 800a222:	6014      	str	r4, [r2, #0]
 800a224:	4628      	mov	r0, r5
 800a226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a22a:	f000 bbf9 	b.w	800aa20 <__malloc_unlock>
 800a22e:	42a3      	cmp	r3, r4
 800a230:	d90c      	bls.n	800a24c <_free_r+0x4c>
 800a232:	6821      	ldr	r1, [r4, #0]
 800a234:	1862      	adds	r2, r4, r1
 800a236:	4293      	cmp	r3, r2
 800a238:	bf04      	itt	eq
 800a23a:	681a      	ldreq	r2, [r3, #0]
 800a23c:	685b      	ldreq	r3, [r3, #4]
 800a23e:	6063      	str	r3, [r4, #4]
 800a240:	bf04      	itt	eq
 800a242:	1852      	addeq	r2, r2, r1
 800a244:	6022      	streq	r2, [r4, #0]
 800a246:	6004      	str	r4, [r0, #0]
 800a248:	e7ec      	b.n	800a224 <_free_r+0x24>
 800a24a:	4613      	mov	r3, r2
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	b10a      	cbz	r2, 800a254 <_free_r+0x54>
 800a250:	42a2      	cmp	r2, r4
 800a252:	d9fa      	bls.n	800a24a <_free_r+0x4a>
 800a254:	6819      	ldr	r1, [r3, #0]
 800a256:	1858      	adds	r0, r3, r1
 800a258:	42a0      	cmp	r0, r4
 800a25a:	d10b      	bne.n	800a274 <_free_r+0x74>
 800a25c:	6820      	ldr	r0, [r4, #0]
 800a25e:	4401      	add	r1, r0
 800a260:	1858      	adds	r0, r3, r1
 800a262:	4282      	cmp	r2, r0
 800a264:	6019      	str	r1, [r3, #0]
 800a266:	d1dd      	bne.n	800a224 <_free_r+0x24>
 800a268:	6810      	ldr	r0, [r2, #0]
 800a26a:	6852      	ldr	r2, [r2, #4]
 800a26c:	605a      	str	r2, [r3, #4]
 800a26e:	4401      	add	r1, r0
 800a270:	6019      	str	r1, [r3, #0]
 800a272:	e7d7      	b.n	800a224 <_free_r+0x24>
 800a274:	d902      	bls.n	800a27c <_free_r+0x7c>
 800a276:	230c      	movs	r3, #12
 800a278:	602b      	str	r3, [r5, #0]
 800a27a:	e7d3      	b.n	800a224 <_free_r+0x24>
 800a27c:	6820      	ldr	r0, [r4, #0]
 800a27e:	1821      	adds	r1, r4, r0
 800a280:	428a      	cmp	r2, r1
 800a282:	bf04      	itt	eq
 800a284:	6811      	ldreq	r1, [r2, #0]
 800a286:	6852      	ldreq	r2, [r2, #4]
 800a288:	6062      	str	r2, [r4, #4]
 800a28a:	bf04      	itt	eq
 800a28c:	1809      	addeq	r1, r1, r0
 800a28e:	6021      	streq	r1, [r4, #0]
 800a290:	605c      	str	r4, [r3, #4]
 800a292:	e7c7      	b.n	800a224 <_free_r+0x24>
 800a294:	bd38      	pop	{r3, r4, r5, pc}
 800a296:	bf00      	nop
 800a298:	2000064c 	.word	0x2000064c

0800a29c <_malloc_r>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	1ccd      	adds	r5, r1, #3
 800a2a0:	f025 0503 	bic.w	r5, r5, #3
 800a2a4:	3508      	adds	r5, #8
 800a2a6:	2d0c      	cmp	r5, #12
 800a2a8:	bf38      	it	cc
 800a2aa:	250c      	movcc	r5, #12
 800a2ac:	2d00      	cmp	r5, #0
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	db01      	blt.n	800a2b6 <_malloc_r+0x1a>
 800a2b2:	42a9      	cmp	r1, r5
 800a2b4:	d903      	bls.n	800a2be <_malloc_r+0x22>
 800a2b6:	230c      	movs	r3, #12
 800a2b8:	6033      	str	r3, [r6, #0]
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	bd70      	pop	{r4, r5, r6, pc}
 800a2be:	f000 fbae 	bl	800aa1e <__malloc_lock>
 800a2c2:	4a21      	ldr	r2, [pc, #132]	; (800a348 <_malloc_r+0xac>)
 800a2c4:	6814      	ldr	r4, [r2, #0]
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	b991      	cbnz	r1, 800a2f0 <_malloc_r+0x54>
 800a2ca:	4c20      	ldr	r4, [pc, #128]	; (800a34c <_malloc_r+0xb0>)
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	b91b      	cbnz	r3, 800a2d8 <_malloc_r+0x3c>
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f000 facf 	bl	800a874 <_sbrk_r>
 800a2d6:	6020      	str	r0, [r4, #0]
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f000 faca 	bl	800a874 <_sbrk_r>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d124      	bne.n	800a32e <_malloc_r+0x92>
 800a2e4:	230c      	movs	r3, #12
 800a2e6:	6033      	str	r3, [r6, #0]
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	f000 fb99 	bl	800aa20 <__malloc_unlock>
 800a2ee:	e7e4      	b.n	800a2ba <_malloc_r+0x1e>
 800a2f0:	680b      	ldr	r3, [r1, #0]
 800a2f2:	1b5b      	subs	r3, r3, r5
 800a2f4:	d418      	bmi.n	800a328 <_malloc_r+0x8c>
 800a2f6:	2b0b      	cmp	r3, #11
 800a2f8:	d90f      	bls.n	800a31a <_malloc_r+0x7e>
 800a2fa:	600b      	str	r3, [r1, #0]
 800a2fc:	50cd      	str	r5, [r1, r3]
 800a2fe:	18cc      	adds	r4, r1, r3
 800a300:	4630      	mov	r0, r6
 800a302:	f000 fb8d 	bl	800aa20 <__malloc_unlock>
 800a306:	f104 000b 	add.w	r0, r4, #11
 800a30a:	1d23      	adds	r3, r4, #4
 800a30c:	f020 0007 	bic.w	r0, r0, #7
 800a310:	1ac3      	subs	r3, r0, r3
 800a312:	d0d3      	beq.n	800a2bc <_malloc_r+0x20>
 800a314:	425a      	negs	r2, r3
 800a316:	50e2      	str	r2, [r4, r3]
 800a318:	e7d0      	b.n	800a2bc <_malloc_r+0x20>
 800a31a:	428c      	cmp	r4, r1
 800a31c:	684b      	ldr	r3, [r1, #4]
 800a31e:	bf16      	itet	ne
 800a320:	6063      	strne	r3, [r4, #4]
 800a322:	6013      	streq	r3, [r2, #0]
 800a324:	460c      	movne	r4, r1
 800a326:	e7eb      	b.n	800a300 <_malloc_r+0x64>
 800a328:	460c      	mov	r4, r1
 800a32a:	6849      	ldr	r1, [r1, #4]
 800a32c:	e7cc      	b.n	800a2c8 <_malloc_r+0x2c>
 800a32e:	1cc4      	adds	r4, r0, #3
 800a330:	f024 0403 	bic.w	r4, r4, #3
 800a334:	42a0      	cmp	r0, r4
 800a336:	d005      	beq.n	800a344 <_malloc_r+0xa8>
 800a338:	1a21      	subs	r1, r4, r0
 800a33a:	4630      	mov	r0, r6
 800a33c:	f000 fa9a 	bl	800a874 <_sbrk_r>
 800a340:	3001      	adds	r0, #1
 800a342:	d0cf      	beq.n	800a2e4 <_malloc_r+0x48>
 800a344:	6025      	str	r5, [r4, #0]
 800a346:	e7db      	b.n	800a300 <_malloc_r+0x64>
 800a348:	2000064c 	.word	0x2000064c
 800a34c:	20000650 	.word	0x20000650

0800a350 <__ssputs_r>:
 800a350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a354:	688e      	ldr	r6, [r1, #8]
 800a356:	429e      	cmp	r6, r3
 800a358:	4682      	mov	sl, r0
 800a35a:	460c      	mov	r4, r1
 800a35c:	4690      	mov	r8, r2
 800a35e:	4699      	mov	r9, r3
 800a360:	d837      	bhi.n	800a3d2 <__ssputs_r+0x82>
 800a362:	898a      	ldrh	r2, [r1, #12]
 800a364:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a368:	d031      	beq.n	800a3ce <__ssputs_r+0x7e>
 800a36a:	6825      	ldr	r5, [r4, #0]
 800a36c:	6909      	ldr	r1, [r1, #16]
 800a36e:	1a6f      	subs	r7, r5, r1
 800a370:	6965      	ldr	r5, [r4, #20]
 800a372:	2302      	movs	r3, #2
 800a374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a378:	fb95 f5f3 	sdiv	r5, r5, r3
 800a37c:	f109 0301 	add.w	r3, r9, #1
 800a380:	443b      	add	r3, r7
 800a382:	429d      	cmp	r5, r3
 800a384:	bf38      	it	cc
 800a386:	461d      	movcc	r5, r3
 800a388:	0553      	lsls	r3, r2, #21
 800a38a:	d530      	bpl.n	800a3ee <__ssputs_r+0x9e>
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7ff ff85 	bl	800a29c <_malloc_r>
 800a392:	4606      	mov	r6, r0
 800a394:	b950      	cbnz	r0, 800a3ac <__ssputs_r+0x5c>
 800a396:	230c      	movs	r3, #12
 800a398:	f8ca 3000 	str.w	r3, [sl]
 800a39c:	89a3      	ldrh	r3, [r4, #12]
 800a39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a2:	81a3      	strh	r3, [r4, #12]
 800a3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ac:	463a      	mov	r2, r7
 800a3ae:	6921      	ldr	r1, [r4, #16]
 800a3b0:	f7ff fc32 	bl	8009c18 <memcpy>
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3be:	81a3      	strh	r3, [r4, #12]
 800a3c0:	6126      	str	r6, [r4, #16]
 800a3c2:	6165      	str	r5, [r4, #20]
 800a3c4:	443e      	add	r6, r7
 800a3c6:	1bed      	subs	r5, r5, r7
 800a3c8:	6026      	str	r6, [r4, #0]
 800a3ca:	60a5      	str	r5, [r4, #8]
 800a3cc:	464e      	mov	r6, r9
 800a3ce:	454e      	cmp	r6, r9
 800a3d0:	d900      	bls.n	800a3d4 <__ssputs_r+0x84>
 800a3d2:	464e      	mov	r6, r9
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	4641      	mov	r1, r8
 800a3d8:	6820      	ldr	r0, [r4, #0]
 800a3da:	f000 fb07 	bl	800a9ec <memmove>
 800a3de:	68a3      	ldr	r3, [r4, #8]
 800a3e0:	1b9b      	subs	r3, r3, r6
 800a3e2:	60a3      	str	r3, [r4, #8]
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	441e      	add	r6, r3
 800a3e8:	6026      	str	r6, [r4, #0]
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	e7dc      	b.n	800a3a8 <__ssputs_r+0x58>
 800a3ee:	462a      	mov	r2, r5
 800a3f0:	f000 fb17 	bl	800aa22 <_realloc_r>
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d1e2      	bne.n	800a3c0 <__ssputs_r+0x70>
 800a3fa:	6921      	ldr	r1, [r4, #16]
 800a3fc:	4650      	mov	r0, sl
 800a3fe:	f7ff feff 	bl	800a200 <_free_r>
 800a402:	e7c8      	b.n	800a396 <__ssputs_r+0x46>

0800a404 <_svfiprintf_r>:
 800a404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a408:	461d      	mov	r5, r3
 800a40a:	898b      	ldrh	r3, [r1, #12]
 800a40c:	061f      	lsls	r7, r3, #24
 800a40e:	b09d      	sub	sp, #116	; 0x74
 800a410:	4680      	mov	r8, r0
 800a412:	460c      	mov	r4, r1
 800a414:	4616      	mov	r6, r2
 800a416:	d50f      	bpl.n	800a438 <_svfiprintf_r+0x34>
 800a418:	690b      	ldr	r3, [r1, #16]
 800a41a:	b96b      	cbnz	r3, 800a438 <_svfiprintf_r+0x34>
 800a41c:	2140      	movs	r1, #64	; 0x40
 800a41e:	f7ff ff3d 	bl	800a29c <_malloc_r>
 800a422:	6020      	str	r0, [r4, #0]
 800a424:	6120      	str	r0, [r4, #16]
 800a426:	b928      	cbnz	r0, 800a434 <_svfiprintf_r+0x30>
 800a428:	230c      	movs	r3, #12
 800a42a:	f8c8 3000 	str.w	r3, [r8]
 800a42e:	f04f 30ff 	mov.w	r0, #4294967295
 800a432:	e0c8      	b.n	800a5c6 <_svfiprintf_r+0x1c2>
 800a434:	2340      	movs	r3, #64	; 0x40
 800a436:	6163      	str	r3, [r4, #20]
 800a438:	2300      	movs	r3, #0
 800a43a:	9309      	str	r3, [sp, #36]	; 0x24
 800a43c:	2320      	movs	r3, #32
 800a43e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a442:	2330      	movs	r3, #48	; 0x30
 800a444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a448:	9503      	str	r5, [sp, #12]
 800a44a:	f04f 0b01 	mov.w	fp, #1
 800a44e:	4637      	mov	r7, r6
 800a450:	463d      	mov	r5, r7
 800a452:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a456:	b10b      	cbz	r3, 800a45c <_svfiprintf_r+0x58>
 800a458:	2b25      	cmp	r3, #37	; 0x25
 800a45a:	d13e      	bne.n	800a4da <_svfiprintf_r+0xd6>
 800a45c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a460:	d00b      	beq.n	800a47a <_svfiprintf_r+0x76>
 800a462:	4653      	mov	r3, sl
 800a464:	4632      	mov	r2, r6
 800a466:	4621      	mov	r1, r4
 800a468:	4640      	mov	r0, r8
 800a46a:	f7ff ff71 	bl	800a350 <__ssputs_r>
 800a46e:	3001      	adds	r0, #1
 800a470:	f000 80a4 	beq.w	800a5bc <_svfiprintf_r+0x1b8>
 800a474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a476:	4453      	add	r3, sl
 800a478:	9309      	str	r3, [sp, #36]	; 0x24
 800a47a:	783b      	ldrb	r3, [r7, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 809d 	beq.w	800a5bc <_svfiprintf_r+0x1b8>
 800a482:	2300      	movs	r3, #0
 800a484:	f04f 32ff 	mov.w	r2, #4294967295
 800a488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a48c:	9304      	str	r3, [sp, #16]
 800a48e:	9307      	str	r3, [sp, #28]
 800a490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a494:	931a      	str	r3, [sp, #104]	; 0x68
 800a496:	462f      	mov	r7, r5
 800a498:	2205      	movs	r2, #5
 800a49a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a49e:	4850      	ldr	r0, [pc, #320]	; (800a5e0 <_svfiprintf_r+0x1dc>)
 800a4a0:	f7f5 fe9e 	bl	80001e0 <memchr>
 800a4a4:	9b04      	ldr	r3, [sp, #16]
 800a4a6:	b9d0      	cbnz	r0, 800a4de <_svfiprintf_r+0xda>
 800a4a8:	06d9      	lsls	r1, r3, #27
 800a4aa:	bf44      	itt	mi
 800a4ac:	2220      	movmi	r2, #32
 800a4ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a4b2:	071a      	lsls	r2, r3, #28
 800a4b4:	bf44      	itt	mi
 800a4b6:	222b      	movmi	r2, #43	; 0x2b
 800a4b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a4bc:	782a      	ldrb	r2, [r5, #0]
 800a4be:	2a2a      	cmp	r2, #42	; 0x2a
 800a4c0:	d015      	beq.n	800a4ee <_svfiprintf_r+0xea>
 800a4c2:	9a07      	ldr	r2, [sp, #28]
 800a4c4:	462f      	mov	r7, r5
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	250a      	movs	r5, #10
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4d0:	3b30      	subs	r3, #48	; 0x30
 800a4d2:	2b09      	cmp	r3, #9
 800a4d4:	d94d      	bls.n	800a572 <_svfiprintf_r+0x16e>
 800a4d6:	b1b8      	cbz	r0, 800a508 <_svfiprintf_r+0x104>
 800a4d8:	e00f      	b.n	800a4fa <_svfiprintf_r+0xf6>
 800a4da:	462f      	mov	r7, r5
 800a4dc:	e7b8      	b.n	800a450 <_svfiprintf_r+0x4c>
 800a4de:	4a40      	ldr	r2, [pc, #256]	; (800a5e0 <_svfiprintf_r+0x1dc>)
 800a4e0:	1a80      	subs	r0, r0, r2
 800a4e2:	fa0b f000 	lsl.w	r0, fp, r0
 800a4e6:	4318      	orrs	r0, r3
 800a4e8:	9004      	str	r0, [sp, #16]
 800a4ea:	463d      	mov	r5, r7
 800a4ec:	e7d3      	b.n	800a496 <_svfiprintf_r+0x92>
 800a4ee:	9a03      	ldr	r2, [sp, #12]
 800a4f0:	1d11      	adds	r1, r2, #4
 800a4f2:	6812      	ldr	r2, [r2, #0]
 800a4f4:	9103      	str	r1, [sp, #12]
 800a4f6:	2a00      	cmp	r2, #0
 800a4f8:	db01      	blt.n	800a4fe <_svfiprintf_r+0xfa>
 800a4fa:	9207      	str	r2, [sp, #28]
 800a4fc:	e004      	b.n	800a508 <_svfiprintf_r+0x104>
 800a4fe:	4252      	negs	r2, r2
 800a500:	f043 0302 	orr.w	r3, r3, #2
 800a504:	9207      	str	r2, [sp, #28]
 800a506:	9304      	str	r3, [sp, #16]
 800a508:	783b      	ldrb	r3, [r7, #0]
 800a50a:	2b2e      	cmp	r3, #46	; 0x2e
 800a50c:	d10c      	bne.n	800a528 <_svfiprintf_r+0x124>
 800a50e:	787b      	ldrb	r3, [r7, #1]
 800a510:	2b2a      	cmp	r3, #42	; 0x2a
 800a512:	d133      	bne.n	800a57c <_svfiprintf_r+0x178>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	1d1a      	adds	r2, r3, #4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	9203      	str	r2, [sp, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bfb8      	it	lt
 800a520:	f04f 33ff 	movlt.w	r3, #4294967295
 800a524:	3702      	adds	r7, #2
 800a526:	9305      	str	r3, [sp, #20]
 800a528:	4d2e      	ldr	r5, [pc, #184]	; (800a5e4 <_svfiprintf_r+0x1e0>)
 800a52a:	7839      	ldrb	r1, [r7, #0]
 800a52c:	2203      	movs	r2, #3
 800a52e:	4628      	mov	r0, r5
 800a530:	f7f5 fe56 	bl	80001e0 <memchr>
 800a534:	b138      	cbz	r0, 800a546 <_svfiprintf_r+0x142>
 800a536:	2340      	movs	r3, #64	; 0x40
 800a538:	1b40      	subs	r0, r0, r5
 800a53a:	fa03 f000 	lsl.w	r0, r3, r0
 800a53e:	9b04      	ldr	r3, [sp, #16]
 800a540:	4303      	orrs	r3, r0
 800a542:	3701      	adds	r7, #1
 800a544:	9304      	str	r3, [sp, #16]
 800a546:	7839      	ldrb	r1, [r7, #0]
 800a548:	4827      	ldr	r0, [pc, #156]	; (800a5e8 <_svfiprintf_r+0x1e4>)
 800a54a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a54e:	2206      	movs	r2, #6
 800a550:	1c7e      	adds	r6, r7, #1
 800a552:	f7f5 fe45 	bl	80001e0 <memchr>
 800a556:	2800      	cmp	r0, #0
 800a558:	d038      	beq.n	800a5cc <_svfiprintf_r+0x1c8>
 800a55a:	4b24      	ldr	r3, [pc, #144]	; (800a5ec <_svfiprintf_r+0x1e8>)
 800a55c:	bb13      	cbnz	r3, 800a5a4 <_svfiprintf_r+0x1a0>
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	3307      	adds	r3, #7
 800a562:	f023 0307 	bic.w	r3, r3, #7
 800a566:	3308      	adds	r3, #8
 800a568:	9303      	str	r3, [sp, #12]
 800a56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a56c:	444b      	add	r3, r9
 800a56e:	9309      	str	r3, [sp, #36]	; 0x24
 800a570:	e76d      	b.n	800a44e <_svfiprintf_r+0x4a>
 800a572:	fb05 3202 	mla	r2, r5, r2, r3
 800a576:	2001      	movs	r0, #1
 800a578:	460f      	mov	r7, r1
 800a57a:	e7a6      	b.n	800a4ca <_svfiprintf_r+0xc6>
 800a57c:	2300      	movs	r3, #0
 800a57e:	3701      	adds	r7, #1
 800a580:	9305      	str	r3, [sp, #20]
 800a582:	4619      	mov	r1, r3
 800a584:	250a      	movs	r5, #10
 800a586:	4638      	mov	r0, r7
 800a588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a58c:	3a30      	subs	r2, #48	; 0x30
 800a58e:	2a09      	cmp	r2, #9
 800a590:	d903      	bls.n	800a59a <_svfiprintf_r+0x196>
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0c8      	beq.n	800a528 <_svfiprintf_r+0x124>
 800a596:	9105      	str	r1, [sp, #20]
 800a598:	e7c6      	b.n	800a528 <_svfiprintf_r+0x124>
 800a59a:	fb05 2101 	mla	r1, r5, r1, r2
 800a59e:	2301      	movs	r3, #1
 800a5a0:	4607      	mov	r7, r0
 800a5a2:	e7f0      	b.n	800a586 <_svfiprintf_r+0x182>
 800a5a4:	ab03      	add	r3, sp, #12
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	4622      	mov	r2, r4
 800a5aa:	4b11      	ldr	r3, [pc, #68]	; (800a5f0 <_svfiprintf_r+0x1ec>)
 800a5ac:	a904      	add	r1, sp, #16
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	f7fd fdc2 	bl	8008138 <_printf_float>
 800a5b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a5b8:	4681      	mov	r9, r0
 800a5ba:	d1d6      	bne.n	800a56a <_svfiprintf_r+0x166>
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	065b      	lsls	r3, r3, #25
 800a5c0:	f53f af35 	bmi.w	800a42e <_svfiprintf_r+0x2a>
 800a5c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5c6:	b01d      	add	sp, #116	; 0x74
 800a5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5cc:	ab03      	add	r3, sp, #12
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	4622      	mov	r2, r4
 800a5d2:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <_svfiprintf_r+0x1ec>)
 800a5d4:	a904      	add	r1, sp, #16
 800a5d6:	4640      	mov	r0, r8
 800a5d8:	f7fe f864 	bl	80086a4 <_printf_i>
 800a5dc:	e7ea      	b.n	800a5b4 <_svfiprintf_r+0x1b0>
 800a5de:	bf00      	nop
 800a5e0:	0800ccec 	.word	0x0800ccec
 800a5e4:	0800ccf2 	.word	0x0800ccf2
 800a5e8:	0800ccf6 	.word	0x0800ccf6
 800a5ec:	08008139 	.word	0x08008139
 800a5f0:	0800a351 	.word	0x0800a351

0800a5f4 <__sfputc_r>:
 800a5f4:	6893      	ldr	r3, [r2, #8]
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	b410      	push	{r4}
 800a5fc:	6093      	str	r3, [r2, #8]
 800a5fe:	da08      	bge.n	800a612 <__sfputc_r+0x1e>
 800a600:	6994      	ldr	r4, [r2, #24]
 800a602:	42a3      	cmp	r3, r4
 800a604:	db01      	blt.n	800a60a <__sfputc_r+0x16>
 800a606:	290a      	cmp	r1, #10
 800a608:	d103      	bne.n	800a612 <__sfputc_r+0x1e>
 800a60a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a60e:	f7fe ba0b 	b.w	8008a28 <__swbuf_r>
 800a612:	6813      	ldr	r3, [r2, #0]
 800a614:	1c58      	adds	r0, r3, #1
 800a616:	6010      	str	r0, [r2, #0]
 800a618:	7019      	strb	r1, [r3, #0]
 800a61a:	4608      	mov	r0, r1
 800a61c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <__sfputs_r>:
 800a622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a624:	4606      	mov	r6, r0
 800a626:	460f      	mov	r7, r1
 800a628:	4614      	mov	r4, r2
 800a62a:	18d5      	adds	r5, r2, r3
 800a62c:	42ac      	cmp	r4, r5
 800a62e:	d101      	bne.n	800a634 <__sfputs_r+0x12>
 800a630:	2000      	movs	r0, #0
 800a632:	e007      	b.n	800a644 <__sfputs_r+0x22>
 800a634:	463a      	mov	r2, r7
 800a636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a63a:	4630      	mov	r0, r6
 800a63c:	f7ff ffda 	bl	800a5f4 <__sfputc_r>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d1f3      	bne.n	800a62c <__sfputs_r+0xa>
 800a644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a648 <_vfiprintf_r>:
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64c:	460c      	mov	r4, r1
 800a64e:	b09d      	sub	sp, #116	; 0x74
 800a650:	4617      	mov	r7, r2
 800a652:	461d      	mov	r5, r3
 800a654:	4606      	mov	r6, r0
 800a656:	b118      	cbz	r0, 800a660 <_vfiprintf_r+0x18>
 800a658:	6983      	ldr	r3, [r0, #24]
 800a65a:	b90b      	cbnz	r3, 800a660 <_vfiprintf_r+0x18>
 800a65c:	f7ff f9d8 	bl	8009a10 <__sinit>
 800a660:	4b7c      	ldr	r3, [pc, #496]	; (800a854 <_vfiprintf_r+0x20c>)
 800a662:	429c      	cmp	r4, r3
 800a664:	d158      	bne.n	800a718 <_vfiprintf_r+0xd0>
 800a666:	6874      	ldr	r4, [r6, #4]
 800a668:	89a3      	ldrh	r3, [r4, #12]
 800a66a:	0718      	lsls	r0, r3, #28
 800a66c:	d55e      	bpl.n	800a72c <_vfiprintf_r+0xe4>
 800a66e:	6923      	ldr	r3, [r4, #16]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d05b      	beq.n	800a72c <_vfiprintf_r+0xe4>
 800a674:	2300      	movs	r3, #0
 800a676:	9309      	str	r3, [sp, #36]	; 0x24
 800a678:	2320      	movs	r3, #32
 800a67a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a67e:	2330      	movs	r3, #48	; 0x30
 800a680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a684:	9503      	str	r5, [sp, #12]
 800a686:	f04f 0b01 	mov.w	fp, #1
 800a68a:	46b8      	mov	r8, r7
 800a68c:	4645      	mov	r5, r8
 800a68e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a692:	b10b      	cbz	r3, 800a698 <_vfiprintf_r+0x50>
 800a694:	2b25      	cmp	r3, #37	; 0x25
 800a696:	d154      	bne.n	800a742 <_vfiprintf_r+0xfa>
 800a698:	ebb8 0a07 	subs.w	sl, r8, r7
 800a69c:	d00b      	beq.n	800a6b6 <_vfiprintf_r+0x6e>
 800a69e:	4653      	mov	r3, sl
 800a6a0:	463a      	mov	r2, r7
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7ff ffbc 	bl	800a622 <__sfputs_r>
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	f000 80c2 	beq.w	800a834 <_vfiprintf_r+0x1ec>
 800a6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b2:	4453      	add	r3, sl
 800a6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6b6:	f898 3000 	ldrb.w	r3, [r8]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 80ba 	beq.w	800a834 <_vfiprintf_r+0x1ec>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6ca:	9304      	str	r3, [sp, #16]
 800a6cc:	9307      	str	r3, [sp, #28]
 800a6ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a6d4:	46a8      	mov	r8, r5
 800a6d6:	2205      	movs	r2, #5
 800a6d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a6dc:	485e      	ldr	r0, [pc, #376]	; (800a858 <_vfiprintf_r+0x210>)
 800a6de:	f7f5 fd7f 	bl	80001e0 <memchr>
 800a6e2:	9b04      	ldr	r3, [sp, #16]
 800a6e4:	bb78      	cbnz	r0, 800a746 <_vfiprintf_r+0xfe>
 800a6e6:	06d9      	lsls	r1, r3, #27
 800a6e8:	bf44      	itt	mi
 800a6ea:	2220      	movmi	r2, #32
 800a6ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6f0:	071a      	lsls	r2, r3, #28
 800a6f2:	bf44      	itt	mi
 800a6f4:	222b      	movmi	r2, #43	; 0x2b
 800a6f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6fa:	782a      	ldrb	r2, [r5, #0]
 800a6fc:	2a2a      	cmp	r2, #42	; 0x2a
 800a6fe:	d02a      	beq.n	800a756 <_vfiprintf_r+0x10e>
 800a700:	9a07      	ldr	r2, [sp, #28]
 800a702:	46a8      	mov	r8, r5
 800a704:	2000      	movs	r0, #0
 800a706:	250a      	movs	r5, #10
 800a708:	4641      	mov	r1, r8
 800a70a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a70e:	3b30      	subs	r3, #48	; 0x30
 800a710:	2b09      	cmp	r3, #9
 800a712:	d969      	bls.n	800a7e8 <_vfiprintf_r+0x1a0>
 800a714:	b360      	cbz	r0, 800a770 <_vfiprintf_r+0x128>
 800a716:	e024      	b.n	800a762 <_vfiprintf_r+0x11a>
 800a718:	4b50      	ldr	r3, [pc, #320]	; (800a85c <_vfiprintf_r+0x214>)
 800a71a:	429c      	cmp	r4, r3
 800a71c:	d101      	bne.n	800a722 <_vfiprintf_r+0xda>
 800a71e:	68b4      	ldr	r4, [r6, #8]
 800a720:	e7a2      	b.n	800a668 <_vfiprintf_r+0x20>
 800a722:	4b4f      	ldr	r3, [pc, #316]	; (800a860 <_vfiprintf_r+0x218>)
 800a724:	429c      	cmp	r4, r3
 800a726:	bf08      	it	eq
 800a728:	68f4      	ldreq	r4, [r6, #12]
 800a72a:	e79d      	b.n	800a668 <_vfiprintf_r+0x20>
 800a72c:	4621      	mov	r1, r4
 800a72e:	4630      	mov	r0, r6
 800a730:	f7fe f9cc 	bl	8008acc <__swsetup_r>
 800a734:	2800      	cmp	r0, #0
 800a736:	d09d      	beq.n	800a674 <_vfiprintf_r+0x2c>
 800a738:	f04f 30ff 	mov.w	r0, #4294967295
 800a73c:	b01d      	add	sp, #116	; 0x74
 800a73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a742:	46a8      	mov	r8, r5
 800a744:	e7a2      	b.n	800a68c <_vfiprintf_r+0x44>
 800a746:	4a44      	ldr	r2, [pc, #272]	; (800a858 <_vfiprintf_r+0x210>)
 800a748:	1a80      	subs	r0, r0, r2
 800a74a:	fa0b f000 	lsl.w	r0, fp, r0
 800a74e:	4318      	orrs	r0, r3
 800a750:	9004      	str	r0, [sp, #16]
 800a752:	4645      	mov	r5, r8
 800a754:	e7be      	b.n	800a6d4 <_vfiprintf_r+0x8c>
 800a756:	9a03      	ldr	r2, [sp, #12]
 800a758:	1d11      	adds	r1, r2, #4
 800a75a:	6812      	ldr	r2, [r2, #0]
 800a75c:	9103      	str	r1, [sp, #12]
 800a75e:	2a00      	cmp	r2, #0
 800a760:	db01      	blt.n	800a766 <_vfiprintf_r+0x11e>
 800a762:	9207      	str	r2, [sp, #28]
 800a764:	e004      	b.n	800a770 <_vfiprintf_r+0x128>
 800a766:	4252      	negs	r2, r2
 800a768:	f043 0302 	orr.w	r3, r3, #2
 800a76c:	9207      	str	r2, [sp, #28]
 800a76e:	9304      	str	r3, [sp, #16]
 800a770:	f898 3000 	ldrb.w	r3, [r8]
 800a774:	2b2e      	cmp	r3, #46	; 0x2e
 800a776:	d10e      	bne.n	800a796 <_vfiprintf_r+0x14e>
 800a778:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a77c:	2b2a      	cmp	r3, #42	; 0x2a
 800a77e:	d138      	bne.n	800a7f2 <_vfiprintf_r+0x1aa>
 800a780:	9b03      	ldr	r3, [sp, #12]
 800a782:	1d1a      	adds	r2, r3, #4
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	9203      	str	r2, [sp, #12]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	bfb8      	it	lt
 800a78c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a790:	f108 0802 	add.w	r8, r8, #2
 800a794:	9305      	str	r3, [sp, #20]
 800a796:	4d33      	ldr	r5, [pc, #204]	; (800a864 <_vfiprintf_r+0x21c>)
 800a798:	f898 1000 	ldrb.w	r1, [r8]
 800a79c:	2203      	movs	r2, #3
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f7f5 fd1e 	bl	80001e0 <memchr>
 800a7a4:	b140      	cbz	r0, 800a7b8 <_vfiprintf_r+0x170>
 800a7a6:	2340      	movs	r3, #64	; 0x40
 800a7a8:	1b40      	subs	r0, r0, r5
 800a7aa:	fa03 f000 	lsl.w	r0, r3, r0
 800a7ae:	9b04      	ldr	r3, [sp, #16]
 800a7b0:	4303      	orrs	r3, r0
 800a7b2:	f108 0801 	add.w	r8, r8, #1
 800a7b6:	9304      	str	r3, [sp, #16]
 800a7b8:	f898 1000 	ldrb.w	r1, [r8]
 800a7bc:	482a      	ldr	r0, [pc, #168]	; (800a868 <_vfiprintf_r+0x220>)
 800a7be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7c2:	2206      	movs	r2, #6
 800a7c4:	f108 0701 	add.w	r7, r8, #1
 800a7c8:	f7f5 fd0a 	bl	80001e0 <memchr>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d037      	beq.n	800a840 <_vfiprintf_r+0x1f8>
 800a7d0:	4b26      	ldr	r3, [pc, #152]	; (800a86c <_vfiprintf_r+0x224>)
 800a7d2:	bb1b      	cbnz	r3, 800a81c <_vfiprintf_r+0x1d4>
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	3307      	adds	r3, #7
 800a7d8:	f023 0307 	bic.w	r3, r3, #7
 800a7dc:	3308      	adds	r3, #8
 800a7de:	9303      	str	r3, [sp, #12]
 800a7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e2:	444b      	add	r3, r9
 800a7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e6:	e750      	b.n	800a68a <_vfiprintf_r+0x42>
 800a7e8:	fb05 3202 	mla	r2, r5, r2, r3
 800a7ec:	2001      	movs	r0, #1
 800a7ee:	4688      	mov	r8, r1
 800a7f0:	e78a      	b.n	800a708 <_vfiprintf_r+0xc0>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f108 0801 	add.w	r8, r8, #1
 800a7f8:	9305      	str	r3, [sp, #20]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	250a      	movs	r5, #10
 800a7fe:	4640      	mov	r0, r8
 800a800:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a804:	3a30      	subs	r2, #48	; 0x30
 800a806:	2a09      	cmp	r2, #9
 800a808:	d903      	bls.n	800a812 <_vfiprintf_r+0x1ca>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0c3      	beq.n	800a796 <_vfiprintf_r+0x14e>
 800a80e:	9105      	str	r1, [sp, #20]
 800a810:	e7c1      	b.n	800a796 <_vfiprintf_r+0x14e>
 800a812:	fb05 2101 	mla	r1, r5, r1, r2
 800a816:	2301      	movs	r3, #1
 800a818:	4680      	mov	r8, r0
 800a81a:	e7f0      	b.n	800a7fe <_vfiprintf_r+0x1b6>
 800a81c:	ab03      	add	r3, sp, #12
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	4622      	mov	r2, r4
 800a822:	4b13      	ldr	r3, [pc, #76]	; (800a870 <_vfiprintf_r+0x228>)
 800a824:	a904      	add	r1, sp, #16
 800a826:	4630      	mov	r0, r6
 800a828:	f7fd fc86 	bl	8008138 <_printf_float>
 800a82c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a830:	4681      	mov	r9, r0
 800a832:	d1d5      	bne.n	800a7e0 <_vfiprintf_r+0x198>
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	065b      	lsls	r3, r3, #25
 800a838:	f53f af7e 	bmi.w	800a738 <_vfiprintf_r+0xf0>
 800a83c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a83e:	e77d      	b.n	800a73c <_vfiprintf_r+0xf4>
 800a840:	ab03      	add	r3, sp, #12
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	4622      	mov	r2, r4
 800a846:	4b0a      	ldr	r3, [pc, #40]	; (800a870 <_vfiprintf_r+0x228>)
 800a848:	a904      	add	r1, sp, #16
 800a84a:	4630      	mov	r0, r6
 800a84c:	f7fd ff2a 	bl	80086a4 <_printf_i>
 800a850:	e7ec      	b.n	800a82c <_vfiprintf_r+0x1e4>
 800a852:	bf00      	nop
 800a854:	0800cbac 	.word	0x0800cbac
 800a858:	0800ccec 	.word	0x0800ccec
 800a85c:	0800cbcc 	.word	0x0800cbcc
 800a860:	0800cb8c 	.word	0x0800cb8c
 800a864:	0800ccf2 	.word	0x0800ccf2
 800a868:	0800ccf6 	.word	0x0800ccf6
 800a86c:	08008139 	.word	0x08008139
 800a870:	0800a623 	.word	0x0800a623

0800a874 <_sbrk_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4c06      	ldr	r4, [pc, #24]	; (800a890 <_sbrk_r+0x1c>)
 800a878:	2300      	movs	r3, #0
 800a87a:	4605      	mov	r5, r0
 800a87c:	4608      	mov	r0, r1
 800a87e:	6023      	str	r3, [r4, #0]
 800a880:	f7f7 fca6 	bl	80021d0 <_sbrk>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_sbrk_r+0x1a>
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_sbrk_r+0x1a>
 800a88c:	602b      	str	r3, [r5, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	20000be8 	.word	0x20000be8

0800a894 <__sread>:
 800a894:	b510      	push	{r4, lr}
 800a896:	460c      	mov	r4, r1
 800a898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a89c:	f000 f8e8 	bl	800aa70 <_read_r>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	bfab      	itete	ge
 800a8a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8a6:	89a3      	ldrhlt	r3, [r4, #12]
 800a8a8:	181b      	addge	r3, r3, r0
 800a8aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8ae:	bfac      	ite	ge
 800a8b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8b2:	81a3      	strhlt	r3, [r4, #12]
 800a8b4:	bd10      	pop	{r4, pc}

0800a8b6 <__swrite>:
 800a8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ba:	461f      	mov	r7, r3
 800a8bc:	898b      	ldrh	r3, [r1, #12]
 800a8be:	05db      	lsls	r3, r3, #23
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	4616      	mov	r6, r2
 800a8c6:	d505      	bpl.n	800a8d4 <__swrite+0x1e>
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d0:	f000 f868 	bl	800a9a4 <_lseek_r>
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8de:	81a3      	strh	r3, [r4, #12]
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	463b      	mov	r3, r7
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ea:	f000 b817 	b.w	800a91c <_write_r>

0800a8ee <__sseek>:
 800a8ee:	b510      	push	{r4, lr}
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f6:	f000 f855 	bl	800a9a4 <_lseek_r>
 800a8fa:	1c43      	adds	r3, r0, #1
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	bf15      	itete	ne
 800a900:	6560      	strne	r0, [r4, #84]	; 0x54
 800a902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a90a:	81a3      	strheq	r3, [r4, #12]
 800a90c:	bf18      	it	ne
 800a90e:	81a3      	strhne	r3, [r4, #12]
 800a910:	bd10      	pop	{r4, pc}

0800a912 <__sclose>:
 800a912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a916:	f000 b813 	b.w	800a940 <_close_r>
	...

0800a91c <_write_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	4c07      	ldr	r4, [pc, #28]	; (800a93c <_write_r+0x20>)
 800a920:	4605      	mov	r5, r0
 800a922:	4608      	mov	r0, r1
 800a924:	4611      	mov	r1, r2
 800a926:	2200      	movs	r2, #0
 800a928:	6022      	str	r2, [r4, #0]
 800a92a:	461a      	mov	r2, r3
 800a92c:	f7f7 fbff 	bl	800212e <_write>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_write_r+0x1e>
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	b103      	cbz	r3, 800a93a <_write_r+0x1e>
 800a938:	602b      	str	r3, [r5, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	20000be8 	.word	0x20000be8

0800a940 <_close_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4c06      	ldr	r4, [pc, #24]	; (800a95c <_close_r+0x1c>)
 800a944:	2300      	movs	r3, #0
 800a946:	4605      	mov	r5, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	6023      	str	r3, [r4, #0]
 800a94c:	f7f7 fc0b 	bl	8002166 <_close>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d102      	bne.n	800a95a <_close_r+0x1a>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	b103      	cbz	r3, 800a95a <_close_r+0x1a>
 800a958:	602b      	str	r3, [r5, #0]
 800a95a:	bd38      	pop	{r3, r4, r5, pc}
 800a95c:	20000be8 	.word	0x20000be8

0800a960 <_fstat_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4c07      	ldr	r4, [pc, #28]	; (800a980 <_fstat_r+0x20>)
 800a964:	2300      	movs	r3, #0
 800a966:	4605      	mov	r5, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	4611      	mov	r1, r2
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	f7f7 fc06 	bl	800217e <_fstat>
 800a972:	1c43      	adds	r3, r0, #1
 800a974:	d102      	bne.n	800a97c <_fstat_r+0x1c>
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	b103      	cbz	r3, 800a97c <_fstat_r+0x1c>
 800a97a:	602b      	str	r3, [r5, #0]
 800a97c:	bd38      	pop	{r3, r4, r5, pc}
 800a97e:	bf00      	nop
 800a980:	20000be8 	.word	0x20000be8

0800a984 <_isatty_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4c06      	ldr	r4, [pc, #24]	; (800a9a0 <_isatty_r+0x1c>)
 800a988:	2300      	movs	r3, #0
 800a98a:	4605      	mov	r5, r0
 800a98c:	4608      	mov	r0, r1
 800a98e:	6023      	str	r3, [r4, #0]
 800a990:	f7f7 fc05 	bl	800219e <_isatty>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	d102      	bne.n	800a99e <_isatty_r+0x1a>
 800a998:	6823      	ldr	r3, [r4, #0]
 800a99a:	b103      	cbz	r3, 800a99e <_isatty_r+0x1a>
 800a99c:	602b      	str	r3, [r5, #0]
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	20000be8 	.word	0x20000be8

0800a9a4 <_lseek_r>:
 800a9a4:	b538      	push	{r3, r4, r5, lr}
 800a9a6:	4c07      	ldr	r4, [pc, #28]	; (800a9c4 <_lseek_r+0x20>)
 800a9a8:	4605      	mov	r5, r0
 800a9aa:	4608      	mov	r0, r1
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	6022      	str	r2, [r4, #0]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f7f7 fbfe 	bl	80021b4 <_lseek>
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	d102      	bne.n	800a9c2 <_lseek_r+0x1e>
 800a9bc:	6823      	ldr	r3, [r4, #0]
 800a9be:	b103      	cbz	r3, 800a9c2 <_lseek_r+0x1e>
 800a9c0:	602b      	str	r3, [r5, #0]
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
 800a9c4:	20000be8 	.word	0x20000be8

0800a9c8 <__ascii_mbtowc>:
 800a9c8:	b082      	sub	sp, #8
 800a9ca:	b901      	cbnz	r1, 800a9ce <__ascii_mbtowc+0x6>
 800a9cc:	a901      	add	r1, sp, #4
 800a9ce:	b142      	cbz	r2, 800a9e2 <__ascii_mbtowc+0x1a>
 800a9d0:	b14b      	cbz	r3, 800a9e6 <__ascii_mbtowc+0x1e>
 800a9d2:	7813      	ldrb	r3, [r2, #0]
 800a9d4:	600b      	str	r3, [r1, #0]
 800a9d6:	7812      	ldrb	r2, [r2, #0]
 800a9d8:	1c10      	adds	r0, r2, #0
 800a9da:	bf18      	it	ne
 800a9dc:	2001      	movne	r0, #1
 800a9de:	b002      	add	sp, #8
 800a9e0:	4770      	bx	lr
 800a9e2:	4610      	mov	r0, r2
 800a9e4:	e7fb      	b.n	800a9de <__ascii_mbtowc+0x16>
 800a9e6:	f06f 0001 	mvn.w	r0, #1
 800a9ea:	e7f8      	b.n	800a9de <__ascii_mbtowc+0x16>

0800a9ec <memmove>:
 800a9ec:	4288      	cmp	r0, r1
 800a9ee:	b510      	push	{r4, lr}
 800a9f0:	eb01 0302 	add.w	r3, r1, r2
 800a9f4:	d807      	bhi.n	800aa06 <memmove+0x1a>
 800a9f6:	1e42      	subs	r2, r0, #1
 800a9f8:	4299      	cmp	r1, r3
 800a9fa:	d00a      	beq.n	800aa12 <memmove+0x26>
 800a9fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa00:	f802 4f01 	strb.w	r4, [r2, #1]!
 800aa04:	e7f8      	b.n	800a9f8 <memmove+0xc>
 800aa06:	4283      	cmp	r3, r0
 800aa08:	d9f5      	bls.n	800a9f6 <memmove+0xa>
 800aa0a:	1881      	adds	r1, r0, r2
 800aa0c:	1ad2      	subs	r2, r2, r3
 800aa0e:	42d3      	cmn	r3, r2
 800aa10:	d100      	bne.n	800aa14 <memmove+0x28>
 800aa12:	bd10      	pop	{r4, pc}
 800aa14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa18:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aa1c:	e7f7      	b.n	800aa0e <memmove+0x22>

0800aa1e <__malloc_lock>:
 800aa1e:	4770      	bx	lr

0800aa20 <__malloc_unlock>:
 800aa20:	4770      	bx	lr

0800aa22 <_realloc_r>:
 800aa22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa24:	4607      	mov	r7, r0
 800aa26:	4614      	mov	r4, r2
 800aa28:	460e      	mov	r6, r1
 800aa2a:	b921      	cbnz	r1, 800aa36 <_realloc_r+0x14>
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa32:	f7ff bc33 	b.w	800a29c <_malloc_r>
 800aa36:	b922      	cbnz	r2, 800aa42 <_realloc_r+0x20>
 800aa38:	f7ff fbe2 	bl	800a200 <_free_r>
 800aa3c:	4625      	mov	r5, r4
 800aa3e:	4628      	mov	r0, r5
 800aa40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa42:	f000 f834 	bl	800aaae <_malloc_usable_size_r>
 800aa46:	42a0      	cmp	r0, r4
 800aa48:	d20f      	bcs.n	800aa6a <_realloc_r+0x48>
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	f7ff fc25 	bl	800a29c <_malloc_r>
 800aa52:	4605      	mov	r5, r0
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d0f2      	beq.n	800aa3e <_realloc_r+0x1c>
 800aa58:	4631      	mov	r1, r6
 800aa5a:	4622      	mov	r2, r4
 800aa5c:	f7ff f8dc 	bl	8009c18 <memcpy>
 800aa60:	4631      	mov	r1, r6
 800aa62:	4638      	mov	r0, r7
 800aa64:	f7ff fbcc 	bl	800a200 <_free_r>
 800aa68:	e7e9      	b.n	800aa3e <_realloc_r+0x1c>
 800aa6a:	4635      	mov	r5, r6
 800aa6c:	e7e7      	b.n	800aa3e <_realloc_r+0x1c>
	...

0800aa70 <_read_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4c07      	ldr	r4, [pc, #28]	; (800aa90 <_read_r+0x20>)
 800aa74:	4605      	mov	r5, r0
 800aa76:	4608      	mov	r0, r1
 800aa78:	4611      	mov	r1, r2
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	6022      	str	r2, [r4, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f7f7 fb38 	bl	80020f4 <_read>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d102      	bne.n	800aa8e <_read_r+0x1e>
 800aa88:	6823      	ldr	r3, [r4, #0]
 800aa8a:	b103      	cbz	r3, 800aa8e <_read_r+0x1e>
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	20000be8 	.word	0x20000be8

0800aa94 <__ascii_wctomb>:
 800aa94:	b149      	cbz	r1, 800aaaa <__ascii_wctomb+0x16>
 800aa96:	2aff      	cmp	r2, #255	; 0xff
 800aa98:	bf85      	ittet	hi
 800aa9a:	238a      	movhi	r3, #138	; 0x8a
 800aa9c:	6003      	strhi	r3, [r0, #0]
 800aa9e:	700a      	strbls	r2, [r1, #0]
 800aaa0:	f04f 30ff 	movhi.w	r0, #4294967295
 800aaa4:	bf98      	it	ls
 800aaa6:	2001      	movls	r0, #1
 800aaa8:	4770      	bx	lr
 800aaaa:	4608      	mov	r0, r1
 800aaac:	4770      	bx	lr

0800aaae <_malloc_usable_size_r>:
 800aaae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aab2:	1f18      	subs	r0, r3, #4
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	bfbc      	itt	lt
 800aab8:	580b      	ldrlt	r3, [r1, r0]
 800aaba:	18c0      	addlt	r0, r0, r3
 800aabc:	4770      	bx	lr
	...

0800aac0 <_init>:
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	bf00      	nop
 800aac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac6:	bc08      	pop	{r3}
 800aac8:	469e      	mov	lr, r3
 800aaca:	4770      	bx	lr

0800aacc <_fini>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	bf00      	nop
 800aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad2:	bc08      	pop	{r3}
 800aad4:	469e      	mov	lr, r3
 800aad6:	4770      	bx	lr
