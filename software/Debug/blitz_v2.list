
blitz_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000512c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005888  08005888  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005890  08005890  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000070  08005908  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08005908  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011828  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024cc  00000000  00000000  000318c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001030  00000000  00000000  00033d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  00034dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021192  00000000  00000000  00035cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ccda  00000000  00000000  00056e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2c48  00000000  00000000  00063b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012678c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a88  00000000  00000000  00126808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052a4 	.word	0x080052a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080052a4 	.word	0x080052a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <__io_putchar+0x20>)
 8000582:	f003 fab6 	bl	8003af2 <HAL_UART_Transmit>
	return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200005b4 	.word	0x200005b4

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f001 f8fe 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f86e 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fb14 	bl	8000bcc <MX_GPIO_Init>
  MX_I2C3_Init();
 80005a4:	f000 f8c8 	bl	8000738 <MX_I2C3_Init>
  MX_TIM1_Init();
 80005a8:	f000 f8f4 	bl	8000794 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005ac:	f000 fae4 	bl	8000b78 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80005b0:	f000 fa2a 	bl	8000a08 <MX_TIM4_Init>
  MX_TIM3_Init();
 80005b4:	f000 f9c4 	bl	8000940 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005b8:	f000 f96e 	bl	8000898 <MX_TIM2_Init>
  MX_TIM5_Init();
 80005bc:	f000 fa88 	bl	8000ad0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  printf("========== Starting Blitz V2 ==========\r\n");
 80005c0:	481f      	ldr	r0, [pc, #124]	; (8000640 <main+0xac>)
 80005c2:	f003 ff9b 	bl	80044fc <puts>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80005c6:	210c      	movs	r1, #12
 80005c8:	481e      	ldr	r0, [pc, #120]	; (8000644 <main+0xb0>)
 80005ca:	f002 fd33 	bl	8003034 <HAL_TIM_PWM_Start>
  init_buzzer();
 80005ce:	f000 fed7 	bl	8001380 <init_buzzer>
  oled_init(); // Draws CASE LOGO for now
 80005d2:	f000 ff11 	bl	80013f8 <oled_init>
  init_motors();
 80005d6:	f000 fedd 	bl	8001394 <init_motors>



  printf("\t- Initialization complete\r\n");
 80005da:	481b      	ldr	r0, [pc, #108]	; (8000648 <main+0xb4>)
 80005dc:	f003 ff8e 	bl	80044fc <puts>
  printf("\t- Hot glue secured\r\n");
 80005e0:	481a      	ldr	r0, [pc, #104]	; (800064c <main+0xb8>)
 80005e2:	f003 ff8b 	bl	80044fc <puts>
  printf("\t- Bodge kablar anchored\r\n");
 80005e6:	481a      	ldr	r0, [pc, #104]	; (8000650 <main+0xbc>)
 80005e8:	f003 ff88 	bl	80044fc <puts>
  printf("========== Startup COMPLETE ==========\r\n");
 80005ec:	4819      	ldr	r0, [pc, #100]	; (8000654 <main+0xc0>)
 80005ee:	f003 ff85 	bl	80044fc <puts>
  printf("\r\n\r\n========== RUN TESTS ==========\r\n");
 80005f2:	4819      	ldr	r0, [pc, #100]	; (8000658 <main+0xc4>)
 80005f4:	f003 ff82 	bl	80044fc <puts>
  printf("\t- Buzzer\r\n");
 80005f8:	4818      	ldr	r0, [pc, #96]	; (800065c <main+0xc8>)
 80005fa:	f003 ff7f 	bl	80044fc <puts>
  printf("\t- OLED\r\n");
 80005fe:	4818      	ldr	r0, [pc, #96]	; (8000660 <main+0xcc>)
 8000600:	f003 ff7c 	bl	80044fc <puts>

  printf("\r\n\r\n Enabling motors\r\n");
 8000604:	4817      	ldr	r0, [pc, #92]	; (8000664 <main+0xd0>)
 8000606:	f003 ff79 	bl	80044fc <puts>
  /*motor_l_set_speed(300);
  motor_r_set_speed(300);
  */

  //Encoder - needs to be tested.
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Right
 800060a:	213c      	movs	r1, #60	; 0x3c
 800060c:	4816      	ldr	r0, [pc, #88]	; (8000668 <main+0xd4>)
 800060e:	f002 fde1 	bl	80031d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left
 8000612:	213c      	movs	r1, #60	; 0x3c
 8000614:	4815      	ldr	r0, [pc, #84]	; (800066c <main+0xd8>)
 8000616:	f002 fddd 	bl	80031d4 <HAL_TIM_Encoder_Start>
  	//HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
  	//test_buzzer();
		//test_motors();
  	//play_song();
//  	play_song();
  	printf("Left Enc: %d\t\t Right Enc: %d\r\n", (int)TIM2->CNT, (int)TIM5->CNT);
 800061a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	4619      	mov	r1, r3
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <main+0xdc>)
 8000624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000626:	461a      	mov	r2, r3
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <main+0xe0>)
 800062a:	f003 fef3 	bl	8004414 <iprintf>
  	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800062e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000632:	4811      	ldr	r0, [pc, #68]	; (8000678 <main+0xe4>)
 8000634:	f001 fc09 	bl	8001e4a <HAL_GPIO_TogglePin>
  	HAL_Delay(10);
 8000638:	200a      	movs	r0, #10
 800063a:	f001 f91f 	bl	800187c <HAL_Delay>
  	printf("Left Enc: %d\t\t Right Enc: %d\r\n", (int)TIM2->CNT, (int)TIM5->CNT);
 800063e:	e7ec      	b.n	800061a <main+0x86>
 8000640:	080052bc 	.word	0x080052bc
 8000644:	200005f4 	.word	0x200005f4
 8000648:	080052e8 	.word	0x080052e8
 800064c:	08005304 	.word	0x08005304
 8000650:	0800531c 	.word	0x0800531c
 8000654:	08005338 	.word	0x08005338
 8000658:	08005360 	.word	0x08005360
 800065c:	08005388 	.word	0x08005388
 8000660:	08005394 	.word	0x08005394
 8000664:	080053a0 	.word	0x080053a0
 8000668:	20000534 	.word	0x20000534
 800066c:	20000634 	.word	0x20000634
 8000670:	40000c00 	.word	0x40000c00
 8000674:	080053b8 	.word	0x080053b8
 8000678:	40020000 	.word	0x40020000

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 feba 	bl	8004404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xb4>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xb4>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xb4>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <SystemClock_Config+0xb8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <SystemClock_Config+0xb8>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <SystemClock_Config+0xb8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 f839 	bl	8002764 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006f8:	f000 fb08 	bl	8000d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fa94 	bl	8002c44 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000722:	f000 faf3 	bl	8000d0c <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2C3_Init+0x50>)
 800073e:	4a13      	ldr	r2, [pc, #76]	; (800078c <MX_I2C3_Init+0x54>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_I2C3_Init+0x50>)
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_I2C3_Init+0x58>)
 8000746:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_I2C3_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_I2C3_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_I2C3_Init+0x50>)
 8000756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_I2C3_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_I2C3_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_I2C3_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_I2C3_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_I2C3_Init+0x50>)
 8000776:	f001 fba7 	bl	8001ec8 <HAL_I2C_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000780:	f000 fac4 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200004a0 	.word	0x200004a0
 800078c:	40005c00 	.word	0x40005c00
 8000790:	00061a80 	.word	0x00061a80

08000794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b092      	sub	sp, #72	; 0x48
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
 80007b4:	615a      	str	r2, [r3, #20]
 80007b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2220      	movs	r2, #32
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fe20 	bl	8004404 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c4:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_TIM1_Init+0xfc>)
 80007c6:	4a33      	ldr	r2, [pc, #204]	; (8000894 <MX_TIM1_Init+0x100>)
 80007c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 80007ca:	4b31      	ldr	r3, [pc, #196]	; (8000890 <MX_TIM1_Init+0xfc>)
 80007cc:	2203      	movs	r2, #3
 80007ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_TIM1_Init+0xfc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MX_TIM1_Init+0xfc>)
 80007d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_TIM1_Init+0xfc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_TIM1_Init+0xfc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_TIM1_Init+0xfc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007f0:	4827      	ldr	r0, [pc, #156]	; (8000890 <MX_TIM1_Init+0xfc>)
 80007f2:	f002 fbf3 	bl	8002fdc <HAL_TIM_PWM_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80007fc:	f000 fa86 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000808:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800080c:	4619      	mov	r1, r3
 800080e:	4820      	ldr	r0, [pc, #128]	; (8000890 <MX_TIM1_Init+0xfc>)
 8000810:	f003 f854 	bl	80038bc <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800081a:	f000 fa77 	bl	8000d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081e:	2360      	movs	r3, #96	; 0x60
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	220c      	movs	r2, #12
 800083c:	4619      	mov	r1, r3
 800083e:	4814      	ldr	r0, [pc, #80]	; (8000890 <MX_TIM1_Init+0xfc>)
 8000840:	f002 fd00 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800084a:	f000 fa5f 	bl	8000d0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000866:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4807      	ldr	r0, [pc, #28]	; (8000890 <MX_TIM1_Init+0xfc>)
 8000872:	f003 f89f 	bl	80039b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800087c:	f000 fa46 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000880:	4803      	ldr	r0, [pc, #12]	; (8000890 <MX_TIM1_Init+0xfc>)
 8000882:	f000 fbc5 	bl	8001010 <HAL_TIM_MspPostInit>

}
 8000886:	bf00      	nop
 8000888:	3748      	adds	r7, #72	; 0x48
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200005f4 	.word	0x200005f4
 8000894:	40010000 	.word	0x40010000

08000898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2224      	movs	r2, #36	; 0x24
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fdac 	bl	8004404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_TIM2_Init+0xa4>)
 80008b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_TIM2_Init+0xa4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <MX_TIM2_Init+0xa4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_TIM2_Init+0xa4>)
 80008ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_TIM2_Init+0xa4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_TIM2_Init+0xa4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008dc:	2303      	movs	r3, #3
 80008de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008e4:	2301      	movs	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008f4:	2301      	movs	r3, #1
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_TIM2_Init+0xa4>)
 8000908:	f002 fbd2 	bl	80030b0 <HAL_TIM_Encoder_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000912:	f000 f9fb 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <MX_TIM2_Init+0xa4>)
 8000924:	f002 ffca 	bl	80038bc <HAL_TIMEx_MasterConfigSynchronization>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800092e:	f000 f9ed 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000634 	.word	0x20000634

08000940 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
 800095e:	615a      	str	r2, [r3, #20]
 8000960:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000962:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <MX_TIM3_Init+0xc0>)
 8000964:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <MX_TIM3_Init+0xc4>)
 8000966:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000968:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <MX_TIM3_Init+0xc0>)
 800096a:	220f      	movs	r2, #15
 800096c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <MX_TIM3_Init+0xc0>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <MX_TIM3_Init+0xc0>)
 8000976:	f644 6220 	movw	r2, #20000	; 0x4e20
 800097a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <MX_TIM3_Init+0xc0>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <MX_TIM3_Init+0xc0>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000988:	481d      	ldr	r0, [pc, #116]	; (8000a00 <MX_TIM3_Init+0xc0>)
 800098a:	f002 fb27 	bl	8002fdc <HAL_TIM_PWM_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000994:	f000 f9ba 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a0:	f107 0320 	add.w	r3, r7, #32
 80009a4:	4619      	mov	r1, r3
 80009a6:	4816      	ldr	r0, [pc, #88]	; (8000a00 <MX_TIM3_Init+0xc0>)
 80009a8:	f002 ff88 	bl	80038bc <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009b2:	f000 f9ab 	bl	8000d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b6:	2360      	movs	r3, #96	; 0x60
 80009b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	4619      	mov	r1, r3
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_TIM3_Init+0xc0>)
 80009ce:	f002 fc39 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80009d8:	f000 f998 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2204      	movs	r2, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	4807      	ldr	r0, [pc, #28]	; (8000a00 <MX_TIM3_Init+0xc0>)
 80009e4:	f002 fc2e 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009ee:	f000 f98d 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009f2:	4803      	ldr	r0, [pc, #12]	; (8000a00 <MX_TIM3_Init+0xc0>)
 80009f4:	f000 fb0c 	bl	8001010 <HAL_TIM_MspPostInit>

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000574 	.word	0x20000574
 8000a04:	40000400 	.word	0x40000400

08000a08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a2a:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a2c:	4a27      	ldr	r2, [pc, #156]	; (8000acc <MX_TIM4_Init+0xc4>)
 8000a2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a50:	481d      	ldr	r0, [pc, #116]	; (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a52:	f002 fac3 	bl	8002fdc <HAL_TIM_PWM_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000a5c:	f000 f956 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a68:	f107 0320 	add.w	r3, r7, #32
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4816      	ldr	r0, [pc, #88]	; (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a70:	f002 ff24 	bl	80038bc <HAL_TIMEx_MasterConfigSynchronization>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a7a:	f000 f947 	bl	8000d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7e:	2360      	movs	r3, #96	; 0x60
 8000a80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2208      	movs	r2, #8
 8000a92:	4619      	mov	r1, r3
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a96:	f002 fbd5 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000aa0:	f000 f934 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <MX_TIM4_Init+0xc0>)
 8000aac:	f002 fbca 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000ab6:	f000 f929 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <MX_TIM4_Init+0xc0>)
 8000abc:	f000 faa8 	bl	8001010 <HAL_TIM_MspPostInit>

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200004f4 	.word	0x200004f4
 8000acc:	40000800 	.word	0x40000800

08000ad0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	2224      	movs	r2, #36	; 0x24
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 fc90 	bl	8004404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <MX_TIM5_Init+0xa0>)
 8000aee:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <MX_TIM5_Init+0xa4>)
 8000af0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_TIM5_Init+0xa0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <MX_TIM5_Init+0xa0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_TIM5_Init+0xa0>)
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b04:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_TIM5_Init+0xa0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_TIM5_Init+0xa0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <MX_TIM5_Init+0xa0>)
 8000b3e:	f002 fab7 	bl	80030b0 <HAL_TIM_Encoder_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f000 f8e0 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_TIM5_Init+0xa0>)
 8000b5a:	f002 feaf 	bl	80038bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000b64:	f000 f8d2 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000534 	.word	0x20000534
 8000b74:	40000c00 	.word	0x40000c00

08000b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <MX_USART1_UART_Init+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	f002 ff52 	bl	8003a58 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bba:	f000 f8a7 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200005b4 	.word	0x200005b4
 8000bc8:	40011000 	.word	0x40011000

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	4b44      	ldr	r3, [pc, #272]	; (8000cf8 <MX_GPIO_Init+0x12c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a43      	ldr	r2, [pc, #268]	; (8000cf8 <MX_GPIO_Init+0x12c>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b41      	ldr	r3, [pc, #260]	; (8000cf8 <MX_GPIO_Init+0x12c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b3d      	ldr	r3, [pc, #244]	; (8000cf8 <MX_GPIO_Init+0x12c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a3c      	ldr	r2, [pc, #240]	; (8000cf8 <MX_GPIO_Init+0x12c>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <MX_GPIO_Init+0x12c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <MX_GPIO_Init+0x12c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a35      	ldr	r2, [pc, #212]	; (8000cf8 <MX_GPIO_Init+0x12c>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b33      	ldr	r3, [pc, #204]	; (8000cf8 <MX_GPIO_Init+0x12c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c3c:	482f      	ldr	r0, [pc, #188]	; (8000cfc <MX_GPIO_Init+0x130>)
 8000c3e:	f001 f8eb 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000c48:	482d      	ldr	r0, [pc, #180]	; (8000d00 <MX_GPIO_Init+0x134>)
 8000c4a:	f001 f8e5 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin|MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	21f0      	movs	r1, #240	; 0xf0
 8000c52:	482c      	ldr	r0, [pc, #176]	; (8000d04 <MX_GPIO_Init+0x138>)
 8000c54:	f001 f8e0 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_SELECT_Pin */
  GPIO_InitStruct.Pin = BUTTON_SELECT_Pin;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <MX_GPIO_Init+0x13c>)
 8000c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_SELECT_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4825      	ldr	r0, [pc, #148]	; (8000d00 <MX_GPIO_Init+0x134>)
 8000c6c:	f000 ff3a 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c70:	2304      	movs	r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4619      	mov	r1, r3
 8000c82:	4820      	ldr	r0, [pc, #128]	; (8000d04 <MX_GPIO_Init+0x138>)
 8000c84:	f000 ff2e 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4816      	ldr	r0, [pc, #88]	; (8000cfc <MX_GPIO_Init+0x130>)
 8000ca2:	f000 ff1f 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8000ca6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4810      	ldr	r0, [pc, #64]	; (8000d00 <MX_GPIO_Init+0x134>)
 8000cc0:	f000 ff10 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_R_IN2_Pin MOTOR_R_IN1_Pin MOTOR_L_IN2_Pin MOTOR_L_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin|MOTOR_L_IN1_Pin;
 8000cc4:	23f0      	movs	r3, #240	; 0xf0
 8000cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <MX_GPIO_Init+0x138>)
 8000cdc:	f000 ff02 	bl	8001ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2009      	movs	r0, #9
 8000ce6:	f000 fec6 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cea:	2009      	movs	r0, #9
 8000cec:	f000 fedf 	bl	8001aae <HAL_NVIC_EnableIRQ>

}
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40020800 	.word	0x40020800
 8000d04:	40020400 	.word	0x40020400
 8000d08:	10210000 	.word	0x10210000

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a29      	ldr	r2, [pc, #164]	; (8000e30 <HAL_I2C_MspInit+0xc4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d14b      	bne.n	8000e26 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <HAL_I2C_MspInit+0xc8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <HAL_I2C_MspInit+0xc8>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <HAL_I2C_MspInit+0xc8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <HAL_I2C_MspInit+0xc8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a20      	ldr	r2, [pc, #128]	; (8000e34 <HAL_I2C_MspInit+0xc8>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <HAL_I2C_MspInit+0xc8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = SDA_Pin;
 8000dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dcc:	2312      	movs	r3, #18
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4815      	ldr	r0, [pc, #84]	; (8000e38 <HAL_I2C_MspInit+0xcc>)
 8000de4:	f000 fe7e 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCL_Pin;
 8000de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dee:	2312      	movs	r3, #18
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <HAL_I2C_MspInit+0xd0>)
 8000e06:	f000 fe6d 	bl	8001ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_I2C_MspInit+0xc8>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_I2C_MspInit+0xc8>)
 8000e14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_I2C_MspInit+0xc8>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40005c00 	.word	0x40005c00
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020800 	.word	0x40020800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <HAL_TIM_PWM_MspInit+0x8c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10e      	bne.n	8000e70 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e6e:	e026      	b.n	8000ebe <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_TIM_PWM_MspInit+0x94>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10e      	bne.n	8000e98 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
}
 8000e96:	e012      	b.n	8000ebe <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_TIM_PWM_MspInit+0x98>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10d      	bne.n	8000ebe <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
}
 8000ebe:	bf00      	nop
 8000ec0:	371c      	adds	r7, #28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40000400 	.word	0x40000400
 8000ed8:	40000800 	.word	0x40000800

08000edc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000efc:	d14a      	bne.n	8000f94 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	4b3f      	ldr	r3, [pc, #252]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a3e      	ldr	r2, [pc, #248]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b3c      	ldr	r3, [pc, #240]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	4b38      	ldr	r3, [pc, #224]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a37      	ldr	r2, [pc, #220]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b35      	ldr	r3, [pc, #212]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b31      	ldr	r3, [pc, #196]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a30      	ldr	r2, [pc, #192]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_L_A_Pin;
 8000f52:	2320      	movs	r3, #32
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f62:	2301      	movs	r3, #1
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4825      	ldr	r0, [pc, #148]	; (8001004 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f6e:	f000 fdb9 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_L_B_Pin;
 8000f72:	2308      	movs	r3, #8
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f82:	2301      	movs	r3, #1
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481e      	ldr	r0, [pc, #120]	; (8001008 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000f8e:	f000 fda9 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f92:	e030      	b.n	8000ff6 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a1c      	ldr	r2, [pc, #112]	; (800100c <HAL_TIM_Encoder_MspInit+0x130>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12b      	bne.n	8000ff6 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a16      	ldr	r2, [pc, #88]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_R_B_Pin|ENC_R_A_Pin;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <HAL_TIM_Encoder_MspInit+0x128>)
 8000ff2:	f000 fd77 	bl	8001ae4 <HAL_GPIO_Init>
}
 8000ff6:	bf00      	nop
 8000ff8:	3730      	adds	r7, #48	; 0x30
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400
 800100c:	40000c00 	.word	0x40000c00

08001010 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a37      	ldr	r2, [pc, #220]	; (800110c <HAL_TIM_MspPostInit+0xfc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d11f      	bne.n	8001072 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b36      	ldr	r3, [pc, #216]	; (8001110 <HAL_TIM_MspPostInit+0x100>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a35      	ldr	r2, [pc, #212]	; (8001110 <HAL_TIM_MspPostInit+0x100>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b33      	ldr	r3, [pc, #204]	; (8001110 <HAL_TIM_MspPostInit+0x100>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800104e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001060:	2301      	movs	r3, #1
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	482a      	ldr	r0, [pc, #168]	; (8001114 <HAL_TIM_MspPostInit+0x104>)
 800106c:	f000 fd3a 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001070:	e047      	b.n	8001102 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a28      	ldr	r2, [pc, #160]	; (8001118 <HAL_TIM_MspPostInit+0x108>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d11e      	bne.n	80010ba <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_TIM_MspPostInit+0x100>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4a22      	ldr	r2, [pc, #136]	; (8001110 <HAL_TIM_MspPostInit+0x100>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6313      	str	r3, [r2, #48]	; 0x30
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_TIM_MspPostInit+0x100>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_L_PWM_Pin|FAN_R_PWM_Pin;
 8001098:	23c0      	movs	r3, #192	; 0xc0
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010a8:	2302      	movs	r3, #2
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	481a      	ldr	r0, [pc, #104]	; (800111c <HAL_TIM_MspPostInit+0x10c>)
 80010b4:	f000 fd16 	bl	8001ae4 <HAL_GPIO_Init>
}
 80010b8:	e023      	b.n	8001102 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a18      	ldr	r2, [pc, #96]	; (8001120 <HAL_TIM_MspPostInit+0x110>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d11e      	bne.n	8001102 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_TIM_MspPostInit+0x100>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_TIM_MspPostInit+0x100>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_TIM_MspPostInit+0x100>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin|MOTOR_L_PWM_Pin;
 80010e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010f2:	2302      	movs	r3, #2
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <HAL_TIM_MspPostInit+0x114>)
 80010fe:	f000 fcf1 	bl	8001ae4 <HAL_GPIO_Init>
}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010000 	.word	0x40010000
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000
 8001118:	40000400 	.word	0x40000400
 800111c:	40020800 	.word	0x40020800
 8001120:	40000800 	.word	0x40000800
 8001124:	40020400 	.word	0x40020400

08001128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <HAL_UART_MspInit+0x84>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d12c      	bne.n	80011a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_UART_MspInit+0x88>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_UART_MspInit+0x88>)
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_UART_MspInit+0x88>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_UART_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_UART_MspInit+0x88>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_UART_MspInit+0x88>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001182:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001194:	2307      	movs	r3, #7
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_UART_MspInit+0x8c>)
 80011a0:	f000 fca0 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40011000 	.word	0x40011000
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020000 	.word	0x40020000

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120c:	f000 fb16 	bl	800183c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001218:	2008      	movs	r0, #8
 800121a:	f000 fe31 	bl	8001e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}

08001222 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	e00a      	b.n	800124a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001234:	f3af 8000 	nop.w
 8001238:	4601      	mov	r1, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	60ba      	str	r2, [r7, #8]
 8001240:	b2ca      	uxtb	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	dbf0      	blt.n	8001234 <_read+0x12>
	}

return len;
 8001252:	687b      	ldr	r3, [r7, #4]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e009      	b.n	8001282 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	60ba      	str	r2, [r7, #8]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f97a 	bl	8000570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	dbf1      	blt.n	800126e <_write+0x12>
	}
	return len;
 800128a:	687b      	ldr	r3, [r7, #4]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_close>:

int _close(int file)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012bc:	605a      	str	r2, [r3, #4]
	return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_isatty>:

int _isatty(int file)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	return 1;
 80012d4:	2301      	movs	r3, #1
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b085      	sub	sp, #20
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
	return 0;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <_sbrk+0x50>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <_sbrk+0x16>
		heap_end = &end;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <_sbrk+0x50>)
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <_sbrk+0x54>)
 8001310:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <_sbrk+0x50>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <_sbrk+0x50>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	466a      	mov	r2, sp
 8001322:	4293      	cmp	r3, r2
 8001324:	d907      	bls.n	8001336 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001326:	f003 f843 	bl	80043b0 <__errno>
 800132a:	4602      	mov	r2, r0
 800132c:	230c      	movs	r3, #12
 800132e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001334:	e006      	b.n	8001344 <_sbrk+0x48>
	}

	heap_end += incr;
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <_sbrk+0x50>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	4a03      	ldr	r2, [pc, #12]	; (800134c <_sbrk+0x50>)
 8001340:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2000008c 	.word	0x2000008c
 8001350:	20000680 	.word	0x20000680

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <SystemInit+0x28>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135e:	4a07      	ldr	r2, [pc, #28]	; (800137c <SystemInit+0x28>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <SystemInit+0x28>)
 800136a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800136e:	609a      	str	r2, [r3, #8]
#endif
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <init_buzzer>:
  NOTE_GS5,2,

};


void init_buzzer(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001384:	210c      	movs	r1, #12
 8001386:	4802      	ldr	r0, [pc, #8]	; (8001390 <init_buzzer+0x10>)
 8001388:	f001 fe54 	bl	8003034 <HAL_TIM_PWM_Start>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200005f4 	.word	0x200005f4

08001394 <init_motors>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

void init_motors(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
    // Start encoder inputs
    //HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Right
    //HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left

    // Start PWM generation for motors
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Right
 8001398:	2108      	movs	r1, #8
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <init_motors+0x1c>)
 800139c:	f001 fe4a 	bl	8003034 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Left
 80013a0:	210c      	movs	r1, #12
 80013a2:	4803      	ldr	r0, [pc, #12]	; (80013b0 <init_motors+0x1c>)
 80013a4:	f001 fe46 	bl	8003034 <HAL_TIM_PWM_Start>

    // Put both motors in Hi-Z (high impedance output => rotate freely)
    motors_stop();
 80013a8:	f000 f804 	bl	80013b4 <motors_stop>
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200004f4 	.word	0x200004f4

080013b4 <motors_stop>:
    }

    TIM4->CCR3 = limited_speed;
}

void motors_stop(void){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
    TIM4->CCR3 = 0;
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <motors_stop+0x3c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_WritePin(MOTOR_R_IN1_GPIO_Port, MOTOR_R_IN1_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2120      	movs	r1, #32
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <motors_stop+0x40>)
 80013c4:	f000 fd28 	bl	8001e18 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_R_IN2_GPIO_Port, MOTOR_R_IN2_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2110      	movs	r1, #16
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <motors_stop+0x40>)
 80013ce:	f000 fd23 	bl	8001e18 <HAL_GPIO_WritePin>

    TIM4->CCR4 = 0;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <motors_stop+0x3c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_GPIO_WritePin(MOTOR_L_IN1_GPIO_Port, MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <motors_stop+0x40>)
 80013de:	f000 fd1b 	bl	8001e18 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_L_IN2_GPIO_Port, MOTOR_L_IN2_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2140      	movs	r1, #64	; 0x40
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <motors_stop+0x40>)
 80013e8:	f000 fd16 	bl	8001e18 <HAL_GPIO_WritePin>
};
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40000800 	.word	0x40000800
 80013f4:	40020400 	.word	0x40020400

080013f8 <oled_init>:


/**
	* @brief Initialize the oled screen and a welcome screen. 
*/
void oled_init(void){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80013fc:	f000 f844 	bl	8001488 <ssd1306_Init>
	
	ssd1306_DrawBitmap(case_head_bmp);
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <oled_init+0x18>)
 8001402:	f000 f957 	bl	80016b4 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001406:	f000 f8cf 	bl	80015a8 <ssd1306_UpdateScreen>
	menu_item_31.pNext = &menu_item_32;
	
	strcpy(menu_item_32.name, "Item 32");
	menu_item_32.pNext = &menu_item_back_main;
	*/
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	080053f0 	.word	0x080053f0

08001414 <ssd1306_Reset>:
#include "user/ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af04      	add	r7, sp, #16
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800142e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	2301      	movs	r3, #1
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2301      	movs	r3, #1
 800143e:	2200      	movs	r2, #0
 8001440:	2178      	movs	r1, #120	; 0x78
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <ssd1306_WriteCommand+0x2c>)
 8001444:	f000 fe78 	bl	8002138 <HAL_I2C_Mem_Write>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200004a0 	.word	0x200004a0

08001454 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af04      	add	r7, sp, #16
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b29b      	uxth	r3, r3
 8001462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001466:	9202      	str	r2, [sp, #8]
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2301      	movs	r3, #1
 8001470:	2240      	movs	r2, #64	; 0x40
 8001472:	2178      	movs	r1, #120	; 0x78
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <ssd1306_WriteData+0x30>)
 8001476:	f000 fe5f 	bl	8002138 <HAL_I2C_Mem_Write>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200004a0 	.word	0x200004a0

08001488 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 800148c:	f7ff ffc2 	bl	8001414 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001490:	2064      	movs	r0, #100	; 0x64
 8001492:	f000 f9f3 	bl	800187c <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001496:	20ae      	movs	r0, #174	; 0xae
 8001498:	f7ff ffc4 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 800149c:	2020      	movs	r0, #32
 800149e:	f7ff ffc1 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 80014a2:	2010      	movs	r0, #16
 80014a4:	f7ff ffbe 	bl	8001424 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014a8:	20b0      	movs	r0, #176	; 0xb0
 80014aa:	f7ff ffbb 	bl	8001424 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80014ae:	20c8      	movs	r0, #200	; 0xc8
 80014b0:	f7ff ffb8 	bl	8001424 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff ffb5 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80014ba:	2010      	movs	r0, #16
 80014bc:	f7ff ffb2 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80014c0:	2040      	movs	r0, #64	; 0x40
 80014c2:	f7ff ffaf 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80014c6:	2081      	movs	r0, #129	; 0x81
 80014c8:	f7ff ffac 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80014cc:	20ff      	movs	r0, #255	; 0xff
 80014ce:	f7ff ffa9 	bl	8001424 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80014d2:	20a1      	movs	r0, #161	; 0xa1
 80014d4:	f7ff ffa6 	bl	8001424 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80014d8:	20a6      	movs	r0, #166	; 0xa6
 80014da:	f7ff ffa3 	bl	8001424 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80014de:	20a8      	movs	r0, #168	; 0xa8
 80014e0:	f7ff ffa0 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80014e4:	203f      	movs	r0, #63	; 0x3f
 80014e6:	f7ff ff9d 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014ea:	20a4      	movs	r0, #164	; 0xa4
 80014ec:	f7ff ff9a 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80014f0:	20d3      	movs	r0, #211	; 0xd3
 80014f2:	f7ff ff97 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff ff94 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80014fc:	20d5      	movs	r0, #213	; 0xd5
 80014fe:	f7ff ff91 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001502:	20f0      	movs	r0, #240	; 0xf0
 8001504:	f7ff ff8e 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001508:	20d9      	movs	r0, #217	; 0xd9
 800150a:	f7ff ff8b 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800150e:	2022      	movs	r0, #34	; 0x22
 8001510:	f7ff ff88 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001514:	20da      	movs	r0, #218	; 0xda
 8001516:	f7ff ff85 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 800151a:	2012      	movs	r0, #18
 800151c:	f7ff ff82 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001520:	20db      	movs	r0, #219	; 0xdb
 8001522:	f7ff ff7f 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001526:	2020      	movs	r0, #32
 8001528:	f7ff ff7c 	bl	8001424 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800152c:	208d      	movs	r0, #141	; 0x8d
 800152e:	f7ff ff79 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001532:	2014      	movs	r0, #20
 8001534:	f7ff ff76 	bl	8001424 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001538:	20af      	movs	r0, #175	; 0xaf
 800153a:	f7ff ff73 	bl	8001424 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f810 	bl	8001564 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001544:	f000 f830 	bl	80015a8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <ssd1306_Init+0xd8>)
 800154a:	2200      	movs	r2, #0
 800154c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <ssd1306_Init+0xd8>)
 8001550:	2200      	movs	r2, #0
 8001552:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <ssd1306_Init+0xd8>)
 8001556:	2201      	movs	r2, #1
 8001558:	715a      	strb	r2, [r3, #5]
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000490 	.word	0x20000490

08001564 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e00d      	b.n	8001590 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <ssd1306_Fill+0x1a>
 800157a:	2100      	movs	r1, #0
 800157c:	e000      	b.n	8001580 <ssd1306_Fill+0x1c>
 800157e:	21ff      	movs	r1, #255	; 0xff
 8001580:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <ssd1306_Fill+0x40>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4413      	add	r3, r2
 8001586:	460a      	mov	r2, r1
 8001588:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3301      	adds	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001596:	d3ed      	bcc.n	8001574 <ssd1306_Fill+0x10>
    }
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	20000090 	.word	0x20000090

080015a8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	e016      	b.n	80015e2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	3b50      	subs	r3, #80	; 0x50
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff32 	bl	8001424 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff ff2f 	bl	8001424 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80015c6:	2010      	movs	r0, #16
 80015c8:	f7ff ff2c 	bl	8001424 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	01db      	lsls	r3, r3, #7
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <ssd1306_UpdateScreen+0x48>)
 80015d2:	4413      	add	r3, r2
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff3c 	bl	8001454 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	3301      	adds	r3, #1
 80015e0:	71fb      	strb	r3, [r7, #7]
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b07      	cmp	r3, #7
 80015e6:	d9e5      	bls.n	80015b4 <ssd1306_UpdateScreen+0xc>
    }
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000090 	.word	0x20000090

080015f4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	460b      	mov	r3, r1
 8001600:	71bb      	strb	r3, [r7, #6]
 8001602:	4613      	mov	r3, r2
 8001604:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db48      	blt.n	80016a0 <ssd1306_DrawPixel+0xac>
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	2b3f      	cmp	r3, #63	; 0x3f
 8001612:	d845      	bhi.n	80016a0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <ssd1306_DrawPixel+0xb8>)
 8001616:	791b      	ldrb	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 800161c:	797b      	ldrb	r3, [r7, #5]
 800161e:	2b00      	cmp	r3, #0
 8001620:	bf0c      	ite	eq
 8001622:	2301      	moveq	r3, #1
 8001624:	2300      	movne	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 800162a:	797b      	ldrb	r3, [r7, #5]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d11a      	bne.n	8001666 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001630:	79fa      	ldrb	r2, [r7, #7]
 8001632:	79bb      	ldrb	r3, [r7, #6]
 8001634:	08db      	lsrs	r3, r3, #3
 8001636:	b2d8      	uxtb	r0, r3
 8001638:	4603      	mov	r3, r0
 800163a:	01db      	lsls	r3, r3, #7
 800163c:	4413      	add	r3, r2
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <ssd1306_DrawPixel+0xbc>)
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	b25a      	sxtb	r2, r3
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	2101      	movs	r1, #1
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	b25b      	sxtb	r3, r3
 8001652:	4313      	orrs	r3, r2
 8001654:	b259      	sxtb	r1, r3
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	4603      	mov	r3, r0
 800165a:	01db      	lsls	r3, r3, #7
 800165c:	4413      	add	r3, r2
 800165e:	b2c9      	uxtb	r1, r1
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <ssd1306_DrawPixel+0xbc>)
 8001662:	54d1      	strb	r1, [r2, r3]
 8001664:	e01d      	b.n	80016a2 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	08db      	lsrs	r3, r3, #3
 800166c:	b2d8      	uxtb	r0, r3
 800166e:	4603      	mov	r3, r0
 8001670:	01db      	lsls	r3, r3, #7
 8001672:	4413      	add	r3, r2
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <ssd1306_DrawPixel+0xbc>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	b25a      	sxtb	r2, r3
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	b25b      	sxtb	r3, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	b25b      	sxtb	r3, r3
 800168c:	4013      	ands	r3, r2
 800168e:	b259      	sxtb	r1, r3
 8001690:	79fa      	ldrb	r2, [r7, #7]
 8001692:	4603      	mov	r3, r0
 8001694:	01db      	lsls	r3, r3, #7
 8001696:	4413      	add	r3, r2
 8001698:	b2c9      	uxtb	r1, r1
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <ssd1306_DrawPixel+0xbc>)
 800169c:	54d1      	strb	r1, [r2, r3]
 800169e:	e000      	b.n	80016a2 <ssd1306_DrawPixel+0xae>
        return;
 80016a0:	bf00      	nop
    }
}
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	20000490 	.word	0x20000490
 80016b0:	20000090 	.word	0x20000090

080016b4 <ssd1306_DrawBitmap>:

// Draw a 128x64 bitmap image
// pBitmap     => Pointer to the stored byte array (size = 1024) of the image. 
// Convesion done here: https://javl.github.io/image2cpp/
void ssd1306_DrawBitmap(const unsigned char * pBitmap){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 1024; i++){
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	e037      	b.n	8001732 <ssd1306_DrawBitmap+0x7e>
			// Extract each byte
			unsigned char byte = pBitmap[i];
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	75fb      	strb	r3, [r7, #23]
				
			for(int k = 0; k < 8; k++){
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	e029      	b.n	8001726 <ssd1306_DrawBitmap+0x72>
				unsigned char pixel = (byte >> (7-k)) & 0x01;
 80016d2:	7dfa      	ldrb	r2, [r7, #23]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	fa42 f303 	asr.w	r3, r2, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	75bb      	strb	r3, [r7, #22]
				unsigned int x = (i*8 + k) % 128;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	00da      	lsls	r2, r3, #3
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4413      	add	r3, r2
 80016ee:	425a      	negs	r2, r3
 80016f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016f8:	bf58      	it	pl
 80016fa:	4253      	negpl	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
				unsigned int y = (i*8 + k)/128;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	00da      	lsls	r2, r3, #3
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4413      	add	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	da00      	bge.n	800170c <ssd1306_DrawBitmap+0x58>
 800170a:	337f      	adds	r3, #127	; 0x7f
 800170c:	11db      	asrs	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]
				ssd1306_DrawPixel(x, y, (SSD1306_COLOR) pixel);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	b2d1      	uxtb	r1, r2
 8001718:	7dba      	ldrb	r2, [r7, #22]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff6a 	bl	80015f4 <ssd1306_DrawPixel>
			for(int k = 0; k < 8; k++){
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	3301      	adds	r3, #1
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b07      	cmp	r3, #7
 800172a:	ddd2      	ble.n	80016d2 <ssd1306_DrawBitmap+0x1e>
	for(int i = 0; i < 1024; i++){
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	3301      	adds	r3, #1
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001738:	dbc3      	blt.n	80016c2 <ssd1306_DrawBitmap+0xe>
			}//for - k
	}//for - i
}
 800173a:	bf00      	nop
 800173c:	3720      	adds	r7, #32
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001748:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800174a:	e003      	b.n	8001754 <LoopCopyDataInit>

0800174c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800174e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001750:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001752:	3104      	adds	r1, #4

08001754 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001758:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800175a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800175c:	d3f6      	bcc.n	800174c <CopyDataInit>
  ldr  r2, =_sbss
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001760:	e002      	b.n	8001768 <LoopFillZerobss>

08001762 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001762:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001764:	f842 3b04 	str.w	r3, [r2], #4

08001768 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800176a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800176c:	d3f9      	bcc.n	8001762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800176e:	f7ff fdf1 	bl	8001354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f002 fe23 	bl	80043bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001776:	f7fe ff0d 	bl	8000594 <main>
  bx  lr    
 800177a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800177c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001780:	08005898 	.word	0x08005898
  ldr  r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001788:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800178c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001790:	2000067c 	.word	0x2000067c

08001794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <HAL_Init+0x40>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_Init+0x40>)
 80017ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_Init+0x40>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f000 f94d 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 f808 	bl	80017dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017cc:	f7ff faa6 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023c00 	.word	0x40023c00

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x54>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x58>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f965 	bl	8001aca <HAL_SYSTICK_Config>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e00e      	b.n	8001828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d80a      	bhi.n	8001826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001818:	f000 f92d 	bl	8001a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800181c:	4a06      	ldr	r2, [pc, #24]	; (8001838 <HAL_InitTick+0x5c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e000      	b.n	8001828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000000 	.word	0x20000000
 8001834:	20000008 	.word	0x20000008
 8001838:	20000004 	.word	0x20000004

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008
 8001860:	20000674 	.word	0x20000674

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000674 	.word	0x20000674

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_Delay+0x40>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffde 	bl	8001864 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000008 	.word	0x20000008

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	; (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff29 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff3e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff8e 	bl	80019b4 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5d 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff31 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa2 	bl	8001a1c <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e16b      	b.n	8001dd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 815a 	bne.w	8001dd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d00b      	beq.n	8001b3e <HAL_GPIO_Init+0x5a>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d007      	beq.n	8001b3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b32:	2b11      	cmp	r3, #17
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b12      	cmp	r3, #18
 8001b3c:	d130      	bne.n	8001ba0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 0201 	and.w	r2, r3, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0xfc>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b12      	cmp	r3, #18
 8001bde:	d123      	bne.n	8001c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0203 	and.w	r2, r3, #3
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80b4 	beq.w	8001dd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <HAL_GPIO_Init+0x308>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a5e      	ldr	r2, [pc, #376]	; (8001dec <HAL_GPIO_Init+0x308>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b5c      	ldr	r3, [pc, #368]	; (8001dec <HAL_GPIO_Init+0x308>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c86:	4a5a      	ldr	r2, [pc, #360]	; (8001df0 <HAL_GPIO_Init+0x30c>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a51      	ldr	r2, [pc, #324]	; (8001df4 <HAL_GPIO_Init+0x310>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02b      	beq.n	8001d0a <HAL_GPIO_Init+0x226>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a50      	ldr	r2, [pc, #320]	; (8001df8 <HAL_GPIO_Init+0x314>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d025      	beq.n	8001d06 <HAL_GPIO_Init+0x222>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4f      	ldr	r2, [pc, #316]	; (8001dfc <HAL_GPIO_Init+0x318>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d01f      	beq.n	8001d02 <HAL_GPIO_Init+0x21e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4e      	ldr	r2, [pc, #312]	; (8001e00 <HAL_GPIO_Init+0x31c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d019      	beq.n	8001cfe <HAL_GPIO_Init+0x21a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4d      	ldr	r2, [pc, #308]	; (8001e04 <HAL_GPIO_Init+0x320>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0x216>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4c      	ldr	r2, [pc, #304]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_GPIO_Init+0x212>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4b      	ldr	r2, [pc, #300]	; (8001e0c <HAL_GPIO_Init+0x328>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0x20e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <HAL_GPIO_Init+0x32c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_GPIO_Init+0x20a>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e00e      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cee:	2308      	movs	r3, #8
 8001cf0:	e00c      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cf2:	2306      	movs	r3, #6
 8001cf4:	e00a      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	e008      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x228>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4934      	ldr	r1, [pc, #208]	; (8001df0 <HAL_GPIO_Init+0x30c>)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2a:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4e:	4a31      	ldr	r2, [pc, #196]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d78:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	f67f ae90 	bls.w	8001b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	3724      	adds	r7, #36	; 0x24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40021400 	.word	0x40021400
 8001e0c:	40021800 	.word	0x40021800
 8001e10:	40021c00 	.word	0x40021c00
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d104      	bne.n	8001e6e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	619a      	str	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f806 	bl	8001eb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e11f      	b.n	800211a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe ff3c 	bl	8000d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2224      	movs	r2, #36	; 0x24
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f2c:	f001 f82e 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8001f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4a7b      	ldr	r2, [pc, #492]	; (8002124 <HAL_I2C_Init+0x25c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d807      	bhi.n	8001f4c <HAL_I2C_Init+0x84>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4a7a      	ldr	r2, [pc, #488]	; (8002128 <HAL_I2C_Init+0x260>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	bf94      	ite	ls
 8001f44:	2301      	movls	r3, #1
 8001f46:	2300      	movhi	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e006      	b.n	8001f5a <HAL_I2C_Init+0x92>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4a77      	ldr	r2, [pc, #476]	; (800212c <HAL_I2C_Init+0x264>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	bf94      	ite	ls
 8001f54:	2301      	movls	r3, #1
 8001f56:	2300      	movhi	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0db      	b.n	800211a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4a72      	ldr	r2, [pc, #456]	; (8002130 <HAL_I2C_Init+0x268>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0c9b      	lsrs	r3, r3, #18
 8001f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a64      	ldr	r2, [pc, #400]	; (8002124 <HAL_I2C_Init+0x25c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d802      	bhi.n	8001f9c <HAL_I2C_Init+0xd4>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	e009      	b.n	8001fb0 <HAL_I2C_Init+0xe8>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	4a63      	ldr	r2, [pc, #396]	; (8002134 <HAL_I2C_Init+0x26c>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	3301      	adds	r3, #1
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4956      	ldr	r1, [pc, #344]	; (8002124 <HAL_I2C_Init+0x25c>)
 8001fcc:	428b      	cmp	r3, r1
 8001fce:	d80d      	bhi.n	8001fec <HAL_I2C_Init+0x124>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1e59      	subs	r1, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	bf38      	it	cc
 8001fe8:	2304      	movcc	r3, #4
 8001fea:	e04f      	b.n	800208c <HAL_I2C_Init+0x1c4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d111      	bne.n	8002018 <HAL_I2C_Init+0x150>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1e58      	subs	r0, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	440b      	add	r3, r1
 8002002:	fbb0 f3f3 	udiv	r3, r0, r3
 8002006:	3301      	adds	r3, #1
 8002008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e012      	b.n	800203e <HAL_I2C_Init+0x176>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e58      	subs	r0, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	0099      	lsls	r1, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	fbb0 f3f3 	udiv	r3, r0, r3
 800202e:	3301      	adds	r3, #1
 8002030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_I2C_Init+0x17e>
 8002042:	2301      	movs	r3, #1
 8002044:	e022      	b.n	800208c <HAL_I2C_Init+0x1c4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10e      	bne.n	800206c <HAL_I2C_Init+0x1a4>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1e58      	subs	r0, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6859      	ldr	r1, [r3, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	440b      	add	r3, r1
 800205c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002060:	3301      	adds	r3, #1
 8002062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206a:	e00f      	b.n	800208c <HAL_I2C_Init+0x1c4>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1e58      	subs	r0, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	0099      	lsls	r1, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002082:	3301      	adds	r3, #1
 8002084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	6809      	ldr	r1, [r1, #0]
 8002090:	4313      	orrs	r3, r2
 8002092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69da      	ldr	r2, [r3, #28]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6911      	ldr	r1, [r2, #16]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68d2      	ldr	r2, [r2, #12]
 80020c6:	4311      	orrs	r1, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	000186a0 	.word	0x000186a0
 8002128:	001e847f 	.word	0x001e847f
 800212c:	003d08ff 	.word	0x003d08ff
 8002130:	431bde83 	.word	0x431bde83
 8002134:	10624dd3 	.word	0x10624dd3

08002138 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	461a      	mov	r2, r3
 8002146:	4603      	mov	r3, r0
 8002148:	817b      	strh	r3, [r7, #10]
 800214a:	460b      	mov	r3, r1
 800214c:	813b      	strh	r3, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002152:	f7ff fb87 	bl	8001864 <HAL_GetTick>
 8002156:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b20      	cmp	r3, #32
 8002162:	f040 80d9 	bne.w	8002318 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2319      	movs	r3, #25
 800216c:	2201      	movs	r2, #1
 800216e:	496d      	ldr	r1, [pc, #436]	; (8002324 <HAL_I2C_Mem_Write+0x1ec>)
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f96f 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800217c:	2302      	movs	r3, #2
 800217e:	e0cc      	b.n	800231a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_I2C_Mem_Write+0x56>
 800218a:	2302      	movs	r3, #2
 800218c:	e0c5      	b.n	800231a <HAL_I2C_Mem_Write+0x1e2>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d007      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2221      	movs	r2, #33	; 0x21
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2240      	movs	r2, #64	; 0x40
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a3a      	ldr	r2, [r7, #32]
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4a4d      	ldr	r2, [pc, #308]	; (8002328 <HAL_I2C_Mem_Write+0x1f0>)
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021f6:	88f8      	ldrh	r0, [r7, #6]
 80021f8:	893a      	ldrh	r2, [r7, #8]
 80021fa:	8979      	ldrh	r1, [r7, #10]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4603      	mov	r3, r0
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f890 	bl	800232c <I2C_RequestMemoryWrite>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d052      	beq.n	80022b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e081      	b.n	800231a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f9f0 	bl	8002600 <I2C_WaitOnTXEFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b04      	cmp	r3, #4
 800222c:	d107      	bne.n	800223e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06b      	b.n	800231a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b04      	cmp	r3, #4
 800227e:	d11b      	bne.n	80022b8 <HAL_I2C_Mem_Write+0x180>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	d017      	beq.n	80022b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1aa      	bne.n	8002216 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f9dc 	bl	8002682 <I2C_WaitOnBTFFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00d      	beq.n	80022ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d107      	bne.n	80022e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e016      	b.n	800231a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	e000      	b.n	800231a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002318:	2302      	movs	r3, #2
  }
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	00100002 	.word	0x00100002
 8002328:	ffff0000 	.word	0xffff0000

0800232c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4603      	mov	r3, r0
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	460b      	mov	r3, r1
 8002340:	813b      	strh	r3, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002354:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	2200      	movs	r2, #0
 800235e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f876 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e05f      	b.n	8002448 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002388:	897b      	ldrh	r3, [r7, #10]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002396:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	6a3a      	ldr	r2, [r7, #32]
 800239c:	492c      	ldr	r1, [pc, #176]	; (8002450 <I2C_RequestMemoryWrite+0x124>)
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f8af 	bl	8002502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e04c      	b.n	8002448 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c6:	6a39      	ldr	r1, [r7, #32]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f919 	bl	8002600 <I2C_WaitOnTXEFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00d      	beq.n	80023f0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d107      	bne.n	80023ec <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e02b      	b.n	8002448 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d105      	bne.n	8002402 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023f6:	893b      	ldrh	r3, [r7, #8]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	611a      	str	r2, [r3, #16]
 8002400:	e021      	b.n	8002446 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002402:	893b      	ldrh	r3, [r7, #8]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	b29b      	uxth	r3, r3
 8002408:	b2da      	uxtb	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002412:	6a39      	ldr	r1, [r7, #32]
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f8f3 	bl	8002600 <I2C_WaitOnTXEFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00d      	beq.n	800243c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	2b04      	cmp	r3, #4
 8002426:	d107      	bne.n	8002438 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002436:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e005      	b.n	8002448 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800243c:	893b      	ldrh	r3, [r7, #8]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	00010002 	.word	0x00010002

08002454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002464:	e025      	b.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800246c:	d021      	beq.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246e:	f7ff f9f9 	bl	8001864 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d302      	bcc.n	8002484 <I2C_WaitOnFlagUntilTimeout+0x30>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d116      	bne.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f043 0220 	orr.w	r2, r3, #32
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e023      	b.n	80024fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d10d      	bne.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4013      	ands	r3, r2
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	bf0c      	ite	eq
 80024ce:	2301      	moveq	r3, #1
 80024d0:	2300      	movne	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	e00c      	b.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4013      	ands	r3, r2
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bf0c      	ite	eq
 80024ea:	2301      	moveq	r3, #1
 80024ec:	2300      	movne	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d0b6      	beq.n	8002466 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002510:	e051      	b.n	80025b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002520:	d123      	bne.n	800256a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002530:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800253a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f043 0204 	orr.w	r2, r3, #4
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e046      	b.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002570:	d021      	beq.n	80025b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002572:	f7ff f977 	bl	8001864 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d116      	bne.n	80025b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f043 0220 	orr.w	r2, r3, #32
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e020      	b.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10c      	bne.n	80025da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4013      	ands	r3, r2
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf14      	ite	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	2300      	moveq	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	e00b      	b.n	80025f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	43da      	mvns	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4013      	ands	r3, r2
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf14      	ite	ne
 80025ec:	2301      	movne	r3, #1
 80025ee:	2300      	moveq	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d18d      	bne.n	8002512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800260c:	e02d      	b.n	800266a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f878 	bl	8002704 <I2C_IsAcknowledgeFailed>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e02d      	b.n	800267a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002624:	d021      	beq.n	800266a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002626:	f7ff f91d 	bl	8001864 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	429a      	cmp	r2, r3
 8002634:	d302      	bcc.n	800263c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d116      	bne.n	800266a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f043 0220 	orr.w	r2, r3, #32
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e007      	b.n	800267a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d1ca      	bne.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800268e:	e02d      	b.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f837 	bl	8002704 <I2C_IsAcknowledgeFailed>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e02d      	b.n	80026fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a6:	d021      	beq.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a8:	f7ff f8dc 	bl	8001864 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d302      	bcc.n	80026be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d116      	bne.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e007      	b.n	80026fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d1ca      	bne.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271a:	d11b      	bne.n	8002754 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002724:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f043 0204 	orr.w	r2, r3, #4
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e25b      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d075      	beq.n	800286e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002782:	4ba3      	ldr	r3, [pc, #652]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d00c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278e:	4ba0      	ldr	r3, [pc, #640]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002796:	2b08      	cmp	r3, #8
 8002798:	d112      	bne.n	80027c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4b9d      	ldr	r3, [pc, #628]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027a6:	d10b      	bne.n	80027c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	4b99      	ldr	r3, [pc, #612]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d05b      	beq.n	800286c <HAL_RCC_OscConfig+0x108>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d157      	bne.n	800286c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e236      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d106      	bne.n	80027d8 <HAL_RCC_OscConfig+0x74>
 80027ca:	4b91      	ldr	r3, [pc, #580]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a90      	ldr	r2, [pc, #576]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e01d      	b.n	8002814 <HAL_RCC_OscConfig+0xb0>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x98>
 80027e2:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a8a      	ldr	r2, [pc, #552]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a87      	ldr	r2, [pc, #540]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e00b      	b.n	8002814 <HAL_RCC_OscConfig+0xb0>
 80027fc:	4b84      	ldr	r3, [pc, #528]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a83      	ldr	r2, [pc, #524]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b81      	ldr	r3, [pc, #516]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a80      	ldr	r2, [pc, #512]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 800280e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff f822 	bl	8001864 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002824:	f7ff f81e 	bl	8001864 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e1fb      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0xc0>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff f80e 	bl	8001864 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff f80a 	bl	8001864 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1e7      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285e:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0xe8>
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d063      	beq.n	8002942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287a:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002886:	4b62      	ldr	r3, [pc, #392]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800288e:	2b08      	cmp	r3, #8
 8002890:	d11c      	bne.n	80028cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002892:	4b5f      	ldr	r3, [pc, #380]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d116      	bne.n	80028cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289e:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_RCC_OscConfig+0x152>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1bb      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b56      	ldr	r3, [pc, #344]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4952      	ldr	r1, [pc, #328]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	e03a      	b.n	8002942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d4:	4b4f      	ldr	r3, [pc, #316]	; (8002a14 <HAL_RCC_OscConfig+0x2b0>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe ffc3 	bl	8001864 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e2:	f7fe ffbf 	bl	8001864 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e19c      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f4:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4940      	ldr	r1, [pc, #256]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	4313      	orrs	r3, r2
 8002912:	600b      	str	r3, [r1, #0]
 8002914:	e015      	b.n	8002942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002916:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <HAL_RCC_OscConfig+0x2b0>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe ffa2 	bl	8001864 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002924:	f7fe ff9e 	bl	8001864 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e17b      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d030      	beq.n	80029b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d016      	beq.n	8002984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002956:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_RCC_OscConfig+0x2b4>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe ff82 	bl	8001864 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002964:	f7fe ff7e 	bl	8001864 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e15b      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002976:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x200>
 8002982:	e015      	b.n	80029b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002984:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_RCC_OscConfig+0x2b4>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe ff6b 	bl	8001864 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002992:	f7fe ff67 	bl	8001864 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e144      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80029a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a0 	beq.w	8002afe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_OscConfig+0x2b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d121      	bne.n	8002a3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_RCC_OscConfig+0x2b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <HAL_RCC_OscConfig+0x2b8>)
 8002a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a06:	f7fe ff2d 	bl	8001864 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	e011      	b.n	8002a32 <HAL_RCC_OscConfig+0x2ce>
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800
 8002a14:	42470000 	.word	0x42470000
 8002a18:	42470e80 	.word	0x42470e80
 8002a1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a20:	f7fe ff20 	bl	8001864 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0fd      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	4b81      	ldr	r3, [pc, #516]	; (8002c38 <HAL_RCC_OscConfig+0x4d4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x2f0>
 8002a46:	4b7d      	ldr	r3, [pc, #500]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	4a7c      	ldr	r2, [pc, #496]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6713      	str	r3, [r2, #112]	; 0x70
 8002a52:	e01c      	b.n	8002a8e <HAL_RCC_OscConfig+0x32a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d10c      	bne.n	8002a76 <HAL_RCC_OscConfig+0x312>
 8002a5c:	4b77      	ldr	r3, [pc, #476]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a60:	4a76      	ldr	r2, [pc, #472]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	6713      	str	r3, [r2, #112]	; 0x70
 8002a68:	4b74      	ldr	r3, [pc, #464]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a73      	ldr	r2, [pc, #460]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	e00b      	b.n	8002a8e <HAL_RCC_OscConfig+0x32a>
 8002a76:	4b71      	ldr	r3, [pc, #452]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	4a70      	ldr	r2, [pc, #448]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	6713      	str	r3, [r2, #112]	; 0x70
 8002a82:	4b6e      	ldr	r3, [pc, #440]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	4a6d      	ldr	r2, [pc, #436]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a88:	f023 0304 	bic.w	r3, r3, #4
 8002a8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d015      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7fe fee5 	bl	8001864 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe fee1 	bl	8001864 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0bc      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab4:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ee      	beq.n	8002a9e <HAL_RCC_OscConfig+0x33a>
 8002ac0:	e014      	b.n	8002aec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe fecf 	bl	8001864 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe fecb 	bl	8001864 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0a6      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae0:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ee      	bne.n	8002aca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d105      	bne.n	8002afe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af2:	4b52      	ldr	r3, [pc, #328]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a51      	ldr	r2, [pc, #324]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8092 	beq.w	8002c2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b08:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d05c      	beq.n	8002bce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d141      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1c:	4b48      	ldr	r3, [pc, #288]	; (8002c40 <HAL_RCC_OscConfig+0x4dc>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fe fe9f 	bl	8001864 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7fe fe9b 	bl	8001864 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e078      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3c:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f0      	bne.n	8002b2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	019b      	lsls	r3, r3, #6
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	3b01      	subs	r3, #1
 8002b62:	041b      	lsls	r3, r3, #16
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	061b      	lsls	r3, r3, #24
 8002b6c:	4933      	ldr	r1, [pc, #204]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b72:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <HAL_RCC_OscConfig+0x4dc>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe fe74 	bl	8001864 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fe70 	bl	8001864 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e04d      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b92:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x41c>
 8002b9e:	e045      	b.n	8002c2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba0:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x4dc>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fe5d 	bl	8001864 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bae:	f7fe fe59 	bl	8001864 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e036      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x44a>
 8002bcc:	e02e      	b.n	8002c2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e029      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bda:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d11c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d115      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d10d      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d106      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	42470060 	.word	0x42470060

08002c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0cc      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d90c      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b8      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d020      	beq.n	8002cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c98:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb0:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	494d      	ldr	r1, [pc, #308]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d044      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d119      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e07f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d02:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e067      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d22:	4b37      	ldr	r3, [pc, #220]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f023 0203 	bic.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4934      	ldr	r1, [pc, #208]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d34:	f7fe fd96 	bl	8001864 <HAL_GetTick>
 8002d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3c:	f7fe fd92 	bl	8001864 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e04f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 020c 	and.w	r2, r3, #12
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1eb      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d64:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d20c      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e032      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4916      	ldr	r1, [pc, #88]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	490e      	ldr	r1, [pc, #56]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dca:	f000 f821 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8002dce:	4601      	mov	r1, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	5cd3      	ldrb	r3, [r2, r3]
 8002dde:	fa21 f303 	lsr.w	r3, r1, r3
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fcf6 	bl	80017dc <HAL_InitTick>

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023c00 	.word	0x40023c00
 8002e00:	40023800 	.word	0x40023800
 8002e04:	080053d8 	.word	0x080053d8
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000004 	.word	0x20000004

08002e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e26:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d007      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x32>
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d008      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x38>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 808d 	bne.w	8002f56 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e3c:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002e3e:	60bb      	str	r3, [r7, #8]
       break;
 8002e40:	e08c      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e42:	4b4b      	ldr	r3, [pc, #300]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e44:	60bb      	str	r3, [r7, #8]
      break;
 8002e46:	e089      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e48:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e52:	4b45      	ldr	r3, [pc, #276]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d023      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5e:	4b42      	ldr	r3, [pc, #264]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	f04f 0400 	mov.w	r4, #0
 8002e68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	ea03 0501 	and.w	r5, r3, r1
 8002e74:	ea04 0602 	and.w	r6, r4, r2
 8002e78:	4a3d      	ldr	r2, [pc, #244]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e7a:	fb02 f106 	mul.w	r1, r2, r6
 8002e7e:	2200      	movs	r2, #0
 8002e80:	fb02 f205 	mul.w	r2, r2, r5
 8002e84:	440a      	add	r2, r1
 8002e86:	493a      	ldr	r1, [pc, #232]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e88:	fba5 0101 	umull	r0, r1, r5, r1
 8002e8c:	1853      	adds	r3, r2, r1
 8002e8e:	4619      	mov	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f04f 0400 	mov.w	r4, #0
 8002e96:	461a      	mov	r2, r3
 8002e98:	4623      	mov	r3, r4
 8002e9a:	f7fd f9e9 	bl	8000270 <__aeabi_uldivmod>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e049      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea6:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	f04f 0400 	mov.w	r4, #0
 8002eb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	ea03 0501 	and.w	r5, r3, r1
 8002ebc:	ea04 0602 	and.w	r6, r4, r2
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	4632      	mov	r2, r6
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	f04f 0400 	mov.w	r4, #0
 8002ecc:	0154      	lsls	r4, r2, #5
 8002ece:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ed2:	014b      	lsls	r3, r1, #5
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	1b49      	subs	r1, r1, r5
 8002eda:	eb62 0206 	sbc.w	r2, r2, r6
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	f04f 0400 	mov.w	r4, #0
 8002ee6:	0194      	lsls	r4, r2, #6
 8002ee8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002eec:	018b      	lsls	r3, r1, #6
 8002eee:	1a5b      	subs	r3, r3, r1
 8002ef0:	eb64 0402 	sbc.w	r4, r4, r2
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	00e2      	lsls	r2, r4, #3
 8002efe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f02:	00d9      	lsls	r1, r3, #3
 8002f04:	460b      	mov	r3, r1
 8002f06:	4614      	mov	r4, r2
 8002f08:	195b      	adds	r3, r3, r5
 8002f0a:	eb44 0406 	adc.w	r4, r4, r6
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	02a2      	lsls	r2, r4, #10
 8002f18:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f1c:	0299      	lsls	r1, r3, #10
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4614      	mov	r4, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	4621      	mov	r1, r4
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f04f 0400 	mov.w	r4, #0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	f7fd f99e 	bl	8000270 <__aeabi_uldivmod>
 8002f34:	4603      	mov	r3, r0
 8002f36:	460c      	mov	r4, r1
 8002f38:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	0c1b      	lsrs	r3, r3, #16
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	3301      	adds	r3, #1
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	60bb      	str	r3, [r7, #8]
      break;
 8002f54:	e002      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002f58:	60bb      	str	r3, [r7, #8]
      break;
 8002f5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	00f42400 	.word	0x00f42400
 8002f70:	017d7840 	.word	0x017d7840

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000000 	.word	0x20000000

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f90:	f7ff fff0 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f94:	4601      	mov	r1, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0a9b      	lsrs	r3, r3, #10
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	080053e8 	.word	0x080053e8

08002fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fb8:	f7ff ffdc 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4601      	mov	r1, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0b5b      	lsrs	r3, r3, #13
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4a03      	ldr	r2, [pc, #12]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	080053e8 	.word	0x080053e8

08002fdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e01d      	b.n	800302a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd ff1c 	bl	8000e40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f000 f9d8 	bl	80033d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fc12 	bl	8003870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <HAL_TIM_PWM_Start+0x74>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_TIM_PWM_Start+0x2c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a14      	ldr	r2, [pc, #80]	; (80030ac <HAL_TIM_PWM_Start+0x78>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_TIM_PWM_Start+0x30>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_TIM_PWM_Start+0x32>
 8003064:	2300      	movs	r3, #0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b06      	cmp	r3, #6
 800308a:	d007      	beq.n	800309c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40010000 	.word	0x40010000
 80030ac:	40010400 	.word	0x40010400

080030b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e083      	b.n	80031cc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fd feff 	bl	8000edc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030f4:	f023 0307 	bic.w	r3, r3, #7
 80030f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3304      	adds	r3, #4
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f000 f963 	bl	80033d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	4313      	orrs	r3, r2
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003150:	f023 030c 	bic.w	r3, r3, #12
 8003154:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800315c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	4313      	orrs	r3, r2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	011a      	lsls	r2, r3, #4
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	031b      	lsls	r3, r3, #12
 8003180:	4313      	orrs	r3, r2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800318e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003196:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	4313      	orrs	r3, r2
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_TIM_Encoder_Start+0x16>
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d008      	beq.n	80031fa <HAL_TIM_Encoder_Start+0x26>
 80031e8:	e00f      	b.n	800320a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2201      	movs	r2, #1
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fb3c 	bl	8003870 <TIM_CCxChannelCmd>
      break;
 80031f8:	e016      	b.n	8003228 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2201      	movs	r2, #1
 8003200:	2104      	movs	r1, #4
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fb34 	bl	8003870 <TIM_CCxChannelCmd>
      break;
 8003208:	e00e      	b.n	8003228 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2201      	movs	r2, #1
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fb2c 	bl	8003870 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2201      	movs	r2, #1
 800321e:	2104      	movs	r1, #4
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fb25 	bl	8003870 <TIM_CCxChannelCmd>
      break;
 8003226:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800325a:	2302      	movs	r3, #2
 800325c:	e0b4      	b.n	80033c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2202      	movs	r2, #2
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	f200 809f 	bhi.w	80033b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003276:	a201      	add	r2, pc, #4	; (adr r2, 800327c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	080032b1 	.word	0x080032b1
 8003280:	080033b5 	.word	0x080033b5
 8003284:	080033b5 	.word	0x080033b5
 8003288:	080033b5 	.word	0x080033b5
 800328c:	080032f1 	.word	0x080032f1
 8003290:	080033b5 	.word	0x080033b5
 8003294:	080033b5 	.word	0x080033b5
 8003298:	080033b5 	.word	0x080033b5
 800329c:	08003333 	.word	0x08003333
 80032a0:	080033b5 	.word	0x080033b5
 80032a4:	080033b5 	.word	0x080033b5
 80032a8:	080033b5 	.word	0x080033b5
 80032ac:	08003373 	.word	0x08003373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f92a 	bl	8003510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0208 	orr.w	r2, r2, #8
 80032ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0204 	bic.w	r2, r2, #4
 80032da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6999      	ldr	r1, [r3, #24]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	619a      	str	r2, [r3, #24]
      break;
 80032ee:	e062      	b.n	80033b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f97a 	bl	80035f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6999      	ldr	r1, [r3, #24]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	021a      	lsls	r2, r3, #8
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	619a      	str	r2, [r3, #24]
      break;
 8003330:	e041      	b.n	80033b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f9cf 	bl	80036dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0208 	orr.w	r2, r2, #8
 800334c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0204 	bic.w	r2, r2, #4
 800335c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69d9      	ldr	r1, [r3, #28]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	61da      	str	r2, [r3, #28]
      break;
 8003370:	e021      	b.n	80033b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fa23 	bl	80037c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800338c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69d9      	ldr	r1, [r3, #28]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	021a      	lsls	r2, r3, #8
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	61da      	str	r2, [r3, #28]
      break;
 80033b2:	e000      	b.n	80033b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80033b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a40      	ldr	r2, [pc, #256]	; (80034e4 <TIM_Base_SetConfig+0x114>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d013      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d00f      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a3d      	ldr	r2, [pc, #244]	; (80034e8 <TIM_Base_SetConfig+0x118>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00b      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a3c      	ldr	r2, [pc, #240]	; (80034ec <TIM_Base_SetConfig+0x11c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d007      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a3b      	ldr	r2, [pc, #236]	; (80034f0 <TIM_Base_SetConfig+0x120>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d003      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a3a      	ldr	r2, [pc, #232]	; (80034f4 <TIM_Base_SetConfig+0x124>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d108      	bne.n	8003422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a2f      	ldr	r2, [pc, #188]	; (80034e4 <TIM_Base_SetConfig+0x114>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02b      	beq.n	8003482 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003430:	d027      	beq.n	8003482 <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2c      	ldr	r2, [pc, #176]	; (80034e8 <TIM_Base_SetConfig+0x118>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d023      	beq.n	8003482 <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <TIM_Base_SetConfig+0x11c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01f      	beq.n	8003482 <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a2a      	ldr	r2, [pc, #168]	; (80034f0 <TIM_Base_SetConfig+0x120>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01b      	beq.n	8003482 <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a29      	ldr	r2, [pc, #164]	; (80034f4 <TIM_Base_SetConfig+0x124>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d017      	beq.n	8003482 <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <TIM_Base_SetConfig+0x128>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a27      	ldr	r2, [pc, #156]	; (80034fc <TIM_Base_SetConfig+0x12c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00f      	beq.n	8003482 <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a26      	ldr	r2, [pc, #152]	; (8003500 <TIM_Base_SetConfig+0x130>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00b      	beq.n	8003482 <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a25      	ldr	r2, [pc, #148]	; (8003504 <TIM_Base_SetConfig+0x134>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a24      	ldr	r2, [pc, #144]	; (8003508 <TIM_Base_SetConfig+0x138>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a23      	ldr	r2, [pc, #140]	; (800350c <TIM_Base_SetConfig+0x13c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d108      	bne.n	8003494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <TIM_Base_SetConfig+0x114>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <TIM_Base_SetConfig+0xf8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a0c      	ldr	r2, [pc, #48]	; (80034f4 <TIM_Base_SetConfig+0x124>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d103      	bne.n	80034d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	615a      	str	r2, [r3, #20]
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40000c00 	.word	0x40000c00
 80034f4:	40010400 	.word	0x40010400
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40014400 	.word	0x40014400
 8003500:	40014800 	.word	0x40014800
 8003504:	40001800 	.word	0x40001800
 8003508:	40001c00 	.word	0x40001c00
 800350c:	40002000 	.word	0x40002000

08003510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f023 0201 	bic.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f023 0302 	bic.w	r3, r3, #2
 8003558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <TIM_OC1_SetConfig+0xd8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_OC1_SetConfig+0x64>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <TIM_OC1_SetConfig+0xdc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d10c      	bne.n	800358e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f023 0308 	bic.w	r3, r3, #8
 800357a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <TIM_OC1_SetConfig+0xd8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <TIM_OC1_SetConfig+0x8e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a14      	ldr	r2, [pc, #80]	; (80035ec <TIM_OC1_SetConfig+0xdc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d111      	bne.n	80035c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	621a      	str	r2, [r3, #32]
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	40010000 	.word	0x40010000
 80035ec:	40010400 	.word	0x40010400

080035f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f023 0210 	bic.w	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0320 	bic.w	r3, r3, #32
 800363a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a22      	ldr	r2, [pc, #136]	; (80036d4 <TIM_OC2_SetConfig+0xe4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_OC2_SetConfig+0x68>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a21      	ldr	r2, [pc, #132]	; (80036d8 <TIM_OC2_SetConfig+0xe8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d10d      	bne.n	8003674 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a17      	ldr	r2, [pc, #92]	; (80036d4 <TIM_OC2_SetConfig+0xe4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_OC2_SetConfig+0x94>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <TIM_OC2_SetConfig+0xe8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d113      	bne.n	80036ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800368a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40010000 	.word	0x40010000
 80036d8:	40010400 	.word	0x40010400

080036dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0303 	bic.w	r3, r3, #3
 8003712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a21      	ldr	r2, [pc, #132]	; (80037bc <TIM_OC3_SetConfig+0xe0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d003      	beq.n	8003742 <TIM_OC3_SetConfig+0x66>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a20      	ldr	r2, [pc, #128]	; (80037c0 <TIM_OC3_SetConfig+0xe4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10d      	bne.n	800375e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a16      	ldr	r2, [pc, #88]	; (80037bc <TIM_OC3_SetConfig+0xe0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d003      	beq.n	800376e <TIM_OC3_SetConfig+0x92>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a15      	ldr	r2, [pc, #84]	; (80037c0 <TIM_OC3_SetConfig+0xe4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d113      	bne.n	8003796 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800377c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	621a      	str	r2, [r3, #32]
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40010400 	.word	0x40010400

080037c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800380e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	031b      	lsls	r3, r3, #12
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <TIM_OC4_SetConfig+0xa4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <TIM_OC4_SetConfig+0x68>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a11      	ldr	r2, [pc, #68]	; (800386c <TIM_OC4_SetConfig+0xa8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d109      	bne.n	8003840 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	019b      	lsls	r3, r3, #6
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	621a      	str	r2, [r3, #32]
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40010000 	.word	0x40010000
 800386c:	40010400 	.word	0x40010400

08003870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	2201      	movs	r2, #1
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1a      	ldr	r2, [r3, #32]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	43db      	mvns	r3, r3
 8003892:	401a      	ands	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a1a      	ldr	r2, [r3, #32]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	fa01 f303 	lsl.w	r3, r1, r3
 80038a8:	431a      	orrs	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	621a      	str	r2, [r3, #32]
}
 80038ae:	bf00      	nop
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e05a      	b.n	800398a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a21      	ldr	r2, [pc, #132]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d022      	beq.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003920:	d01d      	beq.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d018      	beq.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00e      	beq.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d009      	beq.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d004      	beq.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d10c      	bne.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	4313      	orrs	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40010000 	.word	0x40010000
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800
 80039a4:	40000c00 	.word	0x40000c00
 80039a8:	40010400 	.word	0x40010400
 80039ac:	40014000 	.word	0x40014000
 80039b0:	40001800 	.word	0x40001800

080039b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e03d      	b.n	8003a4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e03f      	b.n	8003aea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd fb52 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	; 0x24
 8003a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f90b 	bl	8003cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b088      	sub	sp, #32
 8003af6:	af02      	add	r7, sp, #8
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	f040 8083 	bne.w	8003c1a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_UART_Transmit+0x2e>
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e07b      	b.n	8003c1c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Transmit+0x40>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e074      	b.n	8003c1c <HAL_UART_Transmit+0x12a>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2221      	movs	r2, #33	; 0x21
 8003b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b48:	f7fd fe8c 	bl	8001864 <HAL_GetTick>
 8003b4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003b62:	e042      	b.n	8003bea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7a:	d122      	bne.n	8003bc2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2200      	movs	r2, #0
 8003b84:	2180      	movs	r1, #128	; 0x80
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f84c 	bl	8003c24 <UART_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e042      	b.n	8003c1c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	e017      	b.n	8003bea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	e013      	b.n	8003bea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2180      	movs	r1, #128	; 0x80
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f829 	bl	8003c24 <UART_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e01f      	b.n	8003c1c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	60ba      	str	r2, [r7, #8]
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1b7      	bne.n	8003b64 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2140      	movs	r1, #64	; 0x40
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f810 	bl	8003c24 <UART_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e006      	b.n	8003c1c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e000      	b.n	8003c1c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
  }
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c34:	e02c      	b.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c3c:	d028      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c44:	f7fd fe0e 	bl	8001864 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d21d      	bcs.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c62:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e00f      	b.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d0c3      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003cfa:	f023 030c 	bic.w	r3, r3, #12
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	68f9      	ldr	r1, [r7, #12]
 8003d04:	430b      	orrs	r3, r1
 8003d06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d26:	f040 818b 	bne.w	8004040 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4ac1      	ldr	r2, [pc, #772]	; (8004034 <UART_SetConfig+0x37c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d005      	beq.n	8003d40 <UART_SetConfig+0x88>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4abf      	ldr	r2, [pc, #764]	; (8004038 <UART_SetConfig+0x380>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	f040 80bd 	bne.w	8003eba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d40:	f7ff f938 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 8003d44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	461d      	mov	r5, r3
 8003d4a:	f04f 0600 	mov.w	r6, #0
 8003d4e:	46a8      	mov	r8, r5
 8003d50:	46b1      	mov	r9, r6
 8003d52:	eb18 0308 	adds.w	r3, r8, r8
 8003d56:	eb49 0409 	adc.w	r4, r9, r9
 8003d5a:	4698      	mov	r8, r3
 8003d5c:	46a1      	mov	r9, r4
 8003d5e:	eb18 0805 	adds.w	r8, r8, r5
 8003d62:	eb49 0906 	adc.w	r9, r9, r6
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d7a:	4688      	mov	r8, r1
 8003d7c:	4691      	mov	r9, r2
 8003d7e:	eb18 0005 	adds.w	r0, r8, r5
 8003d82:	eb49 0106 	adc.w	r1, r9, r6
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	461d      	mov	r5, r3
 8003d8c:	f04f 0600 	mov.w	r6, #0
 8003d90:	196b      	adds	r3, r5, r5
 8003d92:	eb46 0406 	adc.w	r4, r6, r6
 8003d96:	461a      	mov	r2, r3
 8003d98:	4623      	mov	r3, r4
 8003d9a:	f7fc fa69 	bl	8000270 <__aeabi_uldivmod>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	460c      	mov	r4, r1
 8003da2:	461a      	mov	r2, r3
 8003da4:	4ba5      	ldr	r3, [pc, #660]	; (800403c <UART_SetConfig+0x384>)
 8003da6:	fba3 2302 	umull	r2, r3, r3, r2
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	461d      	mov	r5, r3
 8003db4:	f04f 0600 	mov.w	r6, #0
 8003db8:	46a9      	mov	r9, r5
 8003dba:	46b2      	mov	sl, r6
 8003dbc:	eb19 0309 	adds.w	r3, r9, r9
 8003dc0:	eb4a 040a 	adc.w	r4, sl, sl
 8003dc4:	4699      	mov	r9, r3
 8003dc6:	46a2      	mov	sl, r4
 8003dc8:	eb19 0905 	adds.w	r9, r9, r5
 8003dcc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dd0:	f04f 0100 	mov.w	r1, #0
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ddc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003de0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003de4:	4689      	mov	r9, r1
 8003de6:	4692      	mov	sl, r2
 8003de8:	eb19 0005 	adds.w	r0, r9, r5
 8003dec:	eb4a 0106 	adc.w	r1, sl, r6
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	461d      	mov	r5, r3
 8003df6:	f04f 0600 	mov.w	r6, #0
 8003dfa:	196b      	adds	r3, r5, r5
 8003dfc:	eb46 0406 	adc.w	r4, r6, r6
 8003e00:	461a      	mov	r2, r3
 8003e02:	4623      	mov	r3, r4
 8003e04:	f7fc fa34 	bl	8000270 <__aeabi_uldivmod>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b8b      	ldr	r3, [pc, #556]	; (800403c <UART_SetConfig+0x384>)
 8003e10:	fba3 1302 	umull	r1, r3, r3, r2
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	2164      	movs	r1, #100	; 0x64
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	3332      	adds	r3, #50	; 0x32
 8003e22:	4a86      	ldr	r2, [pc, #536]	; (800403c <UART_SetConfig+0x384>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	095b      	lsrs	r3, r3, #5
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e30:	4498      	add	r8, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	461d      	mov	r5, r3
 8003e36:	f04f 0600 	mov.w	r6, #0
 8003e3a:	46a9      	mov	r9, r5
 8003e3c:	46b2      	mov	sl, r6
 8003e3e:	eb19 0309 	adds.w	r3, r9, r9
 8003e42:	eb4a 040a 	adc.w	r4, sl, sl
 8003e46:	4699      	mov	r9, r3
 8003e48:	46a2      	mov	sl, r4
 8003e4a:	eb19 0905 	adds.w	r9, r9, r5
 8003e4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e52:	f04f 0100 	mov.w	r1, #0
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e66:	4689      	mov	r9, r1
 8003e68:	4692      	mov	sl, r2
 8003e6a:	eb19 0005 	adds.w	r0, r9, r5
 8003e6e:	eb4a 0106 	adc.w	r1, sl, r6
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	461d      	mov	r5, r3
 8003e78:	f04f 0600 	mov.w	r6, #0
 8003e7c:	196b      	adds	r3, r5, r5
 8003e7e:	eb46 0406 	adc.w	r4, r6, r6
 8003e82:	461a      	mov	r2, r3
 8003e84:	4623      	mov	r3, r4
 8003e86:	f7fc f9f3 	bl	8000270 <__aeabi_uldivmod>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4b6a      	ldr	r3, [pc, #424]	; (800403c <UART_SetConfig+0x384>)
 8003e92:	fba3 1302 	umull	r1, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	2164      	movs	r1, #100	; 0x64
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	3332      	adds	r3, #50	; 0x32
 8003ea4:	4a65      	ldr	r2, [pc, #404]	; (800403c <UART_SetConfig+0x384>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	f003 0207 	and.w	r2, r3, #7
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4442      	add	r2, r8
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	e26f      	b.n	800439a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eba:	f7ff f867 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8003ebe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	461d      	mov	r5, r3
 8003ec4:	f04f 0600 	mov.w	r6, #0
 8003ec8:	46a8      	mov	r8, r5
 8003eca:	46b1      	mov	r9, r6
 8003ecc:	eb18 0308 	adds.w	r3, r8, r8
 8003ed0:	eb49 0409 	adc.w	r4, r9, r9
 8003ed4:	4698      	mov	r8, r3
 8003ed6:	46a1      	mov	r9, r4
 8003ed8:	eb18 0805 	adds.w	r8, r8, r5
 8003edc:	eb49 0906 	adc.w	r9, r9, r6
 8003ee0:	f04f 0100 	mov.w	r1, #0
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003eec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ef0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ef4:	4688      	mov	r8, r1
 8003ef6:	4691      	mov	r9, r2
 8003ef8:	eb18 0005 	adds.w	r0, r8, r5
 8003efc:	eb49 0106 	adc.w	r1, r9, r6
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	461d      	mov	r5, r3
 8003f06:	f04f 0600 	mov.w	r6, #0
 8003f0a:	196b      	adds	r3, r5, r5
 8003f0c:	eb46 0406 	adc.w	r4, r6, r6
 8003f10:	461a      	mov	r2, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	f7fc f9ac 	bl	8000270 <__aeabi_uldivmod>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4b47      	ldr	r3, [pc, #284]	; (800403c <UART_SetConfig+0x384>)
 8003f20:	fba3 2302 	umull	r2, r3, r3, r2
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	461d      	mov	r5, r3
 8003f2e:	f04f 0600 	mov.w	r6, #0
 8003f32:	46a9      	mov	r9, r5
 8003f34:	46b2      	mov	sl, r6
 8003f36:	eb19 0309 	adds.w	r3, r9, r9
 8003f3a:	eb4a 040a 	adc.w	r4, sl, sl
 8003f3e:	4699      	mov	r9, r3
 8003f40:	46a2      	mov	sl, r4
 8003f42:	eb19 0905 	adds.w	r9, r9, r5
 8003f46:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f4a:	f04f 0100 	mov.w	r1, #0
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f5e:	4689      	mov	r9, r1
 8003f60:	4692      	mov	sl, r2
 8003f62:	eb19 0005 	adds.w	r0, r9, r5
 8003f66:	eb4a 0106 	adc.w	r1, sl, r6
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	461d      	mov	r5, r3
 8003f70:	f04f 0600 	mov.w	r6, #0
 8003f74:	196b      	adds	r3, r5, r5
 8003f76:	eb46 0406 	adc.w	r4, r6, r6
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4623      	mov	r3, r4
 8003f7e:	f7fc f977 	bl	8000270 <__aeabi_uldivmod>
 8003f82:	4603      	mov	r3, r0
 8003f84:	460c      	mov	r4, r1
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b2c      	ldr	r3, [pc, #176]	; (800403c <UART_SetConfig+0x384>)
 8003f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	2164      	movs	r1, #100	; 0x64
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	3332      	adds	r3, #50	; 0x32
 8003f9c:	4a27      	ldr	r2, [pc, #156]	; (800403c <UART_SetConfig+0x384>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003faa:	4498      	add	r8, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	461d      	mov	r5, r3
 8003fb0:	f04f 0600 	mov.w	r6, #0
 8003fb4:	46a9      	mov	r9, r5
 8003fb6:	46b2      	mov	sl, r6
 8003fb8:	eb19 0309 	adds.w	r3, r9, r9
 8003fbc:	eb4a 040a 	adc.w	r4, sl, sl
 8003fc0:	4699      	mov	r9, r3
 8003fc2:	46a2      	mov	sl, r4
 8003fc4:	eb19 0905 	adds.w	r9, r9, r5
 8003fc8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fcc:	f04f 0100 	mov.w	r1, #0
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fe0:	4689      	mov	r9, r1
 8003fe2:	4692      	mov	sl, r2
 8003fe4:	eb19 0005 	adds.w	r0, r9, r5
 8003fe8:	eb4a 0106 	adc.w	r1, sl, r6
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	461d      	mov	r5, r3
 8003ff2:	f04f 0600 	mov.w	r6, #0
 8003ff6:	196b      	adds	r3, r5, r5
 8003ff8:	eb46 0406 	adc.w	r4, r6, r6
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4623      	mov	r3, r4
 8004000:	f7fc f936 	bl	8000270 <__aeabi_uldivmod>
 8004004:	4603      	mov	r3, r0
 8004006:	460c      	mov	r4, r1
 8004008:	461a      	mov	r2, r3
 800400a:	4b0c      	ldr	r3, [pc, #48]	; (800403c <UART_SetConfig+0x384>)
 800400c:	fba3 1302 	umull	r1, r3, r3, r2
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	2164      	movs	r1, #100	; 0x64
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	3332      	adds	r3, #50	; 0x32
 800401e:	4a07      	ldr	r2, [pc, #28]	; (800403c <UART_SetConfig+0x384>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	f003 0207 	and.w	r2, r3, #7
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4442      	add	r2, r8
 8004030:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004032:	e1b2      	b.n	800439a <UART_SetConfig+0x6e2>
 8004034:	40011000 	.word	0x40011000
 8004038:	40011400 	.word	0x40011400
 800403c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4ad7      	ldr	r2, [pc, #860]	; (80043a4 <UART_SetConfig+0x6ec>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d005      	beq.n	8004056 <UART_SetConfig+0x39e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4ad6      	ldr	r2, [pc, #856]	; (80043a8 <UART_SetConfig+0x6f0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	f040 80d1 	bne.w	80041f8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004056:	f7fe ffad 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 800405a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	469a      	mov	sl, r3
 8004060:	f04f 0b00 	mov.w	fp, #0
 8004064:	46d0      	mov	r8, sl
 8004066:	46d9      	mov	r9, fp
 8004068:	eb18 0308 	adds.w	r3, r8, r8
 800406c:	eb49 0409 	adc.w	r4, r9, r9
 8004070:	4698      	mov	r8, r3
 8004072:	46a1      	mov	r9, r4
 8004074:	eb18 080a 	adds.w	r8, r8, sl
 8004078:	eb49 090b 	adc.w	r9, r9, fp
 800407c:	f04f 0100 	mov.w	r1, #0
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004088:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800408c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004090:	4688      	mov	r8, r1
 8004092:	4691      	mov	r9, r2
 8004094:	eb1a 0508 	adds.w	r5, sl, r8
 8004098:	eb4b 0609 	adc.w	r6, fp, r9
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	4619      	mov	r1, r3
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	f04f 0400 	mov.w	r4, #0
 80040ae:	0094      	lsls	r4, r2, #2
 80040b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040b4:	008b      	lsls	r3, r1, #2
 80040b6:	461a      	mov	r2, r3
 80040b8:	4623      	mov	r3, r4
 80040ba:	4628      	mov	r0, r5
 80040bc:	4631      	mov	r1, r6
 80040be:	f7fc f8d7 	bl	8000270 <__aeabi_uldivmod>
 80040c2:	4603      	mov	r3, r0
 80040c4:	460c      	mov	r4, r1
 80040c6:	461a      	mov	r2, r3
 80040c8:	4bb8      	ldr	r3, [pc, #736]	; (80043ac <UART_SetConfig+0x6f4>)
 80040ca:	fba3 2302 	umull	r2, r3, r3, r2
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	469b      	mov	fp, r3
 80040d8:	f04f 0c00 	mov.w	ip, #0
 80040dc:	46d9      	mov	r9, fp
 80040de:	46e2      	mov	sl, ip
 80040e0:	eb19 0309 	adds.w	r3, r9, r9
 80040e4:	eb4a 040a 	adc.w	r4, sl, sl
 80040e8:	4699      	mov	r9, r3
 80040ea:	46a2      	mov	sl, r4
 80040ec:	eb19 090b 	adds.w	r9, r9, fp
 80040f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040f4:	f04f 0100 	mov.w	r1, #0
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004100:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004104:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004108:	4689      	mov	r9, r1
 800410a:	4692      	mov	sl, r2
 800410c:	eb1b 0509 	adds.w	r5, fp, r9
 8004110:	eb4c 060a 	adc.w	r6, ip, sl
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4619      	mov	r1, r3
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	f04f 0400 	mov.w	r4, #0
 8004126:	0094      	lsls	r4, r2, #2
 8004128:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800412c:	008b      	lsls	r3, r1, #2
 800412e:	461a      	mov	r2, r3
 8004130:	4623      	mov	r3, r4
 8004132:	4628      	mov	r0, r5
 8004134:	4631      	mov	r1, r6
 8004136:	f7fc f89b 	bl	8000270 <__aeabi_uldivmod>
 800413a:	4603      	mov	r3, r0
 800413c:	460c      	mov	r4, r1
 800413e:	461a      	mov	r2, r3
 8004140:	4b9a      	ldr	r3, [pc, #616]	; (80043ac <UART_SetConfig+0x6f4>)
 8004142:	fba3 1302 	umull	r1, r3, r3, r2
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2164      	movs	r1, #100	; 0x64
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	3332      	adds	r3, #50	; 0x32
 8004154:	4a95      	ldr	r2, [pc, #596]	; (80043ac <UART_SetConfig+0x6f4>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004160:	4498      	add	r8, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	469b      	mov	fp, r3
 8004166:	f04f 0c00 	mov.w	ip, #0
 800416a:	46d9      	mov	r9, fp
 800416c:	46e2      	mov	sl, ip
 800416e:	eb19 0309 	adds.w	r3, r9, r9
 8004172:	eb4a 040a 	adc.w	r4, sl, sl
 8004176:	4699      	mov	r9, r3
 8004178:	46a2      	mov	sl, r4
 800417a:	eb19 090b 	adds.w	r9, r9, fp
 800417e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800418e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004192:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004196:	4689      	mov	r9, r1
 8004198:	4692      	mov	sl, r2
 800419a:	eb1b 0509 	adds.w	r5, fp, r9
 800419e:	eb4c 060a 	adc.w	r6, ip, sl
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4619      	mov	r1, r3
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	f04f 0400 	mov.w	r4, #0
 80041b4:	0094      	lsls	r4, r2, #2
 80041b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041ba:	008b      	lsls	r3, r1, #2
 80041bc:	461a      	mov	r2, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	4628      	mov	r0, r5
 80041c2:	4631      	mov	r1, r6
 80041c4:	f7fc f854 	bl	8000270 <__aeabi_uldivmod>
 80041c8:	4603      	mov	r3, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	461a      	mov	r2, r3
 80041ce:	4b77      	ldr	r3, [pc, #476]	; (80043ac <UART_SetConfig+0x6f4>)
 80041d0:	fba3 1302 	umull	r1, r3, r3, r2
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	2164      	movs	r1, #100	; 0x64
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	3332      	adds	r3, #50	; 0x32
 80041e2:	4a72      	ldr	r2, [pc, #456]	; (80043ac <UART_SetConfig+0x6f4>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	f003 020f 	and.w	r2, r3, #15
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4442      	add	r2, r8
 80041f4:	609a      	str	r2, [r3, #8]
 80041f6:	e0d0      	b.n	800439a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80041f8:	f7fe fec8 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 80041fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	469a      	mov	sl, r3
 8004202:	f04f 0b00 	mov.w	fp, #0
 8004206:	46d0      	mov	r8, sl
 8004208:	46d9      	mov	r9, fp
 800420a:	eb18 0308 	adds.w	r3, r8, r8
 800420e:	eb49 0409 	adc.w	r4, r9, r9
 8004212:	4698      	mov	r8, r3
 8004214:	46a1      	mov	r9, r4
 8004216:	eb18 080a 	adds.w	r8, r8, sl
 800421a:	eb49 090b 	adc.w	r9, r9, fp
 800421e:	f04f 0100 	mov.w	r1, #0
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800422a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800422e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004232:	4688      	mov	r8, r1
 8004234:	4691      	mov	r9, r2
 8004236:	eb1a 0508 	adds.w	r5, sl, r8
 800423a:	eb4b 0609 	adc.w	r6, fp, r9
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4619      	mov	r1, r3
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	f04f 0400 	mov.w	r4, #0
 8004250:	0094      	lsls	r4, r2, #2
 8004252:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004256:	008b      	lsls	r3, r1, #2
 8004258:	461a      	mov	r2, r3
 800425a:	4623      	mov	r3, r4
 800425c:	4628      	mov	r0, r5
 800425e:	4631      	mov	r1, r6
 8004260:	f7fc f806 	bl	8000270 <__aeabi_uldivmod>
 8004264:	4603      	mov	r3, r0
 8004266:	460c      	mov	r4, r1
 8004268:	461a      	mov	r2, r3
 800426a:	4b50      	ldr	r3, [pc, #320]	; (80043ac <UART_SetConfig+0x6f4>)
 800426c:	fba3 2302 	umull	r2, r3, r3, r2
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	469b      	mov	fp, r3
 800427a:	f04f 0c00 	mov.w	ip, #0
 800427e:	46d9      	mov	r9, fp
 8004280:	46e2      	mov	sl, ip
 8004282:	eb19 0309 	adds.w	r3, r9, r9
 8004286:	eb4a 040a 	adc.w	r4, sl, sl
 800428a:	4699      	mov	r9, r3
 800428c:	46a2      	mov	sl, r4
 800428e:	eb19 090b 	adds.w	r9, r9, fp
 8004292:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042aa:	4689      	mov	r9, r1
 80042ac:	4692      	mov	sl, r2
 80042ae:	eb1b 0509 	adds.w	r5, fp, r9
 80042b2:	eb4c 060a 	adc.w	r6, ip, sl
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4619      	mov	r1, r3
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	f04f 0400 	mov.w	r4, #0
 80042c8:	0094      	lsls	r4, r2, #2
 80042ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042ce:	008b      	lsls	r3, r1, #2
 80042d0:	461a      	mov	r2, r3
 80042d2:	4623      	mov	r3, r4
 80042d4:	4628      	mov	r0, r5
 80042d6:	4631      	mov	r1, r6
 80042d8:	f7fb ffca 	bl	8000270 <__aeabi_uldivmod>
 80042dc:	4603      	mov	r3, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	461a      	mov	r2, r3
 80042e2:	4b32      	ldr	r3, [pc, #200]	; (80043ac <UART_SetConfig+0x6f4>)
 80042e4:	fba3 1302 	umull	r1, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	2164      	movs	r1, #100	; 0x64
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	3332      	adds	r3, #50	; 0x32
 80042f6:	4a2d      	ldr	r2, [pc, #180]	; (80043ac <UART_SetConfig+0x6f4>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004302:	4498      	add	r8, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	469b      	mov	fp, r3
 8004308:	f04f 0c00 	mov.w	ip, #0
 800430c:	46d9      	mov	r9, fp
 800430e:	46e2      	mov	sl, ip
 8004310:	eb19 0309 	adds.w	r3, r9, r9
 8004314:	eb4a 040a 	adc.w	r4, sl, sl
 8004318:	4699      	mov	r9, r3
 800431a:	46a2      	mov	sl, r4
 800431c:	eb19 090b 	adds.w	r9, r9, fp
 8004320:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004324:	f04f 0100 	mov.w	r1, #0
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004330:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004334:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004338:	4689      	mov	r9, r1
 800433a:	4692      	mov	sl, r2
 800433c:	eb1b 0509 	adds.w	r5, fp, r9
 8004340:	eb4c 060a 	adc.w	r6, ip, sl
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	4619      	mov	r1, r3
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	f04f 0400 	mov.w	r4, #0
 8004356:	0094      	lsls	r4, r2, #2
 8004358:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800435c:	008b      	lsls	r3, r1, #2
 800435e:	461a      	mov	r2, r3
 8004360:	4623      	mov	r3, r4
 8004362:	4628      	mov	r0, r5
 8004364:	4631      	mov	r1, r6
 8004366:	f7fb ff83 	bl	8000270 <__aeabi_uldivmod>
 800436a:	4603      	mov	r3, r0
 800436c:	460c      	mov	r4, r1
 800436e:	461a      	mov	r2, r3
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <UART_SetConfig+0x6f4>)
 8004372:	fba3 1302 	umull	r1, r3, r3, r2
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2164      	movs	r1, #100	; 0x64
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	3332      	adds	r3, #50	; 0x32
 8004384:	4a09      	ldr	r2, [pc, #36]	; (80043ac <UART_SetConfig+0x6f4>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	f003 020f 	and.w	r2, r3, #15
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4442      	add	r2, r8
 8004396:	609a      	str	r2, [r3, #8]
}
 8004398:	e7ff      	b.n	800439a <UART_SetConfig+0x6e2>
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a4:	40011000 	.word	0x40011000
 80043a8:	40011400 	.word	0x40011400
 80043ac:	51eb851f 	.word	0x51eb851f

080043b0 <__errno>:
 80043b0:	4b01      	ldr	r3, [pc, #4]	; (80043b8 <__errno+0x8>)
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	2000000c 	.word	0x2000000c

080043bc <__libc_init_array>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	4e0d      	ldr	r6, [pc, #52]	; (80043f4 <__libc_init_array+0x38>)
 80043c0:	4c0d      	ldr	r4, [pc, #52]	; (80043f8 <__libc_init_array+0x3c>)
 80043c2:	1ba4      	subs	r4, r4, r6
 80043c4:	10a4      	asrs	r4, r4, #2
 80043c6:	2500      	movs	r5, #0
 80043c8:	42a5      	cmp	r5, r4
 80043ca:	d109      	bne.n	80043e0 <__libc_init_array+0x24>
 80043cc:	4e0b      	ldr	r6, [pc, #44]	; (80043fc <__libc_init_array+0x40>)
 80043ce:	4c0c      	ldr	r4, [pc, #48]	; (8004400 <__libc_init_array+0x44>)
 80043d0:	f000 ff68 	bl	80052a4 <_init>
 80043d4:	1ba4      	subs	r4, r4, r6
 80043d6:	10a4      	asrs	r4, r4, #2
 80043d8:	2500      	movs	r5, #0
 80043da:	42a5      	cmp	r5, r4
 80043dc:	d105      	bne.n	80043ea <__libc_init_array+0x2e>
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043e4:	4798      	blx	r3
 80043e6:	3501      	adds	r5, #1
 80043e8:	e7ee      	b.n	80043c8 <__libc_init_array+0xc>
 80043ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043ee:	4798      	blx	r3
 80043f0:	3501      	adds	r5, #1
 80043f2:	e7f2      	b.n	80043da <__libc_init_array+0x1e>
 80043f4:	08005890 	.word	0x08005890
 80043f8:	08005890 	.word	0x08005890
 80043fc:	08005890 	.word	0x08005890
 8004400:	08005894 	.word	0x08005894

08004404 <memset>:
 8004404:	4402      	add	r2, r0
 8004406:	4603      	mov	r3, r0
 8004408:	4293      	cmp	r3, r2
 800440a:	d100      	bne.n	800440e <memset+0xa>
 800440c:	4770      	bx	lr
 800440e:	f803 1b01 	strb.w	r1, [r3], #1
 8004412:	e7f9      	b.n	8004408 <memset+0x4>

08004414 <iprintf>:
 8004414:	b40f      	push	{r0, r1, r2, r3}
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <iprintf+0x2c>)
 8004418:	b513      	push	{r0, r1, r4, lr}
 800441a:	681c      	ldr	r4, [r3, #0]
 800441c:	b124      	cbz	r4, 8004428 <iprintf+0x14>
 800441e:	69a3      	ldr	r3, [r4, #24]
 8004420:	b913      	cbnz	r3, 8004428 <iprintf+0x14>
 8004422:	4620      	mov	r0, r4
 8004424:	f000 fa22 	bl	800486c <__sinit>
 8004428:	ab05      	add	r3, sp, #20
 800442a:	9a04      	ldr	r2, [sp, #16]
 800442c:	68a1      	ldr	r1, [r4, #8]
 800442e:	9301      	str	r3, [sp, #4]
 8004430:	4620      	mov	r0, r4
 8004432:	f000 fbdb 	bl	8004bec <_vfiprintf_r>
 8004436:	b002      	add	sp, #8
 8004438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800443c:	b004      	add	sp, #16
 800443e:	4770      	bx	lr
 8004440:	2000000c 	.word	0x2000000c

08004444 <_puts_r>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	460e      	mov	r6, r1
 8004448:	4605      	mov	r5, r0
 800444a:	b118      	cbz	r0, 8004454 <_puts_r+0x10>
 800444c:	6983      	ldr	r3, [r0, #24]
 800444e:	b90b      	cbnz	r3, 8004454 <_puts_r+0x10>
 8004450:	f000 fa0c 	bl	800486c <__sinit>
 8004454:	69ab      	ldr	r3, [r5, #24]
 8004456:	68ac      	ldr	r4, [r5, #8]
 8004458:	b913      	cbnz	r3, 8004460 <_puts_r+0x1c>
 800445a:	4628      	mov	r0, r5
 800445c:	f000 fa06 	bl	800486c <__sinit>
 8004460:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <_puts_r+0xac>)
 8004462:	429c      	cmp	r4, r3
 8004464:	d117      	bne.n	8004496 <_puts_r+0x52>
 8004466:	686c      	ldr	r4, [r5, #4]
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	071b      	lsls	r3, r3, #28
 800446c:	d51d      	bpl.n	80044aa <_puts_r+0x66>
 800446e:	6923      	ldr	r3, [r4, #16]
 8004470:	b1db      	cbz	r3, 80044aa <_puts_r+0x66>
 8004472:	3e01      	subs	r6, #1
 8004474:	68a3      	ldr	r3, [r4, #8]
 8004476:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800447a:	3b01      	subs	r3, #1
 800447c:	60a3      	str	r3, [r4, #8]
 800447e:	b9e9      	cbnz	r1, 80044bc <_puts_r+0x78>
 8004480:	2b00      	cmp	r3, #0
 8004482:	da2e      	bge.n	80044e2 <_puts_r+0x9e>
 8004484:	4622      	mov	r2, r4
 8004486:	210a      	movs	r1, #10
 8004488:	4628      	mov	r0, r5
 800448a:	f000 f83f 	bl	800450c <__swbuf_r>
 800448e:	3001      	adds	r0, #1
 8004490:	d011      	beq.n	80044b6 <_puts_r+0x72>
 8004492:	200a      	movs	r0, #10
 8004494:	e011      	b.n	80044ba <_puts_r+0x76>
 8004496:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <_puts_r+0xb0>)
 8004498:	429c      	cmp	r4, r3
 800449a:	d101      	bne.n	80044a0 <_puts_r+0x5c>
 800449c:	68ac      	ldr	r4, [r5, #8]
 800449e:	e7e3      	b.n	8004468 <_puts_r+0x24>
 80044a0:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <_puts_r+0xb4>)
 80044a2:	429c      	cmp	r4, r3
 80044a4:	bf08      	it	eq
 80044a6:	68ec      	ldreq	r4, [r5, #12]
 80044a8:	e7de      	b.n	8004468 <_puts_r+0x24>
 80044aa:	4621      	mov	r1, r4
 80044ac:	4628      	mov	r0, r5
 80044ae:	f000 f87f 	bl	80045b0 <__swsetup_r>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d0dd      	beq.n	8004472 <_puts_r+0x2e>
 80044b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	2b00      	cmp	r3, #0
 80044be:	da04      	bge.n	80044ca <_puts_r+0x86>
 80044c0:	69a2      	ldr	r2, [r4, #24]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	dc06      	bgt.n	80044d4 <_puts_r+0x90>
 80044c6:	290a      	cmp	r1, #10
 80044c8:	d004      	beq.n	80044d4 <_puts_r+0x90>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	6022      	str	r2, [r4, #0]
 80044d0:	7019      	strb	r1, [r3, #0]
 80044d2:	e7cf      	b.n	8004474 <_puts_r+0x30>
 80044d4:	4622      	mov	r2, r4
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 f818 	bl	800450c <__swbuf_r>
 80044dc:	3001      	adds	r0, #1
 80044de:	d1c9      	bne.n	8004474 <_puts_r+0x30>
 80044e0:	e7e9      	b.n	80044b6 <_puts_r+0x72>
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	200a      	movs	r0, #10
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	6022      	str	r2, [r4, #0]
 80044ea:	7018      	strb	r0, [r3, #0]
 80044ec:	e7e5      	b.n	80044ba <_puts_r+0x76>
 80044ee:	bf00      	nop
 80044f0:	08005814 	.word	0x08005814
 80044f4:	08005834 	.word	0x08005834
 80044f8:	080057f4 	.word	0x080057f4

080044fc <puts>:
 80044fc:	4b02      	ldr	r3, [pc, #8]	; (8004508 <puts+0xc>)
 80044fe:	4601      	mov	r1, r0
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	f7ff bf9f 	b.w	8004444 <_puts_r>
 8004506:	bf00      	nop
 8004508:	2000000c 	.word	0x2000000c

0800450c <__swbuf_r>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	460e      	mov	r6, r1
 8004510:	4614      	mov	r4, r2
 8004512:	4605      	mov	r5, r0
 8004514:	b118      	cbz	r0, 800451e <__swbuf_r+0x12>
 8004516:	6983      	ldr	r3, [r0, #24]
 8004518:	b90b      	cbnz	r3, 800451e <__swbuf_r+0x12>
 800451a:	f000 f9a7 	bl	800486c <__sinit>
 800451e:	4b21      	ldr	r3, [pc, #132]	; (80045a4 <__swbuf_r+0x98>)
 8004520:	429c      	cmp	r4, r3
 8004522:	d12a      	bne.n	800457a <__swbuf_r+0x6e>
 8004524:	686c      	ldr	r4, [r5, #4]
 8004526:	69a3      	ldr	r3, [r4, #24]
 8004528:	60a3      	str	r3, [r4, #8]
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	071a      	lsls	r2, r3, #28
 800452e:	d52e      	bpl.n	800458e <__swbuf_r+0x82>
 8004530:	6923      	ldr	r3, [r4, #16]
 8004532:	b363      	cbz	r3, 800458e <__swbuf_r+0x82>
 8004534:	6923      	ldr	r3, [r4, #16]
 8004536:	6820      	ldr	r0, [r4, #0]
 8004538:	1ac0      	subs	r0, r0, r3
 800453a:	6963      	ldr	r3, [r4, #20]
 800453c:	b2f6      	uxtb	r6, r6
 800453e:	4283      	cmp	r3, r0
 8004540:	4637      	mov	r7, r6
 8004542:	dc04      	bgt.n	800454e <__swbuf_r+0x42>
 8004544:	4621      	mov	r1, r4
 8004546:	4628      	mov	r0, r5
 8004548:	f000 f926 	bl	8004798 <_fflush_r>
 800454c:	bb28      	cbnz	r0, 800459a <__swbuf_r+0x8e>
 800454e:	68a3      	ldr	r3, [r4, #8]
 8004550:	3b01      	subs	r3, #1
 8004552:	60a3      	str	r3, [r4, #8]
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	6022      	str	r2, [r4, #0]
 800455a:	701e      	strb	r6, [r3, #0]
 800455c:	6963      	ldr	r3, [r4, #20]
 800455e:	3001      	adds	r0, #1
 8004560:	4283      	cmp	r3, r0
 8004562:	d004      	beq.n	800456e <__swbuf_r+0x62>
 8004564:	89a3      	ldrh	r3, [r4, #12]
 8004566:	07db      	lsls	r3, r3, #31
 8004568:	d519      	bpl.n	800459e <__swbuf_r+0x92>
 800456a:	2e0a      	cmp	r6, #10
 800456c:	d117      	bne.n	800459e <__swbuf_r+0x92>
 800456e:	4621      	mov	r1, r4
 8004570:	4628      	mov	r0, r5
 8004572:	f000 f911 	bl	8004798 <_fflush_r>
 8004576:	b190      	cbz	r0, 800459e <__swbuf_r+0x92>
 8004578:	e00f      	b.n	800459a <__swbuf_r+0x8e>
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <__swbuf_r+0x9c>)
 800457c:	429c      	cmp	r4, r3
 800457e:	d101      	bne.n	8004584 <__swbuf_r+0x78>
 8004580:	68ac      	ldr	r4, [r5, #8]
 8004582:	e7d0      	b.n	8004526 <__swbuf_r+0x1a>
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <__swbuf_r+0xa0>)
 8004586:	429c      	cmp	r4, r3
 8004588:	bf08      	it	eq
 800458a:	68ec      	ldreq	r4, [r5, #12]
 800458c:	e7cb      	b.n	8004526 <__swbuf_r+0x1a>
 800458e:	4621      	mov	r1, r4
 8004590:	4628      	mov	r0, r5
 8004592:	f000 f80d 	bl	80045b0 <__swsetup_r>
 8004596:	2800      	cmp	r0, #0
 8004598:	d0cc      	beq.n	8004534 <__swbuf_r+0x28>
 800459a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800459e:	4638      	mov	r0, r7
 80045a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045a2:	bf00      	nop
 80045a4:	08005814 	.word	0x08005814
 80045a8:	08005834 	.word	0x08005834
 80045ac:	080057f4 	.word	0x080057f4

080045b0 <__swsetup_r>:
 80045b0:	4b32      	ldr	r3, [pc, #200]	; (800467c <__swsetup_r+0xcc>)
 80045b2:	b570      	push	{r4, r5, r6, lr}
 80045b4:	681d      	ldr	r5, [r3, #0]
 80045b6:	4606      	mov	r6, r0
 80045b8:	460c      	mov	r4, r1
 80045ba:	b125      	cbz	r5, 80045c6 <__swsetup_r+0x16>
 80045bc:	69ab      	ldr	r3, [r5, #24]
 80045be:	b913      	cbnz	r3, 80045c6 <__swsetup_r+0x16>
 80045c0:	4628      	mov	r0, r5
 80045c2:	f000 f953 	bl	800486c <__sinit>
 80045c6:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <__swsetup_r+0xd0>)
 80045c8:	429c      	cmp	r4, r3
 80045ca:	d10f      	bne.n	80045ec <__swsetup_r+0x3c>
 80045cc:	686c      	ldr	r4, [r5, #4]
 80045ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	0715      	lsls	r5, r2, #28
 80045d6:	d42c      	bmi.n	8004632 <__swsetup_r+0x82>
 80045d8:	06d0      	lsls	r0, r2, #27
 80045da:	d411      	bmi.n	8004600 <__swsetup_r+0x50>
 80045dc:	2209      	movs	r2, #9
 80045de:	6032      	str	r2, [r6, #0]
 80045e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045e4:	81a3      	strh	r3, [r4, #12]
 80045e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045ea:	e03e      	b.n	800466a <__swsetup_r+0xba>
 80045ec:	4b25      	ldr	r3, [pc, #148]	; (8004684 <__swsetup_r+0xd4>)
 80045ee:	429c      	cmp	r4, r3
 80045f0:	d101      	bne.n	80045f6 <__swsetup_r+0x46>
 80045f2:	68ac      	ldr	r4, [r5, #8]
 80045f4:	e7eb      	b.n	80045ce <__swsetup_r+0x1e>
 80045f6:	4b24      	ldr	r3, [pc, #144]	; (8004688 <__swsetup_r+0xd8>)
 80045f8:	429c      	cmp	r4, r3
 80045fa:	bf08      	it	eq
 80045fc:	68ec      	ldreq	r4, [r5, #12]
 80045fe:	e7e6      	b.n	80045ce <__swsetup_r+0x1e>
 8004600:	0751      	lsls	r1, r2, #29
 8004602:	d512      	bpl.n	800462a <__swsetup_r+0x7a>
 8004604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004606:	b141      	cbz	r1, 800461a <__swsetup_r+0x6a>
 8004608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800460c:	4299      	cmp	r1, r3
 800460e:	d002      	beq.n	8004616 <__swsetup_r+0x66>
 8004610:	4630      	mov	r0, r6
 8004612:	f000 fa19 	bl	8004a48 <_free_r>
 8004616:	2300      	movs	r3, #0
 8004618:	6363      	str	r3, [r4, #52]	; 0x34
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004620:	81a3      	strh	r3, [r4, #12]
 8004622:	2300      	movs	r3, #0
 8004624:	6063      	str	r3, [r4, #4]
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	f043 0308 	orr.w	r3, r3, #8
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	6923      	ldr	r3, [r4, #16]
 8004634:	b94b      	cbnz	r3, 800464a <__swsetup_r+0x9a>
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800463c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004640:	d003      	beq.n	800464a <__swsetup_r+0x9a>
 8004642:	4621      	mov	r1, r4
 8004644:	4630      	mov	r0, r6
 8004646:	f000 f9bf 	bl	80049c8 <__smakebuf_r>
 800464a:	89a2      	ldrh	r2, [r4, #12]
 800464c:	f012 0301 	ands.w	r3, r2, #1
 8004650:	d00c      	beq.n	800466c <__swsetup_r+0xbc>
 8004652:	2300      	movs	r3, #0
 8004654:	60a3      	str	r3, [r4, #8]
 8004656:	6963      	ldr	r3, [r4, #20]
 8004658:	425b      	negs	r3, r3
 800465a:	61a3      	str	r3, [r4, #24]
 800465c:	6923      	ldr	r3, [r4, #16]
 800465e:	b953      	cbnz	r3, 8004676 <__swsetup_r+0xc6>
 8004660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004664:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004668:	d1ba      	bne.n	80045e0 <__swsetup_r+0x30>
 800466a:	bd70      	pop	{r4, r5, r6, pc}
 800466c:	0792      	lsls	r2, r2, #30
 800466e:	bf58      	it	pl
 8004670:	6963      	ldrpl	r3, [r4, #20]
 8004672:	60a3      	str	r3, [r4, #8]
 8004674:	e7f2      	b.n	800465c <__swsetup_r+0xac>
 8004676:	2000      	movs	r0, #0
 8004678:	e7f7      	b.n	800466a <__swsetup_r+0xba>
 800467a:	bf00      	nop
 800467c:	2000000c 	.word	0x2000000c
 8004680:	08005814 	.word	0x08005814
 8004684:	08005834 	.word	0x08005834
 8004688:	080057f4 	.word	0x080057f4

0800468c <__sflush_r>:
 800468c:	898a      	ldrh	r2, [r1, #12]
 800468e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004692:	4605      	mov	r5, r0
 8004694:	0710      	lsls	r0, r2, #28
 8004696:	460c      	mov	r4, r1
 8004698:	d458      	bmi.n	800474c <__sflush_r+0xc0>
 800469a:	684b      	ldr	r3, [r1, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	dc05      	bgt.n	80046ac <__sflush_r+0x20>
 80046a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	dc02      	bgt.n	80046ac <__sflush_r+0x20>
 80046a6:	2000      	movs	r0, #0
 80046a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046ae:	2e00      	cmp	r6, #0
 80046b0:	d0f9      	beq.n	80046a6 <__sflush_r+0x1a>
 80046b2:	2300      	movs	r3, #0
 80046b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046b8:	682f      	ldr	r7, [r5, #0]
 80046ba:	6a21      	ldr	r1, [r4, #32]
 80046bc:	602b      	str	r3, [r5, #0]
 80046be:	d032      	beq.n	8004726 <__sflush_r+0x9a>
 80046c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	075a      	lsls	r2, r3, #29
 80046c6:	d505      	bpl.n	80046d4 <__sflush_r+0x48>
 80046c8:	6863      	ldr	r3, [r4, #4]
 80046ca:	1ac0      	subs	r0, r0, r3
 80046cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046ce:	b10b      	cbz	r3, 80046d4 <__sflush_r+0x48>
 80046d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046d2:	1ac0      	subs	r0, r0, r3
 80046d4:	2300      	movs	r3, #0
 80046d6:	4602      	mov	r2, r0
 80046d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046da:	6a21      	ldr	r1, [r4, #32]
 80046dc:	4628      	mov	r0, r5
 80046de:	47b0      	blx	r6
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	d106      	bne.n	80046f4 <__sflush_r+0x68>
 80046e6:	6829      	ldr	r1, [r5, #0]
 80046e8:	291d      	cmp	r1, #29
 80046ea:	d848      	bhi.n	800477e <__sflush_r+0xf2>
 80046ec:	4a29      	ldr	r2, [pc, #164]	; (8004794 <__sflush_r+0x108>)
 80046ee:	40ca      	lsrs	r2, r1
 80046f0:	07d6      	lsls	r6, r2, #31
 80046f2:	d544      	bpl.n	800477e <__sflush_r+0xf2>
 80046f4:	2200      	movs	r2, #0
 80046f6:	6062      	str	r2, [r4, #4]
 80046f8:	04d9      	lsls	r1, r3, #19
 80046fa:	6922      	ldr	r2, [r4, #16]
 80046fc:	6022      	str	r2, [r4, #0]
 80046fe:	d504      	bpl.n	800470a <__sflush_r+0x7e>
 8004700:	1c42      	adds	r2, r0, #1
 8004702:	d101      	bne.n	8004708 <__sflush_r+0x7c>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	b903      	cbnz	r3, 800470a <__sflush_r+0x7e>
 8004708:	6560      	str	r0, [r4, #84]	; 0x54
 800470a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800470c:	602f      	str	r7, [r5, #0]
 800470e:	2900      	cmp	r1, #0
 8004710:	d0c9      	beq.n	80046a6 <__sflush_r+0x1a>
 8004712:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004716:	4299      	cmp	r1, r3
 8004718:	d002      	beq.n	8004720 <__sflush_r+0x94>
 800471a:	4628      	mov	r0, r5
 800471c:	f000 f994 	bl	8004a48 <_free_r>
 8004720:	2000      	movs	r0, #0
 8004722:	6360      	str	r0, [r4, #52]	; 0x34
 8004724:	e7c0      	b.n	80046a8 <__sflush_r+0x1c>
 8004726:	2301      	movs	r3, #1
 8004728:	4628      	mov	r0, r5
 800472a:	47b0      	blx	r6
 800472c:	1c41      	adds	r1, r0, #1
 800472e:	d1c8      	bne.n	80046c2 <__sflush_r+0x36>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0c5      	beq.n	80046c2 <__sflush_r+0x36>
 8004736:	2b1d      	cmp	r3, #29
 8004738:	d001      	beq.n	800473e <__sflush_r+0xb2>
 800473a:	2b16      	cmp	r3, #22
 800473c:	d101      	bne.n	8004742 <__sflush_r+0xb6>
 800473e:	602f      	str	r7, [r5, #0]
 8004740:	e7b1      	b.n	80046a6 <__sflush_r+0x1a>
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004748:	81a3      	strh	r3, [r4, #12]
 800474a:	e7ad      	b.n	80046a8 <__sflush_r+0x1c>
 800474c:	690f      	ldr	r7, [r1, #16]
 800474e:	2f00      	cmp	r7, #0
 8004750:	d0a9      	beq.n	80046a6 <__sflush_r+0x1a>
 8004752:	0793      	lsls	r3, r2, #30
 8004754:	680e      	ldr	r6, [r1, #0]
 8004756:	bf08      	it	eq
 8004758:	694b      	ldreq	r3, [r1, #20]
 800475a:	600f      	str	r7, [r1, #0]
 800475c:	bf18      	it	ne
 800475e:	2300      	movne	r3, #0
 8004760:	eba6 0807 	sub.w	r8, r6, r7
 8004764:	608b      	str	r3, [r1, #8]
 8004766:	f1b8 0f00 	cmp.w	r8, #0
 800476a:	dd9c      	ble.n	80046a6 <__sflush_r+0x1a>
 800476c:	4643      	mov	r3, r8
 800476e:	463a      	mov	r2, r7
 8004770:	6a21      	ldr	r1, [r4, #32]
 8004772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004774:	4628      	mov	r0, r5
 8004776:	47b0      	blx	r6
 8004778:	2800      	cmp	r0, #0
 800477a:	dc06      	bgt.n	800478a <__sflush_r+0xfe>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004782:	81a3      	strh	r3, [r4, #12]
 8004784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004788:	e78e      	b.n	80046a8 <__sflush_r+0x1c>
 800478a:	4407      	add	r7, r0
 800478c:	eba8 0800 	sub.w	r8, r8, r0
 8004790:	e7e9      	b.n	8004766 <__sflush_r+0xda>
 8004792:	bf00      	nop
 8004794:	20400001 	.word	0x20400001

08004798 <_fflush_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	690b      	ldr	r3, [r1, #16]
 800479c:	4605      	mov	r5, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	b1db      	cbz	r3, 80047da <_fflush_r+0x42>
 80047a2:	b118      	cbz	r0, 80047ac <_fflush_r+0x14>
 80047a4:	6983      	ldr	r3, [r0, #24]
 80047a6:	b90b      	cbnz	r3, 80047ac <_fflush_r+0x14>
 80047a8:	f000 f860 	bl	800486c <__sinit>
 80047ac:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <_fflush_r+0x48>)
 80047ae:	429c      	cmp	r4, r3
 80047b0:	d109      	bne.n	80047c6 <_fflush_r+0x2e>
 80047b2:	686c      	ldr	r4, [r5, #4]
 80047b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b8:	b17b      	cbz	r3, 80047da <_fflush_r+0x42>
 80047ba:	4621      	mov	r1, r4
 80047bc:	4628      	mov	r0, r5
 80047be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047c2:	f7ff bf63 	b.w	800468c <__sflush_r>
 80047c6:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <_fflush_r+0x4c>)
 80047c8:	429c      	cmp	r4, r3
 80047ca:	d101      	bne.n	80047d0 <_fflush_r+0x38>
 80047cc:	68ac      	ldr	r4, [r5, #8]
 80047ce:	e7f1      	b.n	80047b4 <_fflush_r+0x1c>
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <_fflush_r+0x50>)
 80047d2:	429c      	cmp	r4, r3
 80047d4:	bf08      	it	eq
 80047d6:	68ec      	ldreq	r4, [r5, #12]
 80047d8:	e7ec      	b.n	80047b4 <_fflush_r+0x1c>
 80047da:	2000      	movs	r0, #0
 80047dc:	bd38      	pop	{r3, r4, r5, pc}
 80047de:	bf00      	nop
 80047e0:	08005814 	.word	0x08005814
 80047e4:	08005834 	.word	0x08005834
 80047e8:	080057f4 	.word	0x080057f4

080047ec <std>:
 80047ec:	2300      	movs	r3, #0
 80047ee:	b510      	push	{r4, lr}
 80047f0:	4604      	mov	r4, r0
 80047f2:	e9c0 3300 	strd	r3, r3, [r0]
 80047f6:	6083      	str	r3, [r0, #8]
 80047f8:	8181      	strh	r1, [r0, #12]
 80047fa:	6643      	str	r3, [r0, #100]	; 0x64
 80047fc:	81c2      	strh	r2, [r0, #14]
 80047fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004802:	6183      	str	r3, [r0, #24]
 8004804:	4619      	mov	r1, r3
 8004806:	2208      	movs	r2, #8
 8004808:	305c      	adds	r0, #92	; 0x5c
 800480a:	f7ff fdfb 	bl	8004404 <memset>
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <std+0x38>)
 8004810:	6263      	str	r3, [r4, #36]	; 0x24
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <std+0x3c>)
 8004814:	62a3      	str	r3, [r4, #40]	; 0x28
 8004816:	4b05      	ldr	r3, [pc, #20]	; (800482c <std+0x40>)
 8004818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <std+0x44>)
 800481c:	6224      	str	r4, [r4, #32]
 800481e:	6323      	str	r3, [r4, #48]	; 0x30
 8004820:	bd10      	pop	{r4, pc}
 8004822:	bf00      	nop
 8004824:	08005149 	.word	0x08005149
 8004828:	0800516b 	.word	0x0800516b
 800482c:	080051a3 	.word	0x080051a3
 8004830:	080051c7 	.word	0x080051c7

08004834 <_cleanup_r>:
 8004834:	4901      	ldr	r1, [pc, #4]	; (800483c <_cleanup_r+0x8>)
 8004836:	f000 b885 	b.w	8004944 <_fwalk_reent>
 800483a:	bf00      	nop
 800483c:	08004799 	.word	0x08004799

08004840 <__sfmoreglue>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	1e4a      	subs	r2, r1, #1
 8004844:	2568      	movs	r5, #104	; 0x68
 8004846:	4355      	muls	r5, r2
 8004848:	460e      	mov	r6, r1
 800484a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800484e:	f000 f949 	bl	8004ae4 <_malloc_r>
 8004852:	4604      	mov	r4, r0
 8004854:	b140      	cbz	r0, 8004868 <__sfmoreglue+0x28>
 8004856:	2100      	movs	r1, #0
 8004858:	e9c0 1600 	strd	r1, r6, [r0]
 800485c:	300c      	adds	r0, #12
 800485e:	60a0      	str	r0, [r4, #8]
 8004860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004864:	f7ff fdce 	bl	8004404 <memset>
 8004868:	4620      	mov	r0, r4
 800486a:	bd70      	pop	{r4, r5, r6, pc}

0800486c <__sinit>:
 800486c:	6983      	ldr	r3, [r0, #24]
 800486e:	b510      	push	{r4, lr}
 8004870:	4604      	mov	r4, r0
 8004872:	bb33      	cbnz	r3, 80048c2 <__sinit+0x56>
 8004874:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004878:	6503      	str	r3, [r0, #80]	; 0x50
 800487a:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <__sinit+0x58>)
 800487c:	4a12      	ldr	r2, [pc, #72]	; (80048c8 <__sinit+0x5c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6282      	str	r2, [r0, #40]	; 0x28
 8004882:	4298      	cmp	r0, r3
 8004884:	bf04      	itt	eq
 8004886:	2301      	moveq	r3, #1
 8004888:	6183      	streq	r3, [r0, #24]
 800488a:	f000 f81f 	bl	80048cc <__sfp>
 800488e:	6060      	str	r0, [r4, #4]
 8004890:	4620      	mov	r0, r4
 8004892:	f000 f81b 	bl	80048cc <__sfp>
 8004896:	60a0      	str	r0, [r4, #8]
 8004898:	4620      	mov	r0, r4
 800489a:	f000 f817 	bl	80048cc <__sfp>
 800489e:	2200      	movs	r2, #0
 80048a0:	60e0      	str	r0, [r4, #12]
 80048a2:	2104      	movs	r1, #4
 80048a4:	6860      	ldr	r0, [r4, #4]
 80048a6:	f7ff ffa1 	bl	80047ec <std>
 80048aa:	2201      	movs	r2, #1
 80048ac:	2109      	movs	r1, #9
 80048ae:	68a0      	ldr	r0, [r4, #8]
 80048b0:	f7ff ff9c 	bl	80047ec <std>
 80048b4:	2202      	movs	r2, #2
 80048b6:	2112      	movs	r1, #18
 80048b8:	68e0      	ldr	r0, [r4, #12]
 80048ba:	f7ff ff97 	bl	80047ec <std>
 80048be:	2301      	movs	r3, #1
 80048c0:	61a3      	str	r3, [r4, #24]
 80048c2:	bd10      	pop	{r4, pc}
 80048c4:	080057f0 	.word	0x080057f0
 80048c8:	08004835 	.word	0x08004835

080048cc <__sfp>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	4b1b      	ldr	r3, [pc, #108]	; (800493c <__sfp+0x70>)
 80048d0:	681e      	ldr	r6, [r3, #0]
 80048d2:	69b3      	ldr	r3, [r6, #24]
 80048d4:	4607      	mov	r7, r0
 80048d6:	b913      	cbnz	r3, 80048de <__sfp+0x12>
 80048d8:	4630      	mov	r0, r6
 80048da:	f7ff ffc7 	bl	800486c <__sinit>
 80048de:	3648      	adds	r6, #72	; 0x48
 80048e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	d503      	bpl.n	80048f0 <__sfp+0x24>
 80048e8:	6833      	ldr	r3, [r6, #0]
 80048ea:	b133      	cbz	r3, 80048fa <__sfp+0x2e>
 80048ec:	6836      	ldr	r6, [r6, #0]
 80048ee:	e7f7      	b.n	80048e0 <__sfp+0x14>
 80048f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048f4:	b16d      	cbz	r5, 8004912 <__sfp+0x46>
 80048f6:	3468      	adds	r4, #104	; 0x68
 80048f8:	e7f4      	b.n	80048e4 <__sfp+0x18>
 80048fa:	2104      	movs	r1, #4
 80048fc:	4638      	mov	r0, r7
 80048fe:	f7ff ff9f 	bl	8004840 <__sfmoreglue>
 8004902:	6030      	str	r0, [r6, #0]
 8004904:	2800      	cmp	r0, #0
 8004906:	d1f1      	bne.n	80048ec <__sfp+0x20>
 8004908:	230c      	movs	r3, #12
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4604      	mov	r4, r0
 800490e:	4620      	mov	r0, r4
 8004910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <__sfp+0x74>)
 8004914:	6665      	str	r5, [r4, #100]	; 0x64
 8004916:	e9c4 5500 	strd	r5, r5, [r4]
 800491a:	60a5      	str	r5, [r4, #8]
 800491c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004920:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004924:	2208      	movs	r2, #8
 8004926:	4629      	mov	r1, r5
 8004928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800492c:	f7ff fd6a 	bl	8004404 <memset>
 8004930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004938:	e7e9      	b.n	800490e <__sfp+0x42>
 800493a:	bf00      	nop
 800493c:	080057f0 	.word	0x080057f0
 8004940:	ffff0001 	.word	0xffff0001

08004944 <_fwalk_reent>:
 8004944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004948:	4680      	mov	r8, r0
 800494a:	4689      	mov	r9, r1
 800494c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004950:	2600      	movs	r6, #0
 8004952:	b914      	cbnz	r4, 800495a <_fwalk_reent+0x16>
 8004954:	4630      	mov	r0, r6
 8004956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800495a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800495e:	3f01      	subs	r7, #1
 8004960:	d501      	bpl.n	8004966 <_fwalk_reent+0x22>
 8004962:	6824      	ldr	r4, [r4, #0]
 8004964:	e7f5      	b.n	8004952 <_fwalk_reent+0xe>
 8004966:	89ab      	ldrh	r3, [r5, #12]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d907      	bls.n	800497c <_fwalk_reent+0x38>
 800496c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004970:	3301      	adds	r3, #1
 8004972:	d003      	beq.n	800497c <_fwalk_reent+0x38>
 8004974:	4629      	mov	r1, r5
 8004976:	4640      	mov	r0, r8
 8004978:	47c8      	blx	r9
 800497a:	4306      	orrs	r6, r0
 800497c:	3568      	adds	r5, #104	; 0x68
 800497e:	e7ee      	b.n	800495e <_fwalk_reent+0x1a>

08004980 <__swhatbuf_r>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	460e      	mov	r6, r1
 8004984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004988:	2900      	cmp	r1, #0
 800498a:	b096      	sub	sp, #88	; 0x58
 800498c:	4614      	mov	r4, r2
 800498e:	461d      	mov	r5, r3
 8004990:	da07      	bge.n	80049a2 <__swhatbuf_r+0x22>
 8004992:	2300      	movs	r3, #0
 8004994:	602b      	str	r3, [r5, #0]
 8004996:	89b3      	ldrh	r3, [r6, #12]
 8004998:	061a      	lsls	r2, r3, #24
 800499a:	d410      	bmi.n	80049be <__swhatbuf_r+0x3e>
 800499c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049a0:	e00e      	b.n	80049c0 <__swhatbuf_r+0x40>
 80049a2:	466a      	mov	r2, sp
 80049a4:	f000 fc36 	bl	8005214 <_fstat_r>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	dbf2      	blt.n	8004992 <__swhatbuf_r+0x12>
 80049ac:	9a01      	ldr	r2, [sp, #4]
 80049ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049b6:	425a      	negs	r2, r3
 80049b8:	415a      	adcs	r2, r3
 80049ba:	602a      	str	r2, [r5, #0]
 80049bc:	e7ee      	b.n	800499c <__swhatbuf_r+0x1c>
 80049be:	2340      	movs	r3, #64	; 0x40
 80049c0:	2000      	movs	r0, #0
 80049c2:	6023      	str	r3, [r4, #0]
 80049c4:	b016      	add	sp, #88	; 0x58
 80049c6:	bd70      	pop	{r4, r5, r6, pc}

080049c8 <__smakebuf_r>:
 80049c8:	898b      	ldrh	r3, [r1, #12]
 80049ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049cc:	079d      	lsls	r5, r3, #30
 80049ce:	4606      	mov	r6, r0
 80049d0:	460c      	mov	r4, r1
 80049d2:	d507      	bpl.n	80049e4 <__smakebuf_r+0x1c>
 80049d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	6123      	str	r3, [r4, #16]
 80049dc:	2301      	movs	r3, #1
 80049de:	6163      	str	r3, [r4, #20]
 80049e0:	b002      	add	sp, #8
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	ab01      	add	r3, sp, #4
 80049e6:	466a      	mov	r2, sp
 80049e8:	f7ff ffca 	bl	8004980 <__swhatbuf_r>
 80049ec:	9900      	ldr	r1, [sp, #0]
 80049ee:	4605      	mov	r5, r0
 80049f0:	4630      	mov	r0, r6
 80049f2:	f000 f877 	bl	8004ae4 <_malloc_r>
 80049f6:	b948      	cbnz	r0, 8004a0c <__smakebuf_r+0x44>
 80049f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049fc:	059a      	lsls	r2, r3, #22
 80049fe:	d4ef      	bmi.n	80049e0 <__smakebuf_r+0x18>
 8004a00:	f023 0303 	bic.w	r3, r3, #3
 8004a04:	f043 0302 	orr.w	r3, r3, #2
 8004a08:	81a3      	strh	r3, [r4, #12]
 8004a0a:	e7e3      	b.n	80049d4 <__smakebuf_r+0xc>
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <__smakebuf_r+0x7c>)
 8004a0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	6020      	str	r0, [r4, #0]
 8004a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a18:	81a3      	strh	r3, [r4, #12]
 8004a1a:	9b00      	ldr	r3, [sp, #0]
 8004a1c:	6163      	str	r3, [r4, #20]
 8004a1e:	9b01      	ldr	r3, [sp, #4]
 8004a20:	6120      	str	r0, [r4, #16]
 8004a22:	b15b      	cbz	r3, 8004a3c <__smakebuf_r+0x74>
 8004a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a28:	4630      	mov	r0, r6
 8004a2a:	f000 fc05 	bl	8005238 <_isatty_r>
 8004a2e:	b128      	cbz	r0, 8004a3c <__smakebuf_r+0x74>
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	81a3      	strh	r3, [r4, #12]
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	431d      	orrs	r5, r3
 8004a40:	81a5      	strh	r5, [r4, #12]
 8004a42:	e7cd      	b.n	80049e0 <__smakebuf_r+0x18>
 8004a44:	08004835 	.word	0x08004835

08004a48 <_free_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	2900      	cmp	r1, #0
 8004a4e:	d045      	beq.n	8004adc <_free_r+0x94>
 8004a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a54:	1f0c      	subs	r4, r1, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	bfb8      	it	lt
 8004a5a:	18e4      	addlt	r4, r4, r3
 8004a5c:	f000 fc0e 	bl	800527c <__malloc_lock>
 8004a60:	4a1f      	ldr	r2, [pc, #124]	; (8004ae0 <_free_r+0x98>)
 8004a62:	6813      	ldr	r3, [r2, #0]
 8004a64:	4610      	mov	r0, r2
 8004a66:	b933      	cbnz	r3, 8004a76 <_free_r+0x2e>
 8004a68:	6063      	str	r3, [r4, #4]
 8004a6a:	6014      	str	r4, [r2, #0]
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a72:	f000 bc04 	b.w	800527e <__malloc_unlock>
 8004a76:	42a3      	cmp	r3, r4
 8004a78:	d90c      	bls.n	8004a94 <_free_r+0x4c>
 8004a7a:	6821      	ldr	r1, [r4, #0]
 8004a7c:	1862      	adds	r2, r4, r1
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	bf04      	itt	eq
 8004a82:	681a      	ldreq	r2, [r3, #0]
 8004a84:	685b      	ldreq	r3, [r3, #4]
 8004a86:	6063      	str	r3, [r4, #4]
 8004a88:	bf04      	itt	eq
 8004a8a:	1852      	addeq	r2, r2, r1
 8004a8c:	6022      	streq	r2, [r4, #0]
 8004a8e:	6004      	str	r4, [r0, #0]
 8004a90:	e7ec      	b.n	8004a6c <_free_r+0x24>
 8004a92:	4613      	mov	r3, r2
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	b10a      	cbz	r2, 8004a9c <_free_r+0x54>
 8004a98:	42a2      	cmp	r2, r4
 8004a9a:	d9fa      	bls.n	8004a92 <_free_r+0x4a>
 8004a9c:	6819      	ldr	r1, [r3, #0]
 8004a9e:	1858      	adds	r0, r3, r1
 8004aa0:	42a0      	cmp	r0, r4
 8004aa2:	d10b      	bne.n	8004abc <_free_r+0x74>
 8004aa4:	6820      	ldr	r0, [r4, #0]
 8004aa6:	4401      	add	r1, r0
 8004aa8:	1858      	adds	r0, r3, r1
 8004aaa:	4282      	cmp	r2, r0
 8004aac:	6019      	str	r1, [r3, #0]
 8004aae:	d1dd      	bne.n	8004a6c <_free_r+0x24>
 8004ab0:	6810      	ldr	r0, [r2, #0]
 8004ab2:	6852      	ldr	r2, [r2, #4]
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	4401      	add	r1, r0
 8004ab8:	6019      	str	r1, [r3, #0]
 8004aba:	e7d7      	b.n	8004a6c <_free_r+0x24>
 8004abc:	d902      	bls.n	8004ac4 <_free_r+0x7c>
 8004abe:	230c      	movs	r3, #12
 8004ac0:	602b      	str	r3, [r5, #0]
 8004ac2:	e7d3      	b.n	8004a6c <_free_r+0x24>
 8004ac4:	6820      	ldr	r0, [r4, #0]
 8004ac6:	1821      	adds	r1, r4, r0
 8004ac8:	428a      	cmp	r2, r1
 8004aca:	bf04      	itt	eq
 8004acc:	6811      	ldreq	r1, [r2, #0]
 8004ace:	6852      	ldreq	r2, [r2, #4]
 8004ad0:	6062      	str	r2, [r4, #4]
 8004ad2:	bf04      	itt	eq
 8004ad4:	1809      	addeq	r1, r1, r0
 8004ad6:	6021      	streq	r1, [r4, #0]
 8004ad8:	605c      	str	r4, [r3, #4]
 8004ada:	e7c7      	b.n	8004a6c <_free_r+0x24>
 8004adc:	bd38      	pop	{r3, r4, r5, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000498 	.word	0x20000498

08004ae4 <_malloc_r>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	1ccd      	adds	r5, r1, #3
 8004ae8:	f025 0503 	bic.w	r5, r5, #3
 8004aec:	3508      	adds	r5, #8
 8004aee:	2d0c      	cmp	r5, #12
 8004af0:	bf38      	it	cc
 8004af2:	250c      	movcc	r5, #12
 8004af4:	2d00      	cmp	r5, #0
 8004af6:	4606      	mov	r6, r0
 8004af8:	db01      	blt.n	8004afe <_malloc_r+0x1a>
 8004afa:	42a9      	cmp	r1, r5
 8004afc:	d903      	bls.n	8004b06 <_malloc_r+0x22>
 8004afe:	230c      	movs	r3, #12
 8004b00:	6033      	str	r3, [r6, #0]
 8004b02:	2000      	movs	r0, #0
 8004b04:	bd70      	pop	{r4, r5, r6, pc}
 8004b06:	f000 fbb9 	bl	800527c <__malloc_lock>
 8004b0a:	4a21      	ldr	r2, [pc, #132]	; (8004b90 <_malloc_r+0xac>)
 8004b0c:	6814      	ldr	r4, [r2, #0]
 8004b0e:	4621      	mov	r1, r4
 8004b10:	b991      	cbnz	r1, 8004b38 <_malloc_r+0x54>
 8004b12:	4c20      	ldr	r4, [pc, #128]	; (8004b94 <_malloc_r+0xb0>)
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	b91b      	cbnz	r3, 8004b20 <_malloc_r+0x3c>
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f000 fb05 	bl	8005128 <_sbrk_r>
 8004b1e:	6020      	str	r0, [r4, #0]
 8004b20:	4629      	mov	r1, r5
 8004b22:	4630      	mov	r0, r6
 8004b24:	f000 fb00 	bl	8005128 <_sbrk_r>
 8004b28:	1c43      	adds	r3, r0, #1
 8004b2a:	d124      	bne.n	8004b76 <_malloc_r+0x92>
 8004b2c:	230c      	movs	r3, #12
 8004b2e:	6033      	str	r3, [r6, #0]
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 fba4 	bl	800527e <__malloc_unlock>
 8004b36:	e7e4      	b.n	8004b02 <_malloc_r+0x1e>
 8004b38:	680b      	ldr	r3, [r1, #0]
 8004b3a:	1b5b      	subs	r3, r3, r5
 8004b3c:	d418      	bmi.n	8004b70 <_malloc_r+0x8c>
 8004b3e:	2b0b      	cmp	r3, #11
 8004b40:	d90f      	bls.n	8004b62 <_malloc_r+0x7e>
 8004b42:	600b      	str	r3, [r1, #0]
 8004b44:	50cd      	str	r5, [r1, r3]
 8004b46:	18cc      	adds	r4, r1, r3
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f000 fb98 	bl	800527e <__malloc_unlock>
 8004b4e:	f104 000b 	add.w	r0, r4, #11
 8004b52:	1d23      	adds	r3, r4, #4
 8004b54:	f020 0007 	bic.w	r0, r0, #7
 8004b58:	1ac3      	subs	r3, r0, r3
 8004b5a:	d0d3      	beq.n	8004b04 <_malloc_r+0x20>
 8004b5c:	425a      	negs	r2, r3
 8004b5e:	50e2      	str	r2, [r4, r3]
 8004b60:	e7d0      	b.n	8004b04 <_malloc_r+0x20>
 8004b62:	428c      	cmp	r4, r1
 8004b64:	684b      	ldr	r3, [r1, #4]
 8004b66:	bf16      	itet	ne
 8004b68:	6063      	strne	r3, [r4, #4]
 8004b6a:	6013      	streq	r3, [r2, #0]
 8004b6c:	460c      	movne	r4, r1
 8004b6e:	e7eb      	b.n	8004b48 <_malloc_r+0x64>
 8004b70:	460c      	mov	r4, r1
 8004b72:	6849      	ldr	r1, [r1, #4]
 8004b74:	e7cc      	b.n	8004b10 <_malloc_r+0x2c>
 8004b76:	1cc4      	adds	r4, r0, #3
 8004b78:	f024 0403 	bic.w	r4, r4, #3
 8004b7c:	42a0      	cmp	r0, r4
 8004b7e:	d005      	beq.n	8004b8c <_malloc_r+0xa8>
 8004b80:	1a21      	subs	r1, r4, r0
 8004b82:	4630      	mov	r0, r6
 8004b84:	f000 fad0 	bl	8005128 <_sbrk_r>
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d0cf      	beq.n	8004b2c <_malloc_r+0x48>
 8004b8c:	6025      	str	r5, [r4, #0]
 8004b8e:	e7db      	b.n	8004b48 <_malloc_r+0x64>
 8004b90:	20000498 	.word	0x20000498
 8004b94:	2000049c 	.word	0x2000049c

08004b98 <__sfputc_r>:
 8004b98:	6893      	ldr	r3, [r2, #8]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	b410      	push	{r4}
 8004ba0:	6093      	str	r3, [r2, #8]
 8004ba2:	da08      	bge.n	8004bb6 <__sfputc_r+0x1e>
 8004ba4:	6994      	ldr	r4, [r2, #24]
 8004ba6:	42a3      	cmp	r3, r4
 8004ba8:	db01      	blt.n	8004bae <__sfputc_r+0x16>
 8004baa:	290a      	cmp	r1, #10
 8004bac:	d103      	bne.n	8004bb6 <__sfputc_r+0x1e>
 8004bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bb2:	f7ff bcab 	b.w	800450c <__swbuf_r>
 8004bb6:	6813      	ldr	r3, [r2, #0]
 8004bb8:	1c58      	adds	r0, r3, #1
 8004bba:	6010      	str	r0, [r2, #0]
 8004bbc:	7019      	strb	r1, [r3, #0]
 8004bbe:	4608      	mov	r0, r1
 8004bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <__sfputs_r>:
 8004bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc8:	4606      	mov	r6, r0
 8004bca:	460f      	mov	r7, r1
 8004bcc:	4614      	mov	r4, r2
 8004bce:	18d5      	adds	r5, r2, r3
 8004bd0:	42ac      	cmp	r4, r5
 8004bd2:	d101      	bne.n	8004bd8 <__sfputs_r+0x12>
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	e007      	b.n	8004be8 <__sfputs_r+0x22>
 8004bd8:	463a      	mov	r2, r7
 8004bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bde:	4630      	mov	r0, r6
 8004be0:	f7ff ffda 	bl	8004b98 <__sfputc_r>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d1f3      	bne.n	8004bd0 <__sfputs_r+0xa>
 8004be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bec <_vfiprintf_r>:
 8004bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	b09d      	sub	sp, #116	; 0x74
 8004bf4:	4617      	mov	r7, r2
 8004bf6:	461d      	mov	r5, r3
 8004bf8:	4606      	mov	r6, r0
 8004bfa:	b118      	cbz	r0, 8004c04 <_vfiprintf_r+0x18>
 8004bfc:	6983      	ldr	r3, [r0, #24]
 8004bfe:	b90b      	cbnz	r3, 8004c04 <_vfiprintf_r+0x18>
 8004c00:	f7ff fe34 	bl	800486c <__sinit>
 8004c04:	4b7c      	ldr	r3, [pc, #496]	; (8004df8 <_vfiprintf_r+0x20c>)
 8004c06:	429c      	cmp	r4, r3
 8004c08:	d158      	bne.n	8004cbc <_vfiprintf_r+0xd0>
 8004c0a:	6874      	ldr	r4, [r6, #4]
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	0718      	lsls	r0, r3, #28
 8004c10:	d55e      	bpl.n	8004cd0 <_vfiprintf_r+0xe4>
 8004c12:	6923      	ldr	r3, [r4, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d05b      	beq.n	8004cd0 <_vfiprintf_r+0xe4>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c1c:	2320      	movs	r3, #32
 8004c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c22:	2330      	movs	r3, #48	; 0x30
 8004c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c28:	9503      	str	r5, [sp, #12]
 8004c2a:	f04f 0b01 	mov.w	fp, #1
 8004c2e:	46b8      	mov	r8, r7
 8004c30:	4645      	mov	r5, r8
 8004c32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c36:	b10b      	cbz	r3, 8004c3c <_vfiprintf_r+0x50>
 8004c38:	2b25      	cmp	r3, #37	; 0x25
 8004c3a:	d154      	bne.n	8004ce6 <_vfiprintf_r+0xfa>
 8004c3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004c40:	d00b      	beq.n	8004c5a <_vfiprintf_r+0x6e>
 8004c42:	4653      	mov	r3, sl
 8004c44:	463a      	mov	r2, r7
 8004c46:	4621      	mov	r1, r4
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f7ff ffbc 	bl	8004bc6 <__sfputs_r>
 8004c4e:	3001      	adds	r0, #1
 8004c50:	f000 80c2 	beq.w	8004dd8 <_vfiprintf_r+0x1ec>
 8004c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c56:	4453      	add	r3, sl
 8004c58:	9309      	str	r3, [sp, #36]	; 0x24
 8004c5a:	f898 3000 	ldrb.w	r3, [r8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80ba 	beq.w	8004dd8 <_vfiprintf_r+0x1ec>
 8004c64:	2300      	movs	r3, #0
 8004c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c6e:	9304      	str	r3, [sp, #16]
 8004c70:	9307      	str	r3, [sp, #28]
 8004c72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c76:	931a      	str	r3, [sp, #104]	; 0x68
 8004c78:	46a8      	mov	r8, r5
 8004c7a:	2205      	movs	r2, #5
 8004c7c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004c80:	485e      	ldr	r0, [pc, #376]	; (8004dfc <_vfiprintf_r+0x210>)
 8004c82:	f7fb faa5 	bl	80001d0 <memchr>
 8004c86:	9b04      	ldr	r3, [sp, #16]
 8004c88:	bb78      	cbnz	r0, 8004cea <_vfiprintf_r+0xfe>
 8004c8a:	06d9      	lsls	r1, r3, #27
 8004c8c:	bf44      	itt	mi
 8004c8e:	2220      	movmi	r2, #32
 8004c90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c94:	071a      	lsls	r2, r3, #28
 8004c96:	bf44      	itt	mi
 8004c98:	222b      	movmi	r2, #43	; 0x2b
 8004c9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c9e:	782a      	ldrb	r2, [r5, #0]
 8004ca0:	2a2a      	cmp	r2, #42	; 0x2a
 8004ca2:	d02a      	beq.n	8004cfa <_vfiprintf_r+0x10e>
 8004ca4:	9a07      	ldr	r2, [sp, #28]
 8004ca6:	46a8      	mov	r8, r5
 8004ca8:	2000      	movs	r0, #0
 8004caa:	250a      	movs	r5, #10
 8004cac:	4641      	mov	r1, r8
 8004cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cb2:	3b30      	subs	r3, #48	; 0x30
 8004cb4:	2b09      	cmp	r3, #9
 8004cb6:	d969      	bls.n	8004d8c <_vfiprintf_r+0x1a0>
 8004cb8:	b360      	cbz	r0, 8004d14 <_vfiprintf_r+0x128>
 8004cba:	e024      	b.n	8004d06 <_vfiprintf_r+0x11a>
 8004cbc:	4b50      	ldr	r3, [pc, #320]	; (8004e00 <_vfiprintf_r+0x214>)
 8004cbe:	429c      	cmp	r4, r3
 8004cc0:	d101      	bne.n	8004cc6 <_vfiprintf_r+0xda>
 8004cc2:	68b4      	ldr	r4, [r6, #8]
 8004cc4:	e7a2      	b.n	8004c0c <_vfiprintf_r+0x20>
 8004cc6:	4b4f      	ldr	r3, [pc, #316]	; (8004e04 <_vfiprintf_r+0x218>)
 8004cc8:	429c      	cmp	r4, r3
 8004cca:	bf08      	it	eq
 8004ccc:	68f4      	ldreq	r4, [r6, #12]
 8004cce:	e79d      	b.n	8004c0c <_vfiprintf_r+0x20>
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	f7ff fc6c 	bl	80045b0 <__swsetup_r>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d09d      	beq.n	8004c18 <_vfiprintf_r+0x2c>
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ce0:	b01d      	add	sp, #116	; 0x74
 8004ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce6:	46a8      	mov	r8, r5
 8004ce8:	e7a2      	b.n	8004c30 <_vfiprintf_r+0x44>
 8004cea:	4a44      	ldr	r2, [pc, #272]	; (8004dfc <_vfiprintf_r+0x210>)
 8004cec:	1a80      	subs	r0, r0, r2
 8004cee:	fa0b f000 	lsl.w	r0, fp, r0
 8004cf2:	4318      	orrs	r0, r3
 8004cf4:	9004      	str	r0, [sp, #16]
 8004cf6:	4645      	mov	r5, r8
 8004cf8:	e7be      	b.n	8004c78 <_vfiprintf_r+0x8c>
 8004cfa:	9a03      	ldr	r2, [sp, #12]
 8004cfc:	1d11      	adds	r1, r2, #4
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	9103      	str	r1, [sp, #12]
 8004d02:	2a00      	cmp	r2, #0
 8004d04:	db01      	blt.n	8004d0a <_vfiprintf_r+0x11e>
 8004d06:	9207      	str	r2, [sp, #28]
 8004d08:	e004      	b.n	8004d14 <_vfiprintf_r+0x128>
 8004d0a:	4252      	negs	r2, r2
 8004d0c:	f043 0302 	orr.w	r3, r3, #2
 8004d10:	9207      	str	r2, [sp, #28]
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	f898 3000 	ldrb.w	r3, [r8]
 8004d18:	2b2e      	cmp	r3, #46	; 0x2e
 8004d1a:	d10e      	bne.n	8004d3a <_vfiprintf_r+0x14e>
 8004d1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004d20:	2b2a      	cmp	r3, #42	; 0x2a
 8004d22:	d138      	bne.n	8004d96 <_vfiprintf_r+0x1aa>
 8004d24:	9b03      	ldr	r3, [sp, #12]
 8004d26:	1d1a      	adds	r2, r3, #4
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	9203      	str	r2, [sp, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bfb8      	it	lt
 8004d30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d34:	f108 0802 	add.w	r8, r8, #2
 8004d38:	9305      	str	r3, [sp, #20]
 8004d3a:	4d33      	ldr	r5, [pc, #204]	; (8004e08 <_vfiprintf_r+0x21c>)
 8004d3c:	f898 1000 	ldrb.w	r1, [r8]
 8004d40:	2203      	movs	r2, #3
 8004d42:	4628      	mov	r0, r5
 8004d44:	f7fb fa44 	bl	80001d0 <memchr>
 8004d48:	b140      	cbz	r0, 8004d5c <_vfiprintf_r+0x170>
 8004d4a:	2340      	movs	r3, #64	; 0x40
 8004d4c:	1b40      	subs	r0, r0, r5
 8004d4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004d52:	9b04      	ldr	r3, [sp, #16]
 8004d54:	4303      	orrs	r3, r0
 8004d56:	f108 0801 	add.w	r8, r8, #1
 8004d5a:	9304      	str	r3, [sp, #16]
 8004d5c:	f898 1000 	ldrb.w	r1, [r8]
 8004d60:	482a      	ldr	r0, [pc, #168]	; (8004e0c <_vfiprintf_r+0x220>)
 8004d62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d66:	2206      	movs	r2, #6
 8004d68:	f108 0701 	add.w	r7, r8, #1
 8004d6c:	f7fb fa30 	bl	80001d0 <memchr>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d037      	beq.n	8004de4 <_vfiprintf_r+0x1f8>
 8004d74:	4b26      	ldr	r3, [pc, #152]	; (8004e10 <_vfiprintf_r+0x224>)
 8004d76:	bb1b      	cbnz	r3, 8004dc0 <_vfiprintf_r+0x1d4>
 8004d78:	9b03      	ldr	r3, [sp, #12]
 8004d7a:	3307      	adds	r3, #7
 8004d7c:	f023 0307 	bic.w	r3, r3, #7
 8004d80:	3308      	adds	r3, #8
 8004d82:	9303      	str	r3, [sp, #12]
 8004d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d86:	444b      	add	r3, r9
 8004d88:	9309      	str	r3, [sp, #36]	; 0x24
 8004d8a:	e750      	b.n	8004c2e <_vfiprintf_r+0x42>
 8004d8c:	fb05 3202 	mla	r2, r5, r2, r3
 8004d90:	2001      	movs	r0, #1
 8004d92:	4688      	mov	r8, r1
 8004d94:	e78a      	b.n	8004cac <_vfiprintf_r+0xc0>
 8004d96:	2300      	movs	r3, #0
 8004d98:	f108 0801 	add.w	r8, r8, #1
 8004d9c:	9305      	str	r3, [sp, #20]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	250a      	movs	r5, #10
 8004da2:	4640      	mov	r0, r8
 8004da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004da8:	3a30      	subs	r2, #48	; 0x30
 8004daa:	2a09      	cmp	r2, #9
 8004dac:	d903      	bls.n	8004db6 <_vfiprintf_r+0x1ca>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0c3      	beq.n	8004d3a <_vfiprintf_r+0x14e>
 8004db2:	9105      	str	r1, [sp, #20]
 8004db4:	e7c1      	b.n	8004d3a <_vfiprintf_r+0x14e>
 8004db6:	fb05 2101 	mla	r1, r5, r1, r2
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4680      	mov	r8, r0
 8004dbe:	e7f0      	b.n	8004da2 <_vfiprintf_r+0x1b6>
 8004dc0:	ab03      	add	r3, sp, #12
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	4622      	mov	r2, r4
 8004dc6:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <_vfiprintf_r+0x228>)
 8004dc8:	a904      	add	r1, sp, #16
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f3af 8000 	nop.w
 8004dd0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004dd4:	4681      	mov	r9, r0
 8004dd6:	d1d5      	bne.n	8004d84 <_vfiprintf_r+0x198>
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	065b      	lsls	r3, r3, #25
 8004ddc:	f53f af7e 	bmi.w	8004cdc <_vfiprintf_r+0xf0>
 8004de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de2:	e77d      	b.n	8004ce0 <_vfiprintf_r+0xf4>
 8004de4:	ab03      	add	r3, sp, #12
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	4622      	mov	r2, r4
 8004dea:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <_vfiprintf_r+0x228>)
 8004dec:	a904      	add	r1, sp, #16
 8004dee:	4630      	mov	r0, r6
 8004df0:	f000 f888 	bl	8004f04 <_printf_i>
 8004df4:	e7ec      	b.n	8004dd0 <_vfiprintf_r+0x1e4>
 8004df6:	bf00      	nop
 8004df8:	08005814 	.word	0x08005814
 8004dfc:	08005854 	.word	0x08005854
 8004e00:	08005834 	.word	0x08005834
 8004e04:	080057f4 	.word	0x080057f4
 8004e08:	0800585a 	.word	0x0800585a
 8004e0c:	0800585e 	.word	0x0800585e
 8004e10:	00000000 	.word	0x00000000
 8004e14:	08004bc7 	.word	0x08004bc7

08004e18 <_printf_common>:
 8004e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	4691      	mov	r9, r2
 8004e1e:	461f      	mov	r7, r3
 8004e20:	688a      	ldr	r2, [r1, #8]
 8004e22:	690b      	ldr	r3, [r1, #16]
 8004e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	bfb8      	it	lt
 8004e2c:	4613      	movlt	r3, r2
 8004e2e:	f8c9 3000 	str.w	r3, [r9]
 8004e32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e36:	4606      	mov	r6, r0
 8004e38:	460c      	mov	r4, r1
 8004e3a:	b112      	cbz	r2, 8004e42 <_printf_common+0x2a>
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	f8c9 3000 	str.w	r3, [r9]
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	0699      	lsls	r1, r3, #26
 8004e46:	bf42      	ittt	mi
 8004e48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e4c:	3302      	addmi	r3, #2
 8004e4e:	f8c9 3000 	strmi.w	r3, [r9]
 8004e52:	6825      	ldr	r5, [r4, #0]
 8004e54:	f015 0506 	ands.w	r5, r5, #6
 8004e58:	d107      	bne.n	8004e6a <_printf_common+0x52>
 8004e5a:	f104 0a19 	add.w	sl, r4, #25
 8004e5e:	68e3      	ldr	r3, [r4, #12]
 8004e60:	f8d9 2000 	ldr.w	r2, [r9]
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	42ab      	cmp	r3, r5
 8004e68:	dc28      	bgt.n	8004ebc <_printf_common+0xa4>
 8004e6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	3300      	adds	r3, #0
 8004e72:	bf18      	it	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	0692      	lsls	r2, r2, #26
 8004e78:	d42d      	bmi.n	8004ed6 <_printf_common+0xbe>
 8004e7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e7e:	4639      	mov	r1, r7
 8004e80:	4630      	mov	r0, r6
 8004e82:	47c0      	blx	r8
 8004e84:	3001      	adds	r0, #1
 8004e86:	d020      	beq.n	8004eca <_printf_common+0xb2>
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	68e5      	ldr	r5, [r4, #12]
 8004e8c:	f8d9 2000 	ldr.w	r2, [r9]
 8004e90:	f003 0306 	and.w	r3, r3, #6
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	bf08      	it	eq
 8004e98:	1aad      	subeq	r5, r5, r2
 8004e9a:	68a3      	ldr	r3, [r4, #8]
 8004e9c:	6922      	ldr	r2, [r4, #16]
 8004e9e:	bf0c      	ite	eq
 8004ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ea4:	2500      	movne	r5, #0
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	bfc4      	itt	gt
 8004eaa:	1a9b      	subgt	r3, r3, r2
 8004eac:	18ed      	addgt	r5, r5, r3
 8004eae:	f04f 0900 	mov.w	r9, #0
 8004eb2:	341a      	adds	r4, #26
 8004eb4:	454d      	cmp	r5, r9
 8004eb6:	d11a      	bne.n	8004eee <_printf_common+0xd6>
 8004eb8:	2000      	movs	r0, #0
 8004eba:	e008      	b.n	8004ece <_printf_common+0xb6>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	4652      	mov	r2, sl
 8004ec0:	4639      	mov	r1, r7
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	47c0      	blx	r8
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d103      	bne.n	8004ed2 <_printf_common+0xba>
 8004eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed2:	3501      	adds	r5, #1
 8004ed4:	e7c3      	b.n	8004e5e <_printf_common+0x46>
 8004ed6:	18e1      	adds	r1, r4, r3
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	2030      	movs	r0, #48	; 0x30
 8004edc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ee0:	4422      	add	r2, r4
 8004ee2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ee6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eea:	3302      	adds	r3, #2
 8004eec:	e7c5      	b.n	8004e7a <_printf_common+0x62>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4622      	mov	r2, r4
 8004ef2:	4639      	mov	r1, r7
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	47c0      	blx	r8
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d0e6      	beq.n	8004eca <_printf_common+0xb2>
 8004efc:	f109 0901 	add.w	r9, r9, #1
 8004f00:	e7d8      	b.n	8004eb4 <_printf_common+0x9c>
	...

08004f04 <_printf_i>:
 8004f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	7e09      	ldrb	r1, [r1, #24]
 8004f10:	b085      	sub	sp, #20
 8004f12:	296e      	cmp	r1, #110	; 0x6e
 8004f14:	4617      	mov	r7, r2
 8004f16:	4606      	mov	r6, r0
 8004f18:	4698      	mov	r8, r3
 8004f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f1c:	f000 80b3 	beq.w	8005086 <_printf_i+0x182>
 8004f20:	d822      	bhi.n	8004f68 <_printf_i+0x64>
 8004f22:	2963      	cmp	r1, #99	; 0x63
 8004f24:	d036      	beq.n	8004f94 <_printf_i+0x90>
 8004f26:	d80a      	bhi.n	8004f3e <_printf_i+0x3a>
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	f000 80b9 	beq.w	80050a0 <_printf_i+0x19c>
 8004f2e:	2958      	cmp	r1, #88	; 0x58
 8004f30:	f000 8083 	beq.w	800503a <_printf_i+0x136>
 8004f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f3c:	e032      	b.n	8004fa4 <_printf_i+0xa0>
 8004f3e:	2964      	cmp	r1, #100	; 0x64
 8004f40:	d001      	beq.n	8004f46 <_printf_i+0x42>
 8004f42:	2969      	cmp	r1, #105	; 0x69
 8004f44:	d1f6      	bne.n	8004f34 <_printf_i+0x30>
 8004f46:	6820      	ldr	r0, [r4, #0]
 8004f48:	6813      	ldr	r3, [r2, #0]
 8004f4a:	0605      	lsls	r5, r0, #24
 8004f4c:	f103 0104 	add.w	r1, r3, #4
 8004f50:	d52a      	bpl.n	8004fa8 <_printf_i+0xa4>
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6011      	str	r1, [r2, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	da03      	bge.n	8004f62 <_printf_i+0x5e>
 8004f5a:	222d      	movs	r2, #45	; 0x2d
 8004f5c:	425b      	negs	r3, r3
 8004f5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f62:	486f      	ldr	r0, [pc, #444]	; (8005120 <_printf_i+0x21c>)
 8004f64:	220a      	movs	r2, #10
 8004f66:	e039      	b.n	8004fdc <_printf_i+0xd8>
 8004f68:	2973      	cmp	r1, #115	; 0x73
 8004f6a:	f000 809d 	beq.w	80050a8 <_printf_i+0x1a4>
 8004f6e:	d808      	bhi.n	8004f82 <_printf_i+0x7e>
 8004f70:	296f      	cmp	r1, #111	; 0x6f
 8004f72:	d020      	beq.n	8004fb6 <_printf_i+0xb2>
 8004f74:	2970      	cmp	r1, #112	; 0x70
 8004f76:	d1dd      	bne.n	8004f34 <_printf_i+0x30>
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	f043 0320 	orr.w	r3, r3, #32
 8004f7e:	6023      	str	r3, [r4, #0]
 8004f80:	e003      	b.n	8004f8a <_printf_i+0x86>
 8004f82:	2975      	cmp	r1, #117	; 0x75
 8004f84:	d017      	beq.n	8004fb6 <_printf_i+0xb2>
 8004f86:	2978      	cmp	r1, #120	; 0x78
 8004f88:	d1d4      	bne.n	8004f34 <_printf_i+0x30>
 8004f8a:	2378      	movs	r3, #120	; 0x78
 8004f8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f90:	4864      	ldr	r0, [pc, #400]	; (8005124 <_printf_i+0x220>)
 8004f92:	e055      	b.n	8005040 <_printf_i+0x13c>
 8004f94:	6813      	ldr	r3, [r2, #0]
 8004f96:	1d19      	adds	r1, r3, #4
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6011      	str	r1, [r2, #0]
 8004f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e08c      	b.n	80050c2 <_printf_i+0x1be>
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6011      	str	r1, [r2, #0]
 8004fac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fb0:	bf18      	it	ne
 8004fb2:	b21b      	sxthne	r3, r3
 8004fb4:	e7cf      	b.n	8004f56 <_printf_i+0x52>
 8004fb6:	6813      	ldr	r3, [r2, #0]
 8004fb8:	6825      	ldr	r5, [r4, #0]
 8004fba:	1d18      	adds	r0, r3, #4
 8004fbc:	6010      	str	r0, [r2, #0]
 8004fbe:	0628      	lsls	r0, r5, #24
 8004fc0:	d501      	bpl.n	8004fc6 <_printf_i+0xc2>
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	e002      	b.n	8004fcc <_printf_i+0xc8>
 8004fc6:	0668      	lsls	r0, r5, #25
 8004fc8:	d5fb      	bpl.n	8004fc2 <_printf_i+0xbe>
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	4854      	ldr	r0, [pc, #336]	; (8005120 <_printf_i+0x21c>)
 8004fce:	296f      	cmp	r1, #111	; 0x6f
 8004fd0:	bf14      	ite	ne
 8004fd2:	220a      	movne	r2, #10
 8004fd4:	2208      	moveq	r2, #8
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fdc:	6865      	ldr	r5, [r4, #4]
 8004fde:	60a5      	str	r5, [r4, #8]
 8004fe0:	2d00      	cmp	r5, #0
 8004fe2:	f2c0 8095 	blt.w	8005110 <_printf_i+0x20c>
 8004fe6:	6821      	ldr	r1, [r4, #0]
 8004fe8:	f021 0104 	bic.w	r1, r1, #4
 8004fec:	6021      	str	r1, [r4, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d13d      	bne.n	800506e <_printf_i+0x16a>
 8004ff2:	2d00      	cmp	r5, #0
 8004ff4:	f040 808e 	bne.w	8005114 <_printf_i+0x210>
 8004ff8:	4665      	mov	r5, ip
 8004ffa:	2a08      	cmp	r2, #8
 8004ffc:	d10b      	bne.n	8005016 <_printf_i+0x112>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	07db      	lsls	r3, r3, #31
 8005002:	d508      	bpl.n	8005016 <_printf_i+0x112>
 8005004:	6923      	ldr	r3, [r4, #16]
 8005006:	6862      	ldr	r2, [r4, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	bfde      	ittt	le
 800500c:	2330      	movle	r3, #48	; 0x30
 800500e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005012:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005016:	ebac 0305 	sub.w	r3, ip, r5
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	f8cd 8000 	str.w	r8, [sp]
 8005020:	463b      	mov	r3, r7
 8005022:	aa03      	add	r2, sp, #12
 8005024:	4621      	mov	r1, r4
 8005026:	4630      	mov	r0, r6
 8005028:	f7ff fef6 	bl	8004e18 <_printf_common>
 800502c:	3001      	adds	r0, #1
 800502e:	d14d      	bne.n	80050cc <_printf_i+0x1c8>
 8005030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005034:	b005      	add	sp, #20
 8005036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800503a:	4839      	ldr	r0, [pc, #228]	; (8005120 <_printf_i+0x21c>)
 800503c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005040:	6813      	ldr	r3, [r2, #0]
 8005042:	6821      	ldr	r1, [r4, #0]
 8005044:	1d1d      	adds	r5, r3, #4
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6015      	str	r5, [r2, #0]
 800504a:	060a      	lsls	r2, r1, #24
 800504c:	d50b      	bpl.n	8005066 <_printf_i+0x162>
 800504e:	07ca      	lsls	r2, r1, #31
 8005050:	bf44      	itt	mi
 8005052:	f041 0120 	orrmi.w	r1, r1, #32
 8005056:	6021      	strmi	r1, [r4, #0]
 8005058:	b91b      	cbnz	r3, 8005062 <_printf_i+0x15e>
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	f022 0220 	bic.w	r2, r2, #32
 8005060:	6022      	str	r2, [r4, #0]
 8005062:	2210      	movs	r2, #16
 8005064:	e7b7      	b.n	8004fd6 <_printf_i+0xd2>
 8005066:	064d      	lsls	r5, r1, #25
 8005068:	bf48      	it	mi
 800506a:	b29b      	uxthmi	r3, r3
 800506c:	e7ef      	b.n	800504e <_printf_i+0x14a>
 800506e:	4665      	mov	r5, ip
 8005070:	fbb3 f1f2 	udiv	r1, r3, r2
 8005074:	fb02 3311 	mls	r3, r2, r1, r3
 8005078:	5cc3      	ldrb	r3, [r0, r3]
 800507a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800507e:	460b      	mov	r3, r1
 8005080:	2900      	cmp	r1, #0
 8005082:	d1f5      	bne.n	8005070 <_printf_i+0x16c>
 8005084:	e7b9      	b.n	8004ffa <_printf_i+0xf6>
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	6825      	ldr	r5, [r4, #0]
 800508a:	6961      	ldr	r1, [r4, #20]
 800508c:	1d18      	adds	r0, r3, #4
 800508e:	6010      	str	r0, [r2, #0]
 8005090:	0628      	lsls	r0, r5, #24
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	d501      	bpl.n	800509a <_printf_i+0x196>
 8005096:	6019      	str	r1, [r3, #0]
 8005098:	e002      	b.n	80050a0 <_printf_i+0x19c>
 800509a:	066a      	lsls	r2, r5, #25
 800509c:	d5fb      	bpl.n	8005096 <_printf_i+0x192>
 800509e:	8019      	strh	r1, [r3, #0]
 80050a0:	2300      	movs	r3, #0
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	4665      	mov	r5, ip
 80050a6:	e7b9      	b.n	800501c <_printf_i+0x118>
 80050a8:	6813      	ldr	r3, [r2, #0]
 80050aa:	1d19      	adds	r1, r3, #4
 80050ac:	6011      	str	r1, [r2, #0]
 80050ae:	681d      	ldr	r5, [r3, #0]
 80050b0:	6862      	ldr	r2, [r4, #4]
 80050b2:	2100      	movs	r1, #0
 80050b4:	4628      	mov	r0, r5
 80050b6:	f7fb f88b 	bl	80001d0 <memchr>
 80050ba:	b108      	cbz	r0, 80050c0 <_printf_i+0x1bc>
 80050bc:	1b40      	subs	r0, r0, r5
 80050be:	6060      	str	r0, [r4, #4]
 80050c0:	6863      	ldr	r3, [r4, #4]
 80050c2:	6123      	str	r3, [r4, #16]
 80050c4:	2300      	movs	r3, #0
 80050c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ca:	e7a7      	b.n	800501c <_printf_i+0x118>
 80050cc:	6923      	ldr	r3, [r4, #16]
 80050ce:	462a      	mov	r2, r5
 80050d0:	4639      	mov	r1, r7
 80050d2:	4630      	mov	r0, r6
 80050d4:	47c0      	blx	r8
 80050d6:	3001      	adds	r0, #1
 80050d8:	d0aa      	beq.n	8005030 <_printf_i+0x12c>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	079b      	lsls	r3, r3, #30
 80050de:	d413      	bmi.n	8005108 <_printf_i+0x204>
 80050e0:	68e0      	ldr	r0, [r4, #12]
 80050e2:	9b03      	ldr	r3, [sp, #12]
 80050e4:	4298      	cmp	r0, r3
 80050e6:	bfb8      	it	lt
 80050e8:	4618      	movlt	r0, r3
 80050ea:	e7a3      	b.n	8005034 <_printf_i+0x130>
 80050ec:	2301      	movs	r3, #1
 80050ee:	464a      	mov	r2, r9
 80050f0:	4639      	mov	r1, r7
 80050f2:	4630      	mov	r0, r6
 80050f4:	47c0      	blx	r8
 80050f6:	3001      	adds	r0, #1
 80050f8:	d09a      	beq.n	8005030 <_printf_i+0x12c>
 80050fa:	3501      	adds	r5, #1
 80050fc:	68e3      	ldr	r3, [r4, #12]
 80050fe:	9a03      	ldr	r2, [sp, #12]
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	42ab      	cmp	r3, r5
 8005104:	dcf2      	bgt.n	80050ec <_printf_i+0x1e8>
 8005106:	e7eb      	b.n	80050e0 <_printf_i+0x1dc>
 8005108:	2500      	movs	r5, #0
 800510a:	f104 0919 	add.w	r9, r4, #25
 800510e:	e7f5      	b.n	80050fc <_printf_i+0x1f8>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1ac      	bne.n	800506e <_printf_i+0x16a>
 8005114:	7803      	ldrb	r3, [r0, #0]
 8005116:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800511a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800511e:	e76c      	b.n	8004ffa <_printf_i+0xf6>
 8005120:	08005865 	.word	0x08005865
 8005124:	08005876 	.word	0x08005876

08005128 <_sbrk_r>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	4c06      	ldr	r4, [pc, #24]	; (8005144 <_sbrk_r+0x1c>)
 800512c:	2300      	movs	r3, #0
 800512e:	4605      	mov	r5, r0
 8005130:	4608      	mov	r0, r1
 8005132:	6023      	str	r3, [r4, #0]
 8005134:	f7fc f8e2 	bl	80012fc <_sbrk>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	d102      	bne.n	8005142 <_sbrk_r+0x1a>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	b103      	cbz	r3, 8005142 <_sbrk_r+0x1a>
 8005140:	602b      	str	r3, [r5, #0]
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	20000678 	.word	0x20000678

08005148 <__sread>:
 8005148:	b510      	push	{r4, lr}
 800514a:	460c      	mov	r4, r1
 800514c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005150:	f000 f896 	bl	8005280 <_read_r>
 8005154:	2800      	cmp	r0, #0
 8005156:	bfab      	itete	ge
 8005158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800515a:	89a3      	ldrhlt	r3, [r4, #12]
 800515c:	181b      	addge	r3, r3, r0
 800515e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005162:	bfac      	ite	ge
 8005164:	6563      	strge	r3, [r4, #84]	; 0x54
 8005166:	81a3      	strhlt	r3, [r4, #12]
 8005168:	bd10      	pop	{r4, pc}

0800516a <__swrite>:
 800516a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800516e:	461f      	mov	r7, r3
 8005170:	898b      	ldrh	r3, [r1, #12]
 8005172:	05db      	lsls	r3, r3, #23
 8005174:	4605      	mov	r5, r0
 8005176:	460c      	mov	r4, r1
 8005178:	4616      	mov	r6, r2
 800517a:	d505      	bpl.n	8005188 <__swrite+0x1e>
 800517c:	2302      	movs	r3, #2
 800517e:	2200      	movs	r2, #0
 8005180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005184:	f000 f868 	bl	8005258 <_lseek_r>
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800518e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	4632      	mov	r2, r6
 8005196:	463b      	mov	r3, r7
 8005198:	4628      	mov	r0, r5
 800519a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800519e:	f000 b817 	b.w	80051d0 <_write_r>

080051a2 <__sseek>:
 80051a2:	b510      	push	{r4, lr}
 80051a4:	460c      	mov	r4, r1
 80051a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051aa:	f000 f855 	bl	8005258 <_lseek_r>
 80051ae:	1c43      	adds	r3, r0, #1
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	bf15      	itete	ne
 80051b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80051b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051be:	81a3      	strheq	r3, [r4, #12]
 80051c0:	bf18      	it	ne
 80051c2:	81a3      	strhne	r3, [r4, #12]
 80051c4:	bd10      	pop	{r4, pc}

080051c6 <__sclose>:
 80051c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ca:	f000 b813 	b.w	80051f4 <_close_r>
	...

080051d0 <_write_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4c07      	ldr	r4, [pc, #28]	; (80051f0 <_write_r+0x20>)
 80051d4:	4605      	mov	r5, r0
 80051d6:	4608      	mov	r0, r1
 80051d8:	4611      	mov	r1, r2
 80051da:	2200      	movs	r2, #0
 80051dc:	6022      	str	r2, [r4, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	f7fc f83c 	bl	800125c <_write>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d102      	bne.n	80051ee <_write_r+0x1e>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	b103      	cbz	r3, 80051ee <_write_r+0x1e>
 80051ec:	602b      	str	r3, [r5, #0]
 80051ee:	bd38      	pop	{r3, r4, r5, pc}
 80051f0:	20000678 	.word	0x20000678

080051f4 <_close_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4c06      	ldr	r4, [pc, #24]	; (8005210 <_close_r+0x1c>)
 80051f8:	2300      	movs	r3, #0
 80051fa:	4605      	mov	r5, r0
 80051fc:	4608      	mov	r0, r1
 80051fe:	6023      	str	r3, [r4, #0]
 8005200:	f7fc f848 	bl	8001294 <_close>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d102      	bne.n	800520e <_close_r+0x1a>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	b103      	cbz	r3, 800520e <_close_r+0x1a>
 800520c:	602b      	str	r3, [r5, #0]
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	20000678 	.word	0x20000678

08005214 <_fstat_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4c07      	ldr	r4, [pc, #28]	; (8005234 <_fstat_r+0x20>)
 8005218:	2300      	movs	r3, #0
 800521a:	4605      	mov	r5, r0
 800521c:	4608      	mov	r0, r1
 800521e:	4611      	mov	r1, r2
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	f7fc f843 	bl	80012ac <_fstat>
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	d102      	bne.n	8005230 <_fstat_r+0x1c>
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	b103      	cbz	r3, 8005230 <_fstat_r+0x1c>
 800522e:	602b      	str	r3, [r5, #0]
 8005230:	bd38      	pop	{r3, r4, r5, pc}
 8005232:	bf00      	nop
 8005234:	20000678 	.word	0x20000678

08005238 <_isatty_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4c06      	ldr	r4, [pc, #24]	; (8005254 <_isatty_r+0x1c>)
 800523c:	2300      	movs	r3, #0
 800523e:	4605      	mov	r5, r0
 8005240:	4608      	mov	r0, r1
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	f7fc f842 	bl	80012cc <_isatty>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_isatty_r+0x1a>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	b103      	cbz	r3, 8005252 <_isatty_r+0x1a>
 8005250:	602b      	str	r3, [r5, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	20000678 	.word	0x20000678

08005258 <_lseek_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4c07      	ldr	r4, [pc, #28]	; (8005278 <_lseek_r+0x20>)
 800525c:	4605      	mov	r5, r0
 800525e:	4608      	mov	r0, r1
 8005260:	4611      	mov	r1, r2
 8005262:	2200      	movs	r2, #0
 8005264:	6022      	str	r2, [r4, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	f7fc f83b 	bl	80012e2 <_lseek>
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d102      	bne.n	8005276 <_lseek_r+0x1e>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	b103      	cbz	r3, 8005276 <_lseek_r+0x1e>
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	bd38      	pop	{r3, r4, r5, pc}
 8005278:	20000678 	.word	0x20000678

0800527c <__malloc_lock>:
 800527c:	4770      	bx	lr

0800527e <__malloc_unlock>:
 800527e:	4770      	bx	lr

08005280 <_read_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4c07      	ldr	r4, [pc, #28]	; (80052a0 <_read_r+0x20>)
 8005284:	4605      	mov	r5, r0
 8005286:	4608      	mov	r0, r1
 8005288:	4611      	mov	r1, r2
 800528a:	2200      	movs	r2, #0
 800528c:	6022      	str	r2, [r4, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	f7fb ffc7 	bl	8001222 <_read>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d102      	bne.n	800529e <_read_r+0x1e>
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	b103      	cbz	r3, 800529e <_read_r+0x1e>
 800529c:	602b      	str	r3, [r5, #0]
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	20000678 	.word	0x20000678

080052a4 <_init>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr

080052b0 <_fini>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	bf00      	nop
 80052b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b6:	bc08      	pop	{r3}
 80052b8:	469e      	mov	lr, r3
 80052ba:	4770      	bx	lr
