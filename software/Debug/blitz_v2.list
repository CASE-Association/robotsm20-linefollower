
blitz_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006260  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f60  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008350  08008350  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008350  08008350  00018350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008358  08008358  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  20000088  080083e8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  080083e8  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cb8  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027f1  00000000  00000000  00032d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e0  00000000  00000000  00035568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  00036648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002141d  00000000  00000000  000375e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d5dd  00000000  00000000  000589fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2e10  00000000  00000000  00065fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128dea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d84  00000000  00000000  00128e68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063d8 	.word	0x080063d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080063d8 	.word	0x080063d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <__io_putchar+0x20>)
 8000582:	f004 fad0 	bl	8004b26 <HAL_UART_Transmit>
	return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200005e0 	.word	0x200005e0

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059a:	f001 ff37 	bl	800240c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f89d 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fb67 	bl	8000c74 <MX_GPIO_Init>
  MX_I2C3_Init();
 80005a6:	f000 f8f7 	bl	8000798 <MX_I2C3_Init>
  MX_TIM1_Init();
 80005aa:	f000 f923 	bl	80007f4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005ae:	f000 fb37 	bl	8000c20 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80005b2:	f000 fa59 	bl	8000a68 <MX_TIM4_Init>
  MX_TIM3_Init();
 80005b6:	f000 f9f3 	bl	80009a0 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005ba:	f000 f99d 	bl	80008f8 <MX_TIM2_Init>
  MX_TIM5_Init();
 80005be:	f000 fab7 	bl	8000b30 <MX_TIM5_Init>
  MX_TIM14_Init();
 80005c2:	f000 fb09 	bl	8000bd8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  printf("========== Blitz V2 ==========\r\n");
 80005c6:	483a      	ldr	r0, [pc, #232]	; (80006b0 <main+0x11c>)
 80005c8:	f004 ff9a 	bl	8005500 <puts>
  printf("Created by Oskar & Isak\r\n");
 80005cc:	4839      	ldr	r0, [pc, #228]	; (80006b4 <main+0x120>)
 80005ce:	f004 ff97 	bl	8005500 <puts>


  printf("\r\n========== Initializing peripherals ==========\r\n");
 80005d2:	4839      	ldr	r0, [pc, #228]	; (80006b8 <main+0x124>)
 80005d4:	f004 ff94 	bl	8005500 <puts>
  printf("\t- Buzzer\r\n");
 80005d8:	4838      	ldr	r0, [pc, #224]	; (80006bc <main+0x128>)
 80005da:	f004 ff91 	bl	8005500 <puts>
  init_buzzer();
 80005de:	f000 ff77 	bl	80014d0 <init_buzzer>
  //Startup beep
  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80005e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e6:	4836      	ldr	r0, [pc, #216]	; (80006c0 <main+0x12c>)
 80005e8:	f002 fa81 	bl	8002aee <HAL_GPIO_TogglePin>
	tone(523,200);
 80005ec:	21c8      	movs	r1, #200	; 0xc8
 80005ee:	f240 200b 	movw	r0, #523	; 0x20b
 80005f2:	f000 ff97 	bl	8001524 <tone>
	HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80005f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fa:	4831      	ldr	r0, [pc, #196]	; (80006c0 <main+0x12c>)
 80005fc:	f002 fa77 	bl	8002aee <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000604:	482e      	ldr	r0, [pc, #184]	; (80006c0 <main+0x12c>)
 8000606:	f002 fa72 	bl	8002aee <HAL_GPIO_TogglePin>
	tone(659,200);
 800060a:	21c8      	movs	r1, #200	; 0xc8
 800060c:	f240 2093 	movw	r0, #659	; 0x293
 8000610:	f000 ff88 	bl	8001524 <tone>
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000618:	4829      	ldr	r0, [pc, #164]	; (80006c0 <main+0x12c>)
 800061a:	f002 fa68 	bl	8002aee <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800061e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000622:	4828      	ldr	r0, [pc, #160]	; (80006c4 <main+0x130>)
 8000624:	f002 fa63 	bl	8002aee <HAL_GPIO_TogglePin>
	tone(784,200);
 8000628:	21c8      	movs	r1, #200	; 0xc8
 800062a:	f44f 7044 	mov.w	r0, #784	; 0x310
 800062e:	f000 ff79 	bl	8001524 <tone>
	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000636:	4823      	ldr	r0, [pc, #140]	; (80006c4 <main+0x130>)
 8000638:	f002 fa59 	bl	8002aee <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800063c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000640:	f001 ff56 	bl	80024f0 <HAL_Delay>

  printf("\t- OLED\r\n");
 8000644:	4820      	ldr	r0, [pc, #128]	; (80006c8 <main+0x134>)
 8000646:	f004 ff5b 	bl	8005500 <puts>
  init_oled(); // Draws CASE LOGO for now
 800064a:	f001 f84d 	bl	80016e8 <init_oled>
  //HAL_Delay(500);
  printf("\t- Motors\r\n");
 800064e:	481f      	ldr	r0, [pc, #124]	; (80006cc <main+0x138>)
 8000650:	f004 ff56 	bl	8005500 <puts>
  init_motors();
 8000654:	f000 ffb2 	bl	80015bc <init_motors>
  //HAL_Delay(500);
  printf("\t- Fans\r\n");
 8000658:	481d      	ldr	r0, [pc, #116]	; (80006d0 <main+0x13c>)
 800065a:	f004 ff51 	bl	8005500 <puts>
  init_fans();
 800065e:	f000 ff89 	bl	8001574 <init_fans>


  // Run all tests
  //tests_run();

  printf("\r\n========== Starting Blitz ==========\r\n");
 8000662:	481c      	ldr	r0, [pc, #112]	; (80006d4 <main+0x140>)
 8000664:	f004 ff4c 	bl	8005500 <puts>
  printf("1\r\n");
  HAL_Delay(1000);
  */

  /* USER CODE END 2 */
  int once = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]

    /* USER CODE BEGIN 3 */

  	//printf("Left Enc: %d\t\t Right Enc: %d\r\n", (int)TIM2->CNT, (int)TIM5->CNT);

  	oled_update();
 800066c:	f001 f932 	bl	80018d4 <oled_update>
  	HAL_Delay(10);
 8000670:	200a      	movs	r0, #10
 8000672:	f001 ff3d 	bl	80024f0 <HAL_Delay>

  	if(HAL_GetTick() > 8000 && once){
 8000676:	f001 ff2f 	bl	80024d8 <HAL_GetTick>
 800067a:	4603      	mov	r3, r0
 800067c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000680:	d9f4      	bls.n	800066c <main+0xd8>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f1      	beq.n	800066c <main+0xd8>
  		once = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
  		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800068c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <main+0x130>)
 8000692:	f002 fa2c 	bl	8002aee <HAL_GPIO_TogglePin>
  		HAL_Delay(500);
 8000696:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069a:	f001 ff29 	bl	80024f0 <HAL_Delay>
  		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800069e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <main+0x130>)
 80006a4:	f002 fa23 	bl	8002aee <HAL_GPIO_TogglePin>
  		oled_error("Katten gillar mat");
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <main+0x144>)
 80006aa:	f001 f95d 	bl	8001968 <oled_error>
  	oled_update();
 80006ae:	e7dd      	b.n	800066c <main+0xd8>
 80006b0:	08006438 	.word	0x08006438
 80006b4:	08006458 	.word	0x08006458
 80006b8:	08006474 	.word	0x08006474
 80006bc:	08006414 	.word	0x08006414
 80006c0:	40020800 	.word	0x40020800
 80006c4:	40020000 	.word	0x40020000
 80006c8:	080064a8 	.word	0x080064a8
 80006cc:	08006420 	.word	0x08006420
 80006d0:	0800642c 	.word	0x0800642c
 80006d4:	080064b4 	.word	0x080064b4
 80006d8:	080064dc 	.word	0x080064dc

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fea4 	bl	8005438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xb4>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemClock_Config+0xb4>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <SystemClock_Config+0xb4>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemClock_Config+0xb8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemClock_Config+0xb8>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemClock_Config+0xb8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f002 fe5b 	bl	8003408 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000758:	f000 fb2c 	bl	8000db4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f003 f8b6 	bl	80038e8 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000782:	f000 fb17 	bl	8000db4 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2C3_Init+0x50>)
 800079e:	4a13      	ldr	r2, [pc, #76]	; (80007ec <MX_I2C3_Init+0x54>)
 80007a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007a4:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_I2C3_Init+0x58>)
 80007a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007d6:	f002 f9c9 	bl	8002b6c <HAL_I2C_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007e0:	f000 fae8 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200004cc 	.word	0x200004cc
 80007ec:	40005c00 	.word	0x40005c00
 80007f0:	00061a80 	.word	0x00061a80

080007f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b092      	sub	sp, #72	; 0x48
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2220      	movs	r2, #32
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f004 fe0a 	bl	8005438 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000824:	4b32      	ldr	r3, [pc, #200]	; (80008f0 <MX_TIM1_Init+0xfc>)
 8000826:	4a33      	ldr	r2, [pc, #204]	; (80008f4 <MX_TIM1_Init+0x100>)
 8000828:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 800082a:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <MX_TIM1_Init+0xfc>)
 800082c:	2203      	movs	r2, #3
 800082e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <MX_TIM1_Init+0xfc>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000836:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <MX_TIM1_Init+0xfc>)
 8000838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800083c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_TIM1_Init+0xfc>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000844:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <MX_TIM1_Init+0xfc>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_TIM1_Init+0xfc>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000850:	4827      	ldr	r0, [pc, #156]	; (80008f0 <MX_TIM1_Init+0xfc>)
 8000852:	f003 fa8f 	bl	8003d74 <HAL_TIM_PWM_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800085c:	f000 faaa 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000868:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800086c:	4619      	mov	r1, r3
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <MX_TIM1_Init+0xfc>)
 8000870:	f004 f82a 	bl	80048c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800087a:	f000 fa9b 	bl	8000db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087e:	2360      	movs	r3, #96	; 0x60
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	220c      	movs	r2, #12
 800089c:	4619      	mov	r1, r3
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_TIM1_Init+0xfc>)
 80008a0:	f003 fca4 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80008aa:	f000 fa83 	bl	8000db4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM1_Init+0xfc>)
 80008d2:	f004 f875 	bl	80049c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80008dc:	f000 fa6a 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM1_Init+0xfc>)
 80008e2:	f000 fc11 	bl	8001108 <HAL_TIM_MspPostInit>

}
 80008e6:	bf00      	nop
 80008e8:	3748      	adds	r7, #72	; 0x48
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000620 	.word	0x20000620
 80008f4:	40010000 	.word	0x40010000

080008f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2224      	movs	r2, #36	; 0x24
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f004 fd96 	bl	8005438 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_TIM2_Init+0xa4>)
 8000916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800091a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_TIM2_Init+0xa4>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_TIM2_Init+0xa4>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_TIM2_Init+0xa4>)
 800092a:	f04f 32ff 	mov.w	r2, #4294967295
 800092e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_TIM2_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_TIM2_Init+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800093c:	2303      	movs	r3, #3
 800093e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000944:	2301      	movs	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000954:	2301      	movs	r3, #1
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_TIM2_Init+0xa4>)
 8000968:	f003 fa6e 	bl	8003e48 <HAL_TIM_Encoder_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000972:	f000 fa1f 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_TIM2_Init+0xa4>)
 8000984:	f003 ffa0 	bl	80048c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800098e:	f000 fa11 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000660 	.word	0x20000660

080009a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
 80009be:	615a      	str	r2, [r3, #20]
 80009c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <MX_TIM3_Init+0xc0>)
 80009c4:	4a27      	ldr	r2, [pc, #156]	; (8000a64 <MX_TIM3_Init+0xc4>)
 80009c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <MX_TIM3_Init+0xc0>)
 80009ca:	220f      	movs	r2, #15
 80009cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <MX_TIM3_Init+0xc0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <MX_TIM3_Init+0xc0>)
 80009d6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80009da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_TIM3_Init+0xc0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_TIM3_Init+0xc0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009e8:	481d      	ldr	r0, [pc, #116]	; (8000a60 <MX_TIM3_Init+0xc0>)
 80009ea:	f003 f9c3 	bl	8003d74 <HAL_TIM_PWM_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80009f4:	f000 f9de 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a00:	f107 0320 	add.w	r3, r7, #32
 8000a04:	4619      	mov	r1, r3
 8000a06:	4816      	ldr	r0, [pc, #88]	; (8000a60 <MX_TIM3_Init+0xc0>)
 8000a08:	f003 ff5e 	bl	80048c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a12:	f000 f9cf 	bl	8000db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a16:	2360      	movs	r3, #96	; 0x60
 8000a18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_TIM3_Init+0xc0>)
 8000a2e:	f003 fbdd 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a38:	f000 f9bc 	bl	8000db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2204      	movs	r2, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4807      	ldr	r0, [pc, #28]	; (8000a60 <MX_TIM3_Init+0xc0>)
 8000a44:	f003 fbd2 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a4e:	f000 f9b1 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <MX_TIM3_Init+0xc0>)
 8000a54:	f000 fb58 	bl	8001108 <HAL_TIM_MspPostInit>

}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200005a0 	.word	0x200005a0
 8000a64:	40000400 	.word	0x40000400

08000a68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <MX_TIM4_Init+0xc0>)
 8000a8c:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <MX_TIM4_Init+0xc4>)
 8000a8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a90:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <MX_TIM4_Init+0xc0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <MX_TIM4_Init+0xc0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_TIM4_Init+0xc0>)
 8000a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_TIM4_Init+0xc0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_TIM4_Init+0xc0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ab0:	481d      	ldr	r0, [pc, #116]	; (8000b28 <MX_TIM4_Init+0xc0>)
 8000ab2:	f003 f95f 	bl	8003d74 <HAL_TIM_PWM_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000abc:	f000 f97a 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ac8:	f107 0320 	add.w	r3, r7, #32
 8000acc:	4619      	mov	r1, r3
 8000ace:	4816      	ldr	r0, [pc, #88]	; (8000b28 <MX_TIM4_Init+0xc0>)
 8000ad0:	f003 fefa 	bl	80048c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000ada:	f000 f96b 	bl	8000db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ade:	2360      	movs	r3, #96	; 0x60
 8000ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2208      	movs	r2, #8
 8000af2:	4619      	mov	r1, r3
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <MX_TIM4_Init+0xc0>)
 8000af6:	f003 fb79 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000b00:	f000 f958 	bl	8000db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	220c      	movs	r2, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <MX_TIM4_Init+0xc0>)
 8000b0c:	f003 fb6e 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b16:	f000 f94d 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <MX_TIM4_Init+0xc0>)
 8000b1c:	f000 faf4 	bl	8001108 <HAL_TIM_MspPostInit>

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000520 	.word	0x20000520
 8000b2c:	40000800 	.word	0x40000800

08000b30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	2224      	movs	r2, #36	; 0x24
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 fc7a 	bl	8005438 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <MX_TIM5_Init+0xa0>)
 8000b4e:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <MX_TIM5_Init+0xa4>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_TIM5_Init+0xa0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_TIM5_Init+0xa0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_TIM5_Init+0xa0>)
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_TIM5_Init+0xa0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_TIM5_Init+0xa0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000b86:	2302      	movs	r3, #2
 8000b88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <MX_TIM5_Init+0xa0>)
 8000b9e:	f003 f953 	bl	8003e48 <HAL_TIM_Encoder_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000ba8:	f000 f904 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_TIM5_Init+0xa0>)
 8000bba:	f003 fe85 	bl	80048c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000bc4:	f000 f8f6 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000560 	.word	0x20000560
 8000bd4:	40000c00 	.word	0x40000c00

08000bd8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_TIM14_Init+0x40>)
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <MX_TIM14_Init+0x44>)
 8000be0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000;
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <MX_TIM14_Init+0x40>)
 8000be4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000be8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_TIM14_Init+0x40>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_TIM14_Init+0x40>)
 8000bf2:	2232      	movs	r2, #50	; 0x32
 8000bf4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_TIM14_Init+0x40>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_TIM14_Init+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_TIM14_Init+0x40>)
 8000c04:	f003 f83c 	bl	8003c80 <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000c0e:	f000 f8d1 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200006a0 	.word	0x200006a0
 8000c1c:	40002000 	.word	0x40002000

08000c20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <MX_USART1_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c58:	f003 ff18 	bl	8004a8c <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f000 f8a7 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200005e0 	.word	0x200005e0
 8000c70:	40011000 	.word	0x40011000

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <MX_GPIO_Init+0x12c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a43      	ldr	r2, [pc, #268]	; (8000da0 <MX_GPIO_Init+0x12c>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b41      	ldr	r3, [pc, #260]	; (8000da0 <MX_GPIO_Init+0x12c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <MX_GPIO_Init+0x12c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a3c      	ldr	r2, [pc, #240]	; (8000da0 <MX_GPIO_Init+0x12c>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b3a      	ldr	r3, [pc, #232]	; (8000da0 <MX_GPIO_Init+0x12c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <MX_GPIO_Init+0x12c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a35      	ldr	r2, [pc, #212]	; (8000da0 <MX_GPIO_Init+0x12c>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <MX_GPIO_Init+0x12c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce4:	482f      	ldr	r0, [pc, #188]	; (8000da4 <MX_GPIO_Init+0x130>)
 8000ce6:	f001 fee9 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000cf0:	482d      	ldr	r0, [pc, #180]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000cf2:	f001 fee3 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin|MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	21f0      	movs	r1, #240	; 0xf0
 8000cfa:	482c      	ldr	r0, [pc, #176]	; (8000dac <MX_GPIO_Init+0x138>)
 8000cfc:	f001 fede 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_SELECT_Pin */
  GPIO_InitStruct.Pin = BUTTON_SELECT_Pin;
 8000d00:	2308      	movs	r3, #8
 8000d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_SELECT_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4619      	mov	r1, r3
 8000d12:	4825      	ldr	r0, [pc, #148]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000d14:	f001 fd20 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4820      	ldr	r0, [pc, #128]	; (8000dac <MX_GPIO_Init+0x138>)
 8000d2c:	f001 fd14 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	4816      	ldr	r0, [pc, #88]	; (8000da4 <MX_GPIO_Init+0x130>)
 8000d4a:	f001 fd05 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8000d4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	4810      	ldr	r0, [pc, #64]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000d68:	f001 fcf6 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_R_IN2_Pin MOTOR_R_IN1_Pin MOTOR_L_IN2_Pin MOTOR_L_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin|MOTOR_L_IN1_Pin;
 8000d6c:	23f0      	movs	r3, #240	; 0xf0
 8000d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4619      	mov	r1, r3
 8000d82:	480a      	ldr	r0, [pc, #40]	; (8000dac <MX_GPIO_Init+0x138>)
 8000d84:	f001 fce8 	bl	8002758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2009      	movs	r0, #9
 8000d8e:	f001 fcac 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d92:	2009      	movs	r0, #9
 8000d94:	f001 fcc5 	bl	8002722 <HAL_NVIC_EnableIRQ>

}
 8000d98:	bf00      	nop
 8000d9a:	3720      	adds	r7, #32
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020800 	.word	0x40020800
 8000dac:	40020400 	.word	0x40020400
 8000db0:	10210000 	.word	0x10210000

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a29      	ldr	r2, [pc, #164]	; (8000ed8 <HAL_I2C_MspInit+0xc4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d14b      	bne.n	8000ece <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <HAL_I2C_MspInit+0xc8>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a27      	ldr	r2, [pc, #156]	; (8000edc <HAL_I2C_MspInit+0xc8>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <HAL_I2C_MspInit+0xc8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <HAL_I2C_MspInit+0xc8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a20      	ldr	r2, [pc, #128]	; (8000edc <HAL_I2C_MspInit+0xc8>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <HAL_I2C_MspInit+0xc8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = SDA_Pin;
 8000e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e74:	2312      	movs	r3, #18
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e80:	2304      	movs	r3, #4
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4815      	ldr	r0, [pc, #84]	; (8000ee0 <HAL_I2C_MspInit+0xcc>)
 8000e8c:	f001 fc64 	bl	8002758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCL_Pin;
 8000e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e96:	2312      	movs	r3, #18
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000eae:	f001 fc53 	bl	8002758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_I2C_MspInit+0xc8>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_I2C_MspInit+0xc8>)
 8000ebc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_I2C_MspInit+0xc8>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	; 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40005c00 	.word	0x40005c00
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <HAL_TIM_PWM_MspInit+0x8c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10e      	bne.n	8000f18 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_TIM_PWM_MspInit+0x90>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_TIM_PWM_MspInit+0x90>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_TIM_PWM_MspInit+0x90>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f16:	e026      	b.n	8000f66 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <HAL_TIM_PWM_MspInit+0x94>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10e      	bne.n	8000f40 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_TIM_PWM_MspInit+0x90>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_TIM_PWM_MspInit+0x90>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_TIM_PWM_MspInit+0x90>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
}
 8000f3e:	e012      	b.n	8000f66 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_TIM_PWM_MspInit+0x98>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d10d      	bne.n	8000f66 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_TIM_PWM_MspInit+0x90>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <HAL_TIM_PWM_MspInit+0x90>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_TIM_PWM_MspInit+0x90>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
}
 8000f66:	bf00      	nop
 8000f68:	371c      	adds	r7, #28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40010000 	.word	0x40010000
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40000400 	.word	0x40000400
 8000f80:	40000800 	.word	0x40000800

08000f84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa4:	d14a      	bne.n	800103c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a3e      	ldr	r2, [pc, #248]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b3c      	ldr	r3, [pc, #240]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a37      	ldr	r2, [pc, #220]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a30      	ldr	r2, [pc, #192]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_L_A_Pin;
 8000ffa:	2320      	movs	r3, #32
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800100a:	2301      	movs	r3, #1
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4825      	ldr	r0, [pc, #148]	; (80010ac <HAL_TIM_Encoder_MspInit+0x128>)
 8001016:	f001 fb9f 	bl	8002758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_L_B_Pin;
 800101a:	2308      	movs	r3, #8
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800102a:	2301      	movs	r3, #1
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	481e      	ldr	r0, [pc, #120]	; (80010b0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001036:	f001 fb8f 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800103a:	e030      	b.n	800109e <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <HAL_TIM_Encoder_MspInit+0x130>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d12b      	bne.n	800109e <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001050:	f043 0308 	orr.w	r3, r3, #8
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_R_B_Pin|ENC_R_A_Pin;
 800107e:	2303      	movs	r3, #3
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800108e:	2302      	movs	r3, #2
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <HAL_TIM_Encoder_MspInit+0x128>)
 800109a:	f001 fb5d 	bl	8002758 <HAL_GPIO_Init>
}
 800109e:	bf00      	nop
 80010a0:	3730      	adds	r7, #48	; 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020400 	.word	0x40020400
 80010b4:	40000c00 	.word	0x40000c00

080010b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d115      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_TIM_Base_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <HAL_TIM_Base_MspInit+0x4c>)
 80010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_TIM_Base_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	202d      	movs	r0, #45	; 0x2d
 80010ec:	f001 fafd 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80010f0:	202d      	movs	r0, #45	; 0x2d
 80010f2:	f001 fb16 	bl	8002722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40002000 	.word	0x40002000
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a37      	ldr	r2, [pc, #220]	; (8001204 <HAL_TIM_MspPostInit+0xfc>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d11f      	bne.n	800116a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_TIM_MspPostInit+0x100>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a35      	ldr	r2, [pc, #212]	; (8001208 <HAL_TIM_MspPostInit+0x100>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b33      	ldr	r3, [pc, #204]	; (8001208 <HAL_TIM_MspPostInit+0x100>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001158:	2301      	movs	r3, #1
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	482a      	ldr	r0, [pc, #168]	; (800120c <HAL_TIM_MspPostInit+0x104>)
 8001164:	f001 faf8 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001168:	e047      	b.n	80011fa <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a28      	ldr	r2, [pc, #160]	; (8001210 <HAL_TIM_MspPostInit+0x108>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d11e      	bne.n	80011b2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_TIM_MspPostInit+0x100>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	4a22      	ldr	r2, [pc, #136]	; (8001208 <HAL_TIM_MspPostInit+0x100>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6313      	str	r3, [r2, #48]	; 0x30
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <HAL_TIM_MspPostInit+0x100>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_L_PWM_Pin|FAN_R_PWM_Pin;
 8001190:	23c0      	movs	r3, #192	; 0xc0
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011a0:	2302      	movs	r3, #2
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	481a      	ldr	r0, [pc, #104]	; (8001214 <HAL_TIM_MspPostInit+0x10c>)
 80011ac:	f001 fad4 	bl	8002758 <HAL_GPIO_Init>
}
 80011b0:	e023      	b.n	80011fa <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a18      	ldr	r2, [pc, #96]	; (8001218 <HAL_TIM_MspPostInit+0x110>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d11e      	bne.n	80011fa <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_TIM_MspPostInit+0x100>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_TIM_MspPostInit+0x100>)
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_TIM_MspPostInit+0x100>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin|MOTOR_L_PWM_Pin;
 80011d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011ea:	2302      	movs	r3, #2
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <HAL_TIM_MspPostInit+0x114>)
 80011f6:	f001 faaf 	bl	8002758 <HAL_GPIO_Init>
}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40010000 	.word	0x40010000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000
 8001210:	40000400 	.word	0x40000400
 8001214:	40020800 	.word	0x40020800
 8001218:	40000800 	.word	0x40000800
 800121c:	40020400 	.word	0x40020400

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_UART_MspInit+0x84>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12c      	bne.n	800129c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_UART_MspInit+0x88>)
 800124c:	f043 0310 	orr.w	r3, r3, #16
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 800127a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800128c:	2307      	movs	r3, #7
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_UART_MspInit+0x8c>)
 8001298:	f001 fa5e 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	; 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40011000 	.word	0x40011000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001304:	f001 f8d4 	bl	80024b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001310:	2008      	movs	r0, #8
 8001312:	f001 fc07 	bl	8002b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  // Button might have been pressed when this interrupt is called
  // Software debounce
  if(!checking){
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <EXTI3_IRQHandler+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <EXTI3_IRQHandler+0x1e>
		HAL_TIM_Base_Start_IT(&htim14);
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <EXTI3_IRQHandler+0x28>)
 8001320:	f002 fcd9 	bl	8003cd6 <HAL_TIM_Base_Start_IT>
		checking = 1;
 8001324:	4b02      	ldr	r3, [pc, #8]	; (8001330 <EXTI3_IRQHandler+0x24>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END EXTI3_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200000a4 	.word	0x200000a4
 8001334:	200006a0 	.word	0x200006a0

08001338 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 800133e:	f002 fe4c 	bl	8003fda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
  if(HAL_GPIO_ReadPin(BUTTON_SELECT_GPIO_Port, BUTTON_SELECT_Pin) == GPIO_PIN_RESET){
 8001342:	2108      	movs	r1, #8
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 8001346:	f001 fba1 	bl	8002a8c <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d107      	bne.n	8001360 <TIM8_TRG_COM_TIM14_IRQHandler+0x28>
		checking = 0;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim14);
 8001356:	4803      	ldr	r0, [pc, #12]	; (8001364 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 8001358:	f002 fce1 	bl	8003d1e <HAL_TIM_Base_Stop_IT>
		oled_button_press();
 800135c:	f000 fb2c 	bl	80019b8 <oled_button_press>
	}

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200006a0 	.word	0x200006a0
 8001368:	40020800 	.word	0x40020800
 800136c:	200000a4 	.word	0x200000a4

08001370 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e00a      	b.n	8001398 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001382:	f3af 8000 	nop.w
 8001386:	4601      	mov	r1, r0
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dbf0      	blt.n	8001382 <_read+0x12>
	}

return len;
 80013a0:	687b      	ldr	r3, [r7, #4]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e009      	b.n	80013d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8d3 	bl	8000570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf1      	blt.n	80013bc <_write+0x12>
	}
	return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_close>:

int _close(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140a:	605a      	str	r2, [r3, #4]
	return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_isatty>:

int _isatty(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return 1;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <_sbrk+0x50>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x16>
		heap_end = &end;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <_sbrk+0x50>)
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <_sbrk+0x54>)
 8001460:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <_sbrk+0x50>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <_sbrk+0x50>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	466a      	mov	r2, sp
 8001472:	4293      	cmp	r3, r2
 8001474:	d907      	bls.n	8001486 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001476:	f003 ffb5 	bl	80053e4 <__errno>
 800147a:	4602      	mov	r2, r0
 800147c:	230c      	movs	r3, #12
 800147e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	e006      	b.n	8001494 <_sbrk+0x48>
	}

	heap_end += incr;
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <_sbrk+0x50>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a03      	ldr	r2, [pc, #12]	; (800149c <_sbrk+0x50>)
 8001490:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200000a8 	.word	0x200000a8
 80014a0:	20000888 	.word	0x20000888

080014a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <SystemInit+0x28>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a07      	ldr	r2, [pc, #28]	; (80014cc <SystemInit+0x28>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SystemInit+0x28>)
 80014ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014be:	609a      	str	r2, [r3, #8]
#endif
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <init_buzzer>:
  NOTE_GS5,2,

};


void init_buzzer(void){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014d4:	210c      	movs	r1, #12
 80014d6:	4802      	ldr	r0, [pc, #8]	; (80014e0 <init_buzzer+0x10>)
 80014d8:	f002 fc78 	bl	8003dcc <HAL_TIM_PWM_Start>


}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000620 	.word	0x20000620

080014e4 <beep>:

void beep(int duration){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
    if(duration > 1000)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014f2:	dd02      	ble.n	80014fa <beep+0x16>
        duration = 1000;
 80014f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f8:	607b      	str	r3, [r7, #4]
    if(duration < 0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	da01      	bge.n	8001504 <beep+0x20>
        duration = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]

    TIM1->CCR4 = 200;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <beep+0x3c>)
 8001506:	22c8      	movs	r2, #200	; 0xc8
 8001508:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_Delay(duration);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	f000 ffef 	bl	80024f0 <HAL_Delay>
    TIM1->CCR4 = 0;
 8001512:	4b03      	ldr	r3, [pc, #12]	; (8001520 <beep+0x3c>)
 8001514:	2200      	movs	r2, #0
 8001516:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40010000 	.word	0x40010000

08001524 <tone>:
 * Plays a frequency for a duration
 *
 * @param int frequency - Hertz [Hz] (MAX 16kHz)
 * @param int duration - miliseconds [ms]
 */
void tone(int frequency, int duration){
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	//Check for devision by 0
	if(frequency == 0){
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d104      	bne.n	800153e <tone+0x1a>
		HAL_Delay(duration);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 ffda 	bl	80024f0 <HAL_Delay>
		return;
 800153c:	e015      	b.n	800156a <tone+0x46>
	}

	//Calculate prescaler value
	int prescalar = 16000000 / 1000 / frequency;
 800153e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	fb92 f3f3 	sdiv	r3, r2, r3
 8001548:	60fb      	str	r3, [r7, #12]
	TIM1->PSC = prescalar;
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <tone+0x4c>)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6293      	str	r3, [r2, #40]	; 0x28

	//Play tone
	TIM1->CCR4 = 200;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <tone+0x4c>)
 8001552:	22c8      	movs	r2, #200	; 0xc8
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(duration);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f000 ffc9 	bl	80024f0 <HAL_Delay>
	TIM1->CCR4 = 0;
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <tone+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	641a      	str	r2, [r3, #64]	; 0x40

	//Base prescalar
	TIM1->PSC = 3;
 8001564:	4b02      	ldr	r3, [pc, #8]	; (8001570 <tone+0x4c>)
 8001566:	2203      	movs	r2, #3
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
}
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40010000 	.word	0x40010000

08001574 <init_fans>:


/**
 * Initialize fans by starting PWM timers and running startup sequence required by the ESCs.
 */
void init_fans(void){
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Right
 8001578:	2104      	movs	r1, #4
 800157a:	480e      	ldr	r0, [pc, #56]	; (80015b4 <init_fans+0x40>)
 800157c:	f002 fc26 	bl	8003dcc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Left
 8001580:	2100      	movs	r1, #0
 8001582:	480c      	ldr	r0, [pc, #48]	; (80015b4 <init_fans+0x40>)
 8001584:	f002 fc22 	bl	8003dcc <HAL_TIM_PWM_Start>

	// Startup sequence
	// 1. Start arming by applying a OK signal
	// 2. Finish arming by applying 0 throttle

	TIM3->CCR2 = 1600;
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <init_fans+0x44>)
 800158a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800158e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = 1600;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <init_fans+0x44>)
 8001592:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001596:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(3000);
 8001598:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800159c:	f000 ffa8 	bl	80024f0 <HAL_Delay>

	TIM3->CCR2 = 1500;
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <init_fans+0x44>)
 80015a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = 1500;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <init_fans+0x44>)
 80015aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80015ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200005a0 	.word	0x200005a0
 80015b8:	40000400 	.word	0x40000400

080015bc <init_motors>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

void init_motors(void){
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
    // Start encoder inputs
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Right
 80015c0:	213c      	movs	r1, #60	; 0x3c
 80015c2:	4809      	ldr	r0, [pc, #36]	; (80015e8 <init_motors+0x2c>)
 80015c4:	f002 fcd2 	bl	8003f6c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left
 80015c8:	213c      	movs	r1, #60	; 0x3c
 80015ca:	4808      	ldr	r0, [pc, #32]	; (80015ec <init_motors+0x30>)
 80015cc:	f002 fcce 	bl	8003f6c <HAL_TIM_Encoder_Start>

    // Start PWM generation for motors
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Right
 80015d0:	2108      	movs	r1, #8
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <init_motors+0x34>)
 80015d4:	f002 fbfa 	bl	8003dcc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Left
 80015d8:	210c      	movs	r1, #12
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <init_motors+0x34>)
 80015dc:	f002 fbf6 	bl	8003dcc <HAL_TIM_PWM_Start>

    // Put both motors in Hi-Z (high impedance output => rotate freely)
    motors_stop();
 80015e0:	f000 f808 	bl	80015f4 <motors_stop>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000560 	.word	0x20000560
 80015ec:	20000660 	.word	0x20000660
 80015f0:	20000520 	.word	0x20000520

080015f4 <motors_stop>:
    }

    TIM4->CCR3 = limited_speed;
}

void motors_stop(void){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
    TIM4->CCR3 = 0;
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <motors_stop+0x3c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_WritePin(MOTOR_R_IN1_GPIO_Port, MOTOR_R_IN1_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2120      	movs	r1, #32
 8001602:	480c      	ldr	r0, [pc, #48]	; (8001634 <motors_stop+0x40>)
 8001604:	f001 fa5a 	bl	8002abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_R_IN2_GPIO_Port, MOTOR_R_IN2_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2110      	movs	r1, #16
 800160c:	4809      	ldr	r0, [pc, #36]	; (8001634 <motors_stop+0x40>)
 800160e:	f001 fa55 	bl	8002abc <HAL_GPIO_WritePin>

    TIM4->CCR4 = 0;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <motors_stop+0x3c>)
 8001614:	2200      	movs	r2, #0
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_GPIO_WritePin(MOTOR_L_IN1_GPIO_Port, MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <motors_stop+0x40>)
 800161e:	f001 fa4d 	bl	8002abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_L_IN2_GPIO_Port, MOTOR_L_IN2_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <motors_stop+0x40>)
 8001628:	f001 fa48 	bl	8002abc <HAL_GPIO_WritePin>
};
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40000800 	.word	0x40000800
 8001634:	40020400 	.word	0x40020400

08001638 <oled_nr_items>:
/**
 * @brief Calculate number of items in current menu
 *
 * @return uint8_t - Number of items in current menu
 */
uint8_t oled_nr_items(void){
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
	uint8_t nr_items = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]

	if(curr_submenu == NULL){
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <oled_nr_items+0x58>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10d      	bne.n	8001666 <oled_nr_items+0x2e>
		struct menu * sub_menu = main_menu.pNext;
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <oled_nr_items+0x5c>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 8001650:	e005      	b.n	800165e <oled_nr_items+0x26>
			nr_items++;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	3301      	adds	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
			sub_menu = sub_menu->pNext;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f6      	bne.n	8001652 <oled_nr_items+0x1a>
 8001664:	e00d      	b.n	8001682 <oled_nr_items+0x4a>
		}
	}else{
		struct menu_item * item = curr_submenu->head_item;
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <oled_nr_items+0x58>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 800166e:	e005      	b.n	800167c <oled_nr_items+0x44>
			nr_items++;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	3301      	adds	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
			item = item->pNext;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f6      	bne.n	8001670 <oled_nr_items+0x38>
		}
	}

	return nr_items;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	200000b4 	.word	0x200000b4
 8001694:	200007ac 	.word	0x200007ac

08001698 <get_edited_val>:
 * Calculates a new updated variable value based on how much the right wheel has been turned.
 *
 * @param int val - Base value
 * @return int 		- Updated value
 */
int get_edited_val(int val){
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	return val + (int)TIM5->CNT / (float)4096 * 15;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <get_edited_val+0x48>)
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016b6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80016e4 <get_edited_val+0x4c>
 80016ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016be:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80016c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ce:	ee17 3a90 	vmov	r3, s15
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40000c00 	.word	0x40000c00
 80016e4:	45800000 	.word	0x45800000

080016e8 <init_oled>:
	* @brief Initialize the oled screen and a welcome screen. 
	*
	* Initializes the SSD1306 oled driver and draws a image to signal startup.
	* Also initializes all menus/menu items by setting name, callbacks and link them together
*/
void init_oled(void){
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80016ec:	f000 fc48 	bl	8001f80 <ssd1306_Init>
	
	ssd1306_DrawBitmap(case_head_bmp);
 80016f0:	4855      	ldr	r0, [pc, #340]	; (8001848 <init_oled+0x160>)
 80016f2:	f000 fd5b 	bl	80021ac <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80016f6:	f000 fcd3 	bl	80020a0 <ssd1306_UpdateScreen>

	HAL_Delay(1000);
 80016fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016fe:	f000 fef7 	bl	80024f0 <HAL_Delay>
	
	// Show main menu
	active_screen = MENU;
 8001702:	4b52      	ldr	r3, [pc, #328]	; (800184c <init_oled+0x164>)
 8001704:	2201      	movs	r2, #1
 8001706:	801a      	strh	r2, [r3, #0]
	
	// Main Menu
	strcpy(main_menu.name, "Main menu");
 8001708:	4b51      	ldr	r3, [pc, #324]	; (8001850 <init_oled+0x168>)
 800170a:	4a52      	ldr	r2, [pc, #328]	; (8001854 <init_oled+0x16c>)
 800170c:	ca07      	ldmia	r2, {r0, r1, r2}
 800170e:	c303      	stmia	r3!, {r0, r1}
 8001710:	801a      	strh	r2, [r3, #0]
	main_menu.head_item = NULL; 	// Main menu has no items, only sub menus
 8001712:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <init_oled+0x168>)
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
	main_menu.pNext  = &sub_menu_1; // Start of submenus
 8001718:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <init_oled+0x168>)
 800171a:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <init_oled+0x170>)
 800171c:	619a      	str	r2, [r3, #24]
	
	// Back to main menu item
	strcpy(menu_item_back_main.name, "Back");
 800171e:	4b4f      	ldr	r3, [pc, #316]	; (800185c <init_oled+0x174>)
 8001720:	4a4f      	ldr	r2, [pc, #316]	; (8001860 <init_oled+0x178>)
 8001722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001726:	6018      	str	r0, [r3, #0]
 8001728:	3304      	adds	r3, #4
 800172a:	7019      	strb	r1, [r3, #0]
	menu_item_back_main.pNext = NULL;
 800172c:	4b4b      	ldr	r3, [pc, #300]	; (800185c <init_oled+0x174>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
	menu_item_back_main.callback = go_back_main;
 8001732:	4b4a      	ldr	r3, [pc, #296]	; (800185c <init_oled+0x174>)
 8001734:	4a4b      	ldr	r2, [pc, #300]	; (8001864 <init_oled+0x17c>)
 8001736:	615a      	str	r2, [r3, #20]
	
	// Sub menu 1 + items
	strcpy(sub_menu_1.name, "General");
 8001738:	4b47      	ldr	r3, [pc, #284]	; (8001858 <init_oled+0x170>)
 800173a:	4a4b      	ldr	r2, [pc, #300]	; (8001868 <init_oled+0x180>)
 800173c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001740:	e883 0003 	stmia.w	r3, {r0, r1}
	sub_menu_1.pNext = &sub_menu_2;
 8001744:	4b44      	ldr	r3, [pc, #272]	; (8001858 <init_oled+0x170>)
 8001746:	4a49      	ldr	r2, [pc, #292]	; (800186c <init_oled+0x184>)
 8001748:	619a      	str	r2, [r3, #24]
	sub_menu_1.head_item = &menu_item_11;
 800174a:	4b43      	ldr	r3, [pc, #268]	; (8001858 <init_oled+0x170>)
 800174c:	4a48      	ldr	r2, [pc, #288]	; (8001870 <init_oled+0x188>)
 800174e:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_11.name, "Peripheral info");
 8001750:	4a47      	ldr	r2, [pc, #284]	; (8001870 <init_oled+0x188>)
 8001752:	4b48      	ldr	r3, [pc, #288]	; (8001874 <init_oled+0x18c>)
 8001754:	4614      	mov	r4, r2
 8001756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	menu_item_11.pNext = &menu_item_12;
 800175c:	4b44      	ldr	r3, [pc, #272]	; (8001870 <init_oled+0x188>)
 800175e:	4a46      	ldr	r2, [pc, #280]	; (8001878 <init_oled+0x190>)
 8001760:	61da      	str	r2, [r3, #28]
	menu_item_11.callback = oled_show_info;
 8001762:	4b43      	ldr	r3, [pc, #268]	; (8001870 <init_oled+0x188>)
 8001764:	4a45      	ldr	r2, [pc, #276]	; (800187c <init_oled+0x194>)
 8001766:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_12.name, "CASE Logo");
 8001768:	4b43      	ldr	r3, [pc, #268]	; (8001878 <init_oled+0x190>)
 800176a:	4a45      	ldr	r2, [pc, #276]	; (8001880 <init_oled+0x198>)
 800176c:	ca07      	ldmia	r2, {r0, r1, r2}
 800176e:	c303      	stmia	r3!, {r0, r1}
 8001770:	801a      	strh	r2, [r3, #0]
	menu_item_12.pNext = &menu_item_13;
 8001772:	4b41      	ldr	r3, [pc, #260]	; (8001878 <init_oled+0x190>)
 8001774:	4a43      	ldr	r2, [pc, #268]	; (8001884 <init_oled+0x19c>)
 8001776:	61da      	str	r2, [r3, #28]
	menu_item_12.callback = oled_show_case;
 8001778:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <init_oled+0x190>)
 800177a:	4a43      	ldr	r2, [pc, #268]	; (8001888 <init_oled+0x1a0>)
 800177c:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_13.name, "Nyx & Iris");
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <init_oled+0x19c>)
 8001780:	4a42      	ldr	r2, [pc, #264]	; (800188c <init_oled+0x1a4>)
 8001782:	ca07      	ldmia	r2, {r0, r1, r2}
 8001784:	c303      	stmia	r3!, {r0, r1}
 8001786:	801a      	strh	r2, [r3, #0]
 8001788:	3302      	adds	r3, #2
 800178a:	0c12      	lsrs	r2, r2, #16
 800178c:	701a      	strb	r2, [r3, #0]
	menu_item_13.pNext = &menu_item_back_main;
 800178e:	4b3d      	ldr	r3, [pc, #244]	; (8001884 <init_oled+0x19c>)
 8001790:	4a32      	ldr	r2, [pc, #200]	; (800185c <init_oled+0x174>)
 8001792:	61da      	str	r2, [r3, #28]
	menu_item_13.callback = oled_show_cats;
 8001794:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <init_oled+0x19c>)
 8001796:	4a3e      	ldr	r2, [pc, #248]	; (8001890 <init_oled+0x1a8>)
 8001798:	615a      	str	r2, [r3, #20]
	
	// Sub menu 2 + items
	strcpy(sub_menu_2.name, "Edit vars");
 800179a:	4b34      	ldr	r3, [pc, #208]	; (800186c <init_oled+0x184>)
 800179c:	4a3d      	ldr	r2, [pc, #244]	; (8001894 <init_oled+0x1ac>)
 800179e:	ca07      	ldmia	r2, {r0, r1, r2}
 80017a0:	c303      	stmia	r3!, {r0, r1}
 80017a2:	801a      	strh	r2, [r3, #0]
	sub_menu_2.pNext = &sub_menu_3;
 80017a4:	4b31      	ldr	r3, [pc, #196]	; (800186c <init_oled+0x184>)
 80017a6:	4a3c      	ldr	r2, [pc, #240]	; (8001898 <init_oled+0x1b0>)
 80017a8:	619a      	str	r2, [r3, #24]
	sub_menu_2.head_item = &menu_item_21;
 80017aa:	4b30      	ldr	r3, [pc, #192]	; (800186c <init_oled+0x184>)
 80017ac:	4a3b      	ldr	r2, [pc, #236]	; (800189c <init_oled+0x1b4>)
 80017ae:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_21.name, "Kp");
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <init_oled+0x1b4>)
 80017b2:	4a3b      	ldr	r2, [pc, #236]	; (80018a0 <init_oled+0x1b8>)
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	4611      	mov	r1, r2
 80017b8:	8019      	strh	r1, [r3, #0]
 80017ba:	3302      	adds	r3, #2
 80017bc:	0c12      	lsrs	r2, r2, #16
 80017be:	701a      	strb	r2, [r3, #0]
	menu_item_21.pNext = &menu_item_22;
 80017c0:	4b36      	ldr	r3, [pc, #216]	; (800189c <init_oled+0x1b4>)
 80017c2:	4a38      	ldr	r2, [pc, #224]	; (80018a4 <init_oled+0x1bc>)
 80017c4:	61da      	str	r2, [r3, #28]
	menu_item_21.pvar = &kp_test;
 80017c6:	4b35      	ldr	r3, [pc, #212]	; (800189c <init_oled+0x1b4>)
 80017c8:	4a37      	ldr	r2, [pc, #220]	; (80018a8 <init_oled+0x1c0>)
 80017ca:	619a      	str	r2, [r3, #24]
	menu_item_21.callback = oled_edit_var;
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <init_oled+0x1b4>)
 80017ce:	4a37      	ldr	r2, [pc, #220]	; (80018ac <init_oled+0x1c4>)
 80017d0:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_22.name, "Ki");
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <init_oled+0x1bc>)
 80017d4:	4a36      	ldr	r2, [pc, #216]	; (80018b0 <init_oled+0x1c8>)
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	4611      	mov	r1, r2
 80017da:	8019      	strh	r1, [r3, #0]
 80017dc:	3302      	adds	r3, #2
 80017de:	0c12      	lsrs	r2, r2, #16
 80017e0:	701a      	strb	r2, [r3, #0]
	menu_item_22.pNext = &menu_item_23;
 80017e2:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <init_oled+0x1bc>)
 80017e4:	4a33      	ldr	r2, [pc, #204]	; (80018b4 <init_oled+0x1cc>)
 80017e6:	61da      	str	r2, [r3, #28]
	menu_item_22.pvar = &ki_test;
 80017e8:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <init_oled+0x1bc>)
 80017ea:	4a33      	ldr	r2, [pc, #204]	; (80018b8 <init_oled+0x1d0>)
 80017ec:	619a      	str	r2, [r3, #24]
	menu_item_22.callback = oled_edit_var;
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <init_oled+0x1bc>)
 80017f0:	4a2e      	ldr	r2, [pc, #184]	; (80018ac <init_oled+0x1c4>)
 80017f2:	615a      	str	r2, [r3, #20]

	strcpy(menu_item_23.name, "Without callback");
 80017f4:	4a2f      	ldr	r2, [pc, #188]	; (80018b4 <init_oled+0x1cc>)
 80017f6:	4b31      	ldr	r3, [pc, #196]	; (80018bc <init_oled+0x1d4>)
 80017f8:	4614      	mov	r4, r2
 80017fa:	461d      	mov	r5, r3
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	7023      	strb	r3, [r4, #0]
	menu_item_23.pNext = &menu_item_back_main;
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <init_oled+0x1cc>)
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <init_oled+0x174>)
 8001808:	61da      	str	r2, [r3, #28]


	// Sub menu 3 + items
	strcpy(sub_menu_3.name, "Submenu 3");
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <init_oled+0x1b0>)
 800180c:	4a2c      	ldr	r2, [pc, #176]	; (80018c0 <init_oled+0x1d8>)
 800180e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001810:	c303      	stmia	r3!, {r0, r1}
 8001812:	801a      	strh	r2, [r3, #0]
	sub_menu_3.pNext = NULL;
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <init_oled+0x1b0>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
	sub_menu_3.head_item = &menu_item_31;
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <init_oled+0x1b0>)
 800181c:	4a29      	ldr	r2, [pc, #164]	; (80018c4 <init_oled+0x1dc>)
 800181e:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_31.name, "Item 31");
 8001820:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <init_oled+0x1dc>)
 8001822:	4a29      	ldr	r2, [pc, #164]	; (80018c8 <init_oled+0x1e0>)
 8001824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001828:	e883 0003 	stmia.w	r3, {r0, r1}
	menu_item_31.pNext = &menu_item_32;
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <init_oled+0x1dc>)
 800182e:	4a27      	ldr	r2, [pc, #156]	; (80018cc <init_oled+0x1e4>)
 8001830:	61da      	str	r2, [r3, #28]
	
	strcpy(menu_item_32.name, "Item 32");
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <init_oled+0x1e4>)
 8001834:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <init_oled+0x1e8>)
 8001836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800183a:	e883 0003 	stmia.w	r3, {r0, r1}
	menu_item_32.pNext = &menu_item_back_main;
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <init_oled+0x1e4>)
 8001840:	4a06      	ldr	r2, [pc, #24]	; (800185c <init_oled+0x174>)
 8001842:	61da      	str	r2, [r3, #28]

}
 8001844:	bf00      	nop
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	080065f0 	.word	0x080065f0
 800184c:	200007a8 	.word	0x200007a8
 8001850:	200007ac 	.word	0x200007ac
 8001854:	080064f0 	.word	0x080064f0
 8001858:	200007c8 	.word	0x200007c8
 800185c:	20000844 	.word	0x20000844
 8001860:	080064fc 	.word	0x080064fc
 8001864:	08001e4d 	.word	0x08001e4d
 8001868:	08006504 	.word	0x08006504
 800186c:	20000704 	.word	0x20000704
 8001870:	20000788 	.word	0x20000788
 8001874:	0800650c 	.word	0x0800650c
 8001878:	20000720 	.word	0x20000720
 800187c:	08001ec5 	.word	0x08001ec5
 8001880:	0800651c 	.word	0x0800651c
 8001884:	200007e4 	.word	0x200007e4
 8001888:	08001e6d 	.word	0x08001e6d
 800188c:	08006528 	.word	0x08006528
 8001890:	08001e99 	.word	0x08001e99
 8001894:	08006534 	.word	0x08006534
 8001898:	20000864 	.word	0x20000864
 800189c:	20000824 	.word	0x20000824
 80018a0:	08006540 	.word	0x08006540
 80018a4:	200006e0 	.word	0x200006e0
 80018a8:	20000004 	.word	0x20000004
 80018ac:	08001ee5 	.word	0x08001ee5
 80018b0:	08006544 	.word	0x08006544
 80018b4:	20000768 	.word	0x20000768
 80018b8:	20000008 	.word	0x20000008
 80018bc:	08006548 	.word	0x08006548
 80018c0:	0800655c 	.word	0x0800655c
 80018c4:	20000804 	.word	0x20000804
 80018c8:	08006568 	.word	0x08006568
 80018cc:	20000744 	.word	0x20000744
 80018d0:	08006570 	.word	0x08006570

080018d4 <oled_update>:
	* @brief Update the OLED screen
	*	
	*	Checks flags and active screen to decide which screen gets rendered.
	*	Errors always have priority.
*/
void oled_update(void){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	//Check flag for going back to main menu and reset flag.
	if(go_back_main_flag){
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <oled_update+0x80>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <oled_update+0x1e>
		curr_submenu = NULL;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <oled_update+0x84>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
		prev_submenu = NULL;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <oled_update+0x88>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
		go_back_main_flag = 0;
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <oled_update+0x80>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
	}

	if(active_screen == ERROR_){
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <oled_update+0x8c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <oled_update+0x2c>
		oled_error_screen();
 80018fa:	f000 fa0b 	bl	8001d14 <oled_error_screen>
 80018fe:	e025      	b.n	800194c <oled_update+0x78>
	}else if(active_screen == MENU){
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <oled_update+0x8c>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d102      	bne.n	800190e <oled_update+0x3a>
		oled_menu_screen();
 8001908:	f000 f8d0 	bl	8001aac <oled_menu_screen>
 800190c:	e01e      	b.n	800194c <oled_update+0x78>
	}else if(active_screen == INFO){
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <oled_update+0x8c>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d102      	bne.n	800191c <oled_update+0x48>
		oled_info_screen();
 8001916:	f000 f9b9 	bl	8001c8c <oled_info_screen>
 800191a:	e017      	b.n	800194c <oled_update+0x78>
	}else if(active_screen == IMAGE){
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <oled_update+0x8c>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d105      	bne.n	8001930 <oled_update+0x5c>
		ssd1306_DrawBitmap(curr_image);
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <oled_update+0x90>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fc3f 	bl	80021ac <ssd1306_DrawBitmap>
 800192e:	e00d      	b.n	800194c <oled_update+0x78>
	}else if(active_screen == EDIT_VAR){
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <oled_update+0x8c>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	2b04      	cmp	r3, #4
 8001936:	d102      	bne.n	800193e <oled_update+0x6a>
		oled_edit_var_screen();
 8001938:	f000 fa30 	bl	8001d9c <oled_edit_var_screen>
 800193c:	e006      	b.n	800194c <oled_update+0x78>
	}else if(active_screen == NOT_IMPLEMENTED){
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <oled_update+0x8c>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8001946:	d101      	bne.n	800194c <oled_update+0x78>
		oled_not_implemented_screen();
 8001948:	f000 fa6a 	bl	8001e20 <oled_not_implemented_screen>
	}
	
	ssd1306_UpdateScreen();
 800194c:	f000 fba8 	bl	80020a0 <ssd1306_UpdateScreen>
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200000ac 	.word	0x200000ac
 8001958:	200000b4 	.word	0x200000b4
 800195c:	200000b8 	.word	0x200000b8
 8001960:	200007a8 	.word	0x200007a8
 8001964:	20000700 	.word	0x20000700

08001968 <oled_error>:
 *
 * Global function to be called when user wants to display an error message
 *
 * @param pMessage String pointer to the error message.
 */
void oled_error(char *pMessage){
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	error_message = pMessage;
 8001970:	4a05      	ldr	r2, [pc, #20]	; (8001988 <oled_error+0x20>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
	active_screen = ERROR_;
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <oled_error+0x24>)
 8001978:	2200      	movs	r2, #0
 800197a:	801a      	strh	r2, [r3, #0]
	oled_update();
 800197c:	f7ff ffaa 	bl	80018d4 <oled_update>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000764 	.word	0x20000764
 800198c:	200007a8 	.word	0x200007a8

08001990 <oled_clear_error>:


/**
	* @brief Clear the error and update the screen with normal information.
*/
void oled_clear_error(void){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <oled_clear_error+0x20>)
 800199c:	f001 f88e 	bl	8002abc <HAL_GPIO_WritePin>
	active_screen = MENU;
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <oled_clear_error+0x24>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	801a      	strh	r2, [r3, #0]
	oled_update();
 80019a6:	f7ff ff95 	bl	80018d4 <oled_update>
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40020800 	.word	0x40020800
 80019b4:	200007a8 	.word	0x200007a8

080019b8 <oled_button_press>:
/**
	* @brief Button press callback
	*
	* Decides what happens after a button click depending on state and cursor
*/
void oled_button_press(void){
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0

	if(active_screen == ERROR_){
 80019be:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <oled_button_press+0xdc>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <oled_button_press+0x14>
		oled_clear_error();
 80019c6:	f7ff ffe3 	bl	8001990 <oled_clear_error>
		return;
 80019ca:	e060      	b.n	8001a8e <oled_button_press+0xd6>
	}else if(active_screen == EDIT_VAR){ // Save new edited value
 80019cc:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <oled_button_press+0xdc>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d10f      	bne.n	80019f4 <oled_button_press+0x3c>
		*edit_var->pvar = get_edited_val(*edit_var->pvar);
 80019d4:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <oled_button_press+0xe0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <oled_button_press+0xe0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699c      	ldr	r4, [r3, #24]
 80019e2:	4610      	mov	r0, r2
 80019e4:	f7ff fe58 	bl	8001698 <get_edited_val>
 80019e8:	4603      	mov	r3, r0
 80019ea:	6023      	str	r3, [r4, #0]
		active_screen = MENU;
 80019ec:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <oled_button_press+0xdc>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	801a      	strh	r2, [r3, #0]
		return;
 80019f2:	e04c      	b.n	8001a8e <oled_button_press+0xd6>
	}else if(active_screen != MENU){
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <oled_button_press+0xdc>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d003      	beq.n	8001a04 <oled_button_press+0x4c>
		active_screen = MENU;
 80019fc:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <oled_button_press+0xdc>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	801a      	strh	r2, [r3, #0]
		return;
 8001a02:	e044      	b.n	8001a8e <oled_button_press+0xd6>
	}
	
	if(curr_submenu == NULL){ // Main menu => Select sub menu
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <oled_button_press+0xe4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d119      	bne.n	8001a40 <oled_button_press+0x88>
		struct menu * sub_menu = main_menu.pNext;
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <oled_button_press+0xe8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	60fb      	str	r3, [r7, #12]
		int line = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 8001a16:	e00f      	b.n	8001a38 <oled_button_press+0x80>
			if (line == cursor){
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <oled_button_press+0xec>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d103      	bne.n	8001a2c <oled_button_press+0x74>
				curr_submenu = sub_menu;
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <oled_button_press+0xe4>)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6013      	str	r3, [r2, #0]
				break;
 8001a2a:	e02d      	b.n	8001a88 <oled_button_press+0xd0>
			}
			line++;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
			sub_menu = sub_menu->pNext;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	60fb      	str	r3, [r7, #12]
		while(sub_menu != NULL){
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1ec      	bne.n	8001a18 <oled_button_press+0x60>
 8001a3e:	e023      	b.n	8001a88 <oled_button_press+0xd0>
		}
	}else{ // Sub menu => Select menu item == cursor and run it's callback
		struct menu_item * item = curr_submenu->head_item;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <oled_button_press+0xe4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	607b      	str	r3, [r7, #4]
		int line = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	603b      	str	r3, [r7, #0]
		while(item != NULL){
 8001a4c:	e019      	b.n	8001a82 <oled_button_press+0xca>
			if (line == cursor){
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <oled_button_press+0xec>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10d      	bne.n	8001a76 <oled_button_press+0xbe>
				if(item->callback != NULL){
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d004      	beq.n	8001a6c <oled_button_press+0xb4>
					item->callback(item);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
				}else{
					active_screen = NOT_IMPLEMENTED;
				}
				break;
 8001a6a:	e00d      	b.n	8001a88 <oled_button_press+0xd0>
					active_screen = NOT_IMPLEMENTED;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <oled_button_press+0xdc>)
 8001a6e:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8001a72:	801a      	strh	r2, [r3, #0]
				break;
 8001a74:	e008      	b.n	8001a88 <oled_button_press+0xd0>
			}
			line++;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	603b      	str	r3, [r7, #0]
			item = item->pNext;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e2      	bne.n	8001a4e <oled_button_press+0x96>
		}
	}
	TIM5->CNT = 0; // Reset counter to reset cursor location
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <oled_button_press+0xf0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}
 8001a94:	200007a8 	.word	0x200007a8
 8001a98:	20000740 	.word	0x20000740
 8001a9c:	200000b4 	.word	0x200000b4
 8001aa0:	200007ac 	.word	0x200007ac
 8001aa4:	200000b0 	.word	0x200000b0
 8001aa8:	40000c00 	.word	0x40000c00

08001aac <oled_menu_screen>:
	* 
	* The cursor position can be changed by rotating the wheels
	* You can choose menu or function by pressing the "Select Button" on the board 
	*
*/
void oled_menu_screen(void){
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
	// Calculate cursor index based on encoder
	float revolutions = TIM5->CNT / (float)4096 * 10;
 8001ab2:	4b6d      	ldr	r3, [pc, #436]	; (8001c68 <oled_menu_screen+0x1bc>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001abe:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001c6c <oled_menu_screen+0x1c0>
 8001ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001aca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ace:	edc7 7a03 	vstr	s15, [r7, #12]
	cursor = (int) revolutions % oled_nr_items();
 8001ad2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ada:	ee17 4a90 	vmov	r4, s15
 8001ade:	f7ff fdab 	bl	8001638 <oled_nr_items>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	fb94 f2f3 	sdiv	r2, r4, r3
 8001ae8:	fb03 f302 	mul.w	r3, r3, r2
 8001aec:	1ae3      	subs	r3, r4, r3
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <oled_menu_screen+0x1c4>)
 8001af2:	701a      	strb	r2, [r3, #0]
	
	ssd1306_Fill(Black);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f000 fab1 	bl	800205c <ssd1306_Fill>
	
	if(curr_submenu == NULL){ // Main menu => draw sub menus
 8001afa:	4b5e      	ldr	r3, [pc, #376]	; (8001c74 <oled_menu_screen+0x1c8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d145      	bne.n	8001b8e <oled_menu_screen+0xe2>
		ssd1306_SetCursor(0,0);
 8001b02:	2100      	movs	r1, #0
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 fc3f 	bl	8002388 <ssd1306_SetCursor>
		ssd1306_WriteString(main_menu.name, Font_11x18, White);
 8001b0a:	4a5b      	ldr	r2, [pc, #364]	; (8001c78 <oled_menu_screen+0x1cc>)
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	ca06      	ldmia	r2, {r1, r2}
 8001b10:	485a      	ldr	r0, [pc, #360]	; (8001c7c <oled_menu_screen+0x1d0>)
 8001b12:	f000 fc13 	bl	800233c <ssd1306_WriteString>
		
		menu_t * sub_menu = main_menu.pNext; // Reference to first submenu
 8001b16:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <oled_menu_screen+0x1d0>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	61fb      	str	r3, [r7, #28]
		int line = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
		
		while(sub_menu != NULL){
 8001b20:	e031      	b.n	8001b86 <oled_menu_screen+0xda>
			if(line == cursor){ // Draw cursor
 8001b22:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <oled_menu_screen+0x1c4>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d112      	bne.n	8001b54 <oled_menu_screen+0xa8>
				ssd1306_SetCursor(0, 18 + line*10);
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	3312      	adds	r3, #18
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4619      	mov	r1, r3
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 fc20 	bl	8002388 <ssd1306_SetCursor>
				ssd1306_WriteString(">", Font_7x10, White);
 8001b48:	4a4d      	ldr	r2, [pc, #308]	; (8001c80 <oled_menu_screen+0x1d4>)
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	ca06      	ldmia	r2, {r1, r2}
 8001b4e:	484d      	ldr	r0, [pc, #308]	; (8001c84 <oled_menu_screen+0x1d8>)
 8001b50:	f000 fbf4 	bl	800233c <ssd1306_WriteString>
			}
			ssd1306_SetCursor(14, 18 + line*10);
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	3312      	adds	r3, #18
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	4619      	mov	r1, r3
 8001b68:	200e      	movs	r0, #14
 8001b6a:	f000 fc0d 	bl	8002388 <ssd1306_SetCursor>
			ssd1306_WriteString(sub_menu->name, Font_7x10, White);
 8001b6e:	69f8      	ldr	r0, [r7, #28]
 8001b70:	4a43      	ldr	r2, [pc, #268]	; (8001c80 <oled_menu_screen+0x1d4>)
 8001b72:	2301      	movs	r3, #1
 8001b74:	ca06      	ldmia	r2, {r1, r2}
 8001b76:	f000 fbe1 	bl	800233c <ssd1306_WriteString>
			line++;
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	61bb      	str	r3, [r7, #24]
			sub_menu = sub_menu->pNext;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	61fb      	str	r3, [r7, #28]
		while(sub_menu != NULL){
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ca      	bne.n	8001b22 <oled_menu_screen+0x76>
 8001b8c:	e066      	b.n	8001c5c <oled_menu_screen+0x1b0>
		}
	}else{ // Submenu => draw menu items
		ssd1306_SetCursor(0,0);
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2000      	movs	r0, #0
 8001b92:	f000 fbf9 	bl	8002388 <ssd1306_SetCursor>
		ssd1306_WriteString(curr_submenu->name, Font_11x18, White);
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <oled_menu_screen+0x1c8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	4a36      	ldr	r2, [pc, #216]	; (8001c78 <oled_menu_screen+0x1cc>)
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	ca06      	ldmia	r2, {r1, r2}
 8001ba2:	f000 fbcb 	bl	800233c <ssd1306_WriteString>
		
		menu_item_t * item = curr_submenu->head_item;
 8001ba6:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <oled_menu_screen+0x1c8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	617b      	str	r3, [r7, #20]
		int line = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
		while(item != NULL){
 8001bb2:	e050      	b.n	8001c56 <oled_menu_screen+0x1aa>
			if (line == cursor){
 8001bb4:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <oled_menu_screen+0x1c4>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d112      	bne.n	8001be6 <oled_menu_screen+0x13a>
				ssd1306_SetCursor(0, 18 + line*10);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3312      	adds	r3, #18
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f000 fbd7 	bl	8002388 <ssd1306_SetCursor>
				ssd1306_WriteString(">", Font_7x10, White);
 8001bda:	4a29      	ldr	r2, [pc, #164]	; (8001c80 <oled_menu_screen+0x1d4>)
 8001bdc:	2301      	movs	r3, #1
 8001bde:	ca06      	ldmia	r2, {r1, r2}
 8001be0:	4828      	ldr	r0, [pc, #160]	; (8001c84 <oled_menu_screen+0x1d8>)
 8001be2:	f000 fbab 	bl	800233c <ssd1306_WriteString>
			}

			ssd1306_SetCursor(14, 18 + line*10);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	0092      	lsls	r2, r2, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	3312      	adds	r3, #18
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	200e      	movs	r0, #14
 8001bfc:	f000 fbc4 	bl	8002388 <ssd1306_SetCursor>
			ssd1306_WriteString(item->name, Font_7x10, White);
 8001c00:	6978      	ldr	r0, [r7, #20]
 8001c02:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <oled_menu_screen+0x1d4>)
 8001c04:	2301      	movs	r3, #1
 8001c06:	ca06      	ldmia	r2, {r1, r2}
 8001c08:	f000 fb98 	bl	800233c <ssd1306_WriteString>

			if(item->pvar != NULL){ // Show variable value
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01a      	beq.n	8001c4a <oled_menu_screen+0x19e>
				char buff[10];
				ssd1306_SetCursor(80, 18 + line*10);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	3312      	adds	r3, #18
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	2050      	movs	r0, #80	; 0x50
 8001c2a:	f000 fbad 	bl	8002388 <ssd1306_SetCursor>
				snprintf(buff, sizeof(buff), "%d", *item->pvar);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4638      	mov	r0, r7
 8001c36:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <oled_menu_screen+0x1dc>)
 8001c38:	210a      	movs	r1, #10
 8001c3a:	f003 fc69 	bl	8005510 <sniprintf>
				ssd1306_WriteString(buff, Font_7x10, White);
 8001c3e:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <oled_menu_screen+0x1d4>)
 8001c40:	4638      	mov	r0, r7
 8001c42:	2301      	movs	r3, #1
 8001c44:	ca06      	ldmia	r2, {r1, r2}
 8001c46:	f000 fb79 	bl	800233c <ssd1306_WriteString>
			}
			line++;
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
			item = item->pNext;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	617b      	str	r3, [r7, #20]
		while(item != NULL){
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ab      	bne.n	8001bb4 <oled_menu_screen+0x108>
		}		
	}
	ssd1306_UpdateScreen();
 8001c5c:	f000 fa20 	bl	80020a0 <ssd1306_UpdateScreen>
}
 8001c60:	bf00      	nop
 8001c62:	3724      	adds	r7, #36	; 0x24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}
 8001c68:	40000c00 	.word	0x40000c00
 8001c6c:	45800000 	.word	0x45800000
 8001c70:	200000b0 	.word	0x200000b0
 8001c74:	200000b4 	.word	0x200000b4
 8001c78:	20000014 	.word	0x20000014
 8001c7c:	200007ac 	.word	0x200007ac
 8001c80:	2000000c 	.word	0x2000000c
 8001c84:	08006578 	.word	0x08006578
 8001c88:	0800657c 	.word	0x0800657c

08001c8c <oled_info_screen>:


/**
	* @brief Show an screen with general info about peripherals.
*/
void oled_info_screen(){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b090      	sub	sp, #64	; 0x40
 8001c90:	af00      	add	r7, sp, #0
	char buff[60];

	ssd1306_Fill(Black);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f000 f9e2 	bl	800205c <ssd1306_Fill>
	ssd1306_SetCursor(0,0);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f000 fb74 	bl	8002388 <ssd1306_SetCursor>
	ssd1306_WriteString("Info", Font_11x18, White);
 8001ca0:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <oled_info_screen+0x70>)
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	ca06      	ldmia	r2, {r1, r2}
 8001ca6:	4816      	ldr	r0, [pc, #88]	; (8001d00 <oled_info_screen+0x74>)
 8001ca8:	f000 fb48 	bl	800233c <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "Encoder R: %d", (int)TIM5->CNT);
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <oled_info_screen+0x78>)
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	1d38      	adds	r0, r7, #4
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <oled_info_screen+0x7c>)
 8001cb4:	213c      	movs	r1, #60	; 0x3c
 8001cb6:	f003 fc2b 	bl	8005510 <sniprintf>
	ssd1306_SetCursor(0,40);
 8001cba:	2128      	movs	r1, #40	; 0x28
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f000 fb63 	bl	8002388 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <oled_info_screen+0x80>)
 8001cc4:	1d38      	adds	r0, r7, #4
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	ca06      	ldmia	r2, {r1, r2}
 8001cca:	f000 fb37 	bl	800233c <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "Encoder L: %d", (int)TIM2->CNT);
 8001cce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	1d38      	adds	r0, r7, #4
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <oled_info_screen+0x84>)
 8001cd8:	213c      	movs	r1, #60	; 0x3c
 8001cda:	f003 fc19 	bl	8005510 <sniprintf>
	ssd1306_SetCursor(0,50);
 8001cde:	2132      	movs	r1, #50	; 0x32
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f000 fb51 	bl	8002388 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <oled_info_screen+0x80>)
 8001ce8:	1d38      	adds	r0, r7, #4
 8001cea:	2301      	movs	r3, #1
 8001cec:	ca06      	ldmia	r2, {r1, r2}
 8001cee:	f000 fb25 	bl	800233c <ssd1306_WriteString>
}
 8001cf2:	bf00      	nop
 8001cf4:	3740      	adds	r7, #64	; 0x40
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000014 	.word	0x20000014
 8001d00:	08006580 	.word	0x08006580
 8001d04:	40000c00 	.word	0x40000c00
 8001d08:	08006588 	.word	0x08006588
 8001d0c:	2000000c 	.word	0x2000000c
 8001d10:	08006598 	.word	0x08006598

08001d14 <oled_error_screen>:
	* @brief Draws error screen
	*
	* Private function to draw error screen and beep buzzer.
	* Keep the error messages short and concise, e.g "Low batt voltage", MAX 18 characters.
*/
void oled_error_screen(void){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	// Status LED RED + Double beep
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d1e:	4819      	ldr	r0, [pc, #100]	; (8001d84 <oled_error_screen+0x70>)
 8001d20:	f000 fecc 	bl	8002abc <HAL_GPIO_WritePin>
	beep(50);
 8001d24:	2032      	movs	r0, #50	; 0x32
 8001d26:	f7ff fbdd 	bl	80014e4 <beep>
	HAL_Delay(50);
 8001d2a:	2032      	movs	r0, #50	; 0x32
 8001d2c:	f000 fbe0 	bl	80024f0 <HAL_Delay>
	beep(50);
 8001d30:	2032      	movs	r0, #50	; 0x32
 8001d32:	f7ff fbd7 	bl	80014e4 <beep>
	HAL_Delay(50);
 8001d36:	2032      	movs	r0, #50	; 0x32
 8001d38:	f000 fbda 	bl	80024f0 <HAL_Delay>

	ssd1306_Fill(White);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f000 f98d 	bl	800205c <ssd1306_Fill>
	ssd1306_SetCursor((128-5*11)/2, 0);
 8001d42:	2100      	movs	r1, #0
 8001d44:	2024      	movs	r0, #36	; 0x24
 8001d46:	f000 fb1f 	bl	8002388 <ssd1306_SetCursor>
	ssd1306_WriteString("ERROR", Font_11x18, Black);
 8001d4a:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <oled_error_screen+0x74>)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	ca06      	ldmia	r2, {r1, r2}
 8001d50:	480e      	ldr	r0, [pc, #56]	; (8001d8c <oled_error_screen+0x78>)
 8001d52:	f000 faf3 	bl	800233c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 20);
 8001d56:	2114      	movs	r1, #20
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f000 fb15 	bl	8002388 <ssd1306_SetCursor>
	ssd1306_WriteString(error_message, Font_7x10, Black);
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <oled_error_screen+0x7c>)
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <oled_error_screen+0x80>)
 8001d64:	2300      	movs	r3, #0
 8001d66:	ca06      	ldmia	r2, {r1, r2}
 8001d68:	f000 fae8 	bl	800233c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 50);
 8001d6c:	2132      	movs	r1, #50	; 0x32
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f000 fb0a 	bl	8002388 <ssd1306_SetCursor>
	ssd1306_WriteString("Press button", Font_7x10, Black);
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <oled_error_screen+0x80>)
 8001d76:	2300      	movs	r3, #0
 8001d78:	ca06      	ldmia	r2, {r1, r2}
 8001d7a:	4807      	ldr	r0, [pc, #28]	; (8001d98 <oled_error_screen+0x84>)
 8001d7c:	f000 fade 	bl	800233c <ssd1306_WriteString>
	//HAL_Delay(1000); // Only for beeping every 1s
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40020800 	.word	0x40020800
 8001d88:	20000014 	.word	0x20000014
 8001d8c:	080065a8 	.word	0x080065a8
 8001d90:	20000764 	.word	0x20000764
 8001d94:	2000000c 	.word	0x2000000c
 8001d98:	080065b0 	.word	0x080065b0

08001d9c <oled_edit_var_screen>:


/**
 * @brief Show edit variable screen
 */
void oled_edit_var_screen(void){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
	int new_val = get_edited_val(*edit_var->pvar);
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <oled_edit_var_screen+0x70>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fc74 	bl	8001698 <get_edited_val>
 8001db0:	60f8      	str	r0, [r7, #12]

	char buff[10];

	ssd1306_Fill(Black);
 8001db2:	2000      	movs	r0, #0
 8001db4:	f000 f952 	bl	800205c <ssd1306_Fill>
	ssd1306_SetCursor(0,0);
 8001db8:	2100      	movs	r1, #0
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 fae4 	bl	8002388 <ssd1306_SetCursor>
	ssd1306_WriteString("Edit", Font_11x18, White);
 8001dc0:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <oled_edit_var_screen+0x74>)
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	ca06      	ldmia	r2, {r1, r2}
 8001dc6:	4813      	ldr	r0, [pc, #76]	; (8001e14 <oled_edit_var_screen+0x78>)
 8001dc8:	f000 fab8 	bl	800233c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 40);
 8001dcc:	2128      	movs	r1, #40	; 0x28
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f000 fada 	bl	8002388 <ssd1306_SetCursor>
	ssd1306_WriteString(edit_var->name, Font_7x10, White);
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <oled_edit_var_screen+0x70>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <oled_edit_var_screen+0x7c>)
 8001ddc:	2301      	movs	r3, #1
 8001dde:	ca06      	ldmia	r2, {r1, r2}
 8001de0:	f000 faac 	bl	800233c <ssd1306_WriteString>

	ssd1306_SetCursor(80, 40);
 8001de4:	2128      	movs	r1, #40	; 0x28
 8001de6:	2050      	movs	r0, #80	; 0x50
 8001de8:	f000 face 	bl	8002388 <ssd1306_SetCursor>
	snprintf(buff, sizeof(buff), "%d", new_val);
 8001dec:	4638      	mov	r0, r7
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <oled_edit_var_screen+0x80>)
 8001df2:	210a      	movs	r1, #10
 8001df4:	f003 fb8c 	bl	8005510 <sniprintf>
	ssd1306_WriteString(buff, Font_7x10, White);
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <oled_edit_var_screen+0x7c>)
 8001dfa:	4638      	mov	r0, r7
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	ca06      	ldmia	r2, {r1, r2}
 8001e00:	f000 fa9c 	bl	800233c <ssd1306_WriteString>
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000740 	.word	0x20000740
 8001e10:	20000014 	.word	0x20000014
 8001e14:	080065c0 	.word	0x080065c0
 8001e18:	2000000c 	.word	0x2000000c
 8001e1c:	0800657c 	.word	0x0800657c

08001e20 <oled_not_implemented_screen>:


/**
 * @brief Show "not implemented" screen
 */
void oled_not_implemented_screen(void){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f000 f919 	bl	800205c <ssd1306_Fill>
	ssd1306_SetCursor((128-15*7)/2, 32);
 8001e2a:	2120      	movs	r1, #32
 8001e2c:	200b      	movs	r0, #11
 8001e2e:	f000 faab 	bl	8002388 <ssd1306_SetCursor>
	ssd1306_WriteString("NOT IMPLEMENTED", Font_7x10, White);
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <oled_not_implemented_screen+0x24>)
 8001e34:	2301      	movs	r3, #1
 8001e36:	ca06      	ldmia	r2, {r1, r2}
 8001e38:	4803      	ldr	r0, [pc, #12]	; (8001e48 <oled_not_implemented_screen+0x28>)
 8001e3a:	f000 fa7f 	bl	800233c <ssd1306_WriteString>
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	080065c8 	.word	0x080065c8

08001e4c <go_back_main>:
/**
	* @brief Go back to the main menu
	*
	* @param menu_item_t *self - Pointer to itself
*/
void go_back_main(menu_item_t *self){
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	go_back_main_flag = 1;
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <go_back_main+0x1c>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	200000ac 	.word	0x200000ac

08001e6c <oled_show_case>:
/**
 * @brief Change screen to IMAGE and show case head logo
 *
 * @param menu_item_t *self - Pointer to itself
*/
void oled_show_case(menu_item_t *self){
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	active_screen = IMAGE;
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <oled_show_case+0x20>)
 8001e76:	2203      	movs	r2, #3
 8001e78:	801a      	strh	r2, [r3, #0]
	curr_image = case_head_bmp;
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <oled_show_case+0x24>)
 8001e7c:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <oled_show_case+0x28>)
 8001e7e:	601a      	str	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	200007a8 	.word	0x200007a8
 8001e90:	20000700 	.word	0x20000700
 8001e94:	080065f0 	.word	0x080065f0

08001e98 <oled_show_cats>:
/**
 * @brief Change screen to IMAGE and show Nyx & Iris
 *
 * @param menu_item_t *self - Pointer to itself
*/
void oled_show_cats(menu_item_t *self){
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	active_screen = IMAGE;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <oled_show_cats+0x20>)
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	801a      	strh	r2, [r3, #0]
	curr_image = cats_bmp;
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <oled_show_cats+0x24>)
 8001ea8:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <oled_show_cats+0x28>)
 8001eaa:	601a      	str	r2, [r3, #0]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	200007a8 	.word	0x200007a8
 8001ebc:	20000700 	.word	0x20000700
 8001ec0:	080069f0 	.word	0x080069f0

08001ec4 <oled_show_info>:
/**
 * @brief Change screen to INFO
 *
 * @param menu_item_t *self - Pointer to itself
*/
void oled_show_info(menu_item_t *self){
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	active_screen = INFO;
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <oled_show_info+0x1c>)
 8001ece:	2202      	movs	r2, #2
 8001ed0:	801a      	strh	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	200007a8 	.word	0x200007a8

08001ee4 <oled_edit_var>:
/**
 * @brief Change screen to EDIT
 *
 * @param menu_item_t *self - Pointer to itself
*/
void oled_edit_var(menu_item_t *self){
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	active_screen = EDIT_VAR;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <oled_edit_var+0x20>)
 8001eee:	2204      	movs	r2, #4
 8001ef0:	801a      	strh	r2, [r3, #0]
	edit_var = self;
 8001ef2:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <oled_edit_var+0x24>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	200007a8 	.word	0x200007a8
 8001f08:	20000740 	.word	0x20000740

08001f0c <ssd1306_Reset>:
#include "user/ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af04      	add	r7, sp, #16
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	1dfb      	adds	r3, r7, #7
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2301      	movs	r3, #1
 8001f36:	2200      	movs	r2, #0
 8001f38:	2178      	movs	r1, #120	; 0x78
 8001f3a:	4803      	ldr	r0, [pc, #12]	; (8001f48 <ssd1306_WriteCommand+0x2c>)
 8001f3c:	f000 ff4e 	bl	8002ddc <HAL_I2C_Mem_Write>
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200004cc 	.word	0x200004cc

08001f4c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af04      	add	r7, sp, #16
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5e:	9202      	str	r2, [sp, #8]
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2301      	movs	r3, #1
 8001f68:	2240      	movs	r2, #64	; 0x40
 8001f6a:	2178      	movs	r1, #120	; 0x78
 8001f6c:	4803      	ldr	r0, [pc, #12]	; (8001f7c <ssd1306_WriteData+0x30>)
 8001f6e:	f000 ff35 	bl	8002ddc <HAL_I2C_Mem_Write>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200004cc 	.word	0x200004cc

08001f80 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001f84:	f7ff ffc2 	bl	8001f0c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001f88:	2064      	movs	r0, #100	; 0x64
 8001f8a:	f000 fab1 	bl	80024f0 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001f8e:	20ae      	movs	r0, #174	; 0xae
 8001f90:	f7ff ffc4 	bl	8001f1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001f94:	2020      	movs	r0, #32
 8001f96:	f7ff ffc1 	bl	8001f1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8001f9a:	2010      	movs	r0, #16
 8001f9c:	f7ff ffbe 	bl	8001f1c <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001fa0:	20b0      	movs	r0, #176	; 0xb0
 8001fa2:	f7ff ffbb 	bl	8001f1c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001fa6:	20c8      	movs	r0, #200	; 0xc8
 8001fa8:	f7ff ffb8 	bl	8001f1c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7ff ffb5 	bl	8001f1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001fb2:	2010      	movs	r0, #16
 8001fb4:	f7ff ffb2 	bl	8001f1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001fb8:	2040      	movs	r0, #64	; 0x40
 8001fba:	f7ff ffaf 	bl	8001f1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001fbe:	2081      	movs	r0, #129	; 0x81
 8001fc0:	f7ff ffac 	bl	8001f1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001fc4:	20ff      	movs	r0, #255	; 0xff
 8001fc6:	f7ff ffa9 	bl	8001f1c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001fca:	20a1      	movs	r0, #161	; 0xa1
 8001fcc:	f7ff ffa6 	bl	8001f1c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001fd0:	20a6      	movs	r0, #166	; 0xa6
 8001fd2:	f7ff ffa3 	bl	8001f1c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001fd6:	20a8      	movs	r0, #168	; 0xa8
 8001fd8:	f7ff ffa0 	bl	8001f1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8001fdc:	203f      	movs	r0, #63	; 0x3f
 8001fde:	f7ff ff9d 	bl	8001f1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fe2:	20a4      	movs	r0, #164	; 0xa4
 8001fe4:	f7ff ff9a 	bl	8001f1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001fe8:	20d3      	movs	r0, #211	; 0xd3
 8001fea:	f7ff ff97 	bl	8001f1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7ff ff94 	bl	8001f1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ff4:	20d5      	movs	r0, #213	; 0xd5
 8001ff6:	f7ff ff91 	bl	8001f1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ffa:	20f0      	movs	r0, #240	; 0xf0
 8001ffc:	f7ff ff8e 	bl	8001f1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002000:	20d9      	movs	r0, #217	; 0xd9
 8002002:	f7ff ff8b 	bl	8001f1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002006:	2022      	movs	r0, #34	; 0x22
 8002008:	f7ff ff88 	bl	8001f1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800200c:	20da      	movs	r0, #218	; 0xda
 800200e:	f7ff ff85 	bl	8001f1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8002012:	2012      	movs	r0, #18
 8002014:	f7ff ff82 	bl	8001f1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002018:	20db      	movs	r0, #219	; 0xdb
 800201a:	f7ff ff7f 	bl	8001f1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800201e:	2020      	movs	r0, #32
 8002020:	f7ff ff7c 	bl	8001f1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002024:	208d      	movs	r0, #141	; 0x8d
 8002026:	f7ff ff79 	bl	8001f1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800202a:	2014      	movs	r0, #20
 800202c:	f7ff ff76 	bl	8001f1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8002030:	20af      	movs	r0, #175	; 0xaf
 8002032:	f7ff ff73 	bl	8001f1c <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8002036:	2000      	movs	r0, #0
 8002038:	f000 f810 	bl	800205c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800203c:	f000 f830 	bl	80020a0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <ssd1306_Init+0xd8>)
 8002042:	2200      	movs	r2, #0
 8002044:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <ssd1306_Init+0xd8>)
 8002048:	2200      	movs	r2, #0
 800204a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <ssd1306_Init+0xd8>)
 800204e:	2201      	movs	r2, #1
 8002050:	715a      	strb	r2, [r3, #5]
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200004bc 	.word	0x200004bc

0800205c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e00d      	b.n	8002088 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <ssd1306_Fill+0x1a>
 8002072:	2100      	movs	r1, #0
 8002074:	e000      	b.n	8002078 <ssd1306_Fill+0x1c>
 8002076:	21ff      	movs	r1, #255	; 0xff
 8002078:	4a08      	ldr	r2, [pc, #32]	; (800209c <ssd1306_Fill+0x40>)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4413      	add	r3, r2
 800207e:	460a      	mov	r2, r1
 8002080:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208e:	d3ed      	bcc.n	800206c <ssd1306_Fill+0x10>
    }
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	200000bc 	.word	0x200000bc

080020a0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 80020a6:	2300      	movs	r3, #0
 80020a8:	71fb      	strb	r3, [r7, #7]
 80020aa:	e016      	b.n	80020da <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	3b50      	subs	r3, #80	; 0x50
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff32 	bl	8001f1c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7ff ff2f 	bl	8001f1c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80020be:	2010      	movs	r0, #16
 80020c0:	f7ff ff2c 	bl	8001f1c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	01db      	lsls	r3, r3, #7
 80020c8:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <ssd1306_UpdateScreen+0x48>)
 80020ca:	4413      	add	r3, r2
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff3c 	bl	8001f4c <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	3301      	adds	r3, #1
 80020d8:	71fb      	strb	r3, [r7, #7]
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b07      	cmp	r3, #7
 80020de:	d9e5      	bls.n	80020ac <ssd1306_UpdateScreen+0xc>
    }
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200000bc 	.word	0x200000bc

080020ec <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	460b      	mov	r3, r1
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	4613      	mov	r3, r2
 80020fc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db48      	blt.n	8002198 <ssd1306_DrawPixel+0xac>
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	2b3f      	cmp	r3, #63	; 0x3f
 800210a:	d845      	bhi.n	8002198 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <ssd1306_DrawPixel+0xb8>)
 800210e:	791b      	ldrb	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8002114:	797b      	ldrb	r3, [r7, #5]
 8002116:	2b00      	cmp	r3, #0
 8002118:	bf0c      	ite	eq
 800211a:	2301      	moveq	r3, #1
 800211c:	2300      	movne	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8002122:	797b      	ldrb	r3, [r7, #5]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d11a      	bne.n	800215e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002128:	79fa      	ldrb	r2, [r7, #7]
 800212a:	79bb      	ldrb	r3, [r7, #6]
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	b2d8      	uxtb	r0, r3
 8002130:	4603      	mov	r3, r0
 8002132:	01db      	lsls	r3, r3, #7
 8002134:	4413      	add	r3, r2
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <ssd1306_DrawPixel+0xbc>)
 8002138:	5cd3      	ldrb	r3, [r2, r3]
 800213a:	b25a      	sxtb	r2, r3
 800213c:	79bb      	ldrb	r3, [r7, #6]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	b25b      	sxtb	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	b259      	sxtb	r1, r3
 800214e:	79fa      	ldrb	r2, [r7, #7]
 8002150:	4603      	mov	r3, r0
 8002152:	01db      	lsls	r3, r3, #7
 8002154:	4413      	add	r3, r2
 8002156:	b2c9      	uxtb	r1, r1
 8002158:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <ssd1306_DrawPixel+0xbc>)
 800215a:	54d1      	strb	r1, [r2, r3]
 800215c:	e01d      	b.n	800219a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800215e:	79fa      	ldrb	r2, [r7, #7]
 8002160:	79bb      	ldrb	r3, [r7, #6]
 8002162:	08db      	lsrs	r3, r3, #3
 8002164:	b2d8      	uxtb	r0, r3
 8002166:	4603      	mov	r3, r0
 8002168:	01db      	lsls	r3, r3, #7
 800216a:	4413      	add	r3, r2
 800216c:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <ssd1306_DrawPixel+0xbc>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	b25a      	sxtb	r2, r3
 8002172:	79bb      	ldrb	r3, [r7, #6]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	2101      	movs	r1, #1
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	b25b      	sxtb	r3, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4013      	ands	r3, r2
 8002186:	b259      	sxtb	r1, r3
 8002188:	79fa      	ldrb	r2, [r7, #7]
 800218a:	4603      	mov	r3, r0
 800218c:	01db      	lsls	r3, r3, #7
 800218e:	4413      	add	r3, r2
 8002190:	b2c9      	uxtb	r1, r1
 8002192:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <ssd1306_DrawPixel+0xbc>)
 8002194:	54d1      	strb	r1, [r2, r3]
 8002196:	e000      	b.n	800219a <ssd1306_DrawPixel+0xae>
        return;
 8002198:	bf00      	nop
    }
}
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	200004bc 	.word	0x200004bc
 80021a8:	200000bc 	.word	0x200000bc

080021ac <ssd1306_DrawBitmap>:

// Draw a 128x64 bitmap image
// pBitmap     => Pointer to the stored byte array (size = 1024) of the image. 
// Convesion done here: https://javl.github.io/image2cpp/
void ssd1306_DrawBitmap(const unsigned char * pBitmap){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 1024; i++){
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	e037      	b.n	800222a <ssd1306_DrawBitmap+0x7e>
			// Extract each byte
			unsigned char byte = pBitmap[i];
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	75fb      	strb	r3, [r7, #23]
				
			for(int k = 0; k < 8; k++){
 80021c4:	2300      	movs	r3, #0
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	e029      	b.n	800221e <ssd1306_DrawBitmap+0x72>
				unsigned char pixel = (byte >> (7-k)) & 0x01;
 80021ca:	7dfa      	ldrb	r2, [r7, #23]
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	fa42 f303 	asr.w	r3, r2, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	75bb      	strb	r3, [r7, #22]
				unsigned int x = (i*8 + k) % 128;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	00da      	lsls	r2, r3, #3
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4413      	add	r3, r2
 80021e6:	425a      	negs	r2, r3
 80021e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021f0:	bf58      	it	pl
 80021f2:	4253      	negpl	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
				unsigned int y = (i*8 + k)/128;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	00da      	lsls	r2, r3, #3
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4413      	add	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da00      	bge.n	8002204 <ssd1306_DrawBitmap+0x58>
 8002202:	337f      	adds	r3, #127	; 0x7f
 8002204:	11db      	asrs	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]
				ssd1306_DrawPixel(x, y, (SSD1306_COLOR) pixel);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	b2d1      	uxtb	r1, r2
 8002210:	7dba      	ldrb	r2, [r7, #22]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff6a 	bl	80020ec <ssd1306_DrawPixel>
			for(int k = 0; k < 8; k++){
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	3301      	adds	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	2b07      	cmp	r3, #7
 8002222:	ddd2      	ble.n	80021ca <ssd1306_DrawBitmap+0x1e>
	for(int i = 0; i < 1024; i++){
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3301      	adds	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002230:	dbc3      	blt.n	80021ba <ssd1306_DrawBitmap+0xe>
			}//for - k
	}//for - i
}
 8002232:	bf00      	nop
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	4604      	mov	r4, r0
 8002244:	1d38      	adds	r0, r7, #4
 8002246:	e880 0006 	stmia.w	r0, {r1, r2}
 800224a:	461a      	mov	r2, r3
 800224c:	4623      	mov	r3, r4
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	4613      	mov	r3, r2
 8002252:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002254:	4b38      	ldr	r3, [pc, #224]	; (8002338 <ssd1306_WriteChar+0xfc>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	793b      	ldrb	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	2b7f      	cmp	r3, #127	; 0x7f
 8002260:	dc06      	bgt.n	8002270 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002262:	4b35      	ldr	r3, [pc, #212]	; (8002338 <ssd1306_WriteChar+0xfc>)
 8002264:	885b      	ldrh	r3, [r3, #2]
 8002266:	461a      	mov	r2, r3
 8002268:	797b      	ldrb	r3, [r7, #5]
 800226a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800226c:	2b3f      	cmp	r3, #63	; 0x3f
 800226e:	dd01      	ble.n	8002274 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8002270:	2300      	movs	r3, #0
 8002272:	e05d      	b.n	8002330 <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	e04c      	b.n	8002314 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	3b20      	subs	r3, #32
 8002280:	7979      	ldrb	r1, [r7, #5]
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4619      	mov	r1, r3
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	440b      	add	r3, r1
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002294:	2300      	movs	r3, #0
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	e034      	b.n	8002304 <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d012      	beq.n	80022d0 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80022aa:	4b23      	ldr	r3, [pc, #140]	; (8002338 <ssd1306_WriteChar+0xfc>)
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	b2d8      	uxtb	r0, r3
 80022b8:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <ssd1306_WriteChar+0xfc>)
 80022ba:	885b      	ldrh	r3, [r3, #2]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	7bba      	ldrb	r2, [r7, #14]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7ff ff0f 	bl	80020ec <ssd1306_DrawPixel>
 80022ce:	e016      	b.n	80022fe <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <ssd1306_WriteChar+0xfc>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4413      	add	r3, r2
 80022dc:	b2d8      	uxtb	r0, r3
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <ssd1306_WriteChar+0xfc>)
 80022e0:	885b      	ldrh	r3, [r3, #2]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	b2d9      	uxtb	r1, r3
 80022ec:	7bbb      	ldrb	r3, [r7, #14]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bf0c      	ite	eq
 80022f2:	2301      	moveq	r3, #1
 80022f4:	2300      	movne	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	f7ff fef7 	bl	80020ec <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	3301      	adds	r3, #1
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	793b      	ldrb	r3, [r7, #4]
 8002306:	461a      	mov	r2, r3
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	4293      	cmp	r3, r2
 800230c:	d3c5      	bcc.n	800229a <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3301      	adds	r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	797b      	ldrb	r3, [r7, #5]
 8002316:	461a      	mov	r2, r3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4293      	cmp	r3, r2
 800231c:	d3ad      	bcc.n	800227a <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <ssd1306_WriteChar+0xfc>)
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	793b      	ldrb	r3, [r7, #4]
 8002324:	b29b      	uxth	r3, r3
 8002326:	4413      	add	r3, r2
 8002328:	b29a      	uxth	r2, r3
 800232a:	4b03      	ldr	r3, [pc, #12]	; (8002338 <ssd1306_WriteChar+0xfc>)
 800232c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3724      	adds	r7, #36	; 0x24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd90      	pop	{r4, r7, pc}
 8002338:	200004bc 	.word	0x200004bc

0800233c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	1d38      	adds	r0, r7, #4
 8002346:	e880 0006 	stmia.w	r0, {r1, r2}
 800234a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800234c:	e012      	b.n	8002374 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	7818      	ldrb	r0, [r3, #0]
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	1d3a      	adds	r2, r7, #4
 8002356:	ca06      	ldmia	r2, {r1, r2}
 8002358:	f7ff ff70 	bl	800223c <ssd1306_WriteChar>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d002      	beq.n	800236e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	e008      	b.n	8002380 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3301      	adds	r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e8      	bne.n	800234e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	781b      	ldrb	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	460a      	mov	r2, r1
 8002392:	71fb      	strb	r3, [r7, #7]
 8002394:	4613      	mov	r3, r2
 8002396:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	b29a      	uxth	r2, r3
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <ssd1306_SetCursor+0x2c>)
 800239e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80023a0:	79bb      	ldrb	r3, [r7, #6]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <ssd1306_SetCursor+0x2c>)
 80023a6:	805a      	strh	r2, [r3, #2]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	200004bc 	.word	0x200004bc

080023b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023be:	e003      	b.n	80023c8 <LoopCopyDataInit>

080023c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023c6:	3104      	adds	r1, #4

080023c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023c8:	480b      	ldr	r0, [pc, #44]	; (80023f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023d0:	d3f6      	bcc.n	80023c0 <CopyDataInit>
  ldr  r2, =_sbss
 80023d2:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023d4:	e002      	b.n	80023dc <LoopFillZerobss>

080023d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023d8:	f842 3b04 	str.w	r3, [r2], #4

080023dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023e0:	d3f9      	bcc.n	80023d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023e2:	f7ff f85f 	bl	80014a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023e6:	f003 f803 	bl	80053f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ea:	f7fe f8d3 	bl	8000594 <main>
  bx  lr    
 80023ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80023f4:	08008360 	.word	0x08008360
  ldr  r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023fc:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8002400:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002404:	20000888 	.word	0x20000888

08002408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002408:	e7fe      	b.n	8002408 <ADC_IRQHandler>
	...

0800240c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002410:	4b0e      	ldr	r3, [pc, #56]	; (800244c <HAL_Init+0x40>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0d      	ldr	r2, [pc, #52]	; (800244c <HAL_Init+0x40>)
 8002416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_Init+0x40>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0a      	ldr	r2, [pc, #40]	; (800244c <HAL_Init+0x40>)
 8002422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_Init+0x40>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_Init+0x40>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002434:	2003      	movs	r0, #3
 8002436:	f000 f94d 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243a:	2000      	movs	r0, #0
 800243c:	f000 f808 	bl	8002450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002440:	f7fe fcc0 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023c00 	.word	0x40023c00

08002450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_InitTick+0x54>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_InitTick+0x58>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002466:	fbb3 f3f1 	udiv	r3, r3, r1
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f965 	bl	800273e <HAL_SYSTICK_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e00e      	b.n	800249c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b0f      	cmp	r3, #15
 8002482:	d80a      	bhi.n	800249a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002484:	2200      	movs	r2, #0
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f000 f92d 	bl	80026ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002490:	4a06      	ldr	r2, [pc, #24]	; (80024ac <HAL_InitTick+0x5c>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e000      	b.n	800249c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20000020 	.word	0x20000020
 80024ac:	2000001c 	.word	0x2000001c

080024b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_IncTick+0x20>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x24>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_IncTick+0x24>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000020 	.word	0x20000020
 80024d4:	20000880 	.word	0x20000880

080024d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_GetTick+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000880 	.word	0x20000880

080024f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7ff ffee 	bl	80024d8 <HAL_GetTick>
 80024fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d005      	beq.n	8002516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_Delay+0x40>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4413      	add	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002516:	bf00      	nop
 8002518:	f7ff ffde 	bl	80024d8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	429a      	cmp	r2, r3
 8002526:	d8f7      	bhi.n	8002518 <HAL_Delay+0x28>
  {
  }
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000020 	.word	0x20000020

08002534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db0b      	blt.n	80025c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4907      	ldr	r1, [pc, #28]	; (80025d0 <__NVIC_EnableIRQ+0x38>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db0a      	blt.n	80025fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	490c      	ldr	r1, [pc, #48]	; (8002620 <__NVIC_SetPriority+0x4c>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	440b      	add	r3, r1
 80025f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025fc:	e00a      	b.n	8002614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4908      	ldr	r1, [pc, #32]	; (8002624 <__NVIC_SetPriority+0x50>)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	3b04      	subs	r3, #4
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	440b      	add	r3, r1
 8002612:	761a      	strb	r2, [r3, #24]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000e100 	.word	0xe000e100
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f1c3 0307 	rsb	r3, r3, #7
 8002642:	2b04      	cmp	r3, #4
 8002644:	bf28      	it	cs
 8002646:	2304      	movcs	r3, #4
 8002648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3304      	adds	r3, #4
 800264e:	2b06      	cmp	r3, #6
 8002650:	d902      	bls.n	8002658 <NVIC_EncodePriority+0x30>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3b03      	subs	r3, #3
 8002656:	e000      	b.n	800265a <NVIC_EncodePriority+0x32>
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43d9      	mvns	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	4313      	orrs	r3, r2
         );
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	; 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a0:	d301      	bcc.n	80026a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <SysTick_Config+0x40>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ae:	210f      	movs	r1, #15
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f7ff ff8e 	bl	80025d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <SysTick_Config+0x40>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <SysTick_Config+0x40>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ff29 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff3e 	bl	800257c <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff8e 	bl	8002628 <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5d 	bl	80025d4 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff31 	bl	8002598 <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa2 	bl	8002690 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e16b      	b.n	8002a4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	429a      	cmp	r2, r3
 800278e:	f040 815a 	bne.w	8002a46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d00b      	beq.n	80027b2 <HAL_GPIO_Init+0x5a>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d007      	beq.n	80027b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a6:	2b11      	cmp	r3, #17
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b12      	cmp	r3, #18
 80027b0:	d130      	bne.n	8002814 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 0201 	and.w	r2, r3, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0xfc>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b12      	cmp	r3, #18
 8002852:	d123      	bne.n	800289c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	69b9      	ldr	r1, [r7, #24]
 8002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80b4 	beq.w	8002a46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b5f      	ldr	r3, [pc, #380]	; (8002a60 <HAL_GPIO_Init+0x308>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	4a5e      	ldr	r2, [pc, #376]	; (8002a60 <HAL_GPIO_Init+0x308>)
 80028e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ec:	6453      	str	r3, [r2, #68]	; 0x44
 80028ee:	4b5c      	ldr	r3, [pc, #368]	; (8002a60 <HAL_GPIO_Init+0x308>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028fa:	4a5a      	ldr	r2, [pc, #360]	; (8002a64 <HAL_GPIO_Init+0x30c>)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a51      	ldr	r2, [pc, #324]	; (8002a68 <HAL_GPIO_Init+0x310>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d02b      	beq.n	800297e <HAL_GPIO_Init+0x226>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a50      	ldr	r2, [pc, #320]	; (8002a6c <HAL_GPIO_Init+0x314>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d025      	beq.n	800297a <HAL_GPIO_Init+0x222>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <HAL_GPIO_Init+0x318>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01f      	beq.n	8002976 <HAL_GPIO_Init+0x21e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4e      	ldr	r2, [pc, #312]	; (8002a74 <HAL_GPIO_Init+0x31c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d019      	beq.n	8002972 <HAL_GPIO_Init+0x21a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4d      	ldr	r2, [pc, #308]	; (8002a78 <HAL_GPIO_Init+0x320>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_GPIO_Init+0x216>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4c      	ldr	r2, [pc, #304]	; (8002a7c <HAL_GPIO_Init+0x324>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00d      	beq.n	800296a <HAL_GPIO_Init+0x212>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4b      	ldr	r2, [pc, #300]	; (8002a80 <HAL_GPIO_Init+0x328>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <HAL_GPIO_Init+0x20e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4a      	ldr	r2, [pc, #296]	; (8002a84 <HAL_GPIO_Init+0x32c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_GPIO_Init+0x20a>
 800295e:	2307      	movs	r3, #7
 8002960:	e00e      	b.n	8002980 <HAL_GPIO_Init+0x228>
 8002962:	2308      	movs	r3, #8
 8002964:	e00c      	b.n	8002980 <HAL_GPIO_Init+0x228>
 8002966:	2306      	movs	r3, #6
 8002968:	e00a      	b.n	8002980 <HAL_GPIO_Init+0x228>
 800296a:	2305      	movs	r3, #5
 800296c:	e008      	b.n	8002980 <HAL_GPIO_Init+0x228>
 800296e:	2304      	movs	r3, #4
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x228>
 8002972:	2303      	movs	r3, #3
 8002974:	e004      	b.n	8002980 <HAL_GPIO_Init+0x228>
 8002976:	2302      	movs	r3, #2
 8002978:	e002      	b.n	8002980 <HAL_GPIO_Init+0x228>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x228>
 800297e:	2300      	movs	r3, #0
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	f002 0203 	and.w	r2, r2, #3
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	4093      	lsls	r3, r2
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002990:	4934      	ldr	r1, [pc, #208]	; (8002a64 <HAL_GPIO_Init+0x30c>)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800299e:	4b3a      	ldr	r3, [pc, #232]	; (8002a88 <HAL_GPIO_Init+0x330>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c2:	4a31      	ldr	r2, [pc, #196]	; (8002a88 <HAL_GPIO_Init+0x330>)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029c8:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <HAL_GPIO_Init+0x330>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ec:	4a26      	ldr	r2, [pc, #152]	; (8002a88 <HAL_GPIO_Init+0x330>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f2:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <HAL_GPIO_Init+0x330>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a16:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <HAL_GPIO_Init+0x330>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <HAL_GPIO_Init+0x330>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a40:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <HAL_GPIO_Init+0x330>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	f67f ae90 	bls.w	8002774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a54:	bf00      	nop
 8002a56:	3724      	adds	r7, #36	; 0x24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40021400 	.word	0x40021400
 8002a80:	40021800 	.word	0x40021800
 8002a84:	40021c00 	.word	0x40021c00
 8002a88:	40013c00 	.word	0x40013c00

08002a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e001      	b.n	8002aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002acc:	787b      	ldrb	r3, [r7, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ad8:	e003      	b.n	8002ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	041a      	lsls	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	619a      	str	r2, [r3, #24]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	401a      	ands	r2, r3
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d104      	bne.n	8002b12 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b08:	887b      	ldrh	r3, [r7, #2]
 8002b0a:	041a      	lsls	r2, r3, #16
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002b10:	e002      	b.n	8002b18 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	619a      	str	r2, [r3, #24]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d006      	beq.n	8002b48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b3a:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f806 	bl	8002b54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e11f      	b.n	8002dbe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe f93e 	bl	8000e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2224      	movs	r2, #36	; 0x24
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bd0:	f001 f82e 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8002bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a7b      	ldr	r2, [pc, #492]	; (8002dc8 <HAL_I2C_Init+0x25c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d807      	bhi.n	8002bf0 <HAL_I2C_Init+0x84>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4a7a      	ldr	r2, [pc, #488]	; (8002dcc <HAL_I2C_Init+0x260>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	bf94      	ite	ls
 8002be8:	2301      	movls	r3, #1
 8002bea:	2300      	movhi	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e006      	b.n	8002bfe <HAL_I2C_Init+0x92>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a77      	ldr	r2, [pc, #476]	; (8002dd0 <HAL_I2C_Init+0x264>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bf94      	ite	ls
 8002bf8:	2301      	movls	r3, #1
 8002bfa:	2300      	movhi	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0db      	b.n	8002dbe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4a72      	ldr	r2, [pc, #456]	; (8002dd4 <HAL_I2C_Init+0x268>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	0c9b      	lsrs	r3, r3, #18
 8002c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a64      	ldr	r2, [pc, #400]	; (8002dc8 <HAL_I2C_Init+0x25c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d802      	bhi.n	8002c40 <HAL_I2C_Init+0xd4>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	e009      	b.n	8002c54 <HAL_I2C_Init+0xe8>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	4a63      	ldr	r2, [pc, #396]	; (8002dd8 <HAL_I2C_Init+0x26c>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	3301      	adds	r3, #1
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4956      	ldr	r1, [pc, #344]	; (8002dc8 <HAL_I2C_Init+0x25c>)
 8002c70:	428b      	cmp	r3, r1
 8002c72:	d80d      	bhi.n	8002c90 <HAL_I2C_Init+0x124>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1e59      	subs	r1, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	bf38      	it	cc
 8002c8c:	2304      	movcc	r3, #4
 8002c8e:	e04f      	b.n	8002d30 <HAL_I2C_Init+0x1c4>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d111      	bne.n	8002cbc <HAL_I2C_Init+0x150>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1e58      	subs	r0, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	440b      	add	r3, r1
 8002ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002caa:	3301      	adds	r3, #1
 8002cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e012      	b.n	8002ce2 <HAL_I2C_Init+0x176>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1e58      	subs	r0, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	0099      	lsls	r1, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Init+0x17e>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e022      	b.n	8002d30 <HAL_I2C_Init+0x1c4>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10e      	bne.n	8002d10 <HAL_I2C_Init+0x1a4>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1e58      	subs	r0, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	440b      	add	r3, r1
 8002d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d04:	3301      	adds	r3, #1
 8002d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0e:	e00f      	b.n	8002d30 <HAL_I2C_Init+0x1c4>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1e58      	subs	r0, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	0099      	lsls	r1, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	6809      	ldr	r1, [r1, #0]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6911      	ldr	r1, [r2, #16]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68d2      	ldr	r2, [r2, #12]
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	430b      	orrs	r3, r1
 8002d72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	000186a0 	.word	0x000186a0
 8002dcc:	001e847f 	.word	0x001e847f
 8002dd0:	003d08ff 	.word	0x003d08ff
 8002dd4:	431bde83 	.word	0x431bde83
 8002dd8:	10624dd3 	.word	0x10624dd3

08002ddc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	4608      	mov	r0, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	461a      	mov	r2, r3
 8002dea:	4603      	mov	r3, r0
 8002dec:	817b      	strh	r3, [r7, #10]
 8002dee:	460b      	mov	r3, r1
 8002df0:	813b      	strh	r3, [r7, #8]
 8002df2:	4613      	mov	r3, r2
 8002df4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002df6:	f7ff fb6f 	bl	80024d8 <HAL_GetTick>
 8002dfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	f040 80d9 	bne.w	8002fbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	2319      	movs	r3, #25
 8002e10:	2201      	movs	r2, #1
 8002e12:	496d      	ldr	r1, [pc, #436]	; (8002fc8 <HAL_I2C_Mem_Write+0x1ec>)
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f96f 	bl	80030f8 <I2C_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e20:	2302      	movs	r3, #2
 8002e22:	e0cc      	b.n	8002fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_I2C_Mem_Write+0x56>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e0c5      	b.n	8002fbe <HAL_I2C_Mem_Write+0x1e2>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d007      	beq.n	8002e58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2221      	movs	r2, #33	; 0x21
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2240      	movs	r2, #64	; 0x40
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a3a      	ldr	r2, [r7, #32]
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4a4d      	ldr	r2, [pc, #308]	; (8002fcc <HAL_I2C_Mem_Write+0x1f0>)
 8002e98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e9a:	88f8      	ldrh	r0, [r7, #6]
 8002e9c:	893a      	ldrh	r2, [r7, #8]
 8002e9e:	8979      	ldrh	r1, [r7, #10]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	9301      	str	r3, [sp, #4]
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f890 	bl	8002fd0 <I2C_RequestMemoryWrite>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d052      	beq.n	8002f5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e081      	b.n	8002fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f9f0 	bl	80032a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d107      	bne.n	8002ee2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e06b      	b.n	8002fbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d11b      	bne.n	8002f5c <HAL_I2C_Mem_Write+0x180>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d017      	beq.n	8002f5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1aa      	bne.n	8002eba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f9dc 	bl	8003326 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00d      	beq.n	8002f90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d107      	bne.n	8002f8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e016      	b.n	8002fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	00100002 	.word	0x00100002
 8002fcc:	ffff0000 	.word	0xffff0000

08002fd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	817b      	strh	r3, [r7, #10]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	813b      	strh	r3, [r7, #8]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	2200      	movs	r2, #0
 8003002:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f876 	bl	80030f8 <I2C_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00c      	beq.n	800302c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e05f      	b.n	80030ec <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800302c:	897b      	ldrh	r3, [r7, #10]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800303a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	6a3a      	ldr	r2, [r7, #32]
 8003040:	492c      	ldr	r1, [pc, #176]	; (80030f4 <I2C_RequestMemoryWrite+0x124>)
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f8af 	bl	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e04c      	b.n	80030ec <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306a:	6a39      	ldr	r1, [r7, #32]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f919 	bl	80032a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2b04      	cmp	r3, #4
 800307e:	d107      	bne.n	8003090 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e02b      	b.n	80030ec <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800309a:	893b      	ldrh	r3, [r7, #8]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	611a      	str	r2, [r3, #16]
 80030a4:	e021      	b.n	80030ea <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030a6:	893b      	ldrh	r3, [r7, #8]
 80030a8:	0a1b      	lsrs	r3, r3, #8
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b6:	6a39      	ldr	r1, [r7, #32]
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f8f3 	bl	80032a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d107      	bne.n	80030dc <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e005      	b.n	80030ec <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030e0:	893b      	ldrh	r3, [r7, #8]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	00010002 	.word	0x00010002

080030f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003108:	e025      	b.n	8003156 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003110:	d021      	beq.n	8003156 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003112:	f7ff f9e1 	bl	80024d8 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d302      	bcc.n	8003128 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d116      	bne.n	8003156 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f043 0220 	orr.w	r2, r3, #32
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e023      	b.n	800319e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d10d      	bne.n	800317c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	43da      	mvns	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4013      	ands	r3, r2
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf0c      	ite	eq
 8003172:	2301      	moveq	r3, #1
 8003174:	2300      	movne	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	e00c      	b.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	43da      	mvns	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4013      	ands	r3, r2
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	429a      	cmp	r2, r3
 800319a:	d0b6      	beq.n	800310a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031b4:	e051      	b.n	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c4:	d123      	bne.n	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f043 0204 	orr.w	r2, r3, #4
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e046      	b.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d021      	beq.n	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003216:	f7ff f95f 	bl	80024d8 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	429a      	cmp	r2, r3
 8003224:	d302      	bcc.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d116      	bne.n	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e020      	b.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	0c1b      	lsrs	r3, r3, #16
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	d10c      	bne.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	43da      	mvns	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4013      	ands	r3, r2
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	bf14      	ite	ne
 8003276:	2301      	movne	r3, #1
 8003278:	2300      	moveq	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	e00b      	b.n	8003296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	43da      	mvns	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4013      	ands	r3, r2
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d18d      	bne.n	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032b0:	e02d      	b.n	800330e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f878 	bl	80033a8 <I2C_IsAcknowledgeFailed>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e02d      	b.n	800331e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d021      	beq.n	800330e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ca:	f7ff f905 	bl	80024d8 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d302      	bcc.n	80032e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d116      	bne.n	800330e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e007      	b.n	800331e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003318:	2b80      	cmp	r3, #128	; 0x80
 800331a:	d1ca      	bne.n	80032b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003332:	e02d      	b.n	8003390 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f837 	bl	80033a8 <I2C_IsAcknowledgeFailed>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e02d      	b.n	80033a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d021      	beq.n	8003390 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334c:	f7ff f8c4 	bl	80024d8 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	429a      	cmp	r2, r3
 800335a:	d302      	bcc.n	8003362 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d116      	bne.n	8003390 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e007      	b.n	80033a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b04      	cmp	r3, #4
 800339c:	d1ca      	bne.n	8003334 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033be:	d11b      	bne.n	80033f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f043 0204 	orr.w	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e25b      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d075      	beq.n	8003512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003426:	4ba3      	ldr	r3, [pc, #652]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b04      	cmp	r3, #4
 8003430:	d00c      	beq.n	800344c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003432:	4ba0      	ldr	r3, [pc, #640]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800343a:	2b08      	cmp	r3, #8
 800343c:	d112      	bne.n	8003464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343e:	4b9d      	ldr	r3, [pc, #628]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800344a:	d10b      	bne.n	8003464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	4b99      	ldr	r3, [pc, #612]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d05b      	beq.n	8003510 <HAL_RCC_OscConfig+0x108>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d157      	bne.n	8003510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e236      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d106      	bne.n	800347c <HAL_RCC_OscConfig+0x74>
 800346e:	4b91      	ldr	r3, [pc, #580]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a90      	ldr	r2, [pc, #576]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e01d      	b.n	80034b8 <HAL_RCC_OscConfig+0xb0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x98>
 8003486:	4b8b      	ldr	r3, [pc, #556]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a8a      	ldr	r2, [pc, #552]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	4b88      	ldr	r3, [pc, #544]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a87      	ldr	r2, [pc, #540]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e00b      	b.n	80034b8 <HAL_RCC_OscConfig+0xb0>
 80034a0:	4b84      	ldr	r3, [pc, #528]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a83      	ldr	r2, [pc, #524]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	4b81      	ldr	r3, [pc, #516]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a80      	ldr	r2, [pc, #512]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d013      	beq.n	80034e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7ff f80a 	bl	80024d8 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c8:	f7ff f806 	bl	80024d8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1fb      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	4b76      	ldr	r3, [pc, #472]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0xc0>
 80034e6:	e014      	b.n	8003512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fe fff6 	bl	80024d8 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fe fff2 	bl	80024d8 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e1e7      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003502:	4b6c      	ldr	r3, [pc, #432]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0xe8>
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d063      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800351e:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800352a:	4b62      	ldr	r3, [pc, #392]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003532:	2b08      	cmp	r3, #8
 8003534:	d11c      	bne.n	8003570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003536:	4b5f      	ldr	r3, [pc, #380]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d116      	bne.n	8003570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003542:	4b5c      	ldr	r3, [pc, #368]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_RCC_OscConfig+0x152>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d001      	beq.n	800355a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e1bb      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355a:	4b56      	ldr	r3, [pc, #344]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4952      	ldr	r1, [pc, #328]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356e:	e03a      	b.n	80035e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003578:	4b4f      	ldr	r3, [pc, #316]	; (80036b8 <HAL_RCC_OscConfig+0x2b0>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357e:	f7fe ffab 	bl	80024d8 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003586:	f7fe ffa7 	bl	80024d8 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e19c      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003598:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a4:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4940      	ldr	r1, [pc, #256]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	600b      	str	r3, [r1, #0]
 80035b8:	e015      	b.n	80035e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_RCC_OscConfig+0x2b0>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe ff8a 	bl	80024d8 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c8:	f7fe ff86 	bl	80024d8 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e17b      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035da:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d030      	beq.n	8003654 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fa:	4b30      	ldr	r3, [pc, #192]	; (80036bc <HAL_RCC_OscConfig+0x2b4>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fe ff6a 	bl	80024d8 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003608:	f7fe ff66 	bl	80024d8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e15b      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361a:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x200>
 8003626:	e015      	b.n	8003654 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003628:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_RCC_OscConfig+0x2b4>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362e:	f7fe ff53 	bl	80024d8 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003636:	f7fe ff4f 	bl	80024d8 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e144      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003648:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 800364a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f0      	bne.n	8003636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80a0 	beq.w	80037a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003662:	2300      	movs	r3, #0
 8003664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10f      	bne.n	8003692 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	4a0e      	ldr	r2, [pc, #56]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003680:	6413      	str	r3, [r2, #64]	; 0x40
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <HAL_RCC_OscConfig+0x2ac>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003692:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_OscConfig+0x2b8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d121      	bne.n	80036e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <HAL_RCC_OscConfig+0x2b8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a07      	ldr	r2, [pc, #28]	; (80036c0 <HAL_RCC_OscConfig+0x2b8>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036aa:	f7fe ff15 	bl	80024d8 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	e011      	b.n	80036d6 <HAL_RCC_OscConfig+0x2ce>
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800
 80036b8:	42470000 	.word	0x42470000
 80036bc:	42470e80 	.word	0x42470e80
 80036c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c4:	f7fe ff08 	bl	80024d8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0fd      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d6:	4b81      	ldr	r3, [pc, #516]	; (80038dc <HAL_RCC_OscConfig+0x4d4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d106      	bne.n	80036f8 <HAL_RCC_OscConfig+0x2f0>
 80036ea:	4b7d      	ldr	r3, [pc, #500]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a7c      	ldr	r2, [pc, #496]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
 80036f6:	e01c      	b.n	8003732 <HAL_RCC_OscConfig+0x32a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b05      	cmp	r3, #5
 80036fe:	d10c      	bne.n	800371a <HAL_RCC_OscConfig+0x312>
 8003700:	4b77      	ldr	r3, [pc, #476]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a76      	ldr	r2, [pc, #472]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 8003706:	f043 0304 	orr.w	r3, r3, #4
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
 800370c:	4b74      	ldr	r3, [pc, #464]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	4a73      	ldr	r2, [pc, #460]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6713      	str	r3, [r2, #112]	; 0x70
 8003718:	e00b      	b.n	8003732 <HAL_RCC_OscConfig+0x32a>
 800371a:	4b71      	ldr	r3, [pc, #452]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	4a70      	ldr	r2, [pc, #448]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	6713      	str	r3, [r2, #112]	; 0x70
 8003726:	4b6e      	ldr	r3, [pc, #440]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a6d      	ldr	r2, [pc, #436]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d015      	beq.n	8003766 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373a:	f7fe fecd 	bl	80024d8 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003740:	e00a      	b.n	8003758 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fe fec9 	bl	80024d8 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e0bc      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	4b61      	ldr	r3, [pc, #388]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0ee      	beq.n	8003742 <HAL_RCC_OscConfig+0x33a>
 8003764:	e014      	b.n	8003790 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003766:	f7fe feb7 	bl	80024d8 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fe feb3 	bl	80024d8 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0a6      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003784:	4b56      	ldr	r3, [pc, #344]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1ee      	bne.n	800376e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d105      	bne.n	80037a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003796:	4b52      	ldr	r3, [pc, #328]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a51      	ldr	r2, [pc, #324]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 800379c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8092 	beq.w	80038d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ac:	4b4c      	ldr	r3, [pc, #304]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d05c      	beq.n	8003872 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d141      	bne.n	8003844 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c0:	4b48      	ldr	r3, [pc, #288]	; (80038e4 <HAL_RCC_OscConfig+0x4dc>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c6:	f7fe fe87 	bl	80024d8 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fe fe83 	bl	80024d8 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e078      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e0:	4b3f      	ldr	r3, [pc, #252]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f0      	bne.n	80037ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	019b      	lsls	r3, r3, #6
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	085b      	lsrs	r3, r3, #1
 8003804:	3b01      	subs	r3, #1
 8003806:	041b      	lsls	r3, r3, #16
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	061b      	lsls	r3, r3, #24
 8003810:	4933      	ldr	r1, [pc, #204]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 8003812:	4313      	orrs	r3, r2
 8003814:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003816:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <HAL_RCC_OscConfig+0x4dc>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fe5c 	bl	80024d8 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003824:	f7fe fe58 	bl	80024d8 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e04d      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003836:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x41c>
 8003842:	e045      	b.n	80038d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <HAL_RCC_OscConfig+0x4dc>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384a:	f7fe fe45 	bl	80024d8 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003852:	f7fe fe41 	bl	80024d8 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e036      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003864:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f0      	bne.n	8003852 <HAL_RCC_OscConfig+0x44a>
 8003870:	e02e      	b.n	80038d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e029      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800387e:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <HAL_RCC_OscConfig+0x4d8>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	429a      	cmp	r2, r3
 8003890:	d11c      	bne.n	80038cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d115      	bne.n	80038cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d10d      	bne.n	80038cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d106      	bne.n	80038cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40007000 	.word	0x40007000
 80038e0:	40023800 	.word	0x40023800
 80038e4:	42470060 	.word	0x42470060

080038e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0cc      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038fc:	4b68      	ldr	r3, [pc, #416]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d90c      	bls.n	8003924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b65      	ldr	r3, [pc, #404]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b63      	ldr	r3, [pc, #396]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b8      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800393c:	4b59      	ldr	r3, [pc, #356]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a58      	ldr	r2, [pc, #352]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003954:	4b53      	ldr	r3, [pc, #332]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a52      	ldr	r2, [pc, #328]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800395e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b50      	ldr	r3, [pc, #320]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	494d      	ldr	r1, [pc, #308]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d044      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d119      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e07f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a6:	4b3f      	ldr	r3, [pc, #252]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e06f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b6:	4b3b      	ldr	r3, [pc, #236]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e067      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c6:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 0203 	bic.w	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4934      	ldr	r1, [pc, #208]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d8:	f7fe fd7e 	bl	80024d8 <HAL_GetTick>
 80039dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e0:	f7fe fd7a 	bl	80024d8 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e04f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	4b2b      	ldr	r3, [pc, #172]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 020c 	and.w	r2, r3, #12
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d1eb      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a08:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d20c      	bcs.n	8003a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e032      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3c:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4916      	ldr	r1, [pc, #88]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	490e      	ldr	r1, [pc, #56]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a6e:	f000 f821 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8003a72:	4601      	mov	r1, r0
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	5cd3      	ldrb	r3, [r2, r3]
 8003a82:	fa21 f303 	lsr.w	r3, r1, r3
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fcde 	bl	8002450 <HAL_InitTick>

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023c00 	.word	0x40023c00
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	080065d8 	.word	0x080065d8
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	2000001c 	.word	0x2000001c

08003ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aca:	4b50      	ldr	r3, [pc, #320]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x158>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d007      	beq.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x32>
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d008      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x38>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f040 808d 	bne.w	8003bfa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae0:	4b4b      	ldr	r3, [pc, #300]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003ae2:	60bb      	str	r3, [r7, #8]
       break;
 8003ae4:	e08c      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ae6:	4b4b      	ldr	r3, [pc, #300]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ae8:	60bb      	str	r3, [r7, #8]
      break;
 8003aea:	e089      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aec:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x158>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003af6:	4b45      	ldr	r3, [pc, #276]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x158>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d023      	beq.n	8003b4a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b02:	4b42      	ldr	r3, [pc, #264]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x158>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	099b      	lsrs	r3, r3, #6
 8003b08:	f04f 0400 	mov.w	r4, #0
 8003b0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	ea03 0501 	and.w	r5, r3, r1
 8003b18:	ea04 0602 	and.w	r6, r4, r2
 8003b1c:	4a3d      	ldr	r2, [pc, #244]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b1e:	fb02 f106 	mul.w	r1, r2, r6
 8003b22:	2200      	movs	r2, #0
 8003b24:	fb02 f205 	mul.w	r2, r2, r5
 8003b28:	440a      	add	r2, r1
 8003b2a:	493a      	ldr	r1, [pc, #232]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b2c:	fba5 0101 	umull	r0, r1, r5, r1
 8003b30:	1853      	adds	r3, r2, r1
 8003b32:	4619      	mov	r1, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f04f 0400 	mov.w	r4, #0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4623      	mov	r3, r4
 8003b3e:	f7fc fb97 	bl	8000270 <__aeabi_uldivmod>
 8003b42:	4603      	mov	r3, r0
 8003b44:	460c      	mov	r4, r1
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	e049      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4a:	4b30      	ldr	r3, [pc, #192]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x158>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	099b      	lsrs	r3, r3, #6
 8003b50:	f04f 0400 	mov.w	r4, #0
 8003b54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	ea03 0501 	and.w	r5, r3, r1
 8003b60:	ea04 0602 	and.w	r6, r4, r2
 8003b64:	4629      	mov	r1, r5
 8003b66:	4632      	mov	r2, r6
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	f04f 0400 	mov.w	r4, #0
 8003b70:	0154      	lsls	r4, r2, #5
 8003b72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b76:	014b      	lsls	r3, r1, #5
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	1b49      	subs	r1, r1, r5
 8003b7e:	eb62 0206 	sbc.w	r2, r2, r6
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	f04f 0400 	mov.w	r4, #0
 8003b8a:	0194      	lsls	r4, r2, #6
 8003b8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b90:	018b      	lsls	r3, r1, #6
 8003b92:	1a5b      	subs	r3, r3, r1
 8003b94:	eb64 0402 	sbc.w	r4, r4, r2
 8003b98:	f04f 0100 	mov.w	r1, #0
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	00e2      	lsls	r2, r4, #3
 8003ba2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ba6:	00d9      	lsls	r1, r3, #3
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4614      	mov	r4, r2
 8003bac:	195b      	adds	r3, r3, r5
 8003bae:	eb44 0406 	adc.w	r4, r4, r6
 8003bb2:	f04f 0100 	mov.w	r1, #0
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	02a2      	lsls	r2, r4, #10
 8003bbc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003bc0:	0299      	lsls	r1, r3, #10
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4614      	mov	r4, r2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	4621      	mov	r1, r4
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f04f 0400 	mov.w	r4, #0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4623      	mov	r3, r4
 8003bd4:	f7fc fb4c 	bl	8000270 <__aeabi_uldivmod>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x158>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	0c1b      	lsrs	r3, r3, #16
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	3301      	adds	r3, #1
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf6:	60bb      	str	r3, [r7, #8]
      break;
 8003bf8:	e002      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003bfc:	60bb      	str	r3, [r7, #8]
      break;
 8003bfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c00:	68bb      	ldr	r3, [r7, #8]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	00f42400 	.word	0x00f42400
 8003c14:	017d7840 	.word	0x017d7840

08003c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000000 	.word	0x20000000

08003c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c34:	f7ff fff0 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c38:	4601      	mov	r1, r0
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0a9b      	lsrs	r3, r3, #10
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4a03      	ldr	r2, [pc, #12]	; (8003c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c46:	5cd3      	ldrb	r3, [r2, r3]
 8003c48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40023800 	.word	0x40023800
 8003c54:	080065e8 	.word	0x080065e8

08003c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c5c:	f7ff ffdc 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c60:	4601      	mov	r1, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0b5b      	lsrs	r3, r3, #13
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4a03      	ldr	r2, [pc, #12]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6e:	5cd3      	ldrb	r3, [r2, r3]
 8003c70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	080065e8 	.word	0x080065e8

08003c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e01d      	b.n	8003cce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fd fa06 	bl	80010b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f000 fb8c 	bl	80043dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0201 	orr.w	r2, r2, #1
 8003cec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d007      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0201 	bic.w	r2, r2, #1
 8003d34:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6a1a      	ldr	r2, [r3, #32]
 8003d3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10f      	bne.n	8003d66 <HAL_TIM_Base_Stop_IT+0x48>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	f240 4344 	movw	r3, #1092	; 0x444
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_TIM_Base_Stop_IT+0x48>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e01d      	b.n	8003dc2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fd f8a4 	bl	8000ee8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f000 fb12 	bl	80043dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	6839      	ldr	r1, [r7, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fd4c 	bl	800487c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <HAL_TIM_PWM_Start+0x74>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <HAL_TIM_PWM_Start+0x2c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <HAL_TIM_PWM_Start+0x78>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <HAL_TIM_PWM_Start+0x30>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <HAL_TIM_PWM_Start+0x32>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d007      	beq.n	8003e34 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40010000 	.word	0x40010000
 8003e44:	40010400 	.word	0x40010400

08003e48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e083      	b.n	8003f64 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7fd f887 	bl	8000f84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e8c:	f023 0307 	bic.w	r3, r3, #7
 8003e90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f000 fa9d 	bl	80043dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	4313      	orrs	r3, r2
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ee8:	f023 030c 	bic.w	r3, r3, #12
 8003eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	4313      	orrs	r3, r2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	011a      	lsls	r2, r3, #4
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	031b      	lsls	r3, r3, #12
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003f26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_TIM_Encoder_Start+0x16>
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d008      	beq.n	8003f92 <HAL_TIM_Encoder_Start+0x26>
 8003f80:	e00f      	b.n	8003fa2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2201      	movs	r2, #1
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fc76 	bl	800487c <TIM_CCxChannelCmd>
      break;
 8003f90:	e016      	b.n	8003fc0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2201      	movs	r2, #1
 8003f98:	2104      	movs	r1, #4
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fc6e 	bl	800487c <TIM_CCxChannelCmd>
      break;
 8003fa0:	e00e      	b.n	8003fc0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fc66 	bl	800487c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	2104      	movs	r1, #4
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fc5f 	bl	800487c <TIM_CCxChannelCmd>
      break;
 8003fbe:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d122      	bne.n	8004036 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d11b      	bne.n	8004036 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f06f 0202 	mvn.w	r2, #2
 8004006:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f9bf 	bl	80043a0 <HAL_TIM_IC_CaptureCallback>
 8004022:	e005      	b.n	8004030 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f9b1 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f9c2 	bl	80043b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b04      	cmp	r3, #4
 8004042:	d122      	bne.n	800408a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b04      	cmp	r3, #4
 8004050:	d11b      	bne.n	800408a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f06f 0204 	mvn.w	r2, #4
 800405a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f995 	bl	80043a0 <HAL_TIM_IC_CaptureCallback>
 8004076:	e005      	b.n	8004084 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f987 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f998 	bl	80043b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b08      	cmp	r3, #8
 8004096:	d122      	bne.n	80040de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d11b      	bne.n	80040de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 0208 	mvn.w	r2, #8
 80040ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2204      	movs	r2, #4
 80040b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f96b 	bl	80043a0 <HAL_TIM_IC_CaptureCallback>
 80040ca:	e005      	b.n	80040d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f95d 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f96e 	bl	80043b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d122      	bne.n	8004132 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0310 	and.w	r3, r3, #16
 80040f6:	2b10      	cmp	r3, #16
 80040f8:	d11b      	bne.n	8004132 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f06f 0210 	mvn.w	r2, #16
 8004102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2208      	movs	r2, #8
 8004108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f941 	bl	80043a0 <HAL_TIM_IC_CaptureCallback>
 800411e:	e005      	b.n	800412c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f933 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f944 	bl	80043b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d10e      	bne.n	800415e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d107      	bne.n	800415e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f06f 0201 	mvn.w	r2, #1
 8004156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f90d 	bl	8004378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004168:	2b80      	cmp	r3, #128	; 0x80
 800416a:	d10e      	bne.n	800418a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b80      	cmp	r3, #128	; 0x80
 8004178:	d107      	bne.n	800418a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fc77 	bl	8004a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d10e      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d107      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f909 	bl	80043c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d10e      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d107      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f06f 0220 	mvn.w	r2, #32
 80041da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fc41 	bl	8004a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004202:	2302      	movs	r3, #2
 8004204:	e0b4      	b.n	8004370 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2202      	movs	r2, #2
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b0c      	cmp	r3, #12
 800421a:	f200 809f 	bhi.w	800435c <HAL_TIM_PWM_ConfigChannel+0x170>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004259 	.word	0x08004259
 8004228:	0800435d 	.word	0x0800435d
 800422c:	0800435d 	.word	0x0800435d
 8004230:	0800435d 	.word	0x0800435d
 8004234:	08004299 	.word	0x08004299
 8004238:	0800435d 	.word	0x0800435d
 800423c:	0800435d 	.word	0x0800435d
 8004240:	0800435d 	.word	0x0800435d
 8004244:	080042db 	.word	0x080042db
 8004248:	0800435d 	.word	0x0800435d
 800424c:	0800435d 	.word	0x0800435d
 8004250:	0800435d 	.word	0x0800435d
 8004254:	0800431b 	.word	0x0800431b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f95c 	bl	800451c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0204 	bic.w	r2, r2, #4
 8004282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6999      	ldr	r1, [r3, #24]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	619a      	str	r2, [r3, #24]
      break;
 8004296:	e062      	b.n	800435e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f9ac 	bl	80045fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6999      	ldr	r1, [r3, #24]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	021a      	lsls	r2, r3, #8
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	619a      	str	r2, [r3, #24]
      break;
 80042d8:	e041      	b.n	800435e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fa01 	bl	80046e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0208 	orr.w	r2, r2, #8
 80042f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0204 	bic.w	r2, r2, #4
 8004304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69d9      	ldr	r1, [r3, #28]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	61da      	str	r2, [r3, #28]
      break;
 8004318:	e021      	b.n	800435e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fa55 	bl	80047d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69d9      	ldr	r1, [r3, #28]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	021a      	lsls	r2, r3, #8
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	61da      	str	r2, [r3, #28]
      break;
 800435a:	e000      	b.n	800435e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800435c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a40      	ldr	r2, [pc, #256]	; (80044f0 <TIM_Base_SetConfig+0x114>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fa:	d00f      	beq.n	800441c <TIM_Base_SetConfig+0x40>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a3d      	ldr	r2, [pc, #244]	; (80044f4 <TIM_Base_SetConfig+0x118>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00b      	beq.n	800441c <TIM_Base_SetConfig+0x40>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a3c      	ldr	r2, [pc, #240]	; (80044f8 <TIM_Base_SetConfig+0x11c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d007      	beq.n	800441c <TIM_Base_SetConfig+0x40>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a3b      	ldr	r2, [pc, #236]	; (80044fc <TIM_Base_SetConfig+0x120>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_Base_SetConfig+0x40>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a3a      	ldr	r2, [pc, #232]	; (8004500 <TIM_Base_SetConfig+0x124>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d108      	bne.n	800442e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2f      	ldr	r2, [pc, #188]	; (80044f0 <TIM_Base_SetConfig+0x114>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d02b      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443c:	d027      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2c      	ldr	r2, [pc, #176]	; (80044f4 <TIM_Base_SetConfig+0x118>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d023      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a2b      	ldr	r2, [pc, #172]	; (80044f8 <TIM_Base_SetConfig+0x11c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01f      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a2a      	ldr	r2, [pc, #168]	; (80044fc <TIM_Base_SetConfig+0x120>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d01b      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a29      	ldr	r2, [pc, #164]	; (8004500 <TIM_Base_SetConfig+0x124>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d017      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a28      	ldr	r2, [pc, #160]	; (8004504 <TIM_Base_SetConfig+0x128>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a27      	ldr	r2, [pc, #156]	; (8004508 <TIM_Base_SetConfig+0x12c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00f      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a26      	ldr	r2, [pc, #152]	; (800450c <TIM_Base_SetConfig+0x130>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00b      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a25      	ldr	r2, [pc, #148]	; (8004510 <TIM_Base_SetConfig+0x134>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d007      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a24      	ldr	r2, [pc, #144]	; (8004514 <TIM_Base_SetConfig+0x138>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d003      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a23      	ldr	r2, [pc, #140]	; (8004518 <TIM_Base_SetConfig+0x13c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d108      	bne.n	80044a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <TIM_Base_SetConfig+0x114>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_Base_SetConfig+0xf8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <TIM_Base_SetConfig+0x124>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d103      	bne.n	80044dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	615a      	str	r2, [r3, #20]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40010000 	.word	0x40010000
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40000c00 	.word	0x40000c00
 8004500:	40010400 	.word	0x40010400
 8004504:	40014000 	.word	0x40014000
 8004508:	40014400 	.word	0x40014400
 800450c:	40014800 	.word	0x40014800
 8004510:	40001800 	.word	0x40001800
 8004514:	40001c00 	.word	0x40001c00
 8004518:	40002000 	.word	0x40002000

0800451c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f023 0201 	bic.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0303 	bic.w	r3, r3, #3
 8004552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f023 0302 	bic.w	r3, r3, #2
 8004564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a20      	ldr	r2, [pc, #128]	; (80045f4 <TIM_OC1_SetConfig+0xd8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d003      	beq.n	8004580 <TIM_OC1_SetConfig+0x64>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a1f      	ldr	r2, [pc, #124]	; (80045f8 <TIM_OC1_SetConfig+0xdc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d10c      	bne.n	800459a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f023 0308 	bic.w	r3, r3, #8
 8004586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <TIM_OC1_SetConfig+0xd8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d003      	beq.n	80045aa <TIM_OC1_SetConfig+0x8e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <TIM_OC1_SetConfig+0xdc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d111      	bne.n	80045ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	621a      	str	r2, [r3, #32]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40010000 	.word	0x40010000
 80045f8:	40010400 	.word	0x40010400

080045fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f023 0210 	bic.w	r2, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0320 	bic.w	r3, r3, #32
 8004646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a22      	ldr	r2, [pc, #136]	; (80046e0 <TIM_OC2_SetConfig+0xe4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d003      	beq.n	8004664 <TIM_OC2_SetConfig+0x68>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a21      	ldr	r2, [pc, #132]	; (80046e4 <TIM_OC2_SetConfig+0xe8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d10d      	bne.n	8004680 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800466a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800467e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <TIM_OC2_SetConfig+0xe4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_OC2_SetConfig+0x94>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a16      	ldr	r2, [pc, #88]	; (80046e4 <TIM_OC2_SetConfig+0xe8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d113      	bne.n	80046b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800469e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40010400 	.word	0x40010400

080046e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a21      	ldr	r2, [pc, #132]	; (80047c8 <TIM_OC3_SetConfig+0xe0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d003      	beq.n	800474e <TIM_OC3_SetConfig+0x66>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a20      	ldr	r2, [pc, #128]	; (80047cc <TIM_OC3_SetConfig+0xe4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10d      	bne.n	800476a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a16      	ldr	r2, [pc, #88]	; (80047c8 <TIM_OC3_SetConfig+0xe0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_OC3_SetConfig+0x92>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a15      	ldr	r2, [pc, #84]	; (80047cc <TIM_OC3_SetConfig+0xe4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d113      	bne.n	80047a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	621a      	str	r2, [r3, #32]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40010000 	.word	0x40010000
 80047cc:	40010400 	.word	0x40010400

080047d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800481a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	031b      	lsls	r3, r3, #12
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a12      	ldr	r2, [pc, #72]	; (8004874 <TIM_OC4_SetConfig+0xa4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_OC4_SetConfig+0x68>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a11      	ldr	r2, [pc, #68]	; (8004878 <TIM_OC4_SetConfig+0xa8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d109      	bne.n	800484c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800483e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	019b      	lsls	r3, r3, #6
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40010000 	.word	0x40010000
 8004878:	40010400 	.word	0x40010400

0800487c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 031f 	and.w	r3, r3, #31
 800488e:	2201      	movs	r2, #1
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1a      	ldr	r2, [r3, #32]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	43db      	mvns	r3, r3
 800489e:	401a      	ands	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1a      	ldr	r2, [r3, #32]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	fa01 f303 	lsl.w	r3, r1, r3
 80048b4:	431a      	orrs	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048dc:	2302      	movs	r3, #2
 80048de:	e05a      	b.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a21      	ldr	r2, [pc, #132]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d022      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492c:	d01d      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d018      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1a      	ldr	r2, [pc, #104]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a18      	ldr	r2, [pc, #96]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a15      	ldr	r2, [pc, #84]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d10c      	bne.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	40000c00 	.word	0x40000c00
 80049b4:	40010400 	.word	0x40010400
 80049b8:	40014000 	.word	0x40014000
 80049bc:	40001800 	.word	0x40001800

080049c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049d8:	2302      	movs	r3, #2
 80049da:	e03d      	b.n	8004a58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e03f      	b.n	8004b1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc fbb4 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2224      	movs	r2, #36	; 0x24
 8004abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f90b 	bl	8004cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b088      	sub	sp, #32
 8004b2a:	af02      	add	r7, sp, #8
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	4613      	mov	r3, r2
 8004b34:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	f040 8083 	bne.w	8004c4e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_UART_Transmit+0x2e>
 8004b4e:	88fb      	ldrh	r3, [r7, #6]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e07b      	b.n	8004c50 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Transmit+0x40>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e074      	b.n	8004c50 <HAL_UART_Transmit+0x12a>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2221      	movs	r2, #33	; 0x21
 8004b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b7c:	f7fd fcac 	bl	80024d8 <HAL_GetTick>
 8004b80:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	88fa      	ldrh	r2, [r7, #6]
 8004b86:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004b96:	e042      	b.n	8004c1e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bae:	d122      	bne.n	8004bf6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2180      	movs	r1, #128	; 0x80
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f84c 	bl	8004c58 <UART_WaitOnFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e042      	b.n	8004c50 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bdc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	3302      	adds	r3, #2
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	e017      	b.n	8004c1e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	e013      	b.n	8004c1e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2180      	movs	r1, #128	; 0x80
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f829 	bl	8004c58 <UART_WaitOnFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e01f      	b.n	8004c50 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	60ba      	str	r2, [r7, #8]
 8004c16:	781a      	ldrb	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1b7      	bne.n	8004b98 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2140      	movs	r1, #64	; 0x40
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f810 	bl	8004c58 <UART_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e006      	b.n	8004c50 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e000      	b.n	8004c50 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
  }
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	4613      	mov	r3, r2
 8004c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c68:	e02c      	b.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d028      	beq.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c78:	f7fd fc2e 	bl	80024d8 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d21d      	bcs.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e00f      	b.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d0c3      	beq.n	8004c6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d2e:	f023 030c 	bic.w	r3, r3, #12
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	68f9      	ldr	r1, [r7, #12]
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d5a:	f040 818b 	bne.w	8005074 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4ac1      	ldr	r2, [pc, #772]	; (8005068 <UART_SetConfig+0x37c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d005      	beq.n	8004d74 <UART_SetConfig+0x88>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4abf      	ldr	r2, [pc, #764]	; (800506c <UART_SetConfig+0x380>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	f040 80bd 	bne.w	8004eee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d74:	f7fe ff70 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8004d78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	461d      	mov	r5, r3
 8004d7e:	f04f 0600 	mov.w	r6, #0
 8004d82:	46a8      	mov	r8, r5
 8004d84:	46b1      	mov	r9, r6
 8004d86:	eb18 0308 	adds.w	r3, r8, r8
 8004d8a:	eb49 0409 	adc.w	r4, r9, r9
 8004d8e:	4698      	mov	r8, r3
 8004d90:	46a1      	mov	r9, r4
 8004d92:	eb18 0805 	adds.w	r8, r8, r5
 8004d96:	eb49 0906 	adc.w	r9, r9, r6
 8004d9a:	f04f 0100 	mov.w	r1, #0
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004da6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004daa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004dae:	4688      	mov	r8, r1
 8004db0:	4691      	mov	r9, r2
 8004db2:	eb18 0005 	adds.w	r0, r8, r5
 8004db6:	eb49 0106 	adc.w	r1, r9, r6
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	461d      	mov	r5, r3
 8004dc0:	f04f 0600 	mov.w	r6, #0
 8004dc4:	196b      	adds	r3, r5, r5
 8004dc6:	eb46 0406 	adc.w	r4, r6, r6
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4623      	mov	r3, r4
 8004dce:	f7fb fa4f 	bl	8000270 <__aeabi_uldivmod>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4ba5      	ldr	r3, [pc, #660]	; (8005070 <UART_SetConfig+0x384>)
 8004dda:	fba3 2302 	umull	r2, r3, r3, r2
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	461d      	mov	r5, r3
 8004de8:	f04f 0600 	mov.w	r6, #0
 8004dec:	46a9      	mov	r9, r5
 8004dee:	46b2      	mov	sl, r6
 8004df0:	eb19 0309 	adds.w	r3, r9, r9
 8004df4:	eb4a 040a 	adc.w	r4, sl, sl
 8004df8:	4699      	mov	r9, r3
 8004dfa:	46a2      	mov	sl, r4
 8004dfc:	eb19 0905 	adds.w	r9, r9, r5
 8004e00:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e04:	f04f 0100 	mov.w	r1, #0
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e18:	4689      	mov	r9, r1
 8004e1a:	4692      	mov	sl, r2
 8004e1c:	eb19 0005 	adds.w	r0, r9, r5
 8004e20:	eb4a 0106 	adc.w	r1, sl, r6
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	461d      	mov	r5, r3
 8004e2a:	f04f 0600 	mov.w	r6, #0
 8004e2e:	196b      	adds	r3, r5, r5
 8004e30:	eb46 0406 	adc.w	r4, r6, r6
 8004e34:	461a      	mov	r2, r3
 8004e36:	4623      	mov	r3, r4
 8004e38:	f7fb fa1a 	bl	8000270 <__aeabi_uldivmod>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	460c      	mov	r4, r1
 8004e40:	461a      	mov	r2, r3
 8004e42:	4b8b      	ldr	r3, [pc, #556]	; (8005070 <UART_SetConfig+0x384>)
 8004e44:	fba3 1302 	umull	r1, r3, r3, r2
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	2164      	movs	r1, #100	; 0x64
 8004e4c:	fb01 f303 	mul.w	r3, r1, r3
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	3332      	adds	r3, #50	; 0x32
 8004e56:	4a86      	ldr	r2, [pc, #536]	; (8005070 <UART_SetConfig+0x384>)
 8004e58:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e64:	4498      	add	r8, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	461d      	mov	r5, r3
 8004e6a:	f04f 0600 	mov.w	r6, #0
 8004e6e:	46a9      	mov	r9, r5
 8004e70:	46b2      	mov	sl, r6
 8004e72:	eb19 0309 	adds.w	r3, r9, r9
 8004e76:	eb4a 040a 	adc.w	r4, sl, sl
 8004e7a:	4699      	mov	r9, r3
 8004e7c:	46a2      	mov	sl, r4
 8004e7e:	eb19 0905 	adds.w	r9, r9, r5
 8004e82:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e86:	f04f 0100 	mov.w	r1, #0
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e9a:	4689      	mov	r9, r1
 8004e9c:	4692      	mov	sl, r2
 8004e9e:	eb19 0005 	adds.w	r0, r9, r5
 8004ea2:	eb4a 0106 	adc.w	r1, sl, r6
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	461d      	mov	r5, r3
 8004eac:	f04f 0600 	mov.w	r6, #0
 8004eb0:	196b      	adds	r3, r5, r5
 8004eb2:	eb46 0406 	adc.w	r4, r6, r6
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4623      	mov	r3, r4
 8004eba:	f7fb f9d9 	bl	8000270 <__aeabi_uldivmod>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4b6a      	ldr	r3, [pc, #424]	; (8005070 <UART_SetConfig+0x384>)
 8004ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2164      	movs	r1, #100	; 0x64
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	3332      	adds	r3, #50	; 0x32
 8004ed8:	4a65      	ldr	r2, [pc, #404]	; (8005070 <UART_SetConfig+0x384>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	f003 0207 	and.w	r2, r3, #7
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4442      	add	r2, r8
 8004eea:	609a      	str	r2, [r3, #8]
 8004eec:	e26f      	b.n	80053ce <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004eee:	f7fe fe9f 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8004ef2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	461d      	mov	r5, r3
 8004ef8:	f04f 0600 	mov.w	r6, #0
 8004efc:	46a8      	mov	r8, r5
 8004efe:	46b1      	mov	r9, r6
 8004f00:	eb18 0308 	adds.w	r3, r8, r8
 8004f04:	eb49 0409 	adc.w	r4, r9, r9
 8004f08:	4698      	mov	r8, r3
 8004f0a:	46a1      	mov	r9, r4
 8004f0c:	eb18 0805 	adds.w	r8, r8, r5
 8004f10:	eb49 0906 	adc.w	r9, r9, r6
 8004f14:	f04f 0100 	mov.w	r1, #0
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f28:	4688      	mov	r8, r1
 8004f2a:	4691      	mov	r9, r2
 8004f2c:	eb18 0005 	adds.w	r0, r8, r5
 8004f30:	eb49 0106 	adc.w	r1, r9, r6
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	461d      	mov	r5, r3
 8004f3a:	f04f 0600 	mov.w	r6, #0
 8004f3e:	196b      	adds	r3, r5, r5
 8004f40:	eb46 0406 	adc.w	r4, r6, r6
 8004f44:	461a      	mov	r2, r3
 8004f46:	4623      	mov	r3, r4
 8004f48:	f7fb f992 	bl	8000270 <__aeabi_uldivmod>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	461a      	mov	r2, r3
 8004f52:	4b47      	ldr	r3, [pc, #284]	; (8005070 <UART_SetConfig+0x384>)
 8004f54:	fba3 2302 	umull	r2, r3, r3, r2
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	461d      	mov	r5, r3
 8004f62:	f04f 0600 	mov.w	r6, #0
 8004f66:	46a9      	mov	r9, r5
 8004f68:	46b2      	mov	sl, r6
 8004f6a:	eb19 0309 	adds.w	r3, r9, r9
 8004f6e:	eb4a 040a 	adc.w	r4, sl, sl
 8004f72:	4699      	mov	r9, r3
 8004f74:	46a2      	mov	sl, r4
 8004f76:	eb19 0905 	adds.w	r9, r9, r5
 8004f7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f7e:	f04f 0100 	mov.w	r1, #0
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f92:	4689      	mov	r9, r1
 8004f94:	4692      	mov	sl, r2
 8004f96:	eb19 0005 	adds.w	r0, r9, r5
 8004f9a:	eb4a 0106 	adc.w	r1, sl, r6
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	f04f 0600 	mov.w	r6, #0
 8004fa8:	196b      	adds	r3, r5, r5
 8004faa:	eb46 0406 	adc.w	r4, r6, r6
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	f7fb f95d 	bl	8000270 <__aeabi_uldivmod>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	461a      	mov	r2, r3
 8004fbc:	4b2c      	ldr	r3, [pc, #176]	; (8005070 <UART_SetConfig+0x384>)
 8004fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	2164      	movs	r1, #100	; 0x64
 8004fc6:	fb01 f303 	mul.w	r3, r1, r3
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	3332      	adds	r3, #50	; 0x32
 8004fd0:	4a27      	ldr	r2, [pc, #156]	; (8005070 <UART_SetConfig+0x384>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fde:	4498      	add	r8, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	f04f 0600 	mov.w	r6, #0
 8004fe8:	46a9      	mov	r9, r5
 8004fea:	46b2      	mov	sl, r6
 8004fec:	eb19 0309 	adds.w	r3, r9, r9
 8004ff0:	eb4a 040a 	adc.w	r4, sl, sl
 8004ff4:	4699      	mov	r9, r3
 8004ff6:	46a2      	mov	sl, r4
 8004ff8:	eb19 0905 	adds.w	r9, r9, r5
 8004ffc:	eb4a 0a06 	adc.w	sl, sl, r6
 8005000:	f04f 0100 	mov.w	r1, #0
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800500c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005010:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005014:	4689      	mov	r9, r1
 8005016:	4692      	mov	sl, r2
 8005018:	eb19 0005 	adds.w	r0, r9, r5
 800501c:	eb4a 0106 	adc.w	r1, sl, r6
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	461d      	mov	r5, r3
 8005026:	f04f 0600 	mov.w	r6, #0
 800502a:	196b      	adds	r3, r5, r5
 800502c:	eb46 0406 	adc.w	r4, r6, r6
 8005030:	461a      	mov	r2, r3
 8005032:	4623      	mov	r3, r4
 8005034:	f7fb f91c 	bl	8000270 <__aeabi_uldivmod>
 8005038:	4603      	mov	r3, r0
 800503a:	460c      	mov	r4, r1
 800503c:	461a      	mov	r2, r3
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <UART_SetConfig+0x384>)
 8005040:	fba3 1302 	umull	r1, r3, r3, r2
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	2164      	movs	r1, #100	; 0x64
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	3332      	adds	r3, #50	; 0x32
 8005052:	4a07      	ldr	r2, [pc, #28]	; (8005070 <UART_SetConfig+0x384>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	f003 0207 	and.w	r2, r3, #7
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4442      	add	r2, r8
 8005064:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005066:	e1b2      	b.n	80053ce <UART_SetConfig+0x6e2>
 8005068:	40011000 	.word	0x40011000
 800506c:	40011400 	.word	0x40011400
 8005070:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4ad7      	ldr	r2, [pc, #860]	; (80053d8 <UART_SetConfig+0x6ec>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d005      	beq.n	800508a <UART_SetConfig+0x39e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4ad6      	ldr	r2, [pc, #856]	; (80053dc <UART_SetConfig+0x6f0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	f040 80d1 	bne.w	800522c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800508a:	f7fe fde5 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 800508e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	469a      	mov	sl, r3
 8005094:	f04f 0b00 	mov.w	fp, #0
 8005098:	46d0      	mov	r8, sl
 800509a:	46d9      	mov	r9, fp
 800509c:	eb18 0308 	adds.w	r3, r8, r8
 80050a0:	eb49 0409 	adc.w	r4, r9, r9
 80050a4:	4698      	mov	r8, r3
 80050a6:	46a1      	mov	r9, r4
 80050a8:	eb18 080a 	adds.w	r8, r8, sl
 80050ac:	eb49 090b 	adc.w	r9, r9, fp
 80050b0:	f04f 0100 	mov.w	r1, #0
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050c4:	4688      	mov	r8, r1
 80050c6:	4691      	mov	r9, r2
 80050c8:	eb1a 0508 	adds.w	r5, sl, r8
 80050cc:	eb4b 0609 	adc.w	r6, fp, r9
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	4619      	mov	r1, r3
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	f04f 0400 	mov.w	r4, #0
 80050e2:	0094      	lsls	r4, r2, #2
 80050e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050e8:	008b      	lsls	r3, r1, #2
 80050ea:	461a      	mov	r2, r3
 80050ec:	4623      	mov	r3, r4
 80050ee:	4628      	mov	r0, r5
 80050f0:	4631      	mov	r1, r6
 80050f2:	f7fb f8bd 	bl	8000270 <__aeabi_uldivmod>
 80050f6:	4603      	mov	r3, r0
 80050f8:	460c      	mov	r4, r1
 80050fa:	461a      	mov	r2, r3
 80050fc:	4bb8      	ldr	r3, [pc, #736]	; (80053e0 <UART_SetConfig+0x6f4>)
 80050fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	469b      	mov	fp, r3
 800510c:	f04f 0c00 	mov.w	ip, #0
 8005110:	46d9      	mov	r9, fp
 8005112:	46e2      	mov	sl, ip
 8005114:	eb19 0309 	adds.w	r3, r9, r9
 8005118:	eb4a 040a 	adc.w	r4, sl, sl
 800511c:	4699      	mov	r9, r3
 800511e:	46a2      	mov	sl, r4
 8005120:	eb19 090b 	adds.w	r9, r9, fp
 8005124:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005128:	f04f 0100 	mov.w	r1, #0
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005134:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005138:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800513c:	4689      	mov	r9, r1
 800513e:	4692      	mov	sl, r2
 8005140:	eb1b 0509 	adds.w	r5, fp, r9
 8005144:	eb4c 060a 	adc.w	r6, ip, sl
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	4619      	mov	r1, r3
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	f04f 0400 	mov.w	r4, #0
 800515a:	0094      	lsls	r4, r2, #2
 800515c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005160:	008b      	lsls	r3, r1, #2
 8005162:	461a      	mov	r2, r3
 8005164:	4623      	mov	r3, r4
 8005166:	4628      	mov	r0, r5
 8005168:	4631      	mov	r1, r6
 800516a:	f7fb f881 	bl	8000270 <__aeabi_uldivmod>
 800516e:	4603      	mov	r3, r0
 8005170:	460c      	mov	r4, r1
 8005172:	461a      	mov	r2, r3
 8005174:	4b9a      	ldr	r3, [pc, #616]	; (80053e0 <UART_SetConfig+0x6f4>)
 8005176:	fba3 1302 	umull	r1, r3, r3, r2
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2164      	movs	r1, #100	; 0x64
 800517e:	fb01 f303 	mul.w	r3, r1, r3
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	3332      	adds	r3, #50	; 0x32
 8005188:	4a95      	ldr	r2, [pc, #596]	; (80053e0 <UART_SetConfig+0x6f4>)
 800518a:	fba2 2303 	umull	r2, r3, r2, r3
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005194:	4498      	add	r8, r3
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	469b      	mov	fp, r3
 800519a:	f04f 0c00 	mov.w	ip, #0
 800519e:	46d9      	mov	r9, fp
 80051a0:	46e2      	mov	sl, ip
 80051a2:	eb19 0309 	adds.w	r3, r9, r9
 80051a6:	eb4a 040a 	adc.w	r4, sl, sl
 80051aa:	4699      	mov	r9, r3
 80051ac:	46a2      	mov	sl, r4
 80051ae:	eb19 090b 	adds.w	r9, r9, fp
 80051b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051b6:	f04f 0100 	mov.w	r1, #0
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051ca:	4689      	mov	r9, r1
 80051cc:	4692      	mov	sl, r2
 80051ce:	eb1b 0509 	adds.w	r5, fp, r9
 80051d2:	eb4c 060a 	adc.w	r6, ip, sl
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	4619      	mov	r1, r3
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	f04f 0400 	mov.w	r4, #0
 80051e8:	0094      	lsls	r4, r2, #2
 80051ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051ee:	008b      	lsls	r3, r1, #2
 80051f0:	461a      	mov	r2, r3
 80051f2:	4623      	mov	r3, r4
 80051f4:	4628      	mov	r0, r5
 80051f6:	4631      	mov	r1, r6
 80051f8:	f7fb f83a 	bl	8000270 <__aeabi_uldivmod>
 80051fc:	4603      	mov	r3, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	461a      	mov	r2, r3
 8005202:	4b77      	ldr	r3, [pc, #476]	; (80053e0 <UART_SetConfig+0x6f4>)
 8005204:	fba3 1302 	umull	r1, r3, r3, r2
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	2164      	movs	r1, #100	; 0x64
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	3332      	adds	r3, #50	; 0x32
 8005216:	4a72      	ldr	r2, [pc, #456]	; (80053e0 <UART_SetConfig+0x6f4>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	f003 020f 	and.w	r2, r3, #15
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4442      	add	r2, r8
 8005228:	609a      	str	r2, [r3, #8]
 800522a:	e0d0      	b.n	80053ce <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800522c:	f7fe fd00 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8005230:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	469a      	mov	sl, r3
 8005236:	f04f 0b00 	mov.w	fp, #0
 800523a:	46d0      	mov	r8, sl
 800523c:	46d9      	mov	r9, fp
 800523e:	eb18 0308 	adds.w	r3, r8, r8
 8005242:	eb49 0409 	adc.w	r4, r9, r9
 8005246:	4698      	mov	r8, r3
 8005248:	46a1      	mov	r9, r4
 800524a:	eb18 080a 	adds.w	r8, r8, sl
 800524e:	eb49 090b 	adc.w	r9, r9, fp
 8005252:	f04f 0100 	mov.w	r1, #0
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800525e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005262:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005266:	4688      	mov	r8, r1
 8005268:	4691      	mov	r9, r2
 800526a:	eb1a 0508 	adds.w	r5, sl, r8
 800526e:	eb4b 0609 	adc.w	r6, fp, r9
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4619      	mov	r1, r3
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	f04f 0400 	mov.w	r4, #0
 8005284:	0094      	lsls	r4, r2, #2
 8005286:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800528a:	008b      	lsls	r3, r1, #2
 800528c:	461a      	mov	r2, r3
 800528e:	4623      	mov	r3, r4
 8005290:	4628      	mov	r0, r5
 8005292:	4631      	mov	r1, r6
 8005294:	f7fa ffec 	bl	8000270 <__aeabi_uldivmod>
 8005298:	4603      	mov	r3, r0
 800529a:	460c      	mov	r4, r1
 800529c:	461a      	mov	r2, r3
 800529e:	4b50      	ldr	r3, [pc, #320]	; (80053e0 <UART_SetConfig+0x6f4>)
 80052a0:	fba3 2302 	umull	r2, r3, r3, r2
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	469b      	mov	fp, r3
 80052ae:	f04f 0c00 	mov.w	ip, #0
 80052b2:	46d9      	mov	r9, fp
 80052b4:	46e2      	mov	sl, ip
 80052b6:	eb19 0309 	adds.w	r3, r9, r9
 80052ba:	eb4a 040a 	adc.w	r4, sl, sl
 80052be:	4699      	mov	r9, r3
 80052c0:	46a2      	mov	sl, r4
 80052c2:	eb19 090b 	adds.w	r9, r9, fp
 80052c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052ca:	f04f 0100 	mov.w	r1, #0
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052de:	4689      	mov	r9, r1
 80052e0:	4692      	mov	sl, r2
 80052e2:	eb1b 0509 	adds.w	r5, fp, r9
 80052e6:	eb4c 060a 	adc.w	r6, ip, sl
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	4619      	mov	r1, r3
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	f04f 0400 	mov.w	r4, #0
 80052fc:	0094      	lsls	r4, r2, #2
 80052fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005302:	008b      	lsls	r3, r1, #2
 8005304:	461a      	mov	r2, r3
 8005306:	4623      	mov	r3, r4
 8005308:	4628      	mov	r0, r5
 800530a:	4631      	mov	r1, r6
 800530c:	f7fa ffb0 	bl	8000270 <__aeabi_uldivmod>
 8005310:	4603      	mov	r3, r0
 8005312:	460c      	mov	r4, r1
 8005314:	461a      	mov	r2, r3
 8005316:	4b32      	ldr	r3, [pc, #200]	; (80053e0 <UART_SetConfig+0x6f4>)
 8005318:	fba3 1302 	umull	r1, r3, r3, r2
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	2164      	movs	r1, #100	; 0x64
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	3332      	adds	r3, #50	; 0x32
 800532a:	4a2d      	ldr	r2, [pc, #180]	; (80053e0 <UART_SetConfig+0x6f4>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005336:	4498      	add	r8, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	469b      	mov	fp, r3
 800533c:	f04f 0c00 	mov.w	ip, #0
 8005340:	46d9      	mov	r9, fp
 8005342:	46e2      	mov	sl, ip
 8005344:	eb19 0309 	adds.w	r3, r9, r9
 8005348:	eb4a 040a 	adc.w	r4, sl, sl
 800534c:	4699      	mov	r9, r3
 800534e:	46a2      	mov	sl, r4
 8005350:	eb19 090b 	adds.w	r9, r9, fp
 8005354:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005358:	f04f 0100 	mov.w	r1, #0
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005364:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005368:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800536c:	4689      	mov	r9, r1
 800536e:	4692      	mov	sl, r2
 8005370:	eb1b 0509 	adds.w	r5, fp, r9
 8005374:	eb4c 060a 	adc.w	r6, ip, sl
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4619      	mov	r1, r3
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	f04f 0400 	mov.w	r4, #0
 800538a:	0094      	lsls	r4, r2, #2
 800538c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005390:	008b      	lsls	r3, r1, #2
 8005392:	461a      	mov	r2, r3
 8005394:	4623      	mov	r3, r4
 8005396:	4628      	mov	r0, r5
 8005398:	4631      	mov	r1, r6
 800539a:	f7fa ff69 	bl	8000270 <__aeabi_uldivmod>
 800539e:	4603      	mov	r3, r0
 80053a0:	460c      	mov	r4, r1
 80053a2:	461a      	mov	r2, r3
 80053a4:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <UART_SetConfig+0x6f4>)
 80053a6:	fba3 1302 	umull	r1, r3, r3, r2
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	2164      	movs	r1, #100	; 0x64
 80053ae:	fb01 f303 	mul.w	r3, r1, r3
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	3332      	adds	r3, #50	; 0x32
 80053b8:	4a09      	ldr	r2, [pc, #36]	; (80053e0 <UART_SetConfig+0x6f4>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	f003 020f 	and.w	r2, r3, #15
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4442      	add	r2, r8
 80053ca:	609a      	str	r2, [r3, #8]
}
 80053cc:	e7ff      	b.n	80053ce <UART_SetConfig+0x6e2>
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d8:	40011000 	.word	0x40011000
 80053dc:	40011400 	.word	0x40011400
 80053e0:	51eb851f 	.word	0x51eb851f

080053e4 <__errno>:
 80053e4:	4b01      	ldr	r3, [pc, #4]	; (80053ec <__errno+0x8>)
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000024 	.word	0x20000024

080053f0 <__libc_init_array>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	4e0d      	ldr	r6, [pc, #52]	; (8005428 <__libc_init_array+0x38>)
 80053f4:	4c0d      	ldr	r4, [pc, #52]	; (800542c <__libc_init_array+0x3c>)
 80053f6:	1ba4      	subs	r4, r4, r6
 80053f8:	10a4      	asrs	r4, r4, #2
 80053fa:	2500      	movs	r5, #0
 80053fc:	42a5      	cmp	r5, r4
 80053fe:	d109      	bne.n	8005414 <__libc_init_array+0x24>
 8005400:	4e0b      	ldr	r6, [pc, #44]	; (8005430 <__libc_init_array+0x40>)
 8005402:	4c0c      	ldr	r4, [pc, #48]	; (8005434 <__libc_init_array+0x44>)
 8005404:	f000 ffe8 	bl	80063d8 <_init>
 8005408:	1ba4      	subs	r4, r4, r6
 800540a:	10a4      	asrs	r4, r4, #2
 800540c:	2500      	movs	r5, #0
 800540e:	42a5      	cmp	r5, r4
 8005410:	d105      	bne.n	800541e <__libc_init_array+0x2e>
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005418:	4798      	blx	r3
 800541a:	3501      	adds	r5, #1
 800541c:	e7ee      	b.n	80053fc <__libc_init_array+0xc>
 800541e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005422:	4798      	blx	r3
 8005424:	3501      	adds	r5, #1
 8005426:	e7f2      	b.n	800540e <__libc_init_array+0x1e>
 8005428:	08008358 	.word	0x08008358
 800542c:	08008358 	.word	0x08008358
 8005430:	08008358 	.word	0x08008358
 8005434:	0800835c 	.word	0x0800835c

08005438 <memset>:
 8005438:	4402      	add	r2, r0
 800543a:	4603      	mov	r3, r0
 800543c:	4293      	cmp	r3, r2
 800543e:	d100      	bne.n	8005442 <memset+0xa>
 8005440:	4770      	bx	lr
 8005442:	f803 1b01 	strb.w	r1, [r3], #1
 8005446:	e7f9      	b.n	800543c <memset+0x4>

08005448 <_puts_r>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	460e      	mov	r6, r1
 800544c:	4605      	mov	r5, r0
 800544e:	b118      	cbz	r0, 8005458 <_puts_r+0x10>
 8005450:	6983      	ldr	r3, [r0, #24]
 8005452:	b90b      	cbnz	r3, 8005458 <_puts_r+0x10>
 8005454:	f000 fa40 	bl	80058d8 <__sinit>
 8005458:	69ab      	ldr	r3, [r5, #24]
 800545a:	68ac      	ldr	r4, [r5, #8]
 800545c:	b913      	cbnz	r3, 8005464 <_puts_r+0x1c>
 800545e:	4628      	mov	r0, r5
 8005460:	f000 fa3a 	bl	80058d8 <__sinit>
 8005464:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <_puts_r+0xac>)
 8005466:	429c      	cmp	r4, r3
 8005468:	d117      	bne.n	800549a <_puts_r+0x52>
 800546a:	686c      	ldr	r4, [r5, #4]
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	071b      	lsls	r3, r3, #28
 8005470:	d51d      	bpl.n	80054ae <_puts_r+0x66>
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	b1db      	cbz	r3, 80054ae <_puts_r+0x66>
 8005476:	3e01      	subs	r6, #1
 8005478:	68a3      	ldr	r3, [r4, #8]
 800547a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800547e:	3b01      	subs	r3, #1
 8005480:	60a3      	str	r3, [r4, #8]
 8005482:	b9e9      	cbnz	r1, 80054c0 <_puts_r+0x78>
 8005484:	2b00      	cmp	r3, #0
 8005486:	da2e      	bge.n	80054e6 <_puts_r+0x9e>
 8005488:	4622      	mov	r2, r4
 800548a:	210a      	movs	r1, #10
 800548c:	4628      	mov	r0, r5
 800548e:	f000 f873 	bl	8005578 <__swbuf_r>
 8005492:	3001      	adds	r0, #1
 8005494:	d011      	beq.n	80054ba <_puts_r+0x72>
 8005496:	200a      	movs	r0, #10
 8005498:	e011      	b.n	80054be <_puts_r+0x76>
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <_puts_r+0xb0>)
 800549c:	429c      	cmp	r4, r3
 800549e:	d101      	bne.n	80054a4 <_puts_r+0x5c>
 80054a0:	68ac      	ldr	r4, [r5, #8]
 80054a2:	e7e3      	b.n	800546c <_puts_r+0x24>
 80054a4:	4b15      	ldr	r3, [pc, #84]	; (80054fc <_puts_r+0xb4>)
 80054a6:	429c      	cmp	r4, r3
 80054a8:	bf08      	it	eq
 80054aa:	68ec      	ldreq	r4, [r5, #12]
 80054ac:	e7de      	b.n	800546c <_puts_r+0x24>
 80054ae:	4621      	mov	r1, r4
 80054b0:	4628      	mov	r0, r5
 80054b2:	f000 f8b3 	bl	800561c <__swsetup_r>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d0dd      	beq.n	8005476 <_puts_r+0x2e>
 80054ba:	f04f 30ff 	mov.w	r0, #4294967295
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	da04      	bge.n	80054ce <_puts_r+0x86>
 80054c4:	69a2      	ldr	r2, [r4, #24]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	dc06      	bgt.n	80054d8 <_puts_r+0x90>
 80054ca:	290a      	cmp	r1, #10
 80054cc:	d004      	beq.n	80054d8 <_puts_r+0x90>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	6022      	str	r2, [r4, #0]
 80054d4:	7019      	strb	r1, [r3, #0]
 80054d6:	e7cf      	b.n	8005478 <_puts_r+0x30>
 80054d8:	4622      	mov	r2, r4
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 f84c 	bl	8005578 <__swbuf_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d1c9      	bne.n	8005478 <_puts_r+0x30>
 80054e4:	e7e9      	b.n	80054ba <_puts_r+0x72>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	200a      	movs	r0, #10
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	6022      	str	r2, [r4, #0]
 80054ee:	7018      	strb	r0, [r3, #0]
 80054f0:	e7e5      	b.n	80054be <_puts_r+0x76>
 80054f2:	bf00      	nop
 80054f4:	080082dc 	.word	0x080082dc
 80054f8:	080082fc 	.word	0x080082fc
 80054fc:	080082bc 	.word	0x080082bc

08005500 <puts>:
 8005500:	4b02      	ldr	r3, [pc, #8]	; (800550c <puts+0xc>)
 8005502:	4601      	mov	r1, r0
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	f7ff bf9f 	b.w	8005448 <_puts_r>
 800550a:	bf00      	nop
 800550c:	20000024 	.word	0x20000024

08005510 <sniprintf>:
 8005510:	b40c      	push	{r2, r3}
 8005512:	b530      	push	{r4, r5, lr}
 8005514:	4b17      	ldr	r3, [pc, #92]	; (8005574 <sniprintf+0x64>)
 8005516:	1e0c      	subs	r4, r1, #0
 8005518:	b09d      	sub	sp, #116	; 0x74
 800551a:	681d      	ldr	r5, [r3, #0]
 800551c:	da08      	bge.n	8005530 <sniprintf+0x20>
 800551e:	238b      	movs	r3, #139	; 0x8b
 8005520:	602b      	str	r3, [r5, #0]
 8005522:	f04f 30ff 	mov.w	r0, #4294967295
 8005526:	b01d      	add	sp, #116	; 0x74
 8005528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800552c:	b002      	add	sp, #8
 800552e:	4770      	bx	lr
 8005530:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005534:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005538:	bf14      	ite	ne
 800553a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800553e:	4623      	moveq	r3, r4
 8005540:	9304      	str	r3, [sp, #16]
 8005542:	9307      	str	r3, [sp, #28]
 8005544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005548:	9002      	str	r0, [sp, #8]
 800554a:	9006      	str	r0, [sp, #24]
 800554c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005550:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005552:	ab21      	add	r3, sp, #132	; 0x84
 8005554:	a902      	add	r1, sp, #8
 8005556:	4628      	mov	r0, r5
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	f000 fbad 	bl	8005cb8 <_svfiprintf_r>
 800555e:	1c43      	adds	r3, r0, #1
 8005560:	bfbc      	itt	lt
 8005562:	238b      	movlt	r3, #139	; 0x8b
 8005564:	602b      	strlt	r3, [r5, #0]
 8005566:	2c00      	cmp	r4, #0
 8005568:	d0dd      	beq.n	8005526 <sniprintf+0x16>
 800556a:	9b02      	ldr	r3, [sp, #8]
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e7d9      	b.n	8005526 <sniprintf+0x16>
 8005572:	bf00      	nop
 8005574:	20000024 	.word	0x20000024

08005578 <__swbuf_r>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	460e      	mov	r6, r1
 800557c:	4614      	mov	r4, r2
 800557e:	4605      	mov	r5, r0
 8005580:	b118      	cbz	r0, 800558a <__swbuf_r+0x12>
 8005582:	6983      	ldr	r3, [r0, #24]
 8005584:	b90b      	cbnz	r3, 800558a <__swbuf_r+0x12>
 8005586:	f000 f9a7 	bl	80058d8 <__sinit>
 800558a:	4b21      	ldr	r3, [pc, #132]	; (8005610 <__swbuf_r+0x98>)
 800558c:	429c      	cmp	r4, r3
 800558e:	d12a      	bne.n	80055e6 <__swbuf_r+0x6e>
 8005590:	686c      	ldr	r4, [r5, #4]
 8005592:	69a3      	ldr	r3, [r4, #24]
 8005594:	60a3      	str	r3, [r4, #8]
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	071a      	lsls	r2, r3, #28
 800559a:	d52e      	bpl.n	80055fa <__swbuf_r+0x82>
 800559c:	6923      	ldr	r3, [r4, #16]
 800559e:	b363      	cbz	r3, 80055fa <__swbuf_r+0x82>
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	6820      	ldr	r0, [r4, #0]
 80055a4:	1ac0      	subs	r0, r0, r3
 80055a6:	6963      	ldr	r3, [r4, #20]
 80055a8:	b2f6      	uxtb	r6, r6
 80055aa:	4283      	cmp	r3, r0
 80055ac:	4637      	mov	r7, r6
 80055ae:	dc04      	bgt.n	80055ba <__swbuf_r+0x42>
 80055b0:	4621      	mov	r1, r4
 80055b2:	4628      	mov	r0, r5
 80055b4:	f000 f926 	bl	8005804 <_fflush_r>
 80055b8:	bb28      	cbnz	r0, 8005606 <__swbuf_r+0x8e>
 80055ba:	68a3      	ldr	r3, [r4, #8]
 80055bc:	3b01      	subs	r3, #1
 80055be:	60a3      	str	r3, [r4, #8]
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	6022      	str	r2, [r4, #0]
 80055c6:	701e      	strb	r6, [r3, #0]
 80055c8:	6963      	ldr	r3, [r4, #20]
 80055ca:	3001      	adds	r0, #1
 80055cc:	4283      	cmp	r3, r0
 80055ce:	d004      	beq.n	80055da <__swbuf_r+0x62>
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	07db      	lsls	r3, r3, #31
 80055d4:	d519      	bpl.n	800560a <__swbuf_r+0x92>
 80055d6:	2e0a      	cmp	r6, #10
 80055d8:	d117      	bne.n	800560a <__swbuf_r+0x92>
 80055da:	4621      	mov	r1, r4
 80055dc:	4628      	mov	r0, r5
 80055de:	f000 f911 	bl	8005804 <_fflush_r>
 80055e2:	b190      	cbz	r0, 800560a <__swbuf_r+0x92>
 80055e4:	e00f      	b.n	8005606 <__swbuf_r+0x8e>
 80055e6:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <__swbuf_r+0x9c>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	d101      	bne.n	80055f0 <__swbuf_r+0x78>
 80055ec:	68ac      	ldr	r4, [r5, #8]
 80055ee:	e7d0      	b.n	8005592 <__swbuf_r+0x1a>
 80055f0:	4b09      	ldr	r3, [pc, #36]	; (8005618 <__swbuf_r+0xa0>)
 80055f2:	429c      	cmp	r4, r3
 80055f4:	bf08      	it	eq
 80055f6:	68ec      	ldreq	r4, [r5, #12]
 80055f8:	e7cb      	b.n	8005592 <__swbuf_r+0x1a>
 80055fa:	4621      	mov	r1, r4
 80055fc:	4628      	mov	r0, r5
 80055fe:	f000 f80d 	bl	800561c <__swsetup_r>
 8005602:	2800      	cmp	r0, #0
 8005604:	d0cc      	beq.n	80055a0 <__swbuf_r+0x28>
 8005606:	f04f 37ff 	mov.w	r7, #4294967295
 800560a:	4638      	mov	r0, r7
 800560c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800560e:	bf00      	nop
 8005610:	080082dc 	.word	0x080082dc
 8005614:	080082fc 	.word	0x080082fc
 8005618:	080082bc 	.word	0x080082bc

0800561c <__swsetup_r>:
 800561c:	4b32      	ldr	r3, [pc, #200]	; (80056e8 <__swsetup_r+0xcc>)
 800561e:	b570      	push	{r4, r5, r6, lr}
 8005620:	681d      	ldr	r5, [r3, #0]
 8005622:	4606      	mov	r6, r0
 8005624:	460c      	mov	r4, r1
 8005626:	b125      	cbz	r5, 8005632 <__swsetup_r+0x16>
 8005628:	69ab      	ldr	r3, [r5, #24]
 800562a:	b913      	cbnz	r3, 8005632 <__swsetup_r+0x16>
 800562c:	4628      	mov	r0, r5
 800562e:	f000 f953 	bl	80058d8 <__sinit>
 8005632:	4b2e      	ldr	r3, [pc, #184]	; (80056ec <__swsetup_r+0xd0>)
 8005634:	429c      	cmp	r4, r3
 8005636:	d10f      	bne.n	8005658 <__swsetup_r+0x3c>
 8005638:	686c      	ldr	r4, [r5, #4]
 800563a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563e:	b29a      	uxth	r2, r3
 8005640:	0715      	lsls	r5, r2, #28
 8005642:	d42c      	bmi.n	800569e <__swsetup_r+0x82>
 8005644:	06d0      	lsls	r0, r2, #27
 8005646:	d411      	bmi.n	800566c <__swsetup_r+0x50>
 8005648:	2209      	movs	r2, #9
 800564a:	6032      	str	r2, [r6, #0]
 800564c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005650:	81a3      	strh	r3, [r4, #12]
 8005652:	f04f 30ff 	mov.w	r0, #4294967295
 8005656:	e03e      	b.n	80056d6 <__swsetup_r+0xba>
 8005658:	4b25      	ldr	r3, [pc, #148]	; (80056f0 <__swsetup_r+0xd4>)
 800565a:	429c      	cmp	r4, r3
 800565c:	d101      	bne.n	8005662 <__swsetup_r+0x46>
 800565e:	68ac      	ldr	r4, [r5, #8]
 8005660:	e7eb      	b.n	800563a <__swsetup_r+0x1e>
 8005662:	4b24      	ldr	r3, [pc, #144]	; (80056f4 <__swsetup_r+0xd8>)
 8005664:	429c      	cmp	r4, r3
 8005666:	bf08      	it	eq
 8005668:	68ec      	ldreq	r4, [r5, #12]
 800566a:	e7e6      	b.n	800563a <__swsetup_r+0x1e>
 800566c:	0751      	lsls	r1, r2, #29
 800566e:	d512      	bpl.n	8005696 <__swsetup_r+0x7a>
 8005670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005672:	b141      	cbz	r1, 8005686 <__swsetup_r+0x6a>
 8005674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005678:	4299      	cmp	r1, r3
 800567a:	d002      	beq.n	8005682 <__swsetup_r+0x66>
 800567c:	4630      	mov	r0, r6
 800567e:	f000 fa19 	bl	8005ab4 <_free_r>
 8005682:	2300      	movs	r3, #0
 8005684:	6363      	str	r3, [r4, #52]	; 0x34
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800568c:	81a3      	strh	r3, [r4, #12]
 800568e:	2300      	movs	r3, #0
 8005690:	6063      	str	r3, [r4, #4]
 8005692:	6923      	ldr	r3, [r4, #16]
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	f043 0308 	orr.w	r3, r3, #8
 800569c:	81a3      	strh	r3, [r4, #12]
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	b94b      	cbnz	r3, 80056b6 <__swsetup_r+0x9a>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ac:	d003      	beq.n	80056b6 <__swsetup_r+0x9a>
 80056ae:	4621      	mov	r1, r4
 80056b0:	4630      	mov	r0, r6
 80056b2:	f000 f9bf 	bl	8005a34 <__smakebuf_r>
 80056b6:	89a2      	ldrh	r2, [r4, #12]
 80056b8:	f012 0301 	ands.w	r3, r2, #1
 80056bc:	d00c      	beq.n	80056d8 <__swsetup_r+0xbc>
 80056be:	2300      	movs	r3, #0
 80056c0:	60a3      	str	r3, [r4, #8]
 80056c2:	6963      	ldr	r3, [r4, #20]
 80056c4:	425b      	negs	r3, r3
 80056c6:	61a3      	str	r3, [r4, #24]
 80056c8:	6923      	ldr	r3, [r4, #16]
 80056ca:	b953      	cbnz	r3, 80056e2 <__swsetup_r+0xc6>
 80056cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80056d4:	d1ba      	bne.n	800564c <__swsetup_r+0x30>
 80056d6:	bd70      	pop	{r4, r5, r6, pc}
 80056d8:	0792      	lsls	r2, r2, #30
 80056da:	bf58      	it	pl
 80056dc:	6963      	ldrpl	r3, [r4, #20]
 80056de:	60a3      	str	r3, [r4, #8]
 80056e0:	e7f2      	b.n	80056c8 <__swsetup_r+0xac>
 80056e2:	2000      	movs	r0, #0
 80056e4:	e7f7      	b.n	80056d6 <__swsetup_r+0xba>
 80056e6:	bf00      	nop
 80056e8:	20000024 	.word	0x20000024
 80056ec:	080082dc 	.word	0x080082dc
 80056f0:	080082fc 	.word	0x080082fc
 80056f4:	080082bc 	.word	0x080082bc

080056f8 <__sflush_r>:
 80056f8:	898a      	ldrh	r2, [r1, #12]
 80056fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fe:	4605      	mov	r5, r0
 8005700:	0710      	lsls	r0, r2, #28
 8005702:	460c      	mov	r4, r1
 8005704:	d458      	bmi.n	80057b8 <__sflush_r+0xc0>
 8005706:	684b      	ldr	r3, [r1, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	dc05      	bgt.n	8005718 <__sflush_r+0x20>
 800570c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	dc02      	bgt.n	8005718 <__sflush_r+0x20>
 8005712:	2000      	movs	r0, #0
 8005714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800571a:	2e00      	cmp	r6, #0
 800571c:	d0f9      	beq.n	8005712 <__sflush_r+0x1a>
 800571e:	2300      	movs	r3, #0
 8005720:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005724:	682f      	ldr	r7, [r5, #0]
 8005726:	6a21      	ldr	r1, [r4, #32]
 8005728:	602b      	str	r3, [r5, #0]
 800572a:	d032      	beq.n	8005792 <__sflush_r+0x9a>
 800572c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	075a      	lsls	r2, r3, #29
 8005732:	d505      	bpl.n	8005740 <__sflush_r+0x48>
 8005734:	6863      	ldr	r3, [r4, #4]
 8005736:	1ac0      	subs	r0, r0, r3
 8005738:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800573a:	b10b      	cbz	r3, 8005740 <__sflush_r+0x48>
 800573c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800573e:	1ac0      	subs	r0, r0, r3
 8005740:	2300      	movs	r3, #0
 8005742:	4602      	mov	r2, r0
 8005744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005746:	6a21      	ldr	r1, [r4, #32]
 8005748:	4628      	mov	r0, r5
 800574a:	47b0      	blx	r6
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	d106      	bne.n	8005760 <__sflush_r+0x68>
 8005752:	6829      	ldr	r1, [r5, #0]
 8005754:	291d      	cmp	r1, #29
 8005756:	d848      	bhi.n	80057ea <__sflush_r+0xf2>
 8005758:	4a29      	ldr	r2, [pc, #164]	; (8005800 <__sflush_r+0x108>)
 800575a:	40ca      	lsrs	r2, r1
 800575c:	07d6      	lsls	r6, r2, #31
 800575e:	d544      	bpl.n	80057ea <__sflush_r+0xf2>
 8005760:	2200      	movs	r2, #0
 8005762:	6062      	str	r2, [r4, #4]
 8005764:	04d9      	lsls	r1, r3, #19
 8005766:	6922      	ldr	r2, [r4, #16]
 8005768:	6022      	str	r2, [r4, #0]
 800576a:	d504      	bpl.n	8005776 <__sflush_r+0x7e>
 800576c:	1c42      	adds	r2, r0, #1
 800576e:	d101      	bne.n	8005774 <__sflush_r+0x7c>
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	b903      	cbnz	r3, 8005776 <__sflush_r+0x7e>
 8005774:	6560      	str	r0, [r4, #84]	; 0x54
 8005776:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005778:	602f      	str	r7, [r5, #0]
 800577a:	2900      	cmp	r1, #0
 800577c:	d0c9      	beq.n	8005712 <__sflush_r+0x1a>
 800577e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005782:	4299      	cmp	r1, r3
 8005784:	d002      	beq.n	800578c <__sflush_r+0x94>
 8005786:	4628      	mov	r0, r5
 8005788:	f000 f994 	bl	8005ab4 <_free_r>
 800578c:	2000      	movs	r0, #0
 800578e:	6360      	str	r0, [r4, #52]	; 0x34
 8005790:	e7c0      	b.n	8005714 <__sflush_r+0x1c>
 8005792:	2301      	movs	r3, #1
 8005794:	4628      	mov	r0, r5
 8005796:	47b0      	blx	r6
 8005798:	1c41      	adds	r1, r0, #1
 800579a:	d1c8      	bne.n	800572e <__sflush_r+0x36>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0c5      	beq.n	800572e <__sflush_r+0x36>
 80057a2:	2b1d      	cmp	r3, #29
 80057a4:	d001      	beq.n	80057aa <__sflush_r+0xb2>
 80057a6:	2b16      	cmp	r3, #22
 80057a8:	d101      	bne.n	80057ae <__sflush_r+0xb6>
 80057aa:	602f      	str	r7, [r5, #0]
 80057ac:	e7b1      	b.n	8005712 <__sflush_r+0x1a>
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	e7ad      	b.n	8005714 <__sflush_r+0x1c>
 80057b8:	690f      	ldr	r7, [r1, #16]
 80057ba:	2f00      	cmp	r7, #0
 80057bc:	d0a9      	beq.n	8005712 <__sflush_r+0x1a>
 80057be:	0793      	lsls	r3, r2, #30
 80057c0:	680e      	ldr	r6, [r1, #0]
 80057c2:	bf08      	it	eq
 80057c4:	694b      	ldreq	r3, [r1, #20]
 80057c6:	600f      	str	r7, [r1, #0]
 80057c8:	bf18      	it	ne
 80057ca:	2300      	movne	r3, #0
 80057cc:	eba6 0807 	sub.w	r8, r6, r7
 80057d0:	608b      	str	r3, [r1, #8]
 80057d2:	f1b8 0f00 	cmp.w	r8, #0
 80057d6:	dd9c      	ble.n	8005712 <__sflush_r+0x1a>
 80057d8:	4643      	mov	r3, r8
 80057da:	463a      	mov	r2, r7
 80057dc:	6a21      	ldr	r1, [r4, #32]
 80057de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057e0:	4628      	mov	r0, r5
 80057e2:	47b0      	blx	r6
 80057e4:	2800      	cmp	r0, #0
 80057e6:	dc06      	bgt.n	80057f6 <__sflush_r+0xfe>
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	f04f 30ff 	mov.w	r0, #4294967295
 80057f4:	e78e      	b.n	8005714 <__sflush_r+0x1c>
 80057f6:	4407      	add	r7, r0
 80057f8:	eba8 0800 	sub.w	r8, r8, r0
 80057fc:	e7e9      	b.n	80057d2 <__sflush_r+0xda>
 80057fe:	bf00      	nop
 8005800:	20400001 	.word	0x20400001

08005804 <_fflush_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	690b      	ldr	r3, [r1, #16]
 8005808:	4605      	mov	r5, r0
 800580a:	460c      	mov	r4, r1
 800580c:	b1db      	cbz	r3, 8005846 <_fflush_r+0x42>
 800580e:	b118      	cbz	r0, 8005818 <_fflush_r+0x14>
 8005810:	6983      	ldr	r3, [r0, #24]
 8005812:	b90b      	cbnz	r3, 8005818 <_fflush_r+0x14>
 8005814:	f000 f860 	bl	80058d8 <__sinit>
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <_fflush_r+0x48>)
 800581a:	429c      	cmp	r4, r3
 800581c:	d109      	bne.n	8005832 <_fflush_r+0x2e>
 800581e:	686c      	ldr	r4, [r5, #4]
 8005820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005824:	b17b      	cbz	r3, 8005846 <_fflush_r+0x42>
 8005826:	4621      	mov	r1, r4
 8005828:	4628      	mov	r0, r5
 800582a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800582e:	f7ff bf63 	b.w	80056f8 <__sflush_r>
 8005832:	4b07      	ldr	r3, [pc, #28]	; (8005850 <_fflush_r+0x4c>)
 8005834:	429c      	cmp	r4, r3
 8005836:	d101      	bne.n	800583c <_fflush_r+0x38>
 8005838:	68ac      	ldr	r4, [r5, #8]
 800583a:	e7f1      	b.n	8005820 <_fflush_r+0x1c>
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <_fflush_r+0x50>)
 800583e:	429c      	cmp	r4, r3
 8005840:	bf08      	it	eq
 8005842:	68ec      	ldreq	r4, [r5, #12]
 8005844:	e7ec      	b.n	8005820 <_fflush_r+0x1c>
 8005846:	2000      	movs	r0, #0
 8005848:	bd38      	pop	{r3, r4, r5, pc}
 800584a:	bf00      	nop
 800584c:	080082dc 	.word	0x080082dc
 8005850:	080082fc 	.word	0x080082fc
 8005854:	080082bc 	.word	0x080082bc

08005858 <std>:
 8005858:	2300      	movs	r3, #0
 800585a:	b510      	push	{r4, lr}
 800585c:	4604      	mov	r4, r0
 800585e:	e9c0 3300 	strd	r3, r3, [r0]
 8005862:	6083      	str	r3, [r0, #8]
 8005864:	8181      	strh	r1, [r0, #12]
 8005866:	6643      	str	r3, [r0, #100]	; 0x64
 8005868:	81c2      	strh	r2, [r0, #14]
 800586a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800586e:	6183      	str	r3, [r0, #24]
 8005870:	4619      	mov	r1, r3
 8005872:	2208      	movs	r2, #8
 8005874:	305c      	adds	r0, #92	; 0x5c
 8005876:	f7ff fddf 	bl	8005438 <memset>
 800587a:	4b05      	ldr	r3, [pc, #20]	; (8005890 <std+0x38>)
 800587c:	6263      	str	r3, [r4, #36]	; 0x24
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <std+0x3c>)
 8005880:	62a3      	str	r3, [r4, #40]	; 0x28
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <std+0x40>)
 8005884:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <std+0x44>)
 8005888:	6224      	str	r4, [r4, #32]
 800588a:	6323      	str	r3, [r4, #48]	; 0x30
 800588c:	bd10      	pop	{r4, pc}
 800588e:	bf00      	nop
 8005890:	080061d9 	.word	0x080061d9
 8005894:	080061fb 	.word	0x080061fb
 8005898:	08006233 	.word	0x08006233
 800589c:	08006257 	.word	0x08006257

080058a0 <_cleanup_r>:
 80058a0:	4901      	ldr	r1, [pc, #4]	; (80058a8 <_cleanup_r+0x8>)
 80058a2:	f000 b885 	b.w	80059b0 <_fwalk_reent>
 80058a6:	bf00      	nop
 80058a8:	08005805 	.word	0x08005805

080058ac <__sfmoreglue>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	1e4a      	subs	r2, r1, #1
 80058b0:	2568      	movs	r5, #104	; 0x68
 80058b2:	4355      	muls	r5, r2
 80058b4:	460e      	mov	r6, r1
 80058b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058ba:	f000 f949 	bl	8005b50 <_malloc_r>
 80058be:	4604      	mov	r4, r0
 80058c0:	b140      	cbz	r0, 80058d4 <__sfmoreglue+0x28>
 80058c2:	2100      	movs	r1, #0
 80058c4:	e9c0 1600 	strd	r1, r6, [r0]
 80058c8:	300c      	adds	r0, #12
 80058ca:	60a0      	str	r0, [r4, #8]
 80058cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058d0:	f7ff fdb2 	bl	8005438 <memset>
 80058d4:	4620      	mov	r0, r4
 80058d6:	bd70      	pop	{r4, r5, r6, pc}

080058d8 <__sinit>:
 80058d8:	6983      	ldr	r3, [r0, #24]
 80058da:	b510      	push	{r4, lr}
 80058dc:	4604      	mov	r4, r0
 80058de:	bb33      	cbnz	r3, 800592e <__sinit+0x56>
 80058e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80058e4:	6503      	str	r3, [r0, #80]	; 0x50
 80058e6:	4b12      	ldr	r3, [pc, #72]	; (8005930 <__sinit+0x58>)
 80058e8:	4a12      	ldr	r2, [pc, #72]	; (8005934 <__sinit+0x5c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6282      	str	r2, [r0, #40]	; 0x28
 80058ee:	4298      	cmp	r0, r3
 80058f0:	bf04      	itt	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	6183      	streq	r3, [r0, #24]
 80058f6:	f000 f81f 	bl	8005938 <__sfp>
 80058fa:	6060      	str	r0, [r4, #4]
 80058fc:	4620      	mov	r0, r4
 80058fe:	f000 f81b 	bl	8005938 <__sfp>
 8005902:	60a0      	str	r0, [r4, #8]
 8005904:	4620      	mov	r0, r4
 8005906:	f000 f817 	bl	8005938 <__sfp>
 800590a:	2200      	movs	r2, #0
 800590c:	60e0      	str	r0, [r4, #12]
 800590e:	2104      	movs	r1, #4
 8005910:	6860      	ldr	r0, [r4, #4]
 8005912:	f7ff ffa1 	bl	8005858 <std>
 8005916:	2201      	movs	r2, #1
 8005918:	2109      	movs	r1, #9
 800591a:	68a0      	ldr	r0, [r4, #8]
 800591c:	f7ff ff9c 	bl	8005858 <std>
 8005920:	2202      	movs	r2, #2
 8005922:	2112      	movs	r1, #18
 8005924:	68e0      	ldr	r0, [r4, #12]
 8005926:	f7ff ff97 	bl	8005858 <std>
 800592a:	2301      	movs	r3, #1
 800592c:	61a3      	str	r3, [r4, #24]
 800592e:	bd10      	pop	{r4, pc}
 8005930:	080082b8 	.word	0x080082b8
 8005934:	080058a1 	.word	0x080058a1

08005938 <__sfp>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <__sfp+0x70>)
 800593c:	681e      	ldr	r6, [r3, #0]
 800593e:	69b3      	ldr	r3, [r6, #24]
 8005940:	4607      	mov	r7, r0
 8005942:	b913      	cbnz	r3, 800594a <__sfp+0x12>
 8005944:	4630      	mov	r0, r6
 8005946:	f7ff ffc7 	bl	80058d8 <__sinit>
 800594a:	3648      	adds	r6, #72	; 0x48
 800594c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005950:	3b01      	subs	r3, #1
 8005952:	d503      	bpl.n	800595c <__sfp+0x24>
 8005954:	6833      	ldr	r3, [r6, #0]
 8005956:	b133      	cbz	r3, 8005966 <__sfp+0x2e>
 8005958:	6836      	ldr	r6, [r6, #0]
 800595a:	e7f7      	b.n	800594c <__sfp+0x14>
 800595c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005960:	b16d      	cbz	r5, 800597e <__sfp+0x46>
 8005962:	3468      	adds	r4, #104	; 0x68
 8005964:	e7f4      	b.n	8005950 <__sfp+0x18>
 8005966:	2104      	movs	r1, #4
 8005968:	4638      	mov	r0, r7
 800596a:	f7ff ff9f 	bl	80058ac <__sfmoreglue>
 800596e:	6030      	str	r0, [r6, #0]
 8005970:	2800      	cmp	r0, #0
 8005972:	d1f1      	bne.n	8005958 <__sfp+0x20>
 8005974:	230c      	movs	r3, #12
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	4604      	mov	r4, r0
 800597a:	4620      	mov	r0, r4
 800597c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800597e:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <__sfp+0x74>)
 8005980:	6665      	str	r5, [r4, #100]	; 0x64
 8005982:	e9c4 5500 	strd	r5, r5, [r4]
 8005986:	60a5      	str	r5, [r4, #8]
 8005988:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800598c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005990:	2208      	movs	r2, #8
 8005992:	4629      	mov	r1, r5
 8005994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005998:	f7ff fd4e 	bl	8005438 <memset>
 800599c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059a4:	e7e9      	b.n	800597a <__sfp+0x42>
 80059a6:	bf00      	nop
 80059a8:	080082b8 	.word	0x080082b8
 80059ac:	ffff0001 	.word	0xffff0001

080059b0 <_fwalk_reent>:
 80059b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059b4:	4680      	mov	r8, r0
 80059b6:	4689      	mov	r9, r1
 80059b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059bc:	2600      	movs	r6, #0
 80059be:	b914      	cbnz	r4, 80059c6 <_fwalk_reent+0x16>
 80059c0:	4630      	mov	r0, r6
 80059c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80059ca:	3f01      	subs	r7, #1
 80059cc:	d501      	bpl.n	80059d2 <_fwalk_reent+0x22>
 80059ce:	6824      	ldr	r4, [r4, #0]
 80059d0:	e7f5      	b.n	80059be <_fwalk_reent+0xe>
 80059d2:	89ab      	ldrh	r3, [r5, #12]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d907      	bls.n	80059e8 <_fwalk_reent+0x38>
 80059d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059dc:	3301      	adds	r3, #1
 80059de:	d003      	beq.n	80059e8 <_fwalk_reent+0x38>
 80059e0:	4629      	mov	r1, r5
 80059e2:	4640      	mov	r0, r8
 80059e4:	47c8      	blx	r9
 80059e6:	4306      	orrs	r6, r0
 80059e8:	3568      	adds	r5, #104	; 0x68
 80059ea:	e7ee      	b.n	80059ca <_fwalk_reent+0x1a>

080059ec <__swhatbuf_r>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	460e      	mov	r6, r1
 80059f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f4:	2900      	cmp	r1, #0
 80059f6:	b096      	sub	sp, #88	; 0x58
 80059f8:	4614      	mov	r4, r2
 80059fa:	461d      	mov	r5, r3
 80059fc:	da07      	bge.n	8005a0e <__swhatbuf_r+0x22>
 80059fe:	2300      	movs	r3, #0
 8005a00:	602b      	str	r3, [r5, #0]
 8005a02:	89b3      	ldrh	r3, [r6, #12]
 8005a04:	061a      	lsls	r2, r3, #24
 8005a06:	d410      	bmi.n	8005a2a <__swhatbuf_r+0x3e>
 8005a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a0c:	e00e      	b.n	8005a2c <__swhatbuf_r+0x40>
 8005a0e:	466a      	mov	r2, sp
 8005a10:	f000 fc48 	bl	80062a4 <_fstat_r>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	dbf2      	blt.n	80059fe <__swhatbuf_r+0x12>
 8005a18:	9a01      	ldr	r2, [sp, #4]
 8005a1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a22:	425a      	negs	r2, r3
 8005a24:	415a      	adcs	r2, r3
 8005a26:	602a      	str	r2, [r5, #0]
 8005a28:	e7ee      	b.n	8005a08 <__swhatbuf_r+0x1c>
 8005a2a:	2340      	movs	r3, #64	; 0x40
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	6023      	str	r3, [r4, #0]
 8005a30:	b016      	add	sp, #88	; 0x58
 8005a32:	bd70      	pop	{r4, r5, r6, pc}

08005a34 <__smakebuf_r>:
 8005a34:	898b      	ldrh	r3, [r1, #12]
 8005a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a38:	079d      	lsls	r5, r3, #30
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	d507      	bpl.n	8005a50 <__smakebuf_r+0x1c>
 8005a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	6123      	str	r3, [r4, #16]
 8005a48:	2301      	movs	r3, #1
 8005a4a:	6163      	str	r3, [r4, #20]
 8005a4c:	b002      	add	sp, #8
 8005a4e:	bd70      	pop	{r4, r5, r6, pc}
 8005a50:	ab01      	add	r3, sp, #4
 8005a52:	466a      	mov	r2, sp
 8005a54:	f7ff ffca 	bl	80059ec <__swhatbuf_r>
 8005a58:	9900      	ldr	r1, [sp, #0]
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f000 f877 	bl	8005b50 <_malloc_r>
 8005a62:	b948      	cbnz	r0, 8005a78 <__smakebuf_r+0x44>
 8005a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a68:	059a      	lsls	r2, r3, #22
 8005a6a:	d4ef      	bmi.n	8005a4c <__smakebuf_r+0x18>
 8005a6c:	f023 0303 	bic.w	r3, r3, #3
 8005a70:	f043 0302 	orr.w	r3, r3, #2
 8005a74:	81a3      	strh	r3, [r4, #12]
 8005a76:	e7e3      	b.n	8005a40 <__smakebuf_r+0xc>
 8005a78:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <__smakebuf_r+0x7c>)
 8005a7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	6020      	str	r0, [r4, #0]
 8005a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a84:	81a3      	strh	r3, [r4, #12]
 8005a86:	9b00      	ldr	r3, [sp, #0]
 8005a88:	6163      	str	r3, [r4, #20]
 8005a8a:	9b01      	ldr	r3, [sp, #4]
 8005a8c:	6120      	str	r0, [r4, #16]
 8005a8e:	b15b      	cbz	r3, 8005aa8 <__smakebuf_r+0x74>
 8005a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a94:	4630      	mov	r0, r6
 8005a96:	f000 fc17 	bl	80062c8 <_isatty_r>
 8005a9a:	b128      	cbz	r0, 8005aa8 <__smakebuf_r+0x74>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	81a3      	strh	r3, [r4, #12]
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	431d      	orrs	r5, r3
 8005aac:	81a5      	strh	r5, [r4, #12]
 8005aae:	e7cd      	b.n	8005a4c <__smakebuf_r+0x18>
 8005ab0:	080058a1 	.word	0x080058a1

08005ab4 <_free_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	2900      	cmp	r1, #0
 8005aba:	d045      	beq.n	8005b48 <_free_r+0x94>
 8005abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac0:	1f0c      	subs	r4, r1, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	bfb8      	it	lt
 8005ac6:	18e4      	addlt	r4, r4, r3
 8005ac8:	f000 fc44 	bl	8006354 <__malloc_lock>
 8005acc:	4a1f      	ldr	r2, [pc, #124]	; (8005b4c <_free_r+0x98>)
 8005ace:	6813      	ldr	r3, [r2, #0]
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	b933      	cbnz	r3, 8005ae2 <_free_r+0x2e>
 8005ad4:	6063      	str	r3, [r4, #4]
 8005ad6:	6014      	str	r4, [r2, #0]
 8005ad8:	4628      	mov	r0, r5
 8005ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ade:	f000 bc3a 	b.w	8006356 <__malloc_unlock>
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	d90c      	bls.n	8005b00 <_free_r+0x4c>
 8005ae6:	6821      	ldr	r1, [r4, #0]
 8005ae8:	1862      	adds	r2, r4, r1
 8005aea:	4293      	cmp	r3, r2
 8005aec:	bf04      	itt	eq
 8005aee:	681a      	ldreq	r2, [r3, #0]
 8005af0:	685b      	ldreq	r3, [r3, #4]
 8005af2:	6063      	str	r3, [r4, #4]
 8005af4:	bf04      	itt	eq
 8005af6:	1852      	addeq	r2, r2, r1
 8005af8:	6022      	streq	r2, [r4, #0]
 8005afa:	6004      	str	r4, [r0, #0]
 8005afc:	e7ec      	b.n	8005ad8 <_free_r+0x24>
 8005afe:	4613      	mov	r3, r2
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	b10a      	cbz	r2, 8005b08 <_free_r+0x54>
 8005b04:	42a2      	cmp	r2, r4
 8005b06:	d9fa      	bls.n	8005afe <_free_r+0x4a>
 8005b08:	6819      	ldr	r1, [r3, #0]
 8005b0a:	1858      	adds	r0, r3, r1
 8005b0c:	42a0      	cmp	r0, r4
 8005b0e:	d10b      	bne.n	8005b28 <_free_r+0x74>
 8005b10:	6820      	ldr	r0, [r4, #0]
 8005b12:	4401      	add	r1, r0
 8005b14:	1858      	adds	r0, r3, r1
 8005b16:	4282      	cmp	r2, r0
 8005b18:	6019      	str	r1, [r3, #0]
 8005b1a:	d1dd      	bne.n	8005ad8 <_free_r+0x24>
 8005b1c:	6810      	ldr	r0, [r2, #0]
 8005b1e:	6852      	ldr	r2, [r2, #4]
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	4401      	add	r1, r0
 8005b24:	6019      	str	r1, [r3, #0]
 8005b26:	e7d7      	b.n	8005ad8 <_free_r+0x24>
 8005b28:	d902      	bls.n	8005b30 <_free_r+0x7c>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	602b      	str	r3, [r5, #0]
 8005b2e:	e7d3      	b.n	8005ad8 <_free_r+0x24>
 8005b30:	6820      	ldr	r0, [r4, #0]
 8005b32:	1821      	adds	r1, r4, r0
 8005b34:	428a      	cmp	r2, r1
 8005b36:	bf04      	itt	eq
 8005b38:	6811      	ldreq	r1, [r2, #0]
 8005b3a:	6852      	ldreq	r2, [r2, #4]
 8005b3c:	6062      	str	r2, [r4, #4]
 8005b3e:	bf04      	itt	eq
 8005b40:	1809      	addeq	r1, r1, r0
 8005b42:	6021      	streq	r1, [r4, #0]
 8005b44:	605c      	str	r4, [r3, #4]
 8005b46:	e7c7      	b.n	8005ad8 <_free_r+0x24>
 8005b48:	bd38      	pop	{r3, r4, r5, pc}
 8005b4a:	bf00      	nop
 8005b4c:	200004c4 	.word	0x200004c4

08005b50 <_malloc_r>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	1ccd      	adds	r5, r1, #3
 8005b54:	f025 0503 	bic.w	r5, r5, #3
 8005b58:	3508      	adds	r5, #8
 8005b5a:	2d0c      	cmp	r5, #12
 8005b5c:	bf38      	it	cc
 8005b5e:	250c      	movcc	r5, #12
 8005b60:	2d00      	cmp	r5, #0
 8005b62:	4606      	mov	r6, r0
 8005b64:	db01      	blt.n	8005b6a <_malloc_r+0x1a>
 8005b66:	42a9      	cmp	r1, r5
 8005b68:	d903      	bls.n	8005b72 <_malloc_r+0x22>
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	6033      	str	r3, [r6, #0]
 8005b6e:	2000      	movs	r0, #0
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	f000 fbef 	bl	8006354 <__malloc_lock>
 8005b76:	4a21      	ldr	r2, [pc, #132]	; (8005bfc <_malloc_r+0xac>)
 8005b78:	6814      	ldr	r4, [r2, #0]
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	b991      	cbnz	r1, 8005ba4 <_malloc_r+0x54>
 8005b7e:	4c20      	ldr	r4, [pc, #128]	; (8005c00 <_malloc_r+0xb0>)
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	b91b      	cbnz	r3, 8005b8c <_malloc_r+0x3c>
 8005b84:	4630      	mov	r0, r6
 8005b86:	f000 fb17 	bl	80061b8 <_sbrk_r>
 8005b8a:	6020      	str	r0, [r4, #0]
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f000 fb12 	bl	80061b8 <_sbrk_r>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d124      	bne.n	8005be2 <_malloc_r+0x92>
 8005b98:	230c      	movs	r3, #12
 8005b9a:	6033      	str	r3, [r6, #0]
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f000 fbda 	bl	8006356 <__malloc_unlock>
 8005ba2:	e7e4      	b.n	8005b6e <_malloc_r+0x1e>
 8005ba4:	680b      	ldr	r3, [r1, #0]
 8005ba6:	1b5b      	subs	r3, r3, r5
 8005ba8:	d418      	bmi.n	8005bdc <_malloc_r+0x8c>
 8005baa:	2b0b      	cmp	r3, #11
 8005bac:	d90f      	bls.n	8005bce <_malloc_r+0x7e>
 8005bae:	600b      	str	r3, [r1, #0]
 8005bb0:	50cd      	str	r5, [r1, r3]
 8005bb2:	18cc      	adds	r4, r1, r3
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f000 fbce 	bl	8006356 <__malloc_unlock>
 8005bba:	f104 000b 	add.w	r0, r4, #11
 8005bbe:	1d23      	adds	r3, r4, #4
 8005bc0:	f020 0007 	bic.w	r0, r0, #7
 8005bc4:	1ac3      	subs	r3, r0, r3
 8005bc6:	d0d3      	beq.n	8005b70 <_malloc_r+0x20>
 8005bc8:	425a      	negs	r2, r3
 8005bca:	50e2      	str	r2, [r4, r3]
 8005bcc:	e7d0      	b.n	8005b70 <_malloc_r+0x20>
 8005bce:	428c      	cmp	r4, r1
 8005bd0:	684b      	ldr	r3, [r1, #4]
 8005bd2:	bf16      	itet	ne
 8005bd4:	6063      	strne	r3, [r4, #4]
 8005bd6:	6013      	streq	r3, [r2, #0]
 8005bd8:	460c      	movne	r4, r1
 8005bda:	e7eb      	b.n	8005bb4 <_malloc_r+0x64>
 8005bdc:	460c      	mov	r4, r1
 8005bde:	6849      	ldr	r1, [r1, #4]
 8005be0:	e7cc      	b.n	8005b7c <_malloc_r+0x2c>
 8005be2:	1cc4      	adds	r4, r0, #3
 8005be4:	f024 0403 	bic.w	r4, r4, #3
 8005be8:	42a0      	cmp	r0, r4
 8005bea:	d005      	beq.n	8005bf8 <_malloc_r+0xa8>
 8005bec:	1a21      	subs	r1, r4, r0
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f000 fae2 	bl	80061b8 <_sbrk_r>
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d0cf      	beq.n	8005b98 <_malloc_r+0x48>
 8005bf8:	6025      	str	r5, [r4, #0]
 8005bfa:	e7db      	b.n	8005bb4 <_malloc_r+0x64>
 8005bfc:	200004c4 	.word	0x200004c4
 8005c00:	200004c8 	.word	0x200004c8

08005c04 <__ssputs_r>:
 8005c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	688e      	ldr	r6, [r1, #8]
 8005c0a:	429e      	cmp	r6, r3
 8005c0c:	4682      	mov	sl, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	4690      	mov	r8, r2
 8005c12:	4699      	mov	r9, r3
 8005c14:	d837      	bhi.n	8005c86 <__ssputs_r+0x82>
 8005c16:	898a      	ldrh	r2, [r1, #12]
 8005c18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c1c:	d031      	beq.n	8005c82 <__ssputs_r+0x7e>
 8005c1e:	6825      	ldr	r5, [r4, #0]
 8005c20:	6909      	ldr	r1, [r1, #16]
 8005c22:	1a6f      	subs	r7, r5, r1
 8005c24:	6965      	ldr	r5, [r4, #20]
 8005c26:	2302      	movs	r3, #2
 8005c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c2c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c30:	f109 0301 	add.w	r3, r9, #1
 8005c34:	443b      	add	r3, r7
 8005c36:	429d      	cmp	r5, r3
 8005c38:	bf38      	it	cc
 8005c3a:	461d      	movcc	r5, r3
 8005c3c:	0553      	lsls	r3, r2, #21
 8005c3e:	d530      	bpl.n	8005ca2 <__ssputs_r+0x9e>
 8005c40:	4629      	mov	r1, r5
 8005c42:	f7ff ff85 	bl	8005b50 <_malloc_r>
 8005c46:	4606      	mov	r6, r0
 8005c48:	b950      	cbnz	r0, 8005c60 <__ssputs_r+0x5c>
 8005c4a:	230c      	movs	r3, #12
 8005c4c:	f8ca 3000 	str.w	r3, [sl]
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c56:	81a3      	strh	r3, [r4, #12]
 8005c58:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c60:	463a      	mov	r2, r7
 8005c62:	6921      	ldr	r1, [r4, #16]
 8005c64:	f000 fb52 	bl	800630c <memcpy>
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c72:	81a3      	strh	r3, [r4, #12]
 8005c74:	6126      	str	r6, [r4, #16]
 8005c76:	6165      	str	r5, [r4, #20]
 8005c78:	443e      	add	r6, r7
 8005c7a:	1bed      	subs	r5, r5, r7
 8005c7c:	6026      	str	r6, [r4, #0]
 8005c7e:	60a5      	str	r5, [r4, #8]
 8005c80:	464e      	mov	r6, r9
 8005c82:	454e      	cmp	r6, r9
 8005c84:	d900      	bls.n	8005c88 <__ssputs_r+0x84>
 8005c86:	464e      	mov	r6, r9
 8005c88:	4632      	mov	r2, r6
 8005c8a:	4641      	mov	r1, r8
 8005c8c:	6820      	ldr	r0, [r4, #0]
 8005c8e:	f000 fb48 	bl	8006322 <memmove>
 8005c92:	68a3      	ldr	r3, [r4, #8]
 8005c94:	1b9b      	subs	r3, r3, r6
 8005c96:	60a3      	str	r3, [r4, #8]
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	441e      	add	r6, r3
 8005c9c:	6026      	str	r6, [r4, #0]
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	e7dc      	b.n	8005c5c <__ssputs_r+0x58>
 8005ca2:	462a      	mov	r2, r5
 8005ca4:	f000 fb58 	bl	8006358 <_realloc_r>
 8005ca8:	4606      	mov	r6, r0
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d1e2      	bne.n	8005c74 <__ssputs_r+0x70>
 8005cae:	6921      	ldr	r1, [r4, #16]
 8005cb0:	4650      	mov	r0, sl
 8005cb2:	f7ff feff 	bl	8005ab4 <_free_r>
 8005cb6:	e7c8      	b.n	8005c4a <__ssputs_r+0x46>

08005cb8 <_svfiprintf_r>:
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	461d      	mov	r5, r3
 8005cbe:	898b      	ldrh	r3, [r1, #12]
 8005cc0:	061f      	lsls	r7, r3, #24
 8005cc2:	b09d      	sub	sp, #116	; 0x74
 8005cc4:	4680      	mov	r8, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	4616      	mov	r6, r2
 8005cca:	d50f      	bpl.n	8005cec <_svfiprintf_r+0x34>
 8005ccc:	690b      	ldr	r3, [r1, #16]
 8005cce:	b96b      	cbnz	r3, 8005cec <_svfiprintf_r+0x34>
 8005cd0:	2140      	movs	r1, #64	; 0x40
 8005cd2:	f7ff ff3d 	bl	8005b50 <_malloc_r>
 8005cd6:	6020      	str	r0, [r4, #0]
 8005cd8:	6120      	str	r0, [r4, #16]
 8005cda:	b928      	cbnz	r0, 8005ce8 <_svfiprintf_r+0x30>
 8005cdc:	230c      	movs	r3, #12
 8005cde:	f8c8 3000 	str.w	r3, [r8]
 8005ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce6:	e0c8      	b.n	8005e7a <_svfiprintf_r+0x1c2>
 8005ce8:	2340      	movs	r3, #64	; 0x40
 8005cea:	6163      	str	r3, [r4, #20]
 8005cec:	2300      	movs	r3, #0
 8005cee:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf0:	2320      	movs	r3, #32
 8005cf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cf6:	2330      	movs	r3, #48	; 0x30
 8005cf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cfc:	9503      	str	r5, [sp, #12]
 8005cfe:	f04f 0b01 	mov.w	fp, #1
 8005d02:	4637      	mov	r7, r6
 8005d04:	463d      	mov	r5, r7
 8005d06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d0a:	b10b      	cbz	r3, 8005d10 <_svfiprintf_r+0x58>
 8005d0c:	2b25      	cmp	r3, #37	; 0x25
 8005d0e:	d13e      	bne.n	8005d8e <_svfiprintf_r+0xd6>
 8005d10:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d14:	d00b      	beq.n	8005d2e <_svfiprintf_r+0x76>
 8005d16:	4653      	mov	r3, sl
 8005d18:	4632      	mov	r2, r6
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	f7ff ff71 	bl	8005c04 <__ssputs_r>
 8005d22:	3001      	adds	r0, #1
 8005d24:	f000 80a4 	beq.w	8005e70 <_svfiprintf_r+0x1b8>
 8005d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d2a:	4453      	add	r3, sl
 8005d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d2e:	783b      	ldrb	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 809d 	beq.w	8005e70 <_svfiprintf_r+0x1b8>
 8005d36:	2300      	movs	r3, #0
 8005d38:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d40:	9304      	str	r3, [sp, #16]
 8005d42:	9307      	str	r3, [sp, #28]
 8005d44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d48:	931a      	str	r3, [sp, #104]	; 0x68
 8005d4a:	462f      	mov	r7, r5
 8005d4c:	2205      	movs	r2, #5
 8005d4e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d52:	4850      	ldr	r0, [pc, #320]	; (8005e94 <_svfiprintf_r+0x1dc>)
 8005d54:	f7fa fa3c 	bl	80001d0 <memchr>
 8005d58:	9b04      	ldr	r3, [sp, #16]
 8005d5a:	b9d0      	cbnz	r0, 8005d92 <_svfiprintf_r+0xda>
 8005d5c:	06d9      	lsls	r1, r3, #27
 8005d5e:	bf44      	itt	mi
 8005d60:	2220      	movmi	r2, #32
 8005d62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d66:	071a      	lsls	r2, r3, #28
 8005d68:	bf44      	itt	mi
 8005d6a:	222b      	movmi	r2, #43	; 0x2b
 8005d6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d70:	782a      	ldrb	r2, [r5, #0]
 8005d72:	2a2a      	cmp	r2, #42	; 0x2a
 8005d74:	d015      	beq.n	8005da2 <_svfiprintf_r+0xea>
 8005d76:	9a07      	ldr	r2, [sp, #28]
 8005d78:	462f      	mov	r7, r5
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	250a      	movs	r5, #10
 8005d7e:	4639      	mov	r1, r7
 8005d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d84:	3b30      	subs	r3, #48	; 0x30
 8005d86:	2b09      	cmp	r3, #9
 8005d88:	d94d      	bls.n	8005e26 <_svfiprintf_r+0x16e>
 8005d8a:	b1b8      	cbz	r0, 8005dbc <_svfiprintf_r+0x104>
 8005d8c:	e00f      	b.n	8005dae <_svfiprintf_r+0xf6>
 8005d8e:	462f      	mov	r7, r5
 8005d90:	e7b8      	b.n	8005d04 <_svfiprintf_r+0x4c>
 8005d92:	4a40      	ldr	r2, [pc, #256]	; (8005e94 <_svfiprintf_r+0x1dc>)
 8005d94:	1a80      	subs	r0, r0, r2
 8005d96:	fa0b f000 	lsl.w	r0, fp, r0
 8005d9a:	4318      	orrs	r0, r3
 8005d9c:	9004      	str	r0, [sp, #16]
 8005d9e:	463d      	mov	r5, r7
 8005da0:	e7d3      	b.n	8005d4a <_svfiprintf_r+0x92>
 8005da2:	9a03      	ldr	r2, [sp, #12]
 8005da4:	1d11      	adds	r1, r2, #4
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	9103      	str	r1, [sp, #12]
 8005daa:	2a00      	cmp	r2, #0
 8005dac:	db01      	blt.n	8005db2 <_svfiprintf_r+0xfa>
 8005dae:	9207      	str	r2, [sp, #28]
 8005db0:	e004      	b.n	8005dbc <_svfiprintf_r+0x104>
 8005db2:	4252      	negs	r2, r2
 8005db4:	f043 0302 	orr.w	r3, r3, #2
 8005db8:	9207      	str	r2, [sp, #28]
 8005dba:	9304      	str	r3, [sp, #16]
 8005dbc:	783b      	ldrb	r3, [r7, #0]
 8005dbe:	2b2e      	cmp	r3, #46	; 0x2e
 8005dc0:	d10c      	bne.n	8005ddc <_svfiprintf_r+0x124>
 8005dc2:	787b      	ldrb	r3, [r7, #1]
 8005dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005dc6:	d133      	bne.n	8005e30 <_svfiprintf_r+0x178>
 8005dc8:	9b03      	ldr	r3, [sp, #12]
 8005dca:	1d1a      	adds	r2, r3, #4
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	9203      	str	r2, [sp, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bfb8      	it	lt
 8005dd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dd8:	3702      	adds	r7, #2
 8005dda:	9305      	str	r3, [sp, #20]
 8005ddc:	4d2e      	ldr	r5, [pc, #184]	; (8005e98 <_svfiprintf_r+0x1e0>)
 8005dde:	7839      	ldrb	r1, [r7, #0]
 8005de0:	2203      	movs	r2, #3
 8005de2:	4628      	mov	r0, r5
 8005de4:	f7fa f9f4 	bl	80001d0 <memchr>
 8005de8:	b138      	cbz	r0, 8005dfa <_svfiprintf_r+0x142>
 8005dea:	2340      	movs	r3, #64	; 0x40
 8005dec:	1b40      	subs	r0, r0, r5
 8005dee:	fa03 f000 	lsl.w	r0, r3, r0
 8005df2:	9b04      	ldr	r3, [sp, #16]
 8005df4:	4303      	orrs	r3, r0
 8005df6:	3701      	adds	r7, #1
 8005df8:	9304      	str	r3, [sp, #16]
 8005dfa:	7839      	ldrb	r1, [r7, #0]
 8005dfc:	4827      	ldr	r0, [pc, #156]	; (8005e9c <_svfiprintf_r+0x1e4>)
 8005dfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e02:	2206      	movs	r2, #6
 8005e04:	1c7e      	adds	r6, r7, #1
 8005e06:	f7fa f9e3 	bl	80001d0 <memchr>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d038      	beq.n	8005e80 <_svfiprintf_r+0x1c8>
 8005e0e:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <_svfiprintf_r+0x1e8>)
 8005e10:	bb13      	cbnz	r3, 8005e58 <_svfiprintf_r+0x1a0>
 8005e12:	9b03      	ldr	r3, [sp, #12]
 8005e14:	3307      	adds	r3, #7
 8005e16:	f023 0307 	bic.w	r3, r3, #7
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	9303      	str	r3, [sp, #12]
 8005e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e20:	444b      	add	r3, r9
 8005e22:	9309      	str	r3, [sp, #36]	; 0x24
 8005e24:	e76d      	b.n	8005d02 <_svfiprintf_r+0x4a>
 8005e26:	fb05 3202 	mla	r2, r5, r2, r3
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	460f      	mov	r7, r1
 8005e2e:	e7a6      	b.n	8005d7e <_svfiprintf_r+0xc6>
 8005e30:	2300      	movs	r3, #0
 8005e32:	3701      	adds	r7, #1
 8005e34:	9305      	str	r3, [sp, #20]
 8005e36:	4619      	mov	r1, r3
 8005e38:	250a      	movs	r5, #10
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e40:	3a30      	subs	r2, #48	; 0x30
 8005e42:	2a09      	cmp	r2, #9
 8005e44:	d903      	bls.n	8005e4e <_svfiprintf_r+0x196>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0c8      	beq.n	8005ddc <_svfiprintf_r+0x124>
 8005e4a:	9105      	str	r1, [sp, #20]
 8005e4c:	e7c6      	b.n	8005ddc <_svfiprintf_r+0x124>
 8005e4e:	fb05 2101 	mla	r1, r5, r1, r2
 8005e52:	2301      	movs	r3, #1
 8005e54:	4607      	mov	r7, r0
 8005e56:	e7f0      	b.n	8005e3a <_svfiprintf_r+0x182>
 8005e58:	ab03      	add	r3, sp, #12
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <_svfiprintf_r+0x1ec>)
 8005e60:	a904      	add	r1, sp, #16
 8005e62:	4640      	mov	r0, r8
 8005e64:	f3af 8000 	nop.w
 8005e68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e6c:	4681      	mov	r9, r0
 8005e6e:	d1d6      	bne.n	8005e1e <_svfiprintf_r+0x166>
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	065b      	lsls	r3, r3, #25
 8005e74:	f53f af35 	bmi.w	8005ce2 <_svfiprintf_r+0x2a>
 8005e78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e7a:	b01d      	add	sp, #116	; 0x74
 8005e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e80:	ab03      	add	r3, sp, #12
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	4622      	mov	r2, r4
 8005e86:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <_svfiprintf_r+0x1ec>)
 8005e88:	a904      	add	r1, sp, #16
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	f000 f882 	bl	8005f94 <_printf_i>
 8005e90:	e7ea      	b.n	8005e68 <_svfiprintf_r+0x1b0>
 8005e92:	bf00      	nop
 8005e94:	0800831c 	.word	0x0800831c
 8005e98:	08008322 	.word	0x08008322
 8005e9c:	08008326 	.word	0x08008326
 8005ea0:	00000000 	.word	0x00000000
 8005ea4:	08005c05 	.word	0x08005c05

08005ea8 <_printf_common>:
 8005ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eac:	4691      	mov	r9, r2
 8005eae:	461f      	mov	r7, r3
 8005eb0:	688a      	ldr	r2, [r1, #8]
 8005eb2:	690b      	ldr	r3, [r1, #16]
 8005eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	bfb8      	it	lt
 8005ebc:	4613      	movlt	r3, r2
 8005ebe:	f8c9 3000 	str.w	r3, [r9]
 8005ec2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	b112      	cbz	r2, 8005ed2 <_printf_common+0x2a>
 8005ecc:	3301      	adds	r3, #1
 8005ece:	f8c9 3000 	str.w	r3, [r9]
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	0699      	lsls	r1, r3, #26
 8005ed6:	bf42      	ittt	mi
 8005ed8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005edc:	3302      	addmi	r3, #2
 8005ede:	f8c9 3000 	strmi.w	r3, [r9]
 8005ee2:	6825      	ldr	r5, [r4, #0]
 8005ee4:	f015 0506 	ands.w	r5, r5, #6
 8005ee8:	d107      	bne.n	8005efa <_printf_common+0x52>
 8005eea:	f104 0a19 	add.w	sl, r4, #25
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ef4:	1a9b      	subs	r3, r3, r2
 8005ef6:	42ab      	cmp	r3, r5
 8005ef8:	dc28      	bgt.n	8005f4c <_printf_common+0xa4>
 8005efa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005efe:	6822      	ldr	r2, [r4, #0]
 8005f00:	3300      	adds	r3, #0
 8005f02:	bf18      	it	ne
 8005f04:	2301      	movne	r3, #1
 8005f06:	0692      	lsls	r2, r2, #26
 8005f08:	d42d      	bmi.n	8005f66 <_printf_common+0xbe>
 8005f0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f0e:	4639      	mov	r1, r7
 8005f10:	4630      	mov	r0, r6
 8005f12:	47c0      	blx	r8
 8005f14:	3001      	adds	r0, #1
 8005f16:	d020      	beq.n	8005f5a <_printf_common+0xb2>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	68e5      	ldr	r5, [r4, #12]
 8005f1c:	f8d9 2000 	ldr.w	r2, [r9]
 8005f20:	f003 0306 	and.w	r3, r3, #6
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	bf08      	it	eq
 8005f28:	1aad      	subeq	r5, r5, r2
 8005f2a:	68a3      	ldr	r3, [r4, #8]
 8005f2c:	6922      	ldr	r2, [r4, #16]
 8005f2e:	bf0c      	ite	eq
 8005f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f34:	2500      	movne	r5, #0
 8005f36:	4293      	cmp	r3, r2
 8005f38:	bfc4      	itt	gt
 8005f3a:	1a9b      	subgt	r3, r3, r2
 8005f3c:	18ed      	addgt	r5, r5, r3
 8005f3e:	f04f 0900 	mov.w	r9, #0
 8005f42:	341a      	adds	r4, #26
 8005f44:	454d      	cmp	r5, r9
 8005f46:	d11a      	bne.n	8005f7e <_printf_common+0xd6>
 8005f48:	2000      	movs	r0, #0
 8005f4a:	e008      	b.n	8005f5e <_printf_common+0xb6>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	4652      	mov	r2, sl
 8005f50:	4639      	mov	r1, r7
 8005f52:	4630      	mov	r0, r6
 8005f54:	47c0      	blx	r8
 8005f56:	3001      	adds	r0, #1
 8005f58:	d103      	bne.n	8005f62 <_printf_common+0xba>
 8005f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f62:	3501      	adds	r5, #1
 8005f64:	e7c3      	b.n	8005eee <_printf_common+0x46>
 8005f66:	18e1      	adds	r1, r4, r3
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	2030      	movs	r0, #48	; 0x30
 8005f6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f70:	4422      	add	r2, r4
 8005f72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	e7c5      	b.n	8005f0a <_printf_common+0x62>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4622      	mov	r2, r4
 8005f82:	4639      	mov	r1, r7
 8005f84:	4630      	mov	r0, r6
 8005f86:	47c0      	blx	r8
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d0e6      	beq.n	8005f5a <_printf_common+0xb2>
 8005f8c:	f109 0901 	add.w	r9, r9, #1
 8005f90:	e7d8      	b.n	8005f44 <_printf_common+0x9c>
	...

08005f94 <_printf_i>:
 8005f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	7e09      	ldrb	r1, [r1, #24]
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	296e      	cmp	r1, #110	; 0x6e
 8005fa4:	4617      	mov	r7, r2
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	4698      	mov	r8, r3
 8005faa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fac:	f000 80b3 	beq.w	8006116 <_printf_i+0x182>
 8005fb0:	d822      	bhi.n	8005ff8 <_printf_i+0x64>
 8005fb2:	2963      	cmp	r1, #99	; 0x63
 8005fb4:	d036      	beq.n	8006024 <_printf_i+0x90>
 8005fb6:	d80a      	bhi.n	8005fce <_printf_i+0x3a>
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	f000 80b9 	beq.w	8006130 <_printf_i+0x19c>
 8005fbe:	2958      	cmp	r1, #88	; 0x58
 8005fc0:	f000 8083 	beq.w	80060ca <_printf_i+0x136>
 8005fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005fcc:	e032      	b.n	8006034 <_printf_i+0xa0>
 8005fce:	2964      	cmp	r1, #100	; 0x64
 8005fd0:	d001      	beq.n	8005fd6 <_printf_i+0x42>
 8005fd2:	2969      	cmp	r1, #105	; 0x69
 8005fd4:	d1f6      	bne.n	8005fc4 <_printf_i+0x30>
 8005fd6:	6820      	ldr	r0, [r4, #0]
 8005fd8:	6813      	ldr	r3, [r2, #0]
 8005fda:	0605      	lsls	r5, r0, #24
 8005fdc:	f103 0104 	add.w	r1, r3, #4
 8005fe0:	d52a      	bpl.n	8006038 <_printf_i+0xa4>
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6011      	str	r1, [r2, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	da03      	bge.n	8005ff2 <_printf_i+0x5e>
 8005fea:	222d      	movs	r2, #45	; 0x2d
 8005fec:	425b      	negs	r3, r3
 8005fee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ff2:	486f      	ldr	r0, [pc, #444]	; (80061b0 <_printf_i+0x21c>)
 8005ff4:	220a      	movs	r2, #10
 8005ff6:	e039      	b.n	800606c <_printf_i+0xd8>
 8005ff8:	2973      	cmp	r1, #115	; 0x73
 8005ffa:	f000 809d 	beq.w	8006138 <_printf_i+0x1a4>
 8005ffe:	d808      	bhi.n	8006012 <_printf_i+0x7e>
 8006000:	296f      	cmp	r1, #111	; 0x6f
 8006002:	d020      	beq.n	8006046 <_printf_i+0xb2>
 8006004:	2970      	cmp	r1, #112	; 0x70
 8006006:	d1dd      	bne.n	8005fc4 <_printf_i+0x30>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	f043 0320 	orr.w	r3, r3, #32
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	e003      	b.n	800601a <_printf_i+0x86>
 8006012:	2975      	cmp	r1, #117	; 0x75
 8006014:	d017      	beq.n	8006046 <_printf_i+0xb2>
 8006016:	2978      	cmp	r1, #120	; 0x78
 8006018:	d1d4      	bne.n	8005fc4 <_printf_i+0x30>
 800601a:	2378      	movs	r3, #120	; 0x78
 800601c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006020:	4864      	ldr	r0, [pc, #400]	; (80061b4 <_printf_i+0x220>)
 8006022:	e055      	b.n	80060d0 <_printf_i+0x13c>
 8006024:	6813      	ldr	r3, [r2, #0]
 8006026:	1d19      	adds	r1, r3, #4
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6011      	str	r1, [r2, #0]
 800602c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006034:	2301      	movs	r3, #1
 8006036:	e08c      	b.n	8006152 <_printf_i+0x1be>
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6011      	str	r1, [r2, #0]
 800603c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006040:	bf18      	it	ne
 8006042:	b21b      	sxthne	r3, r3
 8006044:	e7cf      	b.n	8005fe6 <_printf_i+0x52>
 8006046:	6813      	ldr	r3, [r2, #0]
 8006048:	6825      	ldr	r5, [r4, #0]
 800604a:	1d18      	adds	r0, r3, #4
 800604c:	6010      	str	r0, [r2, #0]
 800604e:	0628      	lsls	r0, r5, #24
 8006050:	d501      	bpl.n	8006056 <_printf_i+0xc2>
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	e002      	b.n	800605c <_printf_i+0xc8>
 8006056:	0668      	lsls	r0, r5, #25
 8006058:	d5fb      	bpl.n	8006052 <_printf_i+0xbe>
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	4854      	ldr	r0, [pc, #336]	; (80061b0 <_printf_i+0x21c>)
 800605e:	296f      	cmp	r1, #111	; 0x6f
 8006060:	bf14      	ite	ne
 8006062:	220a      	movne	r2, #10
 8006064:	2208      	moveq	r2, #8
 8006066:	2100      	movs	r1, #0
 8006068:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800606c:	6865      	ldr	r5, [r4, #4]
 800606e:	60a5      	str	r5, [r4, #8]
 8006070:	2d00      	cmp	r5, #0
 8006072:	f2c0 8095 	blt.w	80061a0 <_printf_i+0x20c>
 8006076:	6821      	ldr	r1, [r4, #0]
 8006078:	f021 0104 	bic.w	r1, r1, #4
 800607c:	6021      	str	r1, [r4, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d13d      	bne.n	80060fe <_printf_i+0x16a>
 8006082:	2d00      	cmp	r5, #0
 8006084:	f040 808e 	bne.w	80061a4 <_printf_i+0x210>
 8006088:	4665      	mov	r5, ip
 800608a:	2a08      	cmp	r2, #8
 800608c:	d10b      	bne.n	80060a6 <_printf_i+0x112>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	07db      	lsls	r3, r3, #31
 8006092:	d508      	bpl.n	80060a6 <_printf_i+0x112>
 8006094:	6923      	ldr	r3, [r4, #16]
 8006096:	6862      	ldr	r2, [r4, #4]
 8006098:	429a      	cmp	r2, r3
 800609a:	bfde      	ittt	le
 800609c:	2330      	movle	r3, #48	; 0x30
 800609e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060a6:	ebac 0305 	sub.w	r3, ip, r5
 80060aa:	6123      	str	r3, [r4, #16]
 80060ac:	f8cd 8000 	str.w	r8, [sp]
 80060b0:	463b      	mov	r3, r7
 80060b2:	aa03      	add	r2, sp, #12
 80060b4:	4621      	mov	r1, r4
 80060b6:	4630      	mov	r0, r6
 80060b8:	f7ff fef6 	bl	8005ea8 <_printf_common>
 80060bc:	3001      	adds	r0, #1
 80060be:	d14d      	bne.n	800615c <_printf_i+0x1c8>
 80060c0:	f04f 30ff 	mov.w	r0, #4294967295
 80060c4:	b005      	add	sp, #20
 80060c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060ca:	4839      	ldr	r0, [pc, #228]	; (80061b0 <_printf_i+0x21c>)
 80060cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80060d0:	6813      	ldr	r3, [r2, #0]
 80060d2:	6821      	ldr	r1, [r4, #0]
 80060d4:	1d1d      	adds	r5, r3, #4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6015      	str	r5, [r2, #0]
 80060da:	060a      	lsls	r2, r1, #24
 80060dc:	d50b      	bpl.n	80060f6 <_printf_i+0x162>
 80060de:	07ca      	lsls	r2, r1, #31
 80060e0:	bf44      	itt	mi
 80060e2:	f041 0120 	orrmi.w	r1, r1, #32
 80060e6:	6021      	strmi	r1, [r4, #0]
 80060e8:	b91b      	cbnz	r3, 80060f2 <_printf_i+0x15e>
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	f022 0220 	bic.w	r2, r2, #32
 80060f0:	6022      	str	r2, [r4, #0]
 80060f2:	2210      	movs	r2, #16
 80060f4:	e7b7      	b.n	8006066 <_printf_i+0xd2>
 80060f6:	064d      	lsls	r5, r1, #25
 80060f8:	bf48      	it	mi
 80060fa:	b29b      	uxthmi	r3, r3
 80060fc:	e7ef      	b.n	80060de <_printf_i+0x14a>
 80060fe:	4665      	mov	r5, ip
 8006100:	fbb3 f1f2 	udiv	r1, r3, r2
 8006104:	fb02 3311 	mls	r3, r2, r1, r3
 8006108:	5cc3      	ldrb	r3, [r0, r3]
 800610a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800610e:	460b      	mov	r3, r1
 8006110:	2900      	cmp	r1, #0
 8006112:	d1f5      	bne.n	8006100 <_printf_i+0x16c>
 8006114:	e7b9      	b.n	800608a <_printf_i+0xf6>
 8006116:	6813      	ldr	r3, [r2, #0]
 8006118:	6825      	ldr	r5, [r4, #0]
 800611a:	6961      	ldr	r1, [r4, #20]
 800611c:	1d18      	adds	r0, r3, #4
 800611e:	6010      	str	r0, [r2, #0]
 8006120:	0628      	lsls	r0, r5, #24
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	d501      	bpl.n	800612a <_printf_i+0x196>
 8006126:	6019      	str	r1, [r3, #0]
 8006128:	e002      	b.n	8006130 <_printf_i+0x19c>
 800612a:	066a      	lsls	r2, r5, #25
 800612c:	d5fb      	bpl.n	8006126 <_printf_i+0x192>
 800612e:	8019      	strh	r1, [r3, #0]
 8006130:	2300      	movs	r3, #0
 8006132:	6123      	str	r3, [r4, #16]
 8006134:	4665      	mov	r5, ip
 8006136:	e7b9      	b.n	80060ac <_printf_i+0x118>
 8006138:	6813      	ldr	r3, [r2, #0]
 800613a:	1d19      	adds	r1, r3, #4
 800613c:	6011      	str	r1, [r2, #0]
 800613e:	681d      	ldr	r5, [r3, #0]
 8006140:	6862      	ldr	r2, [r4, #4]
 8006142:	2100      	movs	r1, #0
 8006144:	4628      	mov	r0, r5
 8006146:	f7fa f843 	bl	80001d0 <memchr>
 800614a:	b108      	cbz	r0, 8006150 <_printf_i+0x1bc>
 800614c:	1b40      	subs	r0, r0, r5
 800614e:	6060      	str	r0, [r4, #4]
 8006150:	6863      	ldr	r3, [r4, #4]
 8006152:	6123      	str	r3, [r4, #16]
 8006154:	2300      	movs	r3, #0
 8006156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800615a:	e7a7      	b.n	80060ac <_printf_i+0x118>
 800615c:	6923      	ldr	r3, [r4, #16]
 800615e:	462a      	mov	r2, r5
 8006160:	4639      	mov	r1, r7
 8006162:	4630      	mov	r0, r6
 8006164:	47c0      	blx	r8
 8006166:	3001      	adds	r0, #1
 8006168:	d0aa      	beq.n	80060c0 <_printf_i+0x12c>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	079b      	lsls	r3, r3, #30
 800616e:	d413      	bmi.n	8006198 <_printf_i+0x204>
 8006170:	68e0      	ldr	r0, [r4, #12]
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	4298      	cmp	r0, r3
 8006176:	bfb8      	it	lt
 8006178:	4618      	movlt	r0, r3
 800617a:	e7a3      	b.n	80060c4 <_printf_i+0x130>
 800617c:	2301      	movs	r3, #1
 800617e:	464a      	mov	r2, r9
 8006180:	4639      	mov	r1, r7
 8006182:	4630      	mov	r0, r6
 8006184:	47c0      	blx	r8
 8006186:	3001      	adds	r0, #1
 8006188:	d09a      	beq.n	80060c0 <_printf_i+0x12c>
 800618a:	3501      	adds	r5, #1
 800618c:	68e3      	ldr	r3, [r4, #12]
 800618e:	9a03      	ldr	r2, [sp, #12]
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	42ab      	cmp	r3, r5
 8006194:	dcf2      	bgt.n	800617c <_printf_i+0x1e8>
 8006196:	e7eb      	b.n	8006170 <_printf_i+0x1dc>
 8006198:	2500      	movs	r5, #0
 800619a:	f104 0919 	add.w	r9, r4, #25
 800619e:	e7f5      	b.n	800618c <_printf_i+0x1f8>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1ac      	bne.n	80060fe <_printf_i+0x16a>
 80061a4:	7803      	ldrb	r3, [r0, #0]
 80061a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061ae:	e76c      	b.n	800608a <_printf_i+0xf6>
 80061b0:	0800832d 	.word	0x0800832d
 80061b4:	0800833e 	.word	0x0800833e

080061b8 <_sbrk_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4c06      	ldr	r4, [pc, #24]	; (80061d4 <_sbrk_r+0x1c>)
 80061bc:	2300      	movs	r3, #0
 80061be:	4605      	mov	r5, r0
 80061c0:	4608      	mov	r0, r1
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	f7fb f942 	bl	800144c <_sbrk>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_sbrk_r+0x1a>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_sbrk_r+0x1a>
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	20000884 	.word	0x20000884

080061d8 <__sread>:
 80061d8:	b510      	push	{r4, lr}
 80061da:	460c      	mov	r4, r1
 80061dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e0:	f000 f8e0 	bl	80063a4 <_read_r>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	bfab      	itete	ge
 80061e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061ea:	89a3      	ldrhlt	r3, [r4, #12]
 80061ec:	181b      	addge	r3, r3, r0
 80061ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061f2:	bfac      	ite	ge
 80061f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80061f6:	81a3      	strhlt	r3, [r4, #12]
 80061f8:	bd10      	pop	{r4, pc}

080061fa <__swrite>:
 80061fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fe:	461f      	mov	r7, r3
 8006200:	898b      	ldrh	r3, [r1, #12]
 8006202:	05db      	lsls	r3, r3, #23
 8006204:	4605      	mov	r5, r0
 8006206:	460c      	mov	r4, r1
 8006208:	4616      	mov	r6, r2
 800620a:	d505      	bpl.n	8006218 <__swrite+0x1e>
 800620c:	2302      	movs	r3, #2
 800620e:	2200      	movs	r2, #0
 8006210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006214:	f000 f868 	bl	80062e8 <_lseek_r>
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800621e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006222:	81a3      	strh	r3, [r4, #12]
 8006224:	4632      	mov	r2, r6
 8006226:	463b      	mov	r3, r7
 8006228:	4628      	mov	r0, r5
 800622a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800622e:	f000 b817 	b.w	8006260 <_write_r>

08006232 <__sseek>:
 8006232:	b510      	push	{r4, lr}
 8006234:	460c      	mov	r4, r1
 8006236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800623a:	f000 f855 	bl	80062e8 <_lseek_r>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	bf15      	itete	ne
 8006244:	6560      	strne	r0, [r4, #84]	; 0x54
 8006246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800624a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800624e:	81a3      	strheq	r3, [r4, #12]
 8006250:	bf18      	it	ne
 8006252:	81a3      	strhne	r3, [r4, #12]
 8006254:	bd10      	pop	{r4, pc}

08006256 <__sclose>:
 8006256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800625a:	f000 b813 	b.w	8006284 <_close_r>
	...

08006260 <_write_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4c07      	ldr	r4, [pc, #28]	; (8006280 <_write_r+0x20>)
 8006264:	4605      	mov	r5, r0
 8006266:	4608      	mov	r0, r1
 8006268:	4611      	mov	r1, r2
 800626a:	2200      	movs	r2, #0
 800626c:	6022      	str	r2, [r4, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	f7fb f89b 	bl	80013aa <_write>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d102      	bne.n	800627e <_write_r+0x1e>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	b103      	cbz	r3, 800627e <_write_r+0x1e>
 800627c:	602b      	str	r3, [r5, #0]
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	20000884 	.word	0x20000884

08006284 <_close_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4c06      	ldr	r4, [pc, #24]	; (80062a0 <_close_r+0x1c>)
 8006288:	2300      	movs	r3, #0
 800628a:	4605      	mov	r5, r0
 800628c:	4608      	mov	r0, r1
 800628e:	6023      	str	r3, [r4, #0]
 8006290:	f7fb f8a7 	bl	80013e2 <_close>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_close_r+0x1a>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	b103      	cbz	r3, 800629e <_close_r+0x1a>
 800629c:	602b      	str	r3, [r5, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	20000884 	.word	0x20000884

080062a4 <_fstat_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4c07      	ldr	r4, [pc, #28]	; (80062c4 <_fstat_r+0x20>)
 80062a8:	2300      	movs	r3, #0
 80062aa:	4605      	mov	r5, r0
 80062ac:	4608      	mov	r0, r1
 80062ae:	4611      	mov	r1, r2
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	f7fb f8a2 	bl	80013fa <_fstat>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	d102      	bne.n	80062c0 <_fstat_r+0x1c>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	b103      	cbz	r3, 80062c0 <_fstat_r+0x1c>
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	bd38      	pop	{r3, r4, r5, pc}
 80062c2:	bf00      	nop
 80062c4:	20000884 	.word	0x20000884

080062c8 <_isatty_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4c06      	ldr	r4, [pc, #24]	; (80062e4 <_isatty_r+0x1c>)
 80062cc:	2300      	movs	r3, #0
 80062ce:	4605      	mov	r5, r0
 80062d0:	4608      	mov	r0, r1
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	f7fb f8a1 	bl	800141a <_isatty>
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	d102      	bne.n	80062e2 <_isatty_r+0x1a>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	b103      	cbz	r3, 80062e2 <_isatty_r+0x1a>
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
 80062e4:	20000884 	.word	0x20000884

080062e8 <_lseek_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4c07      	ldr	r4, [pc, #28]	; (8006308 <_lseek_r+0x20>)
 80062ec:	4605      	mov	r5, r0
 80062ee:	4608      	mov	r0, r1
 80062f0:	4611      	mov	r1, r2
 80062f2:	2200      	movs	r2, #0
 80062f4:	6022      	str	r2, [r4, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	f7fb f89a 	bl	8001430 <_lseek>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d102      	bne.n	8006306 <_lseek_r+0x1e>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	b103      	cbz	r3, 8006306 <_lseek_r+0x1e>
 8006304:	602b      	str	r3, [r5, #0]
 8006306:	bd38      	pop	{r3, r4, r5, pc}
 8006308:	20000884 	.word	0x20000884

0800630c <memcpy>:
 800630c:	b510      	push	{r4, lr}
 800630e:	1e43      	subs	r3, r0, #1
 8006310:	440a      	add	r2, r1
 8006312:	4291      	cmp	r1, r2
 8006314:	d100      	bne.n	8006318 <memcpy+0xc>
 8006316:	bd10      	pop	{r4, pc}
 8006318:	f811 4b01 	ldrb.w	r4, [r1], #1
 800631c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006320:	e7f7      	b.n	8006312 <memcpy+0x6>

08006322 <memmove>:
 8006322:	4288      	cmp	r0, r1
 8006324:	b510      	push	{r4, lr}
 8006326:	eb01 0302 	add.w	r3, r1, r2
 800632a:	d807      	bhi.n	800633c <memmove+0x1a>
 800632c:	1e42      	subs	r2, r0, #1
 800632e:	4299      	cmp	r1, r3
 8006330:	d00a      	beq.n	8006348 <memmove+0x26>
 8006332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006336:	f802 4f01 	strb.w	r4, [r2, #1]!
 800633a:	e7f8      	b.n	800632e <memmove+0xc>
 800633c:	4283      	cmp	r3, r0
 800633e:	d9f5      	bls.n	800632c <memmove+0xa>
 8006340:	1881      	adds	r1, r0, r2
 8006342:	1ad2      	subs	r2, r2, r3
 8006344:	42d3      	cmn	r3, r2
 8006346:	d100      	bne.n	800634a <memmove+0x28>
 8006348:	bd10      	pop	{r4, pc}
 800634a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800634e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006352:	e7f7      	b.n	8006344 <memmove+0x22>

08006354 <__malloc_lock>:
 8006354:	4770      	bx	lr

08006356 <__malloc_unlock>:
 8006356:	4770      	bx	lr

08006358 <_realloc_r>:
 8006358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635a:	4607      	mov	r7, r0
 800635c:	4614      	mov	r4, r2
 800635e:	460e      	mov	r6, r1
 8006360:	b921      	cbnz	r1, 800636c <_realloc_r+0x14>
 8006362:	4611      	mov	r1, r2
 8006364:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006368:	f7ff bbf2 	b.w	8005b50 <_malloc_r>
 800636c:	b922      	cbnz	r2, 8006378 <_realloc_r+0x20>
 800636e:	f7ff fba1 	bl	8005ab4 <_free_r>
 8006372:	4625      	mov	r5, r4
 8006374:	4628      	mov	r0, r5
 8006376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006378:	f000 f826 	bl	80063c8 <_malloc_usable_size_r>
 800637c:	42a0      	cmp	r0, r4
 800637e:	d20f      	bcs.n	80063a0 <_realloc_r+0x48>
 8006380:	4621      	mov	r1, r4
 8006382:	4638      	mov	r0, r7
 8006384:	f7ff fbe4 	bl	8005b50 <_malloc_r>
 8006388:	4605      	mov	r5, r0
 800638a:	2800      	cmp	r0, #0
 800638c:	d0f2      	beq.n	8006374 <_realloc_r+0x1c>
 800638e:	4631      	mov	r1, r6
 8006390:	4622      	mov	r2, r4
 8006392:	f7ff ffbb 	bl	800630c <memcpy>
 8006396:	4631      	mov	r1, r6
 8006398:	4638      	mov	r0, r7
 800639a:	f7ff fb8b 	bl	8005ab4 <_free_r>
 800639e:	e7e9      	b.n	8006374 <_realloc_r+0x1c>
 80063a0:	4635      	mov	r5, r6
 80063a2:	e7e7      	b.n	8006374 <_realloc_r+0x1c>

080063a4 <_read_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4c07      	ldr	r4, [pc, #28]	; (80063c4 <_read_r+0x20>)
 80063a8:	4605      	mov	r5, r0
 80063aa:	4608      	mov	r0, r1
 80063ac:	4611      	mov	r1, r2
 80063ae:	2200      	movs	r2, #0
 80063b0:	6022      	str	r2, [r4, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f7fa ffdc 	bl	8001370 <_read>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d102      	bne.n	80063c2 <_read_r+0x1e>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	b103      	cbz	r3, 80063c2 <_read_r+0x1e>
 80063c0:	602b      	str	r3, [r5, #0]
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
 80063c4:	20000884 	.word	0x20000884

080063c8 <_malloc_usable_size_r>:
 80063c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063cc:	1f18      	subs	r0, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bfbc      	itt	lt
 80063d2:	580b      	ldrlt	r3, [r1, r0]
 80063d4:	18c0      	addlt	r0, r0, r3
 80063d6:	4770      	bx	lr

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr
