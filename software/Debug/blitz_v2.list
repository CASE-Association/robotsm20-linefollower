
blitz_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021e8  08009880  08009880  00019880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba68  0800ba68  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba68  0800ba68  0001ba68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba70  0800ba70  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba70  0800ba70  0001ba70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba74  0800ba74  0001ba74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800ba78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d4  200001f8  0800bc70  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000acc  0800bc70  00020acc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015935  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e6c  00000000  00000000  00035b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  000389d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  00039ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022320  00000000  00000000  0003adf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f8a5  00000000  00000000  0005d118  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7da9  00000000  00000000  0006c9bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134766  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c48  00000000  00000000  001347e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009868 	.word	0x08009868

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08009868 	.word	0x08009868

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 8000eb0:	1d39      	adds	r1, r7, #4
 8000eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <__io_putchar+0x20>)
 8000eba:	f005 fc42 	bl	8006742 <HAL_UART_Transmit>
	return ch;
 8000ebe:	687b      	ldr	r3, [r7, #4]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	2000079c 	.word	0x2000079c

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f002 f948 	bl	8003164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f8a2 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 fbee 	bl	80016b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000edc:	f000 fbcc 	bl	8001678 <MX_DMA_Init>
  MX_I2C3_Init();
 8000ee0:	f000 f95c 	bl	800119c <MX_I2C3_Init>
  MX_TIM1_Init();
 8000ee4:	f000 f988 	bl	80011f8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000ee8:	f000 fb9c 	bl	8001624 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000eec:	f000 fabe 	bl	800146c <MX_TIM4_Init>
  MX_TIM3_Init();
 8000ef0:	f000 fa58 	bl	80013a4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000ef4:	f000 f8f0 	bl	80010d8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ef8:	f000 fa00 	bl	80012fc <MX_TIM2_Init>
  MX_TIM5_Init();
 8000efc:	f000 fb1a 	bl	8001534 <MX_TIM5_Init>
  MX_TIM14_Init();
 8000f00:	f000 fb6c 	bl	80015dc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  printf("========== Blitz V2 ==========\r\n");
 8000f04:	4837      	ldr	r0, [pc, #220]	; (8000fe4 <main+0x118>)
 8000f06:	f006 fd65 	bl	80079d4 <puts>
  printf("Created by Oskar & Isak\r\n");
 8000f0a:	4837      	ldr	r0, [pc, #220]	; (8000fe8 <main+0x11c>)
 8000f0c:	f006 fd62 	bl	80079d4 <puts>


  printf("\r\n========== Initializing peripherals ==========\r\n");
 8000f10:	4836      	ldr	r0, [pc, #216]	; (8000fec <main+0x120>)
 8000f12:	f006 fd5f 	bl	80079d4 <puts>
  printf("\t- Buzzer\r\n");
 8000f16:	4836      	ldr	r0, [pc, #216]	; (8000ff0 <main+0x124>)
 8000f18:	f006 fd5c 	bl	80079d4 <puts>
  init_buzzer();
 8000f1c:	f001 f87a 	bl	8002014 <init_buzzer>
  //Startup beep
  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000f20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f24:	4833      	ldr	r0, [pc, #204]	; (8000ff4 <main+0x128>)
 8000f26:	f003 fbf0 	bl	800470a <HAL_GPIO_TogglePin>
	tone(523,200);
 8000f2a:	21c8      	movs	r1, #200	; 0xc8
 8000f2c:	f240 200b 	movw	r0, #523	; 0x20b
 8000f30:	f001 f89a 	bl	8002068 <tone>
	HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f38:	482e      	ldr	r0, [pc, #184]	; (8000ff4 <main+0x128>)
 8000f3a:	f003 fbe6 	bl	800470a <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f42:	482c      	ldr	r0, [pc, #176]	; (8000ff4 <main+0x128>)
 8000f44:	f003 fbe1 	bl	800470a <HAL_GPIO_TogglePin>
	tone(659,200);
 8000f48:	21c8      	movs	r1, #200	; 0xc8
 8000f4a:	f240 2093 	movw	r0, #659	; 0x293
 8000f4e:	f001 f88b 	bl	8002068 <tone>
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000f52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f56:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <main+0x128>)
 8000f58:	f003 fbd7 	bl	800470a <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000f5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f60:	4825      	ldr	r0, [pc, #148]	; (8000ff8 <main+0x12c>)
 8000f62:	f003 fbd2 	bl	800470a <HAL_GPIO_TogglePin>
	tone(784,200);
 8000f66:	21c8      	movs	r1, #200	; 0xc8
 8000f68:	f44f 7044 	mov.w	r0, #784	; 0x310
 8000f6c:	f001 f87c 	bl	8002068 <tone>
	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f74:	4820      	ldr	r0, [pc, #128]	; (8000ff8 <main+0x12c>)
 8000f76:	f003 fbc8 	bl	800470a <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000f7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f7e:	f002 f963 	bl	8003248 <HAL_Delay>

  printf("\t- OLED\r\n");
 8000f82:	481e      	ldr	r0, [pc, #120]	; (8000ffc <main+0x130>)
 8000f84:	f006 fd26 	bl	80079d4 <puts>
  init_oled(); // Draws CASE LOGO for now
 8000f88:	f001 f950 	bl	800222c <init_oled>
  //HAL_Delay(500);
  printf("\t- Motors\r\n");
 8000f8c:	481c      	ldr	r0, [pc, #112]	; (8001000 <main+0x134>)
 8000f8e:	f006 fd21 	bl	80079d4 <puts>
  init_motors();
 8000f92:	f001 f8b5 	bl	8002100 <init_motors>
  //HAL_Delay(500);
  printf("\t- Fans\r\n");
 8000f96:	481b      	ldr	r0, [pc, #108]	; (8001004 <main+0x138>)
 8000f98:	f006 fd1c 	bl	80079d4 <puts>
  init_fans();
 8000f9c:	f001 f88c 	bl	80020b8 <init_fans>
 // HAL_Delay(3000); //Wait for fans to beep
  printf("\t- Voltage meter\r\n");
 8000fa0:	4819      	ldr	r0, [pc, #100]	; (8001008 <main+0x13c>)
 8000fa2:	f006 fd17 	bl	80079d4 <puts>
  init_voltmeter();
 8000fa6:	f001 fff1 	bl	8002f8c <init_voltmeter>


  // Run all tests
  //tests_run();

  printf("\r\n========== Starting Blitz ==========\r\n");
 8000faa:	4818      	ldr	r0, [pc, #96]	; (800100c <main+0x140>)
 8000fac:	f006 fd12 	bl	80079d4 <puts>
    /* USER CODE BEGIN 3 */

  	//printf("Left Enc: %d\t\t Right Enc: %d\r\n", (int)TIM2->CNT, (int)TIM5->CNT);


  	voltm_boost = GET_voltage_boost();
 8000fb0:	f002 f868 	bl	8003084 <GET_voltage_boost>
 8000fb4:	eef0 7a40 	vmov.f32	s15, s0
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <main+0x144>)
 8000fba:	edc3 7a00 	vstr	s15, [r3]
  	voltm_batt = GET_voltage_battery();
 8000fbe:	f002 f84f 	bl	8003060 <GET_voltage_battery>
 8000fc2:	eef0 7a40 	vmov.f32	s15, s0
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <main+0x148>)
 8000fc8:	edc3 7a00 	vstr	s15, [r3]
  	battery_status = GET_battery_status();
 8000fcc:	f002 f86c 	bl	80030a8 <GET_battery_status>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <main+0x14c>)
 8000fd6:	701a      	strb	r2, [r3, #0]


  	oled_update();
 8000fd8:	f001 fa1e 	bl	8002418 <oled_update>
  	HAL_Delay(10);
 8000fdc:	200a      	movs	r0, #10
 8000fde:	f002 f933 	bl	8003248 <HAL_Delay>
  	voltm_boost = GET_voltage_boost();
 8000fe2:	e7e5      	b.n	8000fb0 <main+0xe4>
 8000fe4:	080098c8 	.word	0x080098c8
 8000fe8:	080098e8 	.word	0x080098e8
 8000fec:	08009904 	.word	0x08009904
 8000ff0:	080098a4 	.word	0x080098a4
 8000ff4:	40020800 	.word	0x40020800
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	08009938 	.word	0x08009938
 8001000:	080098b0 	.word	0x080098b0
 8001004:	080098bc 	.word	0x080098bc
 8001008:	08009944 	.word	0x08009944
 800100c:	08009958 	.word	0x08009958
 8001010:	200006d0 	.word	0x200006d0
 8001014:	20000840 	.word	0x20000840
 8001018:	2000083c 	.word	0x2000083c

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	2230      	movs	r2, #48	; 0x30
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f006 f812 	bl	8007054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <SystemClock_Config+0xb4>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <SystemClock_Config+0xb4>)
 800104a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104e:	6413      	str	r3, [r2, #64]	; 0x40
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <SystemClock_Config+0xb4>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <SystemClock_Config+0xb8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <SystemClock_Config+0xb8>)
 8001066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <SystemClock_Config+0xb8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107c:	2301      	movs	r3, #1
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001080:	2310      	movs	r3, #16
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001084:	2300      	movs	r3, #0
 8001086:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	4618      	mov	r0, r3
 800108e:	f003 ffc9 	bl	8005024 <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001098:	f000 fbae 	bl	80017f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	230f      	movs	r3, #15
 800109e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 fa24 	bl	8005504 <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010c2:	f000 fb99 	bl	80017f8 <Error_Handler>
  }
}
 80010c6:	bf00      	nop
 80010c8:	3750      	adds	r7, #80	; 0x50
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000

080010d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <MX_ADC1_Init+0xb8>)
 80010ec:	4a29      	ldr	r2, [pc, #164]	; (8001194 <MX_ADC1_Init+0xbc>)
 80010ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <MX_ADC1_Init+0xb8>)
 80010f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <MX_ADC1_Init+0xb8>)
 80010fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <MX_ADC1_Init+0xb8>)
 8001102:	2201      	movs	r2, #1
 8001104:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001106:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_ADC1_Init+0xb8>)
 8001108:	2201      	movs	r2, #1
 800110a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <MX_ADC1_Init+0xb8>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_ADC1_Init+0xb8>)
 8001116:	2200      	movs	r2, #0
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_ADC1_Init+0xb8>)
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <MX_ADC1_Init+0xc0>)
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_ADC1_Init+0xb8>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_ADC1_Init+0xb8>)
 8001128:	2202      	movs	r2, #2
 800112a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_ADC1_Init+0xb8>)
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_ADC1_Init+0xb8>)
 8001136:	2201      	movs	r2, #1
 8001138:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800113a:	4815      	ldr	r0, [pc, #84]	; (8001190 <MX_ADC1_Init+0xb8>)
 800113c:	f002 f8a6 	bl	800328c <HAL_ADC_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001146:	f000 fb57 	bl	80017f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800114a:	2302      	movs	r3, #2
 800114c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800114e:	2301      	movs	r3, #1
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001152:	2305      	movs	r3, #5
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_ADC1_Init+0xb8>)
 800115c:	f002 f9ea 	bl	8003534 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001166:	f000 fb47 	bl	80017f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800116a:	2303      	movs	r3, #3
 800116c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <MX_ADC1_Init+0xb8>)
 8001178:	f002 f9dc 	bl	8003534 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001182:	f000 fb39 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000754 	.word	0x20000754
 8001194:	40012000 	.word	0x40012000
 8001198:	0f000001 	.word	0x0f000001

0800119c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_I2C3_Init+0x50>)
 80011a2:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <MX_I2C3_Init+0x54>)
 80011a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_I2C3_Init+0x50>)
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <MX_I2C3_Init+0x58>)
 80011aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_I2C3_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_I2C3_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_I2C3_Init+0x50>)
 80011ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011be:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_I2C3_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_I2C3_Init+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <MX_I2C3_Init+0x50>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_I2C3_Init+0x50>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_I2C3_Init+0x50>)
 80011da:	f003 fad5 	bl	8004788 <HAL_I2C_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80011e4:	f000 fb08 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000063c 	.word	0x2000063c
 80011f0:	40005c00 	.word	0x40005c00
 80011f4:	00061a80 	.word	0x00061a80

080011f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b092      	sub	sp, #72	; 0x48
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2220      	movs	r2, #32
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f005 ff16 	bl	8007054 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <MX_TIM1_Init+0xfc>)
 800122a:	4a33      	ldr	r2, [pc, #204]	; (80012f8 <MX_TIM1_Init+0x100>)
 800122c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 800122e:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <MX_TIM1_Init+0xfc>)
 8001230:	2203      	movs	r2, #3
 8001232:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <MX_TIM1_Init+0xfc>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800123a:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <MX_TIM1_Init+0xfc>)
 800123c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001240:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <MX_TIM1_Init+0xfc>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <MX_TIM1_Init+0xfc>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <MX_TIM1_Init+0xfc>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001254:	4827      	ldr	r0, [pc, #156]	; (80012f4 <MX_TIM1_Init+0xfc>)
 8001256:	f004 fb9b 	bl	8005990 <HAL_TIM_PWM_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001260:	f000 faca 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001270:	4619      	mov	r1, r3
 8001272:	4820      	ldr	r0, [pc, #128]	; (80012f4 <MX_TIM1_Init+0xfc>)
 8001274:	f005 f936 	bl	80064e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800127e:	f000 fabb 	bl	80017f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001282:	2360      	movs	r3, #96	; 0x60
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	220c      	movs	r2, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	4814      	ldr	r0, [pc, #80]	; (80012f4 <MX_TIM1_Init+0xfc>)
 80012a4:	f004 fdb0 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80012ae:	f000 faa3 	bl	80017f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM1_Init+0xfc>)
 80012d6:	f005 f981 	bl	80065dc <HAL_TIMEx_ConfigBreakDeadTime>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80012e0:	f000 fa8a 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM1_Init+0xfc>)
 80012e6:	f000 fca7 	bl	8001c38 <HAL_TIM_MspPostInit>

}
 80012ea:	bf00      	nop
 80012ec:	3748      	adds	r7, #72	; 0x48
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000844 	.word	0x20000844
 80012f8:	40010000 	.word	0x40010000

080012fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2224      	movs	r2, #36	; 0x24
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f005 fea2 	bl	8007054 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MX_TIM2_Init+0xa4>)
 800131a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_TIM2_Init+0xa4>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_TIM2_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_TIM2_Init+0xa4>)
 800132e:	f04f 32ff 	mov.w	r2, #4294967295
 8001332:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_TIM2_Init+0xa4>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_TIM2_Init+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001340:	2303      	movs	r3, #3
 8001342:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001348:	2301      	movs	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001354:	2302      	movs	r3, #2
 8001356:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001358:	2301      	movs	r3, #1
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_TIM2_Init+0xa4>)
 800136c:	f004 fb7a 	bl	8005a64 <HAL_TIM_Encoder_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001376:	f000 fa3f 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <MX_TIM2_Init+0xa4>)
 8001388:	f005 f8ac 	bl	80064e4 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001392:	f000 fa31 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3730      	adds	r7, #48	; 0x30
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000884 	.word	0x20000884

080013a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013c8:	4a27      	ldr	r2, [pc, #156]	; (8001468 <MX_TIM3_Init+0xc4>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013ce:	220f      	movs	r2, #15
 80013d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013da:	f644 6220 	movw	r2, #20000	; 0x4e20
 80013de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b20      	ldr	r3, [pc, #128]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013ec:	481d      	ldr	r0, [pc, #116]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013ee:	f004 facf 	bl	8005990 <HAL_TIM_PWM_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80013f8:	f000 f9fe 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4619      	mov	r1, r3
 800140a:	4816      	ldr	r0, [pc, #88]	; (8001464 <MX_TIM3_Init+0xc0>)
 800140c:	f005 f86a 	bl	80064e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001416:	f000 f9ef 	bl	80017f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141a:	2360      	movs	r3, #96	; 0x60
 800141c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <MX_TIM3_Init+0xc0>)
 8001432:	f004 fce9 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800143c:	f000 f9dc 	bl	80017f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2204      	movs	r2, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4807      	ldr	r0, [pc, #28]	; (8001464 <MX_TIM3_Init+0xc0>)
 8001448:	f004 fcde 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001452:	f000 f9d1 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001456:	4803      	ldr	r0, [pc, #12]	; (8001464 <MX_TIM3_Init+0xc0>)
 8001458:	f000 fbee 	bl	8001c38 <HAL_TIM_MspPostInit>

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000714 	.word	0x20000714
 8001468:	40000400 	.word	0x40000400

0800146c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	615a      	str	r2, [r3, #20]
 800148c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <MX_TIM4_Init+0xc0>)
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <MX_TIM4_Init+0xc4>)
 8001492:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <MX_TIM4_Init+0xc0>)
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <MX_TIM4_Init+0xc0>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <MX_TIM4_Init+0xc0>)
 80014a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <MX_TIM4_Init+0xc0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_TIM4_Init+0xc0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014b4:	481d      	ldr	r0, [pc, #116]	; (800152c <MX_TIM4_Init+0xc0>)
 80014b6:	f004 fa6b 	bl	8005990 <HAL_TIM_PWM_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80014c0:	f000 f99a 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4619      	mov	r1, r3
 80014d2:	4816      	ldr	r0, [pc, #88]	; (800152c <MX_TIM4_Init+0xc0>)
 80014d4:	f005 f806 	bl	80064e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80014de:	f000 f98b 	bl	80017f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e2:	2360      	movs	r3, #96	; 0x60
 80014e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2208      	movs	r2, #8
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <MX_TIM4_Init+0xc0>)
 80014fa:	f004 fc85 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001504:	f000 f978 	bl	80017f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	220c      	movs	r2, #12
 800150c:	4619      	mov	r1, r3
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_TIM4_Init+0xc0>)
 8001510:	f004 fc7a 	bl	8005e08 <HAL_TIM_PWM_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800151a:	f000 f96d 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <MX_TIM4_Init+0xc0>)
 8001520:	f000 fb8a 	bl	8001c38 <HAL_TIM_MspPostInit>

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000690 	.word	0x20000690
 8001530:	40000800 	.word	0x40000800

08001534 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f005 fd86 	bl	8007054 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <MX_TIM5_Init+0xa0>)
 8001552:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <MX_TIM5_Init+0xa4>)
 8001554:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MX_TIM5_Init+0xa0>)
 8001558:	2200      	movs	r2, #0
 800155a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_TIM5_Init+0xa0>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <MX_TIM5_Init+0xa0>)
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_TIM5_Init+0xa0>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_TIM5_Init+0xa0>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001576:	2301      	movs	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800158a:	2302      	movs	r3, #2
 800158c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800158e:	2301      	movs	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4619      	mov	r1, r3
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_TIM5_Init+0xa0>)
 80015a2:	f004 fa5f 	bl	8005a64 <HAL_TIM_Encoder_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80015ac:	f000 f924 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_TIM5_Init+0xa0>)
 80015be:	f004 ff91 	bl	80064e4 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80015c8:	f000 f916 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3730      	adds	r7, #48	; 0x30
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200006d4 	.word	0x200006d4
 80015d8:	40000c00 	.word	0x40000c00

080015dc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_TIM14_Init+0x40>)
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <MX_TIM14_Init+0x44>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000;
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <MX_TIM14_Init+0x40>)
 80015e8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80015ec:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_TIM14_Init+0x40>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_TIM14_Init+0x40>)
 80015f6:	2232      	movs	r2, #50	; 0x32
 80015f8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_TIM14_Init+0x40>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_TIM14_Init+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_TIM14_Init+0x40>)
 8001608:	f004 f948 	bl	800589c <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001612:	f000 f8f1 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200008c4 	.word	0x200008c4
 8001620:	40002000 	.word	0x40002000

08001624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <MX_USART1_UART_Init+0x50>)
 800162c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 800165c:	f005 f824 	bl	80066a8 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001666:	f000 f8c7 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000079c 	.word	0x2000079c
 8001674:	40011000 	.word	0x40011000

08001678 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_DMA_Init+0x3c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <MX_DMA_Init+0x3c>)
 8001688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_DMA_Init+0x3c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2038      	movs	r0, #56	; 0x38
 80016a0:	f002 fac3 	bl	8003c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016a4:	2038      	movs	r0, #56	; 0x38
 80016a6:	f002 fadc 	bl	8003c62 <HAL_NVIC_EnableIRQ>

}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <MX_GPIO_Init+0x12c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a43      	ldr	r2, [pc, #268]	; (80017e4 <MX_GPIO_Init+0x12c>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <MX_GPIO_Init+0x12c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <MX_GPIO_Init+0x12c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a3c      	ldr	r2, [pc, #240]	; (80017e4 <MX_GPIO_Init+0x12c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <MX_GPIO_Init+0x12c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <MX_GPIO_Init+0x12c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a35      	ldr	r2, [pc, #212]	; (80017e4 <MX_GPIO_Init+0x12c>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <MX_GPIO_Init+0x12c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001728:	482f      	ldr	r0, [pc, #188]	; (80017e8 <MX_GPIO_Init+0x130>)
 800172a:	f002 ffd5 	bl	80046d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001734:	482d      	ldr	r0, [pc, #180]	; (80017ec <MX_GPIO_Init+0x134>)
 8001736:	f002 ffcf 	bl	80046d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin|MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	21f0      	movs	r1, #240	; 0xf0
 800173e:	482c      	ldr	r0, [pc, #176]	; (80017f0 <MX_GPIO_Init+0x138>)
 8001740:	f002 ffca 	bl	80046d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_SELECT_Pin */
  GPIO_InitStruct.Pin = BUTTON_SELECT_Pin;
 8001744:	2308      	movs	r3, #8
 8001746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <MX_GPIO_Init+0x13c>)
 800174a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_SELECT_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	4619      	mov	r1, r3
 8001756:	4825      	ldr	r0, [pc, #148]	; (80017ec <MX_GPIO_Init+0x134>)
 8001758:	f002 fe0c 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800175c:	2304      	movs	r3, #4
 800175e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	4619      	mov	r1, r3
 800176e:	4820      	ldr	r0, [pc, #128]	; (80017f0 <MX_GPIO_Init+0x138>)
 8001770:	f002 fe00 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8001774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	4619      	mov	r1, r3
 800178c:	4816      	ldr	r0, [pc, #88]	; (80017e8 <MX_GPIO_Init+0x130>)
 800178e:	f002 fdf1 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8001792:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4619      	mov	r1, r3
 80017aa:	4810      	ldr	r0, [pc, #64]	; (80017ec <MX_GPIO_Init+0x134>)
 80017ac:	f002 fde2 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_R_IN2_Pin MOTOR_R_IN1_Pin MOTOR_L_IN2_Pin MOTOR_L_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin|MOTOR_L_IN1_Pin;
 80017b0:	23f0      	movs	r3, #240	; 0xf0
 80017b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4619      	mov	r1, r3
 80017c6:	480a      	ldr	r0, [pc, #40]	; (80017f0 <MX_GPIO_Init+0x138>)
 80017c8:	f002 fdd4 	bl	8004374 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2009      	movs	r0, #9
 80017d2:	f002 fa2a 	bl	8003c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017d6:	2009      	movs	r0, #9
 80017d8:	f002 fa43 	bl	8003c62 <HAL_NVIC_EnableIRQ>

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020400 	.word	0x40020400
 80017f4:	10210000 	.word	0x10210000

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_MspInit+0x4c>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a0f      	ldr	r2, [pc, #60]	; (8001854 <HAL_MspInit+0x4c>)
 8001818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_MspInit+0x4c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_MspInit+0x4c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a08      	ldr	r2, [pc, #32]	; (8001854 <HAL_MspInit+0x4c>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_MspInit+0x4c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800

08001858 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a2e      	ldr	r2, [pc, #184]	; (8001930 <HAL_ADC_MspInit+0xd8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d155      	bne.n	8001926 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_ADC_MspInit+0xdc>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	4a2c      	ldr	r2, [pc, #176]	; (8001934 <HAL_ADC_MspInit+0xdc>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6453      	str	r3, [r2, #68]	; 0x44
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_ADC_MspInit+0xdc>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_ADC_MspInit+0xdc>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a25      	ldr	r2, [pc, #148]	; (8001934 <HAL_ADC_MspInit+0xdc>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_ADC_MspInit+0xdc>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = VOLTM_BOOST_Pin|VOLTM_BATT_Pin;
 80018b2:	230c      	movs	r3, #12
 80018b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b6:	2303      	movs	r3, #3
 80018b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	481c      	ldr	r0, [pc, #112]	; (8001938 <HAL_ADC_MspInit+0xe0>)
 80018c6:	f002 fd55 	bl	8004374 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_ADC_MspInit+0xe4>)
 80018cc:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <HAL_ADC_MspInit+0xe8>)
 80018ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_ADC_MspInit+0xe4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_ADC_MspInit+0xe4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_ADC_MspInit+0xe4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_ADC_MspInit+0xe4>)
 80018e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_ADC_MspInit+0xe4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_ADC_MspInit+0xe4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_ADC_MspInit+0xe4>)
 80018f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_ADC_MspInit+0xe4>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_ADC_MspInit+0xe4>)
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800190a:	480c      	ldr	r0, [pc, #48]	; (800193c <HAL_ADC_MspInit+0xe4>)
 800190c:	f002 f9c4 	bl	8003c98 <HAL_DMA_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001916:	f7ff ff6f 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_ADC_MspInit+0xe4>)
 800191e:	639a      	str	r2, [r3, #56]	; 0x38
 8001920:	4a06      	ldr	r2, [pc, #24]	; (800193c <HAL_ADC_MspInit+0xe4>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40012000 	.word	0x40012000
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000
 800193c:	200007dc 	.word	0x200007dc
 8001940:	40026410 	.word	0x40026410

08001944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <HAL_I2C_MspInit+0xc4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d14b      	bne.n	80019fe <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <HAL_I2C_MspInit+0xc8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <HAL_I2C_MspInit+0xc8>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <HAL_I2C_MspInit+0xc8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_I2C_MspInit+0xc8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a20      	ldr	r2, [pc, #128]	; (8001a0c <HAL_I2C_MspInit+0xc8>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_I2C_MspInit+0xc8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = SDA_Pin;
 800199e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a4:	2312      	movs	r3, #18
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019b0:	2304      	movs	r3, #4
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	4815      	ldr	r0, [pc, #84]	; (8001a10 <HAL_I2C_MspInit+0xcc>)
 80019bc:	f002 fcda 	bl	8004374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCL_Pin;
 80019c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c6:	2312      	movs	r3, #18
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019d2:	2304      	movs	r3, #4
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	480d      	ldr	r0, [pc, #52]	; (8001a14 <HAL_I2C_MspInit+0xd0>)
 80019de:	f002 fcc9 	bl	8004374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_I2C_MspInit+0xc8>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <HAL_I2C_MspInit+0xc8>)
 80019ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_I2C_MspInit+0xc8>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40005c00 	.word	0x40005c00
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020000 	.word	0x40020000

08001a18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1f      	ldr	r2, [pc, #124]	; (8001aa4 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10e      	bne.n	8001a48 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x90>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x90>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x90>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a46:	e026      	b.n	8001a96 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a17      	ldr	r2, [pc, #92]	; (8001aac <HAL_TIM_PWM_MspInit+0x94>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10e      	bne.n	8001a70 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x90>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x90>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x90>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
}
 8001a6e:	e012      	b.n	8001a96 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_TIM_PWM_MspInit+0x98>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10d      	bne.n	8001a96 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x90>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x90>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x90>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
}
 8001a96:	bf00      	nop
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	40000800 	.word	0x40000800

08001ab4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	; 0x30
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad4:	d14a      	bne.n	8001b6c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a3e      	ldr	r2, [pc, #248]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a37      	ldr	r2, [pc, #220]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a30      	ldr	r2, [pc, #192]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_L_A_Pin;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4825      	ldr	r0, [pc, #148]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x128>)
 8001b46:	f002 fc15 	bl	8004374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_L_B_Pin;
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	481e      	ldr	r0, [pc, #120]	; (8001be0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001b66:	f002 fc05 	bl	8004374 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b6a:	e030      	b.n	8001bce <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x130>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12b      	bne.n	8001bce <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a16      	ldr	r2, [pc, #88]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_R_B_Pin|ENC_R_A_Pin;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4804      	ldr	r0, [pc, #16]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x128>)
 8001bca:	f002 fbd3 	bl	8004374 <HAL_GPIO_Init>
}
 8001bce:	bf00      	nop
 8001bd0:	3730      	adds	r7, #48	; 0x30
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40000c00 	.word	0x40000c00

08001be8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_TIM_Base_MspInit+0x48>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d115      	bne.n	8001c26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_TIM_Base_MspInit+0x4c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <HAL_TIM_Base_MspInit+0x4c>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_TIM_Base_MspInit+0x4c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	202d      	movs	r0, #45	; 0x2d
 8001c1c:	f002 f805 	bl	8003c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001c20:	202d      	movs	r0, #45	; 0x2d
 8001c22:	f002 f81e 	bl	8003c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40002000 	.word	0x40002000
 8001c34:	40023800 	.word	0x40023800

08001c38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a37      	ldr	r2, [pc, #220]	; (8001d34 <HAL_TIM_MspPostInit+0xfc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d11f      	bne.n	8001c9a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_TIM_MspPostInit+0x100>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a35      	ldr	r2, [pc, #212]	; (8001d38 <HAL_TIM_MspPostInit+0x100>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <HAL_TIM_MspPostInit+0x100>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	482a      	ldr	r0, [pc, #168]	; (8001d3c <HAL_TIM_MspPostInit+0x104>)
 8001c94:	f002 fb6e 	bl	8004374 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c98:	e047      	b.n	8001d2a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a28      	ldr	r2, [pc, #160]	; (8001d40 <HAL_TIM_MspPostInit+0x108>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d11e      	bne.n	8001ce2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_TIM_MspPostInit+0x100>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	4a22      	ldr	r2, [pc, #136]	; (8001d38 <HAL_TIM_MspPostInit+0x100>)
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb4:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_TIM_MspPostInit+0x100>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_L_PWM_Pin|FAN_R_PWM_Pin;
 8001cc0:	23c0      	movs	r3, #192	; 0xc0
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481a      	ldr	r0, [pc, #104]	; (8001d44 <HAL_TIM_MspPostInit+0x10c>)
 8001cdc:	f002 fb4a 	bl	8004374 <HAL_GPIO_Init>
}
 8001ce0:	e023      	b.n	8001d2a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_TIM_MspPostInit+0x110>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d11e      	bne.n	8001d2a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_TIM_MspPostInit+0x100>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	4a10      	ldr	r2, [pc, #64]	; (8001d38 <HAL_TIM_MspPostInit+0x100>)
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
 8001cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_TIM_MspPostInit+0x100>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin|MOTOR_L_PWM_Pin;
 8001d08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4809      	ldr	r0, [pc, #36]	; (8001d4c <HAL_TIM_MspPostInit+0x114>)
 8001d26:	f002 fb25 	bl	8004374 <HAL_GPIO_Init>
}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	; 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020000 	.word	0x40020000
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40000800 	.word	0x40000800
 8001d4c:	40020400 	.word	0x40020400

08001d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <HAL_UART_MspInit+0x84>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d12c      	bne.n	8001dcc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d7c:	f043 0310 	orr.w	r3, r3, #16
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a10      	ldr	r2, [pc, #64]	; (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_UART_MspInit+0x88>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001daa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <HAL_UART_MspInit+0x8c>)
 8001dc8:	f002 fad4 	bl	8004374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40011000 	.word	0x40011000
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e34:	f001 f9e8 	bl	8003208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001e40:	2008      	movs	r0, #8
 8001e42:	f002 fc7d 	bl	8004740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  // Button might have been pressed when this interrupt is called
  // Software debounce
  if(!checking){
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <EXTI3_IRQHandler+0x24>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <EXTI3_IRQHandler+0x1e>
		HAL_TIM_Base_Start_IT(&htim14);
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <EXTI3_IRQHandler+0x28>)
 8001e50:	f003 fd4f 	bl	80058f2 <HAL_TIM_Base_Start_IT>
		checking = 1;
 8001e54:	4b02      	ldr	r3, [pc, #8]	; (8001e60 <EXTI3_IRQHandler+0x24>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000214 	.word	0x20000214
 8001e64:	200008c4 	.word	0x200008c4

08001e68 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001e6c:	4809      	ldr	r0, [pc, #36]	; (8001e94 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 8001e6e:	f003 fec2 	bl	8005bf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
  if(HAL_GPIO_ReadPin(BUTTON_SELECT_GPIO_Port, BUTTON_SELECT_Pin) == GPIO_PIN_RESET){
 8001e72:	2108      	movs	r1, #8
 8001e74:	4808      	ldr	r0, [pc, #32]	; (8001e98 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 8001e76:	f002 fc17 	bl	80046a8 <HAL_GPIO_ReadPin>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <TIM8_TRG_COM_TIM14_IRQHandler+0x28>
		checking = 0;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim14);
 8001e86:	4803      	ldr	r0, [pc, #12]	; (8001e94 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 8001e88:	f003 fd57 	bl	800593a <HAL_TIM_Base_Stop_IT>
		oled_button_press();
 8001e8c:	f000 fb36 	bl	80024fc <oled_button_press>
	}

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200008c4 	.word	0x200008c4
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	20000214 	.word	0x20000214

08001ea0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <DMA2_Stream0_IRQHandler+0x10>)
 8001ea6:	f001 fffd 	bl	8003ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200007dc 	.word	0x200007dc

08001eb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e00a      	b.n	8001edc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ec6:	f3af 8000 	nop.w
 8001eca:	4601      	mov	r1, r0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60ba      	str	r2, [r7, #8]
 8001ed2:	b2ca      	uxtb	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbf0      	blt.n	8001ec6 <_read+0x12>
	}

return len;
 8001ee4:	687b      	ldr	r3, [r7, #4]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e009      	b.n	8001f14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	60ba      	str	r2, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe ffcd 	bl	8000ea8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	dbf1      	blt.n	8001f00 <_write+0x12>
	}
	return len;
 8001f1c:	687b      	ldr	r3, [r7, #4]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_close>:

int _close(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <_isatty>:

int _isatty(int file)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
	return 1;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <_sbrk+0x50>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x16>
		heap_end = &end;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <_sbrk+0x50>)
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <_sbrk+0x54>)
 8001fa4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <_sbrk+0x50>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <_sbrk+0x50>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	466a      	mov	r2, sp
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d907      	bls.n	8001fca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001fba:	f005 f821 	bl	8007000 <__errno>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	230c      	movs	r3, #12
 8001fc2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc8:	e006      	b.n	8001fd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <_sbrk+0x50>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a03      	ldr	r2, [pc, #12]	; (8001fe0 <_sbrk+0x50>)
 8001fd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000218 	.word	0x20000218
 8001fe4:	20000ad0 	.word	0x20000ad0

08001fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <SystemInit+0x28>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	4a07      	ldr	r2, [pc, #28]	; (8002010 <SystemInit+0x28>)
 8001ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SystemInit+0x28>)
 8001ffe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002002:	609a      	str	r2, [r3, #8]
#endif
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <init_buzzer>:
  NOTE_GS5,2,

};


void init_buzzer(void){
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002018:	210c      	movs	r1, #12
 800201a:	4802      	ldr	r0, [pc, #8]	; (8002024 <init_buzzer+0x10>)
 800201c:	f003 fce4 	bl	80059e8 <HAL_TIM_PWM_Start>


}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000844 	.word	0x20000844

08002028 <beep>:

void beep(int duration){
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    if(duration > 1000)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002036:	dd02      	ble.n	800203e <beep+0x16>
        duration = 1000;
 8002038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203c:	607b      	str	r3, [r7, #4]
    if(duration < 0)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	da01      	bge.n	8002048 <beep+0x20>
        duration = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]

    TIM1->CCR4 = 200;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <beep+0x3c>)
 800204a:	22c8      	movs	r2, #200	; 0xc8
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_Delay(duration);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4618      	mov	r0, r3
 8002052:	f001 f8f9 	bl	8003248 <HAL_Delay>
    TIM1->CCR4 = 0;
 8002056:	4b03      	ldr	r3, [pc, #12]	; (8002064 <beep+0x3c>)
 8002058:	2200      	movs	r2, #0
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40010000 	.word	0x40010000

08002068 <tone>:
 * Plays a frequency for a duration
 *
 * @param int frequency - Hertz [Hz] (MAX 16kHz)
 * @param int duration - miliseconds [ms]
 */
void tone(int frequency, int duration){
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
	//Check for devision by 0
	if(frequency == 0){
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d104      	bne.n	8002082 <tone+0x1a>
		HAL_Delay(duration);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f001 f8e4 	bl	8003248 <HAL_Delay>
		return;
 8002080:	e015      	b.n	80020ae <tone+0x46>
	}

	//Calculate prescaler value
	int prescalar = 16000000 / 1000 / frequency;
 8002082:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	fb92 f3f3 	sdiv	r3, r2, r3
 800208c:	60fb      	str	r3, [r7, #12]
	TIM1->PSC = prescalar;
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <tone+0x4c>)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6293      	str	r3, [r2, #40]	; 0x28

	//Play tone
	TIM1->CCR4 = 200;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <tone+0x4c>)
 8002096:	22c8      	movs	r2, #200	; 0xc8
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(duration);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f001 f8d3 	bl	8003248 <HAL_Delay>
	TIM1->CCR4 = 0;
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <tone+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40

	//Base prescalar
	TIM1->PSC = 3;
 80020a8:	4b02      	ldr	r3, [pc, #8]	; (80020b4 <tone+0x4c>)
 80020aa:	2203      	movs	r2, #3
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40010000 	.word	0x40010000

080020b8 <init_fans>:


/**
 * Initialize fans by starting PWM timers and running startup sequence required by the ESCs.
 */
void init_fans(void){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Right
 80020bc:	2104      	movs	r1, #4
 80020be:	480e      	ldr	r0, [pc, #56]	; (80020f8 <init_fans+0x40>)
 80020c0:	f003 fc92 	bl	80059e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Left
 80020c4:	2100      	movs	r1, #0
 80020c6:	480c      	ldr	r0, [pc, #48]	; (80020f8 <init_fans+0x40>)
 80020c8:	f003 fc8e 	bl	80059e8 <HAL_TIM_PWM_Start>

	// Startup sequence
	// 1. Start arming by applying a OK signal
	// 2. Finish arming by applying 0 throttle

	TIM3->CCR2 = 1600;
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <init_fans+0x44>)
 80020ce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80020d2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = 1600;
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <init_fans+0x44>)
 80020d6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80020da:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(3000);
 80020dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020e0:	f001 f8b2 	bl	8003248 <HAL_Delay>

	TIM3->CCR2 = 1500;
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <init_fans+0x44>)
 80020e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = 1500;
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <init_fans+0x44>)
 80020ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000714 	.word	0x20000714
 80020fc:	40000400 	.word	0x40000400

08002100 <init_motors>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

void init_motors(void){
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
    // Start encoder inputs
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Right
 8002104:	213c      	movs	r1, #60	; 0x3c
 8002106:	4809      	ldr	r0, [pc, #36]	; (800212c <init_motors+0x2c>)
 8002108:	f003 fd3e 	bl	8005b88 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left
 800210c:	213c      	movs	r1, #60	; 0x3c
 800210e:	4808      	ldr	r0, [pc, #32]	; (8002130 <init_motors+0x30>)
 8002110:	f003 fd3a 	bl	8005b88 <HAL_TIM_Encoder_Start>

    // Start PWM generation for motors
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Right
 8002114:	2108      	movs	r1, #8
 8002116:	4807      	ldr	r0, [pc, #28]	; (8002134 <init_motors+0x34>)
 8002118:	f003 fc66 	bl	80059e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Left
 800211c:	210c      	movs	r1, #12
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <init_motors+0x34>)
 8002120:	f003 fc62 	bl	80059e8 <HAL_TIM_PWM_Start>

    // Put both motors in Hi-Z (high impedance output => rotate freely)
    motors_stop();
 8002124:	f000 f808 	bl	8002138 <motors_stop>
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200006d4 	.word	0x200006d4
 8002130:	20000884 	.word	0x20000884
 8002134:	20000690 	.word	0x20000690

08002138 <motors_stop>:
    }

    TIM4->CCR3 = limited_speed;
}

void motors_stop(void){
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
    TIM4->CCR3 = 0;
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <motors_stop+0x3c>)
 800213e:	2200      	movs	r2, #0
 8002140:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_WritePin(MOTOR_R_IN1_GPIO_Port, MOTOR_R_IN1_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2120      	movs	r1, #32
 8002146:	480c      	ldr	r0, [pc, #48]	; (8002178 <motors_stop+0x40>)
 8002148:	f002 fac6 	bl	80046d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_R_IN2_GPIO_Port, MOTOR_R_IN2_Pin, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	2110      	movs	r1, #16
 8002150:	4809      	ldr	r0, [pc, #36]	; (8002178 <motors_stop+0x40>)
 8002152:	f002 fac1 	bl	80046d8 <HAL_GPIO_WritePin>

    TIM4->CCR4 = 0;
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <motors_stop+0x3c>)
 8002158:	2200      	movs	r2, #0
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_GPIO_WritePin(MOTOR_L_IN1_GPIO_Port, MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 800215c:	2200      	movs	r2, #0
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	4805      	ldr	r0, [pc, #20]	; (8002178 <motors_stop+0x40>)
 8002162:	f002 fab9 	bl	80046d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_L_IN2_GPIO_Port, MOTOR_L_IN2_Pin, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	2140      	movs	r1, #64	; 0x40
 800216a:	4803      	ldr	r0, [pc, #12]	; (8002178 <motors_stop+0x40>)
 800216c:	f002 fab4 	bl	80046d8 <HAL_GPIO_WritePin>
};
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40000800 	.word	0x40000800
 8002178:	40020400 	.word	0x40020400

0800217c <oled_nr_items>:
/**
 * @brief Calculate number of items in current menu
 *
 * @return uint8_t - Number of items in current menu
 */
uint8_t oled_nr_items(void){
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
	uint8_t nr_items = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]

	if(curr_submenu == NULL){
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <oled_nr_items+0x58>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10d      	bne.n	80021aa <oled_nr_items+0x2e>
		struct menu * sub_menu = main_menu.pNext;
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <oled_nr_items+0x5c>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 8002194:	e005      	b.n	80021a2 <oled_nr_items+0x26>
			nr_items++;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	3301      	adds	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
			sub_menu = sub_menu->pNext;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f6      	bne.n	8002196 <oled_nr_items+0x1a>
 80021a8:	e00d      	b.n	80021c6 <oled_nr_items+0x4a>
		}
	}else{
		struct menu_item * item = curr_submenu->head_item;
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <oled_nr_items+0x58>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 80021b2:	e005      	b.n	80021c0 <oled_nr_items+0x44>
			nr_items++;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	3301      	adds	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
			item = item->pNext;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f6      	bne.n	80021b4 <oled_nr_items+0x38>
		}
	}

	return nr_items;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	20000224 	.word	0x20000224
 80021d8:	200009d0 	.word	0x200009d0

080021dc <get_edited_val>:
 * Calculates a new updated variable value based on how much the right wheel has been turned.
 *
 * @param int val - Base value
 * @return int 		- Updated value
 */
int get_edited_val(int val){
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	return val + (int)TIM5->CNT / (float)4096 * 15;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <get_edited_val+0x48>)
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021fa:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8002228 <get_edited_val+0x4c>
 80021fe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002202:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8002206:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800220a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002212:	ee17 3a90 	vmov	r3, s15
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40000c00 	.word	0x40000c00
 8002228:	45800000 	.word	0x45800000

0800222c <init_oled>:
	* @brief Initialize the oled screen and a welcome screen. 
	*
	* Initializes the SSD1306 oled driver and draws a image to signal startup.
	* Also initializes all menus/menu items by setting name, callbacks and link them together
*/
void init_oled(void){
 800222c:	b5b0      	push	{r4, r5, r7, lr}
 800222e:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8002230:	f000 fc90 	bl	8002b54 <ssd1306_Init>
	
	ssd1306_DrawBitmap(case_head_bmp);
 8002234:	4855      	ldr	r0, [pc, #340]	; (800238c <init_oled+0x160>)
 8002236:	f000 fda3 	bl	8002d80 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 800223a:	f000 fd1b 	bl	8002c74 <ssd1306_UpdateScreen>

	HAL_Delay(1000);
 800223e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002242:	f001 f801 	bl	8003248 <HAL_Delay>
	
	// Show main menu
	active_screen = MENU;
 8002246:	4b52      	ldr	r3, [pc, #328]	; (8002390 <init_oled+0x164>)
 8002248:	2201      	movs	r2, #1
 800224a:	801a      	strh	r2, [r3, #0]
	
	// Main Menu
	strcpy(main_menu.name, "Main menu");
 800224c:	4b51      	ldr	r3, [pc, #324]	; (8002394 <init_oled+0x168>)
 800224e:	4a52      	ldr	r2, [pc, #328]	; (8002398 <init_oled+0x16c>)
 8002250:	ca07      	ldmia	r2, {r0, r1, r2}
 8002252:	c303      	stmia	r3!, {r0, r1}
 8002254:	801a      	strh	r2, [r3, #0]
	main_menu.head_item = NULL; 	// Main menu has no items, only sub menus
 8002256:	4b4f      	ldr	r3, [pc, #316]	; (8002394 <init_oled+0x168>)
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
	main_menu.pNext  = &sub_menu_1; // Start of submenus
 800225c:	4b4d      	ldr	r3, [pc, #308]	; (8002394 <init_oled+0x168>)
 800225e:	4a4f      	ldr	r2, [pc, #316]	; (800239c <init_oled+0x170>)
 8002260:	619a      	str	r2, [r3, #24]
	
	// Back to main menu item
	strcpy(menu_item_back_main.name, "Back");
 8002262:	4b4f      	ldr	r3, [pc, #316]	; (80023a0 <init_oled+0x174>)
 8002264:	4a4f      	ldr	r2, [pc, #316]	; (80023a4 <init_oled+0x178>)
 8002266:	e892 0003 	ldmia.w	r2, {r0, r1}
 800226a:	6018      	str	r0, [r3, #0]
 800226c:	3304      	adds	r3, #4
 800226e:	7019      	strb	r1, [r3, #0]
	menu_item_back_main.pNext = NULL;
 8002270:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <init_oled+0x174>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
	menu_item_back_main.callback = go_back_main;
 8002276:	4b4a      	ldr	r3, [pc, #296]	; (80023a0 <init_oled+0x174>)
 8002278:	4a4b      	ldr	r2, [pc, #300]	; (80023a8 <init_oled+0x17c>)
 800227a:	615a      	str	r2, [r3, #20]
	
	// Sub menu 1 + items
	strcpy(sub_menu_1.name, "General");
 800227c:	4b47      	ldr	r3, [pc, #284]	; (800239c <init_oled+0x170>)
 800227e:	4a4b      	ldr	r2, [pc, #300]	; (80023ac <init_oled+0x180>)
 8002280:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002284:	e883 0003 	stmia.w	r3, {r0, r1}
	sub_menu_1.pNext = &sub_menu_2;
 8002288:	4b44      	ldr	r3, [pc, #272]	; (800239c <init_oled+0x170>)
 800228a:	4a49      	ldr	r2, [pc, #292]	; (80023b0 <init_oled+0x184>)
 800228c:	619a      	str	r2, [r3, #24]
	sub_menu_1.head_item = &menu_item_11;
 800228e:	4b43      	ldr	r3, [pc, #268]	; (800239c <init_oled+0x170>)
 8002290:	4a48      	ldr	r2, [pc, #288]	; (80023b4 <init_oled+0x188>)
 8002292:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_11.name, "Peripheral info");
 8002294:	4a47      	ldr	r2, [pc, #284]	; (80023b4 <init_oled+0x188>)
 8002296:	4b48      	ldr	r3, [pc, #288]	; (80023b8 <init_oled+0x18c>)
 8002298:	4614      	mov	r4, r2
 800229a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800229c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	menu_item_11.pNext = &menu_item_12;
 80022a0:	4b44      	ldr	r3, [pc, #272]	; (80023b4 <init_oled+0x188>)
 80022a2:	4a46      	ldr	r2, [pc, #280]	; (80023bc <init_oled+0x190>)
 80022a4:	61da      	str	r2, [r3, #28]
	menu_item_11.callback = oled_show_info;
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <init_oled+0x188>)
 80022a8:	4a45      	ldr	r2, [pc, #276]	; (80023c0 <init_oled+0x194>)
 80022aa:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_12.name, "CASE Logo");
 80022ac:	4b43      	ldr	r3, [pc, #268]	; (80023bc <init_oled+0x190>)
 80022ae:	4a45      	ldr	r2, [pc, #276]	; (80023c4 <init_oled+0x198>)
 80022b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80022b2:	c303      	stmia	r3!, {r0, r1}
 80022b4:	801a      	strh	r2, [r3, #0]
	menu_item_12.pNext = &menu_item_13;
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <init_oled+0x190>)
 80022b8:	4a43      	ldr	r2, [pc, #268]	; (80023c8 <init_oled+0x19c>)
 80022ba:	61da      	str	r2, [r3, #28]
	menu_item_12.callback = oled_show_case;
 80022bc:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <init_oled+0x190>)
 80022be:	4a43      	ldr	r2, [pc, #268]	; (80023cc <init_oled+0x1a0>)
 80022c0:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_13.name, "Nyx & Iris");
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <init_oled+0x19c>)
 80022c4:	4a42      	ldr	r2, [pc, #264]	; (80023d0 <init_oled+0x1a4>)
 80022c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80022c8:	c303      	stmia	r3!, {r0, r1}
 80022ca:	801a      	strh	r2, [r3, #0]
 80022cc:	3302      	adds	r3, #2
 80022ce:	0c12      	lsrs	r2, r2, #16
 80022d0:	701a      	strb	r2, [r3, #0]
	menu_item_13.pNext = &menu_item_back_main;
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <init_oled+0x19c>)
 80022d4:	4a32      	ldr	r2, [pc, #200]	; (80023a0 <init_oled+0x174>)
 80022d6:	61da      	str	r2, [r3, #28]
	menu_item_13.callback = oled_show_cats;
 80022d8:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <init_oled+0x19c>)
 80022da:	4a3e      	ldr	r2, [pc, #248]	; (80023d4 <init_oled+0x1a8>)
 80022dc:	615a      	str	r2, [r3, #20]
	
	// Sub menu 2 + items
	strcpy(sub_menu_2.name, "Edit vars");
 80022de:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <init_oled+0x184>)
 80022e0:	4a3d      	ldr	r2, [pc, #244]	; (80023d8 <init_oled+0x1ac>)
 80022e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80022e4:	c303      	stmia	r3!, {r0, r1}
 80022e6:	801a      	strh	r2, [r3, #0]
	sub_menu_2.pNext = &sub_menu_3;
 80022e8:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <init_oled+0x184>)
 80022ea:	4a3c      	ldr	r2, [pc, #240]	; (80023dc <init_oled+0x1b0>)
 80022ec:	619a      	str	r2, [r3, #24]
	sub_menu_2.head_item = &menu_item_21;
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <init_oled+0x184>)
 80022f0:	4a3b      	ldr	r2, [pc, #236]	; (80023e0 <init_oled+0x1b4>)
 80022f2:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_21.name, "Kp");
 80022f4:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <init_oled+0x1b4>)
 80022f6:	4a3b      	ldr	r2, [pc, #236]	; (80023e4 <init_oled+0x1b8>)
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	4611      	mov	r1, r2
 80022fc:	8019      	strh	r1, [r3, #0]
 80022fe:	3302      	adds	r3, #2
 8002300:	0c12      	lsrs	r2, r2, #16
 8002302:	701a      	strb	r2, [r3, #0]
	menu_item_21.pNext = &menu_item_22;
 8002304:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <init_oled+0x1b4>)
 8002306:	4a38      	ldr	r2, [pc, #224]	; (80023e8 <init_oled+0x1bc>)
 8002308:	61da      	str	r2, [r3, #28]
	menu_item_21.pvar = &kp_test;
 800230a:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <init_oled+0x1b4>)
 800230c:	4a37      	ldr	r2, [pc, #220]	; (80023ec <init_oled+0x1c0>)
 800230e:	619a      	str	r2, [r3, #24]
	menu_item_21.callback = oled_edit_var;
 8002310:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <init_oled+0x1b4>)
 8002312:	4a37      	ldr	r2, [pc, #220]	; (80023f0 <init_oled+0x1c4>)
 8002314:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_22.name, "Ki");
 8002316:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <init_oled+0x1bc>)
 8002318:	4a36      	ldr	r2, [pc, #216]	; (80023f4 <init_oled+0x1c8>)
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	4611      	mov	r1, r2
 800231e:	8019      	strh	r1, [r3, #0]
 8002320:	3302      	adds	r3, #2
 8002322:	0c12      	lsrs	r2, r2, #16
 8002324:	701a      	strb	r2, [r3, #0]
	menu_item_22.pNext = &menu_item_23;
 8002326:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <init_oled+0x1bc>)
 8002328:	4a33      	ldr	r2, [pc, #204]	; (80023f8 <init_oled+0x1cc>)
 800232a:	61da      	str	r2, [r3, #28]
	menu_item_22.pvar = &ki_test;
 800232c:	4b2e      	ldr	r3, [pc, #184]	; (80023e8 <init_oled+0x1bc>)
 800232e:	4a33      	ldr	r2, [pc, #204]	; (80023fc <init_oled+0x1d0>)
 8002330:	619a      	str	r2, [r3, #24]
	menu_item_22.callback = oled_edit_var;
 8002332:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <init_oled+0x1bc>)
 8002334:	4a2e      	ldr	r2, [pc, #184]	; (80023f0 <init_oled+0x1c4>)
 8002336:	615a      	str	r2, [r3, #20]

	strcpy(menu_item_23.name, "Without callback");
 8002338:	4a2f      	ldr	r2, [pc, #188]	; (80023f8 <init_oled+0x1cc>)
 800233a:	4b31      	ldr	r3, [pc, #196]	; (8002400 <init_oled+0x1d4>)
 800233c:	4614      	mov	r4, r2
 800233e:	461d      	mov	r5, r3
 8002340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002344:	682b      	ldr	r3, [r5, #0]
 8002346:	7023      	strb	r3, [r4, #0]
	menu_item_23.pNext = &menu_item_back_main;
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <init_oled+0x1cc>)
 800234a:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <init_oled+0x174>)
 800234c:	61da      	str	r2, [r3, #28]


	// Sub menu 3 + items
	strcpy(sub_menu_3.name, "Submenu 3");
 800234e:	4b23      	ldr	r3, [pc, #140]	; (80023dc <init_oled+0x1b0>)
 8002350:	4a2c      	ldr	r2, [pc, #176]	; (8002404 <init_oled+0x1d8>)
 8002352:	ca07      	ldmia	r2, {r0, r1, r2}
 8002354:	c303      	stmia	r3!, {r0, r1}
 8002356:	801a      	strh	r2, [r3, #0]
	sub_menu_3.pNext = NULL;
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <init_oled+0x1b0>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
	sub_menu_3.head_item = &menu_item_31;
 800235e:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <init_oled+0x1b0>)
 8002360:	4a29      	ldr	r2, [pc, #164]	; (8002408 <init_oled+0x1dc>)
 8002362:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_31.name, "Item 31");
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <init_oled+0x1dc>)
 8002366:	4a29      	ldr	r2, [pc, #164]	; (800240c <init_oled+0x1e0>)
 8002368:	e892 0003 	ldmia.w	r2, {r0, r1}
 800236c:	e883 0003 	stmia.w	r3, {r0, r1}
	menu_item_31.pNext = &menu_item_32;
 8002370:	4b25      	ldr	r3, [pc, #148]	; (8002408 <init_oled+0x1dc>)
 8002372:	4a27      	ldr	r2, [pc, #156]	; (8002410 <init_oled+0x1e4>)
 8002374:	61da      	str	r2, [r3, #28]
	
	strcpy(menu_item_32.name, "Item 32");
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <init_oled+0x1e4>)
 8002378:	4a26      	ldr	r2, [pc, #152]	; (8002414 <init_oled+0x1e8>)
 800237a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800237e:	e883 0003 	stmia.w	r3, {r0, r1}
	menu_item_32.pNext = &menu_item_back_main;
 8002382:	4b23      	ldr	r3, [pc, #140]	; (8002410 <init_oled+0x1e4>)
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <init_oled+0x174>)
 8002386:	61da      	str	r2, [r3, #28]

}
 8002388:	bf00      	nop
 800238a:	bdb0      	pop	{r4, r5, r7, pc}
 800238c:	08009ad4 	.word	0x08009ad4
 8002390:	200009cc 	.word	0x200009cc
 8002394:	200009d0 	.word	0x200009d0
 8002398:	08009980 	.word	0x08009980
 800239c:	200009ec 	.word	0x200009ec
 80023a0:	20000a68 	.word	0x20000a68
 80023a4:	0800998c 	.word	0x0800998c
 80023a8:	08002a21 	.word	0x08002a21
 80023ac:	08009994 	.word	0x08009994
 80023b0:	20000928 	.word	0x20000928
 80023b4:	200009ac 	.word	0x200009ac
 80023b8:	0800999c 	.word	0x0800999c
 80023bc:	20000944 	.word	0x20000944
 80023c0:	08002a99 	.word	0x08002a99
 80023c4:	080099ac 	.word	0x080099ac
 80023c8:	20000a08 	.word	0x20000a08
 80023cc:	08002a41 	.word	0x08002a41
 80023d0:	080099b8 	.word	0x080099b8
 80023d4:	08002a6d 	.word	0x08002a6d
 80023d8:	080099c4 	.word	0x080099c4
 80023dc:	20000a88 	.word	0x20000a88
 80023e0:	20000a48 	.word	0x20000a48
 80023e4:	080099d0 	.word	0x080099d0
 80023e8:	20000904 	.word	0x20000904
 80023ec:	20000004 	.word	0x20000004
 80023f0:	08002ab9 	.word	0x08002ab9
 80023f4:	080099d4 	.word	0x080099d4
 80023f8:	2000098c 	.word	0x2000098c
 80023fc:	20000008 	.word	0x20000008
 8002400:	080099d8 	.word	0x080099d8
 8002404:	080099ec 	.word	0x080099ec
 8002408:	20000a28 	.word	0x20000a28
 800240c:	080099f8 	.word	0x080099f8
 8002410:	20000968 	.word	0x20000968
 8002414:	08009a00 	.word	0x08009a00

08002418 <oled_update>:
	* @brief Update the OLED screen
	*	
	*	Checks flags and active screen to decide which screen gets rendered.
	*	Errors always have priority.
*/
void oled_update(void){
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	//Check flag for going back to main menu and reset flag.
	if(go_back_main_flag){
 800241c:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <oled_update+0x80>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <oled_update+0x1e>
		curr_submenu = NULL;
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <oled_update+0x84>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
		prev_submenu = NULL;
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <oled_update+0x88>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
		go_back_main_flag = 0;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <oled_update+0x80>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
	}

	if(active_screen == ERROR_){
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <oled_update+0x8c>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <oled_update+0x2c>
		oled_error_screen();
 800243e:	f000 fa53 	bl	80028e8 <oled_error_screen>
 8002442:	e025      	b.n	8002490 <oled_update+0x78>
	}else if(active_screen == MENU){
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <oled_update+0x8c>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d102      	bne.n	8002452 <oled_update+0x3a>
		oled_menu_screen();
 800244c:	f000 f8d0 	bl	80025f0 <oled_menu_screen>
 8002450:	e01e      	b.n	8002490 <oled_update+0x78>
	}else if(active_screen == INFO){
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <oled_update+0x8c>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d102      	bne.n	8002460 <oled_update+0x48>
		oled_info_screen();
 800245a:	f000 f9b9 	bl	80027d0 <oled_info_screen>
 800245e:	e017      	b.n	8002490 <oled_update+0x78>
	}else if(active_screen == IMAGE){
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <oled_update+0x8c>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d105      	bne.n	8002474 <oled_update+0x5c>
		ssd1306_DrawBitmap(curr_image);
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <oled_update+0x90>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fc87 	bl	8002d80 <ssd1306_DrawBitmap>
 8002472:	e00d      	b.n	8002490 <oled_update+0x78>
	}else if(active_screen == EDIT_VAR){
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <oled_update+0x8c>)
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	2b04      	cmp	r3, #4
 800247a:	d102      	bne.n	8002482 <oled_update+0x6a>
		oled_edit_var_screen();
 800247c:	f000 fa78 	bl	8002970 <oled_edit_var_screen>
 8002480:	e006      	b.n	8002490 <oled_update+0x78>
	}else if(active_screen == NOT_IMPLEMENTED){
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <oled_update+0x8c>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800248a:	d101      	bne.n	8002490 <oled_update+0x78>
		oled_not_implemented_screen();
 800248c:	f000 fab2 	bl	80029f4 <oled_not_implemented_screen>
	}
	
	ssd1306_UpdateScreen();
 8002490:	f000 fbf0 	bl	8002c74 <ssd1306_UpdateScreen>
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}
 8002498:	2000021c 	.word	0x2000021c
 800249c:	20000224 	.word	0x20000224
 80024a0:	20000228 	.word	0x20000228
 80024a4:	200009cc 	.word	0x200009cc
 80024a8:	20000924 	.word	0x20000924

080024ac <oled_error>:
 *
 * Global function to be called when user wants to display an error message
 *
 * @param pMessage String pointer to the error message.
 */
void oled_error(char *pMessage){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	error_message = pMessage;
 80024b4:	4a05      	ldr	r2, [pc, #20]	; (80024cc <oled_error+0x20>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
	active_screen = ERROR_;
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <oled_error+0x24>)
 80024bc:	2200      	movs	r2, #0
 80024be:	801a      	strh	r2, [r3, #0]
	oled_update();
 80024c0:	f7ff ffaa 	bl	8002418 <oled_update>
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000988 	.word	0x20000988
 80024d0:	200009cc 	.word	0x200009cc

080024d4 <oled_clear_error>:


/**
	* @brief Clear the error and update the screen with normal information.
*/
void oled_clear_error(void){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024de:	4805      	ldr	r0, [pc, #20]	; (80024f4 <oled_clear_error+0x20>)
 80024e0:	f002 f8fa 	bl	80046d8 <HAL_GPIO_WritePin>
	active_screen = MENU;
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <oled_clear_error+0x24>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	801a      	strh	r2, [r3, #0]
	oled_update();
 80024ea:	f7ff ff95 	bl	8002418 <oled_update>
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40020800 	.word	0x40020800
 80024f8:	200009cc 	.word	0x200009cc

080024fc <oled_button_press>:
/**
	* @brief Button press callback
	*
	* Decides what happens after a button click depending on state and cursor
*/
void oled_button_press(void){
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0

	if(active_screen == ERROR_){
 8002502:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <oled_button_press+0xdc>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <oled_button_press+0x14>
		oled_clear_error();
 800250a:	f7ff ffe3 	bl	80024d4 <oled_clear_error>
		return;
 800250e:	e060      	b.n	80025d2 <oled_button_press+0xd6>
	}else if(active_screen == EDIT_VAR){ // Save new edited value
 8002510:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <oled_button_press+0xdc>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	2b04      	cmp	r3, #4
 8002516:	d10f      	bne.n	8002538 <oled_button_press+0x3c>
		*edit_var->pvar = get_edited_val(*edit_var->pvar);
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <oled_button_press+0xe0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <oled_button_press+0xe0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699c      	ldr	r4, [r3, #24]
 8002526:	4610      	mov	r0, r2
 8002528:	f7ff fe58 	bl	80021dc <get_edited_val>
 800252c:	4603      	mov	r3, r0
 800252e:	6023      	str	r3, [r4, #0]
		active_screen = MENU;
 8002530:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <oled_button_press+0xdc>)
 8002532:	2201      	movs	r2, #1
 8002534:	801a      	strh	r2, [r3, #0]
		return;
 8002536:	e04c      	b.n	80025d2 <oled_button_press+0xd6>
	}else if(active_screen != MENU){
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <oled_button_press+0xdc>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d003      	beq.n	8002548 <oled_button_press+0x4c>
		active_screen = MENU;
 8002540:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <oled_button_press+0xdc>)
 8002542:	2201      	movs	r2, #1
 8002544:	801a      	strh	r2, [r3, #0]
		return;
 8002546:	e044      	b.n	80025d2 <oled_button_press+0xd6>
	}
	
	if(curr_submenu == NULL){ // Main menu => Select sub menu
 8002548:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <oled_button_press+0xe4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d119      	bne.n	8002584 <oled_button_press+0x88>
		struct menu * sub_menu = main_menu.pNext;
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <oled_button_press+0xe8>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	60fb      	str	r3, [r7, #12]
		int line = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 800255a:	e00f      	b.n	800257c <oled_button_press+0x80>
			if (line == cursor){
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <oled_button_press+0xec>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4293      	cmp	r3, r2
 8002566:	d103      	bne.n	8002570 <oled_button_press+0x74>
				curr_submenu = sub_menu;
 8002568:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <oled_button_press+0xe4>)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6013      	str	r3, [r2, #0]
				break;
 800256e:	e02d      	b.n	80025cc <oled_button_press+0xd0>
			}
			line++;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	3301      	adds	r3, #1
 8002574:	60bb      	str	r3, [r7, #8]
			sub_menu = sub_menu->pNext;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	60fb      	str	r3, [r7, #12]
		while(sub_menu != NULL){
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1ec      	bne.n	800255c <oled_button_press+0x60>
 8002582:	e023      	b.n	80025cc <oled_button_press+0xd0>
		}
	}else{ // Sub menu => Select menu item == cursor and run it's callback
		struct menu_item * item = curr_submenu->head_item;
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <oled_button_press+0xe4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	607b      	str	r3, [r7, #4]
		int line = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	603b      	str	r3, [r7, #0]
		while(item != NULL){
 8002590:	e019      	b.n	80025c6 <oled_button_press+0xca>
			if (line == cursor){
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <oled_button_press+0xec>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4293      	cmp	r3, r2
 800259c:	d10d      	bne.n	80025ba <oled_button_press+0xbe>
				if(item->callback != NULL){
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <oled_button_press+0xb4>
					item->callback(item);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
				}else{
					active_screen = NOT_IMPLEMENTED;
				}
				break;
 80025ae:	e00d      	b.n	80025cc <oled_button_press+0xd0>
					active_screen = NOT_IMPLEMENTED;
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <oled_button_press+0xdc>)
 80025b2:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80025b6:	801a      	strh	r2, [r3, #0]
				break;
 80025b8:	e008      	b.n	80025cc <oled_button_press+0xd0>
			}
			line++;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	603b      	str	r3, [r7, #0]
			item = item->pNext;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1e2      	bne.n	8002592 <oled_button_press+0x96>
		}
	}
	TIM5->CNT = 0; // Reset counter to reset cursor location
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <oled_button_press+0xf0>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd90      	pop	{r4, r7, pc}
 80025d8:	200009cc 	.word	0x200009cc
 80025dc:	20000964 	.word	0x20000964
 80025e0:	20000224 	.word	0x20000224
 80025e4:	200009d0 	.word	0x200009d0
 80025e8:	20000220 	.word	0x20000220
 80025ec:	40000c00 	.word	0x40000c00

080025f0 <oled_menu_screen>:
	* 
	* The cursor position can be changed by rotating the wheels
	* You can choose menu or function by pressing the "Select Button" on the board 
	*
*/
void oled_menu_screen(void){
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
	// Calculate cursor index based on encoder
	float revolutions = TIM5->CNT / (float)4096 * 10;
 80025f6:	4b6d      	ldr	r3, [pc, #436]	; (80027ac <oled_menu_screen+0x1bc>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002602:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80027b0 <oled_menu_screen+0x1c0>
 8002606:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800260a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800260e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002612:	edc7 7a03 	vstr	s15, [r7, #12]
	cursor = (int) revolutions % oled_nr_items();
 8002616:	edd7 7a03 	vldr	s15, [r7, #12]
 800261a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800261e:	ee17 4a90 	vmov	r4, s15
 8002622:	f7ff fdab 	bl	800217c <oled_nr_items>
 8002626:	4603      	mov	r3, r0
 8002628:	fb94 f2f3 	sdiv	r2, r4, r3
 800262c:	fb03 f302 	mul.w	r3, r3, r2
 8002630:	1ae3      	subs	r3, r4, r3
 8002632:	b2da      	uxtb	r2, r3
 8002634:	4b5f      	ldr	r3, [pc, #380]	; (80027b4 <oled_menu_screen+0x1c4>)
 8002636:	701a      	strb	r2, [r3, #0]
	
	ssd1306_Fill(Black);
 8002638:	2000      	movs	r0, #0
 800263a:	f000 faf9 	bl	8002c30 <ssd1306_Fill>
	
	if(curr_submenu == NULL){ // Main menu => draw sub menus
 800263e:	4b5e      	ldr	r3, [pc, #376]	; (80027b8 <oled_menu_screen+0x1c8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d145      	bne.n	80026d2 <oled_menu_screen+0xe2>
		ssd1306_SetCursor(0,0);
 8002646:	2100      	movs	r1, #0
 8002648:	2000      	movs	r0, #0
 800264a:	f000 fc87 	bl	8002f5c <ssd1306_SetCursor>
		ssd1306_WriteString(main_menu.name, Font_11x18, White);
 800264e:	4a5b      	ldr	r2, [pc, #364]	; (80027bc <oled_menu_screen+0x1cc>)
 8002650:	2301      	movs	r3, #1
 8002652:	ca06      	ldmia	r2, {r1, r2}
 8002654:	485a      	ldr	r0, [pc, #360]	; (80027c0 <oled_menu_screen+0x1d0>)
 8002656:	f000 fc5b 	bl	8002f10 <ssd1306_WriteString>
		
		menu_t * sub_menu = main_menu.pNext; // Reference to first submenu
 800265a:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <oled_menu_screen+0x1d0>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	61fb      	str	r3, [r7, #28]
		int line = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	61bb      	str	r3, [r7, #24]
		
		while(sub_menu != NULL){
 8002664:	e031      	b.n	80026ca <oled_menu_screen+0xda>
			if(line == cursor){ // Draw cursor
 8002666:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <oled_menu_screen+0x1c4>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4293      	cmp	r3, r2
 8002670:	d112      	bne.n	8002698 <oled_menu_screen+0xa8>
				ssd1306_SetCursor(0, 18 + line*10);
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	0092      	lsls	r2, r2, #2
 800267a:	4413      	add	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	3312      	adds	r3, #18
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4619      	mov	r1, r3
 8002686:	2000      	movs	r0, #0
 8002688:	f000 fc68 	bl	8002f5c <ssd1306_SetCursor>
				ssd1306_WriteString(">", Font_7x10, White);
 800268c:	4a4d      	ldr	r2, [pc, #308]	; (80027c4 <oled_menu_screen+0x1d4>)
 800268e:	2301      	movs	r3, #1
 8002690:	ca06      	ldmia	r2, {r1, r2}
 8002692:	484d      	ldr	r0, [pc, #308]	; (80027c8 <oled_menu_screen+0x1d8>)
 8002694:	f000 fc3c 	bl	8002f10 <ssd1306_WriteString>
			}
			ssd1306_SetCursor(14, 18 + line*10);
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	0092      	lsls	r2, r2, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	3312      	adds	r3, #18
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	200e      	movs	r0, #14
 80026ae:	f000 fc55 	bl	8002f5c <ssd1306_SetCursor>
			ssd1306_WriteString(sub_menu->name, Font_7x10, White);
 80026b2:	69f8      	ldr	r0, [r7, #28]
 80026b4:	4a43      	ldr	r2, [pc, #268]	; (80027c4 <oled_menu_screen+0x1d4>)
 80026b6:	2301      	movs	r3, #1
 80026b8:	ca06      	ldmia	r2, {r1, r2}
 80026ba:	f000 fc29 	bl	8002f10 <ssd1306_WriteString>
			line++;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	3301      	adds	r3, #1
 80026c2:	61bb      	str	r3, [r7, #24]
			sub_menu = sub_menu->pNext;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	61fb      	str	r3, [r7, #28]
		while(sub_menu != NULL){
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ca      	bne.n	8002666 <oled_menu_screen+0x76>
 80026d0:	e066      	b.n	80027a0 <oled_menu_screen+0x1b0>
		}
	}else{ // Submenu => draw menu items
		ssd1306_SetCursor(0,0);
 80026d2:	2100      	movs	r1, #0
 80026d4:	2000      	movs	r0, #0
 80026d6:	f000 fc41 	bl	8002f5c <ssd1306_SetCursor>
		ssd1306_WriteString(curr_submenu->name, Font_11x18, White);
 80026da:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <oled_menu_screen+0x1c8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	4a36      	ldr	r2, [pc, #216]	; (80027bc <oled_menu_screen+0x1cc>)
 80026e2:	2301      	movs	r3, #1
 80026e4:	ca06      	ldmia	r2, {r1, r2}
 80026e6:	f000 fc13 	bl	8002f10 <ssd1306_WriteString>
		
		menu_item_t * item = curr_submenu->head_item;
 80026ea:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <oled_menu_screen+0x1c8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	617b      	str	r3, [r7, #20]
		int line = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
		while(item != NULL){
 80026f6:	e050      	b.n	800279a <oled_menu_screen+0x1aa>
			if (line == cursor){
 80026f8:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <oled_menu_screen+0x1c4>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4293      	cmp	r3, r2
 8002702:	d112      	bne.n	800272a <oled_menu_screen+0x13a>
				ssd1306_SetCursor(0, 18 + line*10);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4413      	add	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	3312      	adds	r3, #18
 8002714:	b2db      	uxtb	r3, r3
 8002716:	4619      	mov	r1, r3
 8002718:	2000      	movs	r0, #0
 800271a:	f000 fc1f 	bl	8002f5c <ssd1306_SetCursor>
				ssd1306_WriteString(">", Font_7x10, White);
 800271e:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <oled_menu_screen+0x1d4>)
 8002720:	2301      	movs	r3, #1
 8002722:	ca06      	ldmia	r2, {r1, r2}
 8002724:	4828      	ldr	r0, [pc, #160]	; (80027c8 <oled_menu_screen+0x1d8>)
 8002726:	f000 fbf3 	bl	8002f10 <ssd1306_WriteString>
			}

			ssd1306_SetCursor(14, 18 + line*10);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	0092      	lsls	r2, r2, #2
 8002732:	4413      	add	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3312      	adds	r3, #18
 800273a:	b2db      	uxtb	r3, r3
 800273c:	4619      	mov	r1, r3
 800273e:	200e      	movs	r0, #14
 8002740:	f000 fc0c 	bl	8002f5c <ssd1306_SetCursor>
			ssd1306_WriteString(item->name, Font_7x10, White);
 8002744:	6978      	ldr	r0, [r7, #20]
 8002746:	4a1f      	ldr	r2, [pc, #124]	; (80027c4 <oled_menu_screen+0x1d4>)
 8002748:	2301      	movs	r3, #1
 800274a:	ca06      	ldmia	r2, {r1, r2}
 800274c:	f000 fbe0 	bl	8002f10 <ssd1306_WriteString>

			if(item->pvar != NULL){ // Show variable value
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01a      	beq.n	800278e <oled_menu_screen+0x19e>
				char buff[10];
				ssd1306_SetCursor(80, 18 + line*10);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	0092      	lsls	r2, r2, #2
 8002760:	4413      	add	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	3312      	adds	r3, #18
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4619      	mov	r1, r3
 800276c:	2050      	movs	r0, #80	; 0x50
 800276e:	f000 fbf5 	bl	8002f5c <ssd1306_SetCursor>
				snprintf(buff, sizeof(buff), "%d", *item->pvar);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4638      	mov	r0, r7
 800277a:	4a14      	ldr	r2, [pc, #80]	; (80027cc <oled_menu_screen+0x1dc>)
 800277c:	210a      	movs	r1, #10
 800277e:	f005 f931 	bl	80079e4 <sniprintf>
				ssd1306_WriteString(buff, Font_7x10, White);
 8002782:	4a10      	ldr	r2, [pc, #64]	; (80027c4 <oled_menu_screen+0x1d4>)
 8002784:	4638      	mov	r0, r7
 8002786:	2301      	movs	r3, #1
 8002788:	ca06      	ldmia	r2, {r1, r2}
 800278a:	f000 fbc1 	bl	8002f10 <ssd1306_WriteString>
			}
			line++;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	3301      	adds	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
			item = item->pNext;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	617b      	str	r3, [r7, #20]
		while(item != NULL){
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ab      	bne.n	80026f8 <oled_menu_screen+0x108>
		}		
	}
	ssd1306_UpdateScreen();
 80027a0:	f000 fa68 	bl	8002c74 <ssd1306_UpdateScreen>
}
 80027a4:	bf00      	nop
 80027a6:	3724      	adds	r7, #36	; 0x24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd90      	pop	{r4, r7, pc}
 80027ac:	40000c00 	.word	0x40000c00
 80027b0:	45800000 	.word	0x45800000
 80027b4:	20000220 	.word	0x20000220
 80027b8:	20000224 	.word	0x20000224
 80027bc:	20000014 	.word	0x20000014
 80027c0:	200009d0 	.word	0x200009d0
 80027c4:	2000000c 	.word	0x2000000c
 80027c8:	08009a08 	.word	0x08009a08
 80027cc:	08009a0c 	.word	0x08009a0c

080027d0 <oled_info_screen>:


/**
	* @brief Show an screen with general info about peripherals.
*/
void oled_info_screen(){
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b093      	sub	sp, #76	; 0x4c
 80027d4:	af02      	add	r7, sp, #8
	char buff[60];

	ssd1306_Fill(Black);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f000 fa2a 	bl	8002c30 <ssd1306_Fill>
	ssd1306_SetCursor((128-4*10)/2,0);
 80027dc:	2100      	movs	r1, #0
 80027de:	202c      	movs	r0, #44	; 0x2c
 80027e0:	f000 fbbc 	bl	8002f5c <ssd1306_SetCursor>
	ssd1306_WriteString("INFO", Font_7x10, White);
 80027e4:	4a38      	ldr	r2, [pc, #224]	; (80028c8 <oled_info_screen+0xf8>)
 80027e6:	2301      	movs	r3, #1
 80027e8:	ca06      	ldmia	r2, {r1, r2}
 80027ea:	4838      	ldr	r0, [pc, #224]	; (80028cc <oled_info_screen+0xfc>)
 80027ec:	f000 fb90 	bl	8002f10 <ssd1306_WriteString>


	snprintf(buff, sizeof(buff), "Battery:  %5.2f V", GET_voltage_battery());
 80027f0:	f000 fc36 	bl	8003060 <GET_voltage_battery>
 80027f4:	ee10 3a10 	vmov	r3, s0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fd fea5 	bl	8000548 <__aeabi_f2d>
 80027fe:	4603      	mov	r3, r0
 8002800:	460c      	mov	r4, r1
 8002802:	1d38      	adds	r0, r7, #4
 8002804:	e9cd 3400 	strd	r3, r4, [sp]
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <oled_info_screen+0x100>)
 800280a:	213c      	movs	r1, #60	; 0x3c
 800280c:	f005 f8ea 	bl	80079e4 <sniprintf>
	ssd1306_SetCursor(0,10);
 8002810:	210a      	movs	r1, #10
 8002812:	2000      	movs	r0, #0
 8002814:	f000 fba2 	bl	8002f5c <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 8002818:	4a2b      	ldr	r2, [pc, #172]	; (80028c8 <oled_info_screen+0xf8>)
 800281a:	1d38      	adds	r0, r7, #4
 800281c:	2301      	movs	r3, #1
 800281e:	ca06      	ldmia	r2, {r1, r2}
 8002820:	f000 fb76 	bl	8002f10 <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "Boost:    %5.2f V", GET_voltage_boost());
 8002824:	f000 fc2e 	bl	8003084 <GET_voltage_boost>
 8002828:	ee10 3a10 	vmov	r3, s0
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fe8b 	bl	8000548 <__aeabi_f2d>
 8002832:	4603      	mov	r3, r0
 8002834:	460c      	mov	r4, r1
 8002836:	1d38      	adds	r0, r7, #4
 8002838:	e9cd 3400 	strd	r3, r4, [sp]
 800283c:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <oled_info_screen+0x104>)
 800283e:	213c      	movs	r1, #60	; 0x3c
 8002840:	f005 f8d0 	bl	80079e4 <sniprintf>
	ssd1306_SetCursor(0,20);
 8002844:	2114      	movs	r1, #20
 8002846:	2000      	movs	r0, #0
 8002848:	f000 fb88 	bl	8002f5c <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 800284c:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <oled_info_screen+0xf8>)
 800284e:	1d38      	adds	r0, r7, #4
 8002850:	2301      	movs	r3, #1
 8002852:	ca06      	ldmia	r2, {r1, r2}
 8002854:	f000 fb5c 	bl	8002f10 <ssd1306_WriteString>


	snprintf(buff, sizeof(buff), "Enc. R:   %5d", (int)TIM5->CNT);
 8002858:	4b1f      	ldr	r3, [pc, #124]	; (80028d8 <oled_info_screen+0x108>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1d38      	adds	r0, r7, #4
 800285e:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <oled_info_screen+0x10c>)
 8002860:	213c      	movs	r1, #60	; 0x3c
 8002862:	f005 f8bf 	bl	80079e4 <sniprintf>
	ssd1306_SetCursor(0,30);
 8002866:	211e      	movs	r1, #30
 8002868:	2000      	movs	r0, #0
 800286a:	f000 fb77 	bl	8002f5c <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 800286e:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <oled_info_screen+0xf8>)
 8002870:	1d38      	adds	r0, r7, #4
 8002872:	2301      	movs	r3, #1
 8002874:	ca06      	ldmia	r2, {r1, r2}
 8002876:	f000 fb4b 	bl	8002f10 <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "Enc. L:   %5d", (int)TIM2->CNT);
 800287a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1d38      	adds	r0, r7, #4
 8002882:	4a17      	ldr	r2, [pc, #92]	; (80028e0 <oled_info_screen+0x110>)
 8002884:	213c      	movs	r1, #60	; 0x3c
 8002886:	f005 f8ad 	bl	80079e4 <sniprintf>
	ssd1306_SetCursor(0,40);
 800288a:	2128      	movs	r1, #40	; 0x28
 800288c:	2000      	movs	r0, #0
 800288e:	f000 fb65 	bl	8002f5c <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <oled_info_screen+0xf8>)
 8002894:	1d38      	adds	r0, r7, #4
 8002896:	2301      	movs	r3, #1
 8002898:	ca06      	ldmia	r2, {r1, r2}
 800289a:	f000 fb39 	bl	8002f10 <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "XLINE:      NaN");
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <oled_info_screen+0x114>)
 80028a2:	461c      	mov	r4, r3
 80028a4:	4613      	mov	r3, r2
 80028a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0,50);
 80028ac:	2132      	movs	r1, #50	; 0x32
 80028ae:	2000      	movs	r0, #0
 80028b0:	f000 fb54 	bl	8002f5c <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_7x10, White);
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <oled_info_screen+0xf8>)
 80028b6:	1d38      	adds	r0, r7, #4
 80028b8:	2301      	movs	r3, #1
 80028ba:	ca06      	ldmia	r2, {r1, r2}
 80028bc:	f000 fb28 	bl	8002f10 <ssd1306_WriteString>
}
 80028c0:	bf00      	nop
 80028c2:	3744      	adds	r7, #68	; 0x44
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd90      	pop	{r4, r7, pc}
 80028c8:	2000000c 	.word	0x2000000c
 80028cc:	08009a10 	.word	0x08009a10
 80028d0:	08009a18 	.word	0x08009a18
 80028d4:	08009a2c 	.word	0x08009a2c
 80028d8:	40000c00 	.word	0x40000c00
 80028dc:	08009a40 	.word	0x08009a40
 80028e0:	08009a50 	.word	0x08009a50
 80028e4:	08009a60 	.word	0x08009a60

080028e8 <oled_error_screen>:
	* @brief Draws error screen
	*
	* Private function to draw error screen and beep buzzer.
	* Keep the error messages short and concise, e.g "Low batt voltage", MAX 18 characters.
*/
void oled_error_screen(void){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	// Status LED RED + Double beep
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80028ec:	2201      	movs	r2, #1
 80028ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028f2:	4819      	ldr	r0, [pc, #100]	; (8002958 <oled_error_screen+0x70>)
 80028f4:	f001 fef0 	bl	80046d8 <HAL_GPIO_WritePin>
	beep(50);
 80028f8:	2032      	movs	r0, #50	; 0x32
 80028fa:	f7ff fb95 	bl	8002028 <beep>
	HAL_Delay(50);
 80028fe:	2032      	movs	r0, #50	; 0x32
 8002900:	f000 fca2 	bl	8003248 <HAL_Delay>
	beep(50);
 8002904:	2032      	movs	r0, #50	; 0x32
 8002906:	f7ff fb8f 	bl	8002028 <beep>
	HAL_Delay(50);
 800290a:	2032      	movs	r0, #50	; 0x32
 800290c:	f000 fc9c 	bl	8003248 <HAL_Delay>

	ssd1306_Fill(White);
 8002910:	2001      	movs	r0, #1
 8002912:	f000 f98d 	bl	8002c30 <ssd1306_Fill>
	ssd1306_SetCursor((128-5*11)/2, 0);
 8002916:	2100      	movs	r1, #0
 8002918:	2024      	movs	r0, #36	; 0x24
 800291a:	f000 fb1f 	bl	8002f5c <ssd1306_SetCursor>
	ssd1306_WriteString("ERROR", Font_11x18, Black);
 800291e:	4a0f      	ldr	r2, [pc, #60]	; (800295c <oled_error_screen+0x74>)
 8002920:	2300      	movs	r3, #0
 8002922:	ca06      	ldmia	r2, {r1, r2}
 8002924:	480e      	ldr	r0, [pc, #56]	; (8002960 <oled_error_screen+0x78>)
 8002926:	f000 faf3 	bl	8002f10 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 20);
 800292a:	2114      	movs	r1, #20
 800292c:	2000      	movs	r0, #0
 800292e:	f000 fb15 	bl	8002f5c <ssd1306_SetCursor>
	ssd1306_WriteString(error_message, Font_7x10, Black);
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <oled_error_screen+0x7c>)
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <oled_error_screen+0x80>)
 8002938:	2300      	movs	r3, #0
 800293a:	ca06      	ldmia	r2, {r1, r2}
 800293c:	f000 fae8 	bl	8002f10 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 50);
 8002940:	2132      	movs	r1, #50	; 0x32
 8002942:	2000      	movs	r0, #0
 8002944:	f000 fb0a 	bl	8002f5c <ssd1306_SetCursor>
	ssd1306_WriteString("Press button", Font_7x10, Black);
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <oled_error_screen+0x80>)
 800294a:	2300      	movs	r3, #0
 800294c:	ca06      	ldmia	r2, {r1, r2}
 800294e:	4807      	ldr	r0, [pc, #28]	; (800296c <oled_error_screen+0x84>)
 8002950:	f000 fade 	bl	8002f10 <ssd1306_WriteString>
	//HAL_Delay(1000); // Only for beeping every 1s
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40020800 	.word	0x40020800
 800295c:	20000014 	.word	0x20000014
 8002960:	08009a70 	.word	0x08009a70
 8002964:	20000988 	.word	0x20000988
 8002968:	2000000c 	.word	0x2000000c
 800296c:	08009a78 	.word	0x08009a78

08002970 <oled_edit_var_screen>:


/**
 * @brief Show edit variable screen
 */
void oled_edit_var_screen(void){
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
	int new_val = get_edited_val(*edit_var->pvar);
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <oled_edit_var_screen+0x70>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fc2c 	bl	80021dc <get_edited_val>
 8002984:	60f8      	str	r0, [r7, #12]

	char buff[10];

	ssd1306_Fill(Black);
 8002986:	2000      	movs	r0, #0
 8002988:	f000 f952 	bl	8002c30 <ssd1306_Fill>
	ssd1306_SetCursor(0,0);
 800298c:	2100      	movs	r1, #0
 800298e:	2000      	movs	r0, #0
 8002990:	f000 fae4 	bl	8002f5c <ssd1306_SetCursor>
	ssd1306_WriteString("Edit", Font_11x18, White);
 8002994:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <oled_edit_var_screen+0x74>)
 8002996:	2301      	movs	r3, #1
 8002998:	ca06      	ldmia	r2, {r1, r2}
 800299a:	4813      	ldr	r0, [pc, #76]	; (80029e8 <oled_edit_var_screen+0x78>)
 800299c:	f000 fab8 	bl	8002f10 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 40);
 80029a0:	2128      	movs	r1, #40	; 0x28
 80029a2:	2000      	movs	r0, #0
 80029a4:	f000 fada 	bl	8002f5c <ssd1306_SetCursor>
	ssd1306_WriteString(edit_var->name, Font_7x10, White);
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <oled_edit_var_screen+0x70>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <oled_edit_var_screen+0x7c>)
 80029b0:	2301      	movs	r3, #1
 80029b2:	ca06      	ldmia	r2, {r1, r2}
 80029b4:	f000 faac 	bl	8002f10 <ssd1306_WriteString>

	ssd1306_SetCursor(80, 40);
 80029b8:	2128      	movs	r1, #40	; 0x28
 80029ba:	2050      	movs	r0, #80	; 0x50
 80029bc:	f000 face 	bl	8002f5c <ssd1306_SetCursor>
	snprintf(buff, sizeof(buff), "%d", new_val);
 80029c0:	4638      	mov	r0, r7
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <oled_edit_var_screen+0x80>)
 80029c6:	210a      	movs	r1, #10
 80029c8:	f005 f80c 	bl	80079e4 <sniprintf>
	ssd1306_WriteString(buff, Font_7x10, White);
 80029cc:	4a07      	ldr	r2, [pc, #28]	; (80029ec <oled_edit_var_screen+0x7c>)
 80029ce:	4638      	mov	r0, r7
 80029d0:	2301      	movs	r3, #1
 80029d2:	ca06      	ldmia	r2, {r1, r2}
 80029d4:	f000 fa9c 	bl	8002f10 <ssd1306_WriteString>
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000964 	.word	0x20000964
 80029e4:	20000014 	.word	0x20000014
 80029e8:	08009a88 	.word	0x08009a88
 80029ec:	2000000c 	.word	0x2000000c
 80029f0:	08009a0c 	.word	0x08009a0c

080029f4 <oled_not_implemented_screen>:


/**
 * @brief Show "not implemented" screen
 */
void oled_not_implemented_screen(void){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f000 f919 	bl	8002c30 <ssd1306_Fill>
	ssd1306_SetCursor((128-15*7)/2, 32);
 80029fe:	2120      	movs	r1, #32
 8002a00:	200b      	movs	r0, #11
 8002a02:	f000 faab 	bl	8002f5c <ssd1306_SetCursor>
	ssd1306_WriteString("NOT IMPLEMENTED", Font_7x10, White);
 8002a06:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <oled_not_implemented_screen+0x24>)
 8002a08:	2301      	movs	r3, #1
 8002a0a:	ca06      	ldmia	r2, {r1, r2}
 8002a0c:	4803      	ldr	r0, [pc, #12]	; (8002a1c <oled_not_implemented_screen+0x28>)
 8002a0e:	f000 fa7f 	bl	8002f10 <ssd1306_WriteString>
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000000c 	.word	0x2000000c
 8002a1c:	08009a90 	.word	0x08009a90

08002a20 <go_back_main>:
/**
	* @brief Go back to the main menu
	*
	* @param menu_item_t *self - Pointer to itself
*/
void go_back_main(menu_item_t *self){
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	go_back_main_flag = 1;
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <go_back_main+0x1c>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	2000021c 	.word	0x2000021c

08002a40 <oled_show_case>:
/**
 * @brief Change screen to IMAGE and show case head logo
 *
 * @param menu_item_t *self - Pointer to itself
*/
void oled_show_case(menu_item_t *self){
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	active_screen = IMAGE;
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <oled_show_case+0x20>)
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	801a      	strh	r2, [r3, #0]
	curr_image = case_head_bmp;
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <oled_show_case+0x24>)
 8002a50:	4a05      	ldr	r2, [pc, #20]	; (8002a68 <oled_show_case+0x28>)
 8002a52:	601a      	str	r2, [r3, #0]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	200009cc 	.word	0x200009cc
 8002a64:	20000924 	.word	0x20000924
 8002a68:	08009ad4 	.word	0x08009ad4

08002a6c <oled_show_cats>:
/**
 * @brief Change screen to IMAGE and show Nyx & Iris
 *
 * @param menu_item_t *self - Pointer to itself
*/
void oled_show_cats(menu_item_t *self){
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	active_screen = IMAGE;
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <oled_show_cats+0x20>)
 8002a76:	2203      	movs	r2, #3
 8002a78:	801a      	strh	r2, [r3, #0]
	curr_image = cats_bmp;
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <oled_show_cats+0x24>)
 8002a7c:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <oled_show_cats+0x28>)
 8002a7e:	601a      	str	r2, [r3, #0]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	200009cc 	.word	0x200009cc
 8002a90:	20000924 	.word	0x20000924
 8002a94:	08009ed4 	.word	0x08009ed4

08002a98 <oled_show_info>:
/**
 * @brief Change screen to INFO
 *
 * @param menu_item_t *self - Pointer to itself
*/
void oled_show_info(menu_item_t *self){
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	active_screen = INFO;
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <oled_show_info+0x1c>)
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	801a      	strh	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	200009cc 	.word	0x200009cc

08002ab8 <oled_edit_var>:
/**
 * @brief Change screen to EDIT
 *
 * @param menu_item_t *self - Pointer to itself
*/
void oled_edit_var(menu_item_t *self){
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	active_screen = EDIT_VAR;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <oled_edit_var+0x20>)
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	801a      	strh	r2, [r3, #0]
	edit_var = self;
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <oled_edit_var+0x24>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	200009cc 	.word	0x200009cc
 8002adc:	20000964 	.word	0x20000964

08002ae0 <ssd1306_Reset>:
#include "user/ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af04      	add	r7, sp, #16
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
 8002afe:	9302      	str	r3, [sp, #8]
 8002b00:	2301      	movs	r3, #1
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	1dfb      	adds	r3, r7, #7
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2178      	movs	r1, #120	; 0x78
 8002b0e:	4803      	ldr	r0, [pc, #12]	; (8002b1c <ssd1306_WriteCommand+0x2c>)
 8002b10:	f001 ff72 	bl	80049f8 <HAL_I2C_Mem_Write>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	2000063c 	.word	0x2000063c

08002b20 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af04      	add	r7, sp, #16
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b32:	9202      	str	r2, [sp, #8]
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	2240      	movs	r2, #64	; 0x40
 8002b3e:	2178      	movs	r1, #120	; 0x78
 8002b40:	4803      	ldr	r0, [pc, #12]	; (8002b50 <ssd1306_WriteData+0x30>)
 8002b42:	f001 ff59 	bl	80049f8 <HAL_I2C_Mem_Write>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	2000063c 	.word	0x2000063c

08002b54 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8002b58:	f7ff ffc2 	bl	8002ae0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002b5c:	2064      	movs	r0, #100	; 0x64
 8002b5e:	f000 fb73 	bl	8003248 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8002b62:	20ae      	movs	r0, #174	; 0xae
 8002b64:	f7ff ffc4 	bl	8002af0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8002b68:	2020      	movs	r0, #32
 8002b6a:	f7ff ffc1 	bl	8002af0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8002b6e:	2010      	movs	r0, #16
 8002b70:	f7ff ffbe 	bl	8002af0 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002b74:	20b0      	movs	r0, #176	; 0xb0
 8002b76:	f7ff ffbb 	bl	8002af0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002b7a:	20c8      	movs	r0, #200	; 0xc8
 8002b7c:	f7ff ffb8 	bl	8002af0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7ff ffb5 	bl	8002af0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002b86:	2010      	movs	r0, #16
 8002b88:	f7ff ffb2 	bl	8002af0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002b8c:	2040      	movs	r0, #64	; 0x40
 8002b8e:	f7ff ffaf 	bl	8002af0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8002b92:	2081      	movs	r0, #129	; 0x81
 8002b94:	f7ff ffac 	bl	8002af0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8002b98:	20ff      	movs	r0, #255	; 0xff
 8002b9a:	f7ff ffa9 	bl	8002af0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002b9e:	20a1      	movs	r0, #161	; 0xa1
 8002ba0:	f7ff ffa6 	bl	8002af0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002ba4:	20a6      	movs	r0, #166	; 0xa6
 8002ba6:	f7ff ffa3 	bl	8002af0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002baa:	20a8      	movs	r0, #168	; 0xa8
 8002bac:	f7ff ffa0 	bl	8002af0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8002bb0:	203f      	movs	r0, #63	; 0x3f
 8002bb2:	f7ff ff9d 	bl	8002af0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002bb6:	20a4      	movs	r0, #164	; 0xa4
 8002bb8:	f7ff ff9a 	bl	8002af0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002bbc:	20d3      	movs	r0, #211	; 0xd3
 8002bbe:	f7ff ff97 	bl	8002af0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7ff ff94 	bl	8002af0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002bc8:	20d5      	movs	r0, #213	; 0xd5
 8002bca:	f7ff ff91 	bl	8002af0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002bce:	20f0      	movs	r0, #240	; 0xf0
 8002bd0:	f7ff ff8e 	bl	8002af0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002bd4:	20d9      	movs	r0, #217	; 0xd9
 8002bd6:	f7ff ff8b 	bl	8002af0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002bda:	2022      	movs	r0, #34	; 0x22
 8002bdc:	f7ff ff88 	bl	8002af0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002be0:	20da      	movs	r0, #218	; 0xda
 8002be2:	f7ff ff85 	bl	8002af0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8002be6:	2012      	movs	r0, #18
 8002be8:	f7ff ff82 	bl	8002af0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002bec:	20db      	movs	r0, #219	; 0xdb
 8002bee:	f7ff ff7f 	bl	8002af0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002bf2:	2020      	movs	r0, #32
 8002bf4:	f7ff ff7c 	bl	8002af0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002bf8:	208d      	movs	r0, #141	; 0x8d
 8002bfa:	f7ff ff79 	bl	8002af0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002bfe:	2014      	movs	r0, #20
 8002c00:	f7ff ff76 	bl	8002af0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8002c04:	20af      	movs	r0, #175	; 0xaf
 8002c06:	f7ff ff73 	bl	8002af0 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f000 f810 	bl	8002c30 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002c10:	f000 f830 	bl	8002c74 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <ssd1306_Init+0xd8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <ssd1306_Init+0xd8>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002c20:	4b02      	ldr	r3, [pc, #8]	; (8002c2c <ssd1306_Init+0xd8>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	715a      	strb	r2, [r3, #5]
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2000062c 	.word	0x2000062c

08002c30 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	e00d      	b.n	8002c5c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <ssd1306_Fill+0x1a>
 8002c46:	2100      	movs	r1, #0
 8002c48:	e000      	b.n	8002c4c <ssd1306_Fill+0x1c>
 8002c4a:	21ff      	movs	r1, #255	; 0xff
 8002c4c:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <ssd1306_Fill+0x40>)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4413      	add	r3, r2
 8002c52:	460a      	mov	r2, r1
 8002c54:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c62:	d3ed      	bcc.n	8002c40 <ssd1306_Fill+0x10>
    }
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	2000022c 	.word	0x2000022c

08002c74 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	71fb      	strb	r3, [r7, #7]
 8002c7e:	e016      	b.n	8002cae <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	3b50      	subs	r3, #80	; 0x50
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ff32 	bl	8002af0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7ff ff2f 	bl	8002af0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002c92:	2010      	movs	r0, #16
 8002c94:	f7ff ff2c 	bl	8002af0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	01db      	lsls	r3, r3, #7
 8002c9c:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <ssd1306_UpdateScreen+0x48>)
 8002c9e:	4413      	add	r3, r2
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff ff3c 	bl	8002b20 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	3301      	adds	r3, #1
 8002cac:	71fb      	strb	r3, [r7, #7]
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b07      	cmp	r3, #7
 8002cb2:	d9e5      	bls.n	8002c80 <ssd1306_UpdateScreen+0xc>
    }
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	2000022c 	.word	0x2000022c

08002cc0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	71bb      	strb	r3, [r7, #6]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	db48      	blt.n	8002d6c <ssd1306_DrawPixel+0xac>
 8002cda:	79bb      	ldrb	r3, [r7, #6]
 8002cdc:	2b3f      	cmp	r3, #63	; 0x3f
 8002cde:	d845      	bhi.n	8002d6c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <ssd1306_DrawPixel+0xb8>)
 8002ce2:	791b      	ldrb	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d006      	beq.n	8002cf6 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8002ce8:	797b      	ldrb	r3, [r7, #5]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8002cf6:	797b      	ldrb	r3, [r7, #5]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d11a      	bne.n	8002d32 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002cfc:	79fa      	ldrb	r2, [r7, #7]
 8002cfe:	79bb      	ldrb	r3, [r7, #6]
 8002d00:	08db      	lsrs	r3, r3, #3
 8002d02:	b2d8      	uxtb	r0, r3
 8002d04:	4603      	mov	r3, r0
 8002d06:	01db      	lsls	r3, r3, #7
 8002d08:	4413      	add	r3, r2
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <ssd1306_DrawPixel+0xbc>)
 8002d0c:	5cd3      	ldrb	r3, [r2, r3]
 8002d0e:	b25a      	sxtb	r2, r3
 8002d10:	79bb      	ldrb	r3, [r7, #6]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	b259      	sxtb	r1, r3
 8002d22:	79fa      	ldrb	r2, [r7, #7]
 8002d24:	4603      	mov	r3, r0
 8002d26:	01db      	lsls	r3, r3, #7
 8002d28:	4413      	add	r3, r2
 8002d2a:	b2c9      	uxtb	r1, r1
 8002d2c:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <ssd1306_DrawPixel+0xbc>)
 8002d2e:	54d1      	strb	r1, [r2, r3]
 8002d30:	e01d      	b.n	8002d6e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d32:	79fa      	ldrb	r2, [r7, #7]
 8002d34:	79bb      	ldrb	r3, [r7, #6]
 8002d36:	08db      	lsrs	r3, r3, #3
 8002d38:	b2d8      	uxtb	r0, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	01db      	lsls	r3, r3, #7
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <ssd1306_DrawPixel+0xbc>)
 8002d42:	5cd3      	ldrb	r3, [r2, r3]
 8002d44:	b25a      	sxtb	r2, r3
 8002d46:	79bb      	ldrb	r3, [r7, #6]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	4013      	ands	r3, r2
 8002d5a:	b259      	sxtb	r1, r3
 8002d5c:	79fa      	ldrb	r2, [r7, #7]
 8002d5e:	4603      	mov	r3, r0
 8002d60:	01db      	lsls	r3, r3, #7
 8002d62:	4413      	add	r3, r2
 8002d64:	b2c9      	uxtb	r1, r1
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <ssd1306_DrawPixel+0xbc>)
 8002d68:	54d1      	strb	r1, [r2, r3]
 8002d6a:	e000      	b.n	8002d6e <ssd1306_DrawPixel+0xae>
        return;
 8002d6c:	bf00      	nop
    }
}
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	2000062c 	.word	0x2000062c
 8002d7c:	2000022c 	.word	0x2000022c

08002d80 <ssd1306_DrawBitmap>:

// Draw a 128x64 bitmap image
// pBitmap     => Pointer to the stored byte array (size = 1024) of the image. 
// Convesion done here: https://javl.github.io/image2cpp/
void ssd1306_DrawBitmap(const unsigned char * pBitmap){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 1024; i++){
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	e037      	b.n	8002dfe <ssd1306_DrawBitmap+0x7e>
			// Extract each byte
			unsigned char byte = pBitmap[i];
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	75fb      	strb	r3, [r7, #23]
				
			for(int k = 0; k < 8; k++){
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e029      	b.n	8002df2 <ssd1306_DrawBitmap+0x72>
				unsigned char pixel = (byte >> (7-k)) & 0x01;
 8002d9e:	7dfa      	ldrb	r2, [r7, #23]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f1c3 0307 	rsb	r3, r3, #7
 8002da6:	fa42 f303 	asr.w	r3, r2, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	75bb      	strb	r3, [r7, #22]
				unsigned int x = (i*8 + k) % 128;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	00da      	lsls	r2, r3, #3
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	4413      	add	r3, r2
 8002dba:	425a      	negs	r2, r3
 8002dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dc4:	bf58      	it	pl
 8002dc6:	4253      	negpl	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
				unsigned int y = (i*8 + k)/128;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	00da      	lsls	r2, r3, #3
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da00      	bge.n	8002dd8 <ssd1306_DrawBitmap+0x58>
 8002dd6:	337f      	adds	r3, #127	; 0x7f
 8002dd8:	11db      	asrs	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]
				ssd1306_DrawPixel(x, y, (SSD1306_COLOR) pixel);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	b2d1      	uxtb	r1, r2
 8002de4:	7dba      	ldrb	r2, [r7, #22]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff6a 	bl	8002cc0 <ssd1306_DrawPixel>
			for(int k = 0; k < 8; k++){
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	3301      	adds	r3, #1
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b07      	cmp	r3, #7
 8002df6:	ddd2      	ble.n	8002d9e <ssd1306_DrawBitmap+0x1e>
	for(int i = 0; i < 1024; i++){
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e04:	dbc3      	blt.n	8002d8e <ssd1306_DrawBitmap+0xe>
			}//for - k
	}//for - i
}
 8002e06:	bf00      	nop
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002e10:	b590      	push	{r4, r7, lr}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4604      	mov	r4, r0
 8002e18:	1d38      	adds	r0, r7, #4
 8002e1a:	e880 0006 	stmia.w	r0, {r1, r2}
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4623      	mov	r3, r4
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	4613      	mov	r3, r2
 8002e26:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002e28:	4b38      	ldr	r3, [pc, #224]	; (8002f0c <ssd1306_WriteChar+0xfc>)
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	793b      	ldrb	r3, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	2b7f      	cmp	r3, #127	; 0x7f
 8002e34:	dc06      	bgt.n	8002e44 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002e36:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <ssd1306_WriteChar+0xfc>)
 8002e38:	885b      	ldrh	r3, [r3, #2]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	797b      	ldrb	r3, [r7, #5]
 8002e3e:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002e40:	2b3f      	cmp	r3, #63	; 0x3f
 8002e42:	dd01      	ble.n	8002e48 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e05d      	b.n	8002f04 <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	e04c      	b.n	8002ee8 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	3b20      	subs	r3, #32
 8002e54:	7979      	ldrb	r1, [r7, #5]
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	440b      	add	r3, r1
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	e034      	b.n	8002ed8 <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002e7e:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <ssd1306_WriteChar+0xfc>)
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	b2d8      	uxtb	r0, r3
 8002e8c:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <ssd1306_WriteChar+0xfc>)
 8002e8e:	885b      	ldrh	r3, [r3, #2]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	7bba      	ldrb	r2, [r7, #14]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7ff ff0f 	bl	8002cc0 <ssd1306_DrawPixel>
 8002ea2:	e016      	b.n	8002ed2 <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <ssd1306_WriteChar+0xfc>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	b2d8      	uxtb	r0, r3
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <ssd1306_WriteChar+0xfc>)
 8002eb4:	885b      	ldrh	r3, [r3, #2]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	b2d9      	uxtb	r1, r3
 8002ec0:	7bbb      	ldrb	r3, [r7, #14]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f7ff fef7 	bl	8002cc0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	793b      	ldrb	r3, [r7, #4]
 8002eda:	461a      	mov	r2, r3
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d3c5      	bcc.n	8002e6e <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	797b      	ldrb	r3, [r7, #5]
 8002eea:	461a      	mov	r2, r3
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d3ad      	bcc.n	8002e4e <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <ssd1306_WriteChar+0xfc>)
 8002ef4:	881a      	ldrh	r2, [r3, #0]
 8002ef6:	793b      	ldrb	r3, [r7, #4]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <ssd1306_WriteChar+0xfc>)
 8002f00:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3724      	adds	r7, #36	; 0x24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}
 8002f0c:	2000062c 	.word	0x2000062c

08002f10 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	1d38      	adds	r0, r7, #4
 8002f1a:	e880 0006 	stmia.w	r0, {r1, r2}
 8002f1e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002f20:	e012      	b.n	8002f48 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	7818      	ldrb	r0, [r3, #0]
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	1d3a      	adds	r2, r7, #4
 8002f2a:	ca06      	ldmia	r2, {r1, r2}
 8002f2c:	f7ff ff70 	bl	8002e10 <ssd1306_WriteChar>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d002      	beq.n	8002f42 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	e008      	b.n	8002f54 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3301      	adds	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e8      	bne.n	8002f22 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	781b      	ldrb	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	460a      	mov	r2, r1
 8002f66:	71fb      	strb	r3, [r7, #7]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <ssd1306_SetCursor+0x2c>)
 8002f72:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002f74:	79bb      	ldrb	r3, [r7, #6]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <ssd1306_SetCursor+0x2c>)
 8002f7a:	805a      	strh	r2, [r3, #2]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	2000062c 	.word	0x2000062c

08002f8c <init_voltmeter>:
#define NR 2					// Number of ADC channels

uint8_t adc_raw[NR*SAMPLES];																	// Array for raw adc samples
uint8_t nr_indices = (sizeof(adc_raw) / sizeof(adc_raw[0]));	// Number or indices in the raw adc array

void init_voltmeter(void){
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_raw, nr_indices);
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <init_voltmeter+0x18>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	4904      	ldr	r1, [pc, #16]	; (8002fa8 <init_voltmeter+0x1c>)
 8002f98:	4804      	ldr	r0, [pc, #16]	; (8002fac <init_voltmeter+0x20>)
 8002f9a:	f000 f9bb 	bl	8003314 <HAL_ADC_Start_DMA>
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000001c 	.word	0x2000001c
 8002fa8:	20000aa4 	.word	0x20000aa4
 8002fac:	20000754 	.word	0x20000754

08002fb0 <adc_average>:

int cmpfunc(const void * a, const void * b) {
   return ( *(int*)a - *(int*)b );
}

uint8_t adc_average(uint8_t index){
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
	// This can be improved by sorting raw values first and then removing a couple of the highest and lowest readings
	// However after inspection the ADC values seem very stable and this is not needed.
	uint8_t average = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]
	uint32_t sum = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]

	for(int i = index; i < NR*SAMPLES; i += NR){
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	e00a      	b.n	8002fde <adc_average+0x2e>
		sum += adc_raw[i];
 8002fc8:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <adc_average+0x48>)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
	for(int i = index; i < NR*SAMPLES; i += NR){
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	3302      	adds	r3, #2
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b1f      	cmp	r3, #31
 8002fe2:	ddf1      	ble.n	8002fc8 <adc_average+0x18>
	}

	average = sum / SAMPLES;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	73fb      	strb	r3, [r7, #15]
	return average;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	20000aa4 	.word	0x20000aa4

08002ffc <adc_to_voltage>:


float adc_to_voltage(uint8_t adc_value, uint32_t R1, uint32_t R2){
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	73fb      	strb	r3, [r7, #15]
	//1. Calculate the voltage between R2 and ground (V_out), (reading / resolution) * V_ref
	//2. Calculate actual voltage (V_in) with the voltage divider. (V_out = V_in * R2/(R1 + R2) or (V_in = V_out * (R1 + R2) / R2
	return (adc_value / 256.0f) * 3.3f * (R1 + R2) / (float)R2;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003014:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003058 <adc_to_voltage+0x5c>
 8003018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800301c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800305c <adc_to_voltage+0x60>
 8003020:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	ee07 3a90 	vmov	s15, r3
 800303c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003040:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003044:	eef0 7a66 	vmov.f32	s15, s13

}
 8003048:	eeb0 0a67 	vmov.f32	s0, s15
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	43800000 	.word	0x43800000
 800305c:	40533333 	.word	0x40533333

08003060 <GET_voltage_battery>:


float GET_voltage_battery(void){
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
	return adc_to_voltage(adc_average(1), 20000, 10000);
 8003064:	2001      	movs	r0, #1
 8003066:	f7ff ffa3 	bl	8002fb0 <adc_average>
 800306a:	4603      	mov	r3, r0
 800306c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003070:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ffc1 	bl	8002ffc <adc_to_voltage>
 800307a:	eef0 7a40 	vmov.f32	s15, s0
}
 800307e:	eeb0 0a67 	vmov.f32	s0, s15
 8003082:	bd80      	pop	{r7, pc}

08003084 <GET_voltage_boost>:


float GET_voltage_boost(void){
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
	return adc_to_voltage(adc_average(0), 62000, 10000);
 8003088:	2000      	movs	r0, #0
 800308a:	f7ff ff91 	bl	8002fb0 <adc_average>
 800308e:	4603      	mov	r3, r0
 8003090:	f242 7210 	movw	r2, #10000	; 0x2710
 8003094:	f24f 2130 	movw	r1, #62000	; 0xf230
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ffaf 	bl	8002ffc <adc_to_voltage>
 800309e:	eef0 7a40 	vmov.f32	s15, s0

}
 80030a2:	eeb0 0a67 	vmov.f32	s0, s15
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <GET_battery_status>:


battery_status_t GET_battery_status(void){
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
	battery_status_t status = BATTERY_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	71fb      	strb	r3, [r7, #7]

	if(GET_voltage_battery() > 8.4f){
 80030b2:	f7ff ffd5 	bl	8003060 <GET_voltage_battery>
 80030b6:	eeb0 7a40 	vmov.f32	s14, s0
 80030ba:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003100 <GET_battery_status+0x58>
 80030be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c6:	dd05      	ble.n	80030d4 <GET_battery_status+0x2c>
		oled_error("OVER VOLTAGE");
 80030c8:	480e      	ldr	r0, [pc, #56]	; (8003104 <GET_battery_status+0x5c>)
 80030ca:	f7ff f9ef 	bl	80024ac <oled_error>
		status = BATTERY_OVER_VOLTAGE;
 80030ce:	2302      	movs	r3, #2
 80030d0:	71fb      	strb	r3, [r7, #7]
 80030d2:	e00f      	b.n	80030f4 <GET_battery_status+0x4c>
	}else if(GET_voltage_battery() < 6.4f){
 80030d4:	f7ff ffc4 	bl	8003060 <GET_voltage_battery>
 80030d8:	eeb0 7a40 	vmov.f32	s14, s0
 80030dc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8003108 <GET_battery_status+0x60>
 80030e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e8:	d504      	bpl.n	80030f4 <GET_battery_status+0x4c>
		oled_error("LOW VOLTAGE");
 80030ea:	4808      	ldr	r0, [pc, #32]	; (800310c <GET_battery_status+0x64>)
 80030ec:	f7ff f9de 	bl	80024ac <oled_error>
		status = BATTERY_LOW_VOLTAGE;
 80030f0:	2301      	movs	r3, #1
 80030f2:	71fb      	strb	r3, [r7, #7]
	}
	return status;
 80030f4:	79fb      	ldrb	r3, [r7, #7]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	41066666 	.word	0x41066666
 8003104:	08009aa0 	.word	0x08009aa0
 8003108:	40cccccd 	.word	0x40cccccd
 800310c:	08009ab0 	.word	0x08009ab0

08003110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003148 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003114:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003116:	e003      	b.n	8003120 <LoopCopyDataInit>

08003118 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800311a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800311c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800311e:	3104      	adds	r1, #4

08003120 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003120:	480b      	ldr	r0, [pc, #44]	; (8003150 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003124:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003126:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003128:	d3f6      	bcc.n	8003118 <CopyDataInit>
  ldr  r2, =_sbss
 800312a:	4a0b      	ldr	r2, [pc, #44]	; (8003158 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800312c:	e002      	b.n	8003134 <LoopFillZerobss>

0800312e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800312e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003130:	f842 3b04 	str.w	r3, [r2], #4

08003134 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003136:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003138:	d3f9      	bcc.n	800312e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800313a:	f7fe ff55 	bl	8001fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800313e:	f003 ff65 	bl	800700c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003142:	f7fd fec3 	bl	8000ecc <main>
  bx  lr    
 8003146:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003148:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800314c:	0800ba78 	.word	0x0800ba78
  ldr  r0, =_sdata
 8003150:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003154:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8003158:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 800315c:	20000acc 	.word	0x20000acc

08003160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003160:	e7fe      	b.n	8003160 <ADC_IRQHandler>
	...

08003164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <HAL_Init+0x40>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <HAL_Init+0x40>)
 800316e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_Init+0x40>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <HAL_Init+0x40>)
 800317a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800317e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <HAL_Init+0x40>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a07      	ldr	r2, [pc, #28]	; (80031a4 <HAL_Init+0x40>)
 8003186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800318c:	2003      	movs	r0, #3
 800318e:	f000 fd41 	bl	8003c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003192:	2000      	movs	r0, #0
 8003194:	f000 f808 	bl	80031a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003198:	f7fe fb36 	bl	8001808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40023c00 	.word	0x40023c00

080031a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031b0:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_InitTick+0x54>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_InitTick+0x58>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	4619      	mov	r1, r3
 80031ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031be:	fbb3 f3f1 	udiv	r3, r3, r1
 80031c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fd59 	bl	8003c7e <HAL_SYSTICK_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00e      	b.n	80031f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b0f      	cmp	r3, #15
 80031da:	d80a      	bhi.n	80031f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031dc:	2200      	movs	r2, #0
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	f04f 30ff 	mov.w	r0, #4294967295
 80031e4:	f000 fd21 	bl	8003c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031e8:	4a06      	ldr	r2, [pc, #24]	; (8003204 <HAL_InitTick+0x5c>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000000 	.word	0x20000000
 8003200:	20000024 	.word	0x20000024
 8003204:	20000020 	.word	0x20000020

08003208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_IncTick+0x20>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_IncTick+0x24>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4413      	add	r3, r2
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <HAL_IncTick+0x24>)
 800321a:	6013      	str	r3, [r2, #0]
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000024 	.word	0x20000024
 800322c:	20000ac4 	.word	0x20000ac4

08003230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return uwTick;
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <HAL_GetTick+0x14>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000ac4 	.word	0x20000ac4

08003248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003250:	f7ff ffee 	bl	8003230 <HAL_GetTick>
 8003254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d005      	beq.n	800326e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_Delay+0x40>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800326e:	bf00      	nop
 8003270:	f7ff ffde 	bl	8003230 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	429a      	cmp	r2, r3
 800327e:	d8f7      	bhi.n	8003270 <HAL_Delay+0x28>
  {
  }
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000024 	.word	0x20000024

0800328c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e033      	b.n	800330a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fe fad4 	bl	8001858 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d118      	bne.n	80032fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032d2:	f023 0302 	bic.w	r3, r3, #2
 80032d6:	f043 0202 	orr.w	r2, r3, #2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fa4a 	bl	8003778 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	f043 0201 	orr.w	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
 80032fa:	e001      	b.n	8003300 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_ADC_Start_DMA+0x1e>
 800332e:	2302      	movs	r3, #2
 8003330:	e0cc      	b.n	80034cc <HAL_ADC_Start_DMA+0x1b8>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d018      	beq.n	800337a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003358:	4b5e      	ldr	r3, [pc, #376]	; (80034d4 <HAL_ADC_Start_DMA+0x1c0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a5e      	ldr	r2, [pc, #376]	; (80034d8 <HAL_ADC_Start_DMA+0x1c4>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	0c9a      	lsrs	r2, r3, #18
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800336c:	e002      	b.n	8003374 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	3b01      	subs	r3, #1
 8003372:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f9      	bne.n	800336e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	f040 80a0 	bne.w	80034ca <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d007      	beq.n	80033bc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c8:	d106      	bne.n	80033d8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f023 0206 	bic.w	r2, r3, #6
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
 80033d6:	e002      	b.n	80033de <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033e6:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <HAL_ADC_Start_DMA+0x1c8>)
 80033e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	4a3c      	ldr	r2, [pc, #240]	; (80034e0 <HAL_ADC_Start_DMA+0x1cc>)
 80033f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	4a3b      	ldr	r2, [pc, #236]	; (80034e4 <HAL_ADC_Start_DMA+0x1d0>)
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	4a3a      	ldr	r2, [pc, #232]	; (80034e8 <HAL_ADC_Start_DMA+0x1d4>)
 8003400:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800340a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800341a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800342a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	334c      	adds	r3, #76	; 0x4c
 8003436:	4619      	mov	r1, r3
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f000 fcda 	bl	8003df4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	2b00      	cmp	r3, #0
 800344a:	d12a      	bne.n	80034a2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a26      	ldr	r2, [pc, #152]	; (80034ec <HAL_ADC_Start_DMA+0x1d8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d015      	beq.n	8003482 <HAL_ADC_Start_DMA+0x16e>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a25      	ldr	r2, [pc, #148]	; (80034f0 <HAL_ADC_Start_DMA+0x1dc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d105      	bne.n	800346c <HAL_ADC_Start_DMA+0x158>
 8003460:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_ADC_Start_DMA+0x1c8>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a20      	ldr	r2, [pc, #128]	; (80034f4 <HAL_ADC_Start_DMA+0x1e0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d129      	bne.n	80034ca <HAL_ADC_Start_DMA+0x1b6>
 8003476:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_ADC_Start_DMA+0x1c8>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2b0f      	cmp	r3, #15
 8003480:	d823      	bhi.n	80034ca <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d11c      	bne.n	80034ca <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	e013      	b.n	80034ca <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a11      	ldr	r2, [pc, #68]	; (80034ec <HAL_ADC_Start_DMA+0x1d8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d10e      	bne.n	80034ca <HAL_ADC_Start_DMA+0x1b6>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d107      	bne.n	80034ca <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034c8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000000 	.word	0x20000000
 80034d8:	431bde83 	.word	0x431bde83
 80034dc:	40012300 	.word	0x40012300
 80034e0:	08003971 	.word	0x08003971
 80034e4:	08003a2b 	.word	0x08003a2b
 80034e8:	08003a47 	.word	0x08003a47
 80034ec:	40012000 	.word	0x40012000
 80034f0:	40012100 	.word	0x40012100
 80034f4:	40012200 	.word	0x40012200

080034f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x1c>
 800354c:	2302      	movs	r3, #2
 800354e:	e105      	b.n	800375c <HAL_ADC_ConfigChannel+0x228>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b09      	cmp	r3, #9
 800355e:	d925      	bls.n	80035ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68d9      	ldr	r1, [r3, #12]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	3b1e      	subs	r3, #30
 8003576:	2207      	movs	r2, #7
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43da      	mvns	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	400a      	ands	r2, r1
 8003584:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68d9      	ldr	r1, [r3, #12]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	4618      	mov	r0, r3
 8003598:	4603      	mov	r3, r0
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4403      	add	r3, r0
 800359e:	3b1e      	subs	r3, #30
 80035a0:	409a      	lsls	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	e022      	b.n	80035f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6919      	ldr	r1, [r3, #16]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	2207      	movs	r2, #7
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	400a      	ands	r2, r1
 80035ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6919      	ldr	r1, [r3, #16]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4618      	mov	r0, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4403      	add	r3, r0
 80035e8:	409a      	lsls	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d824      	bhi.n	8003644 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	3b05      	subs	r3, #5
 800360c:	221f      	movs	r2, #31
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	400a      	ands	r2, r1
 800361a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	3b05      	subs	r3, #5
 8003636:	fa00 f203 	lsl.w	r2, r0, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	635a      	str	r2, [r3, #52]	; 0x34
 8003642:	e04c      	b.n	80036de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b0c      	cmp	r3, #12
 800364a:	d824      	bhi.n	8003696 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	3b23      	subs	r3, #35	; 0x23
 800365e:	221f      	movs	r2, #31
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43da      	mvns	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	400a      	ands	r2, r1
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	4618      	mov	r0, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	3b23      	subs	r3, #35	; 0x23
 8003688:	fa00 f203 	lsl.w	r2, r0, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
 8003694:	e023      	b.n	80036de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	3b41      	subs	r3, #65	; 0x41
 80036a8:	221f      	movs	r2, #31
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	400a      	ands	r2, r1
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	4618      	mov	r0, r3
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	3b41      	subs	r3, #65	; 0x41
 80036d2:	fa00 f203 	lsl.w	r2, r0, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <HAL_ADC_ConfigChannel+0x234>)
 80036e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a21      	ldr	r2, [pc, #132]	; (800376c <HAL_ADC_ConfigChannel+0x238>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d109      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x1cc>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b12      	cmp	r3, #18
 80036f2:	d105      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a19      	ldr	r2, [pc, #100]	; (800376c <HAL_ADC_ConfigChannel+0x238>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d123      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x21e>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b10      	cmp	r3, #16
 8003710:	d003      	beq.n	800371a <HAL_ADC_ConfigChannel+0x1e6>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b11      	cmp	r3, #17
 8003718:	d11b      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b10      	cmp	r3, #16
 800372c:	d111      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_ADC_ConfigChannel+0x23c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a10      	ldr	r2, [pc, #64]	; (8003774 <HAL_ADC_ConfigChannel+0x240>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	0c9a      	lsrs	r2, r3, #18
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003744:	e002      	b.n	800374c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	3b01      	subs	r3, #1
 800374a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f9      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	40012300 	.word	0x40012300
 800376c:	40012000 	.word	0x40012000
 8003770:	20000000 	.word	0x20000000
 8003774:	431bde83 	.word	0x431bde83

08003778 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003780:	4b79      	ldr	r3, [pc, #484]	; (8003968 <ADC_Init+0x1f0>)
 8003782:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	431a      	orrs	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	021a      	lsls	r2, r3, #8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6899      	ldr	r1, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	4a58      	ldr	r2, [pc, #352]	; (800396c <ADC_Init+0x1f4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d022      	beq.n	8003856 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800381e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6899      	ldr	r1, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6899      	ldr	r1, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	e00f      	b.n	8003876 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003874:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0202 	bic.w	r2, r2, #2
 8003884:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6899      	ldr	r1, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7e1b      	ldrb	r3, [r3, #24]
 8003890:	005a      	lsls	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01b      	beq.n	80038dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	3b01      	subs	r3, #1
 80038d0:	035a      	lsls	r2, r3, #13
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	e007      	b.n	80038ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	3b01      	subs	r3, #1
 8003908:	051a      	lsls	r2, r3, #20
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6899      	ldr	r1, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800392e:	025a      	lsls	r2, r3, #9
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6899      	ldr	r1, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	029a      	lsls	r2, r3, #10
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40012300 	.word	0x40012300
 800396c:	0f000001 	.word	0x0f000001

08003970 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003986:	2b00      	cmp	r3, #0
 8003988:	d13c      	bne.n	8003a04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d12b      	bne.n	80039fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d127      	bne.n	80039fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d006      	beq.n	80039c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d119      	bne.n	80039fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0220 	bic.w	r2, r2, #32
 80039d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f043 0201 	orr.w	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7ff fd7b 	bl	80034f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a02:	e00e      	b.n	8003a22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f7ff fd85 	bl	8003520 <HAL_ADC_ErrorCallback>
}
 8003a16:	e004      	b.n	8003a22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4798      	blx	r3
}
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff fd67 	bl	800350c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2240      	movs	r2, #64	; 0x40
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	f043 0204 	orr.w	r2, r3, #4
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7ff fd5a 	bl	8003520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a90:	4013      	ands	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aa6:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	60d3      	str	r3, [r2, #12]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	0a1b      	lsrs	r3, r3, #8
 8003ac6:	f003 0307 	and.w	r3, r3, #7
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	db0b      	blt.n	8003b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	f003 021f 	and.w	r2, r3, #31
 8003af0:	4907      	ldr	r1, [pc, #28]	; (8003b10 <__NVIC_EnableIRQ+0x38>)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	2001      	movs	r0, #1
 8003afa:	fa00 f202 	lsl.w	r2, r0, r2
 8003afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	e000e100 	.word	0xe000e100

08003b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	6039      	str	r1, [r7, #0]
 8003b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	db0a      	blt.n	8003b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	490c      	ldr	r1, [pc, #48]	; (8003b60 <__NVIC_SetPriority+0x4c>)
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	0112      	lsls	r2, r2, #4
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	440b      	add	r3, r1
 8003b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b3c:	e00a      	b.n	8003b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	4908      	ldr	r1, [pc, #32]	; (8003b64 <__NVIC_SetPriority+0x50>)
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	3b04      	subs	r3, #4
 8003b4c:	0112      	lsls	r2, r2, #4
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	440b      	add	r3, r1
 8003b52:	761a      	strb	r2, [r3, #24]
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	e000e100 	.word	0xe000e100
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b089      	sub	sp, #36	; 0x24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f1c3 0307 	rsb	r3, r3, #7
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	bf28      	it	cs
 8003b86:	2304      	movcs	r3, #4
 8003b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d902      	bls.n	8003b98 <NVIC_EncodePriority+0x30>
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3b03      	subs	r3, #3
 8003b96:	e000      	b.n	8003b9a <NVIC_EncodePriority+0x32>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	401a      	ands	r2, r3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	43d9      	mvns	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc0:	4313      	orrs	r3, r2
         );
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3724      	adds	r7, #36	; 0x24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be0:	d301      	bcc.n	8003be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003be2:	2301      	movs	r3, #1
 8003be4:	e00f      	b.n	8003c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003be6:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <SysTick_Config+0x40>)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bee:	210f      	movs	r1, #15
 8003bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf4:	f7ff ff8e 	bl	8003b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <SysTick_Config+0x40>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bfe:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <SysTick_Config+0x40>)
 8003c00:	2207      	movs	r2, #7
 8003c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	e000e010 	.word	0xe000e010

08003c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff ff29 	bl	8003a74 <__NVIC_SetPriorityGrouping>
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b086      	sub	sp, #24
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	4603      	mov	r3, r0
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c3c:	f7ff ff3e 	bl	8003abc <__NVIC_GetPriorityGrouping>
 8003c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	6978      	ldr	r0, [r7, #20]
 8003c48:	f7ff ff8e 	bl	8003b68 <NVIC_EncodePriority>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ff5d 	bl	8003b14 <__NVIC_SetPriority>
}
 8003c5a:	bf00      	nop
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	4603      	mov	r3, r0
 8003c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff31 	bl	8003ad8 <__NVIC_EnableIRQ>
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff ffa2 	bl	8003bd0 <SysTick_Config>
 8003c8c:	4603      	mov	r3, r0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ca4:	f7ff fac4 	bl	8003230 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e099      	b.n	8003de8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0201 	bic.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cd4:	e00f      	b.n	8003cf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cd6:	f7ff faab 	bl	8003230 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b05      	cmp	r3, #5
 8003ce2:	d908      	bls.n	8003cf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2203      	movs	r2, #3
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e078      	b.n	8003de8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e8      	bne.n	8003cd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4b38      	ldr	r3, [pc, #224]	; (8003df0 <HAL_DMA_Init+0x158>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d107      	bne.n	8003d60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0307 	bic.w	r3, r3, #7
 8003d76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d117      	bne.n	8003dba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00e      	beq.n	8003dba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fa6f 	bl	8004280 <DMA_CheckFifoParam>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003db6:	2301      	movs	r3, #1
 8003db8:	e016      	b.n	8003de8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fa26 	bl	8004214 <DMA_CalcBaseAndBitshift>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	223f      	movs	r2, #63	; 0x3f
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	f010803f 	.word	0xf010803f

08003df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_DMA_Start_IT+0x26>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e040      	b.n	8003e9c <HAL_DMA_Start_IT+0xa8>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d12f      	bne.n	8003e8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2202      	movs	r2, #2
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f9b8 	bl	80041b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4c:	223f      	movs	r2, #63	; 0x3f
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0216 	orr.w	r2, r2, #22
 8003e62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0208 	orr.w	r2, r2, #8
 8003e7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e005      	b.n	8003e9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
 8003e98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003eb0:	4b92      	ldr	r3, [pc, #584]	; (80040fc <HAL_DMA_IRQHandler+0x258>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a92      	ldr	r2, [pc, #584]	; (8004100 <HAL_DMA_IRQHandler+0x25c>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	0a9b      	lsrs	r3, r3, #10
 8003ebc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	2208      	movs	r2, #8
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d01a      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d013      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0204 	bic.w	r2, r2, #4
 8003ef6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efc:	2208      	movs	r2, #8
 8003efe:	409a      	lsls	r2, r3
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	2201      	movs	r2, #1
 8003f16:	409a      	lsls	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d012      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f32:	2201      	movs	r2, #1
 8003f34:	409a      	lsls	r2, r3
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f043 0202 	orr.w	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d012      	beq.n	8003f7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00b      	beq.n	8003f7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f68:	2204      	movs	r2, #4
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	f043 0204 	orr.w	r2, r3, #4
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	2210      	movs	r2, #16
 8003f82:	409a      	lsls	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d043      	beq.n	8004014 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d03c      	beq.n	8004014 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9e:	2210      	movs	r2, #16
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d018      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d108      	bne.n	8003fd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d024      	beq.n	8004014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	4798      	blx	r3
 8003fd2:	e01f      	b.n	8004014 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01b      	beq.n	8004014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
 8003fe4:	e016      	b.n	8004014 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d107      	bne.n	8004004 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0208 	bic.w	r2, r2, #8
 8004002:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004018:	2220      	movs	r2, #32
 800401a:	409a      	lsls	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4013      	ands	r3, r2
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 808e 	beq.w	8004142 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8086 	beq.w	8004142 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403a:	2220      	movs	r2, #32
 800403c:	409a      	lsls	r2, r3
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b05      	cmp	r3, #5
 800404c:	d136      	bne.n	80040bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0216 	bic.w	r2, r2, #22
 800405c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800406c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	d103      	bne.n	800407e <HAL_DMA_IRQHandler+0x1da>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0208 	bic.w	r2, r2, #8
 800408c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004092:	223f      	movs	r2, #63	; 0x3f
 8004094:	409a      	lsls	r2, r3
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d07d      	beq.n	80041ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
        }
        return;
 80040ba:	e078      	b.n	80041ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01c      	beq.n	8004104 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d108      	bne.n	80040ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d030      	beq.n	8004142 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4798      	blx	r3
 80040e8:	e02b      	b.n	8004142 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d027      	beq.n	8004142 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	4798      	blx	r3
 80040fa:	e022      	b.n	8004142 <HAL_DMA_IRQHandler+0x29e>
 80040fc:	20000000 	.word	0x20000000
 8004100:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10f      	bne.n	8004132 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0210 	bic.w	r2, r2, #16
 8004120:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	2b00      	cmp	r3, #0
 8004148:	d032      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d022      	beq.n	800419c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2205      	movs	r2, #5
 800415a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	3301      	adds	r3, #1
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	429a      	cmp	r2, r3
 8004178:	d307      	bcc.n	800418a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f2      	bne.n	800416e <HAL_DMA_IRQHandler+0x2ca>
 8004188:	e000      	b.n	800418c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800418a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	4798      	blx	r3
 80041ac:	e000      	b.n	80041b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80041ae:	bf00      	nop
    }
  }
}
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop

080041b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	d108      	bne.n	80041f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041f6:	e007      	b.n	8004208 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	60da      	str	r2, [r3, #12]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	3b10      	subs	r3, #16
 8004224:	4a14      	ldr	r2, [pc, #80]	; (8004278 <DMA_CalcBaseAndBitshift+0x64>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800422e:	4a13      	ldr	r2, [pc, #76]	; (800427c <DMA_CalcBaseAndBitshift+0x68>)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b03      	cmp	r3, #3
 8004240:	d909      	bls.n	8004256 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800424a:	f023 0303 	bic.w	r3, r3, #3
 800424e:	1d1a      	adds	r2, r3, #4
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	659a      	str	r2, [r3, #88]	; 0x58
 8004254:	e007      	b.n	8004266 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800425e:	f023 0303 	bic.w	r3, r3, #3
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	aaaaaaab 	.word	0xaaaaaaab
 800427c:	0800b79c 	.word	0x0800b79c

08004280 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d11f      	bne.n	80042da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b03      	cmp	r3, #3
 800429e:	d855      	bhi.n	800434c <DMA_CheckFifoParam+0xcc>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <DMA_CheckFifoParam+0x28>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042cb 	.word	0x080042cb
 80042b0:	080042b9 	.word	0x080042b9
 80042b4:	0800434d 	.word	0x0800434d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d045      	beq.n	8004350 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c8:	e042      	b.n	8004350 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042d2:	d13f      	bne.n	8004354 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d8:	e03c      	b.n	8004354 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e2:	d121      	bne.n	8004328 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d836      	bhi.n	8004358 <DMA_CheckFifoParam+0xd8>
 80042ea:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <DMA_CheckFifoParam+0x70>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	08004301 	.word	0x08004301
 80042f4:	08004307 	.word	0x08004307
 80042f8:	08004301 	.word	0x08004301
 80042fc:	08004319 	.word	0x08004319
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
      break;
 8004304:	e02f      	b.n	8004366 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d024      	beq.n	800435c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004316:	e021      	b.n	800435c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004320:	d11e      	bne.n	8004360 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004326:	e01b      	b.n	8004360 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d902      	bls.n	8004334 <DMA_CheckFifoParam+0xb4>
 800432e:	2b03      	cmp	r3, #3
 8004330:	d003      	beq.n	800433a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004332:	e018      	b.n	8004366 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
      break;
 8004338:	e015      	b.n	8004366 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00e      	beq.n	8004364 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
      break;
 800434a:	e00b      	b.n	8004364 <DMA_CheckFifoParam+0xe4>
      break;
 800434c:	bf00      	nop
 800434e:	e00a      	b.n	8004366 <DMA_CheckFifoParam+0xe6>
      break;
 8004350:	bf00      	nop
 8004352:	e008      	b.n	8004366 <DMA_CheckFifoParam+0xe6>
      break;
 8004354:	bf00      	nop
 8004356:	e006      	b.n	8004366 <DMA_CheckFifoParam+0xe6>
      break;
 8004358:	bf00      	nop
 800435a:	e004      	b.n	8004366 <DMA_CheckFifoParam+0xe6>
      break;
 800435c:	bf00      	nop
 800435e:	e002      	b.n	8004366 <DMA_CheckFifoParam+0xe6>
      break;   
 8004360:	bf00      	nop
 8004362:	e000      	b.n	8004366 <DMA_CheckFifoParam+0xe6>
      break;
 8004364:	bf00      	nop
    }
  } 
  
  return status; 
 8004366:	7bfb      	ldrb	r3, [r7, #15]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004374:	b480      	push	{r7}
 8004376:	b089      	sub	sp, #36	; 0x24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	e16b      	b.n	8004668 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004390:	2201      	movs	r2, #1
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4013      	ands	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	f040 815a 	bne.w	8004662 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d00b      	beq.n	80043ce <HAL_GPIO_Init+0x5a>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d007      	beq.n	80043ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043c2:	2b11      	cmp	r3, #17
 80043c4:	d003      	beq.n	80043ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b12      	cmp	r3, #18
 80043cc:	d130      	bne.n	8004430 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	2203      	movs	r2, #3
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004404:	2201      	movs	r2, #1
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f003 0201 	and.w	r2, r3, #1
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	2203      	movs	r2, #3
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4313      	orrs	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d003      	beq.n	8004470 <HAL_GPIO_Init+0xfc>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b12      	cmp	r3, #18
 800446e:	d123      	bne.n	80044b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	08da      	lsrs	r2, r3, #3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3208      	adds	r2, #8
 8004478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	220f      	movs	r2, #15
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	08da      	lsrs	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3208      	adds	r2, #8
 80044b2:	69b9      	ldr	r1, [r7, #24]
 80044b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	2203      	movs	r2, #3
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 0203 	and.w	r2, r3, #3
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80b4 	beq.w	8004662 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	4b5f      	ldr	r3, [pc, #380]	; (800467c <HAL_GPIO_Init+0x308>)
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	4a5e      	ldr	r2, [pc, #376]	; (800467c <HAL_GPIO_Init+0x308>)
 8004504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004508:	6453      	str	r3, [r2, #68]	; 0x44
 800450a:	4b5c      	ldr	r3, [pc, #368]	; (800467c <HAL_GPIO_Init+0x308>)
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004516:	4a5a      	ldr	r2, [pc, #360]	; (8004680 <HAL_GPIO_Init+0x30c>)
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	3302      	adds	r3, #2
 800451e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	220f      	movs	r2, #15
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a51      	ldr	r2, [pc, #324]	; (8004684 <HAL_GPIO_Init+0x310>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d02b      	beq.n	800459a <HAL_GPIO_Init+0x226>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a50      	ldr	r2, [pc, #320]	; (8004688 <HAL_GPIO_Init+0x314>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d025      	beq.n	8004596 <HAL_GPIO_Init+0x222>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a4f      	ldr	r2, [pc, #316]	; (800468c <HAL_GPIO_Init+0x318>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01f      	beq.n	8004592 <HAL_GPIO_Init+0x21e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a4e      	ldr	r2, [pc, #312]	; (8004690 <HAL_GPIO_Init+0x31c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d019      	beq.n	800458e <HAL_GPIO_Init+0x21a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a4d      	ldr	r2, [pc, #308]	; (8004694 <HAL_GPIO_Init+0x320>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_GPIO_Init+0x216>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a4c      	ldr	r2, [pc, #304]	; (8004698 <HAL_GPIO_Init+0x324>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00d      	beq.n	8004586 <HAL_GPIO_Init+0x212>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a4b      	ldr	r2, [pc, #300]	; (800469c <HAL_GPIO_Init+0x328>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <HAL_GPIO_Init+0x20e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a4a      	ldr	r2, [pc, #296]	; (80046a0 <HAL_GPIO_Init+0x32c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d101      	bne.n	800457e <HAL_GPIO_Init+0x20a>
 800457a:	2307      	movs	r3, #7
 800457c:	e00e      	b.n	800459c <HAL_GPIO_Init+0x228>
 800457e:	2308      	movs	r3, #8
 8004580:	e00c      	b.n	800459c <HAL_GPIO_Init+0x228>
 8004582:	2306      	movs	r3, #6
 8004584:	e00a      	b.n	800459c <HAL_GPIO_Init+0x228>
 8004586:	2305      	movs	r3, #5
 8004588:	e008      	b.n	800459c <HAL_GPIO_Init+0x228>
 800458a:	2304      	movs	r3, #4
 800458c:	e006      	b.n	800459c <HAL_GPIO_Init+0x228>
 800458e:	2303      	movs	r3, #3
 8004590:	e004      	b.n	800459c <HAL_GPIO_Init+0x228>
 8004592:	2302      	movs	r3, #2
 8004594:	e002      	b.n	800459c <HAL_GPIO_Init+0x228>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_GPIO_Init+0x228>
 800459a:	2300      	movs	r3, #0
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	f002 0203 	and.w	r2, r2, #3
 80045a2:	0092      	lsls	r2, r2, #2
 80045a4:	4093      	lsls	r3, r2
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045ac:	4934      	ldr	r1, [pc, #208]	; (8004680 <HAL_GPIO_Init+0x30c>)
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	089b      	lsrs	r3, r3, #2
 80045b2:	3302      	adds	r3, #2
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045ba:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <HAL_GPIO_Init+0x330>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045de:	4a31      	ldr	r2, [pc, #196]	; (80046a4 <HAL_GPIO_Init+0x330>)
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045e4:	4b2f      	ldr	r3, [pc, #188]	; (80046a4 <HAL_GPIO_Init+0x330>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004608:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <HAL_GPIO_Init+0x330>)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800460e:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <HAL_GPIO_Init+0x330>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	43db      	mvns	r3, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4013      	ands	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004632:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <HAL_GPIO_Init+0x330>)
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004638:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <HAL_GPIO_Init+0x330>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	43db      	mvns	r3, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4013      	ands	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800465c:	4a11      	ldr	r2, [pc, #68]	; (80046a4 <HAL_GPIO_Init+0x330>)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3301      	adds	r3, #1
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b0f      	cmp	r3, #15
 800466c:	f67f ae90 	bls.w	8004390 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004670:	bf00      	nop
 8004672:	3724      	adds	r7, #36	; 0x24
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	40023800 	.word	0x40023800
 8004680:	40013800 	.word	0x40013800
 8004684:	40020000 	.word	0x40020000
 8004688:	40020400 	.word	0x40020400
 800468c:	40020800 	.word	0x40020800
 8004690:	40020c00 	.word	0x40020c00
 8004694:	40021000 	.word	0x40021000
 8004698:	40021400 	.word	0x40021400
 800469c:	40021800 	.word	0x40021800
 80046a0:	40021c00 	.word	0x40021c00
 80046a4:	40013c00 	.word	0x40013c00

080046a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	887b      	ldrh	r3, [r7, #2]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e001      	b.n	80046ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
 80046e4:	4613      	mov	r3, r2
 80046e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e8:	787b      	ldrb	r3, [r7, #1]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046ee:	887a      	ldrh	r2, [r7, #2]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046f4:	e003      	b.n	80046fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046f6:	887b      	ldrh	r3, [r7, #2]
 80046f8:	041a      	lsls	r2, r3, #16
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	619a      	str	r2, [r3, #24]
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	460b      	mov	r3, r1
 8004714:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	887b      	ldrh	r3, [r7, #2]
 800471c:	401a      	ands	r2, r3
 800471e:	887b      	ldrh	r3, [r7, #2]
 8004720:	429a      	cmp	r2, r3
 8004722:	d104      	bne.n	800472e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004724:	887b      	ldrh	r3, [r7, #2]
 8004726:	041a      	lsls	r2, r3, #16
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800472c:	e002      	b.n	8004734 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800472e:	887a      	ldrh	r2, [r7, #2]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	619a      	str	r2, [r3, #24]
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800474a:	4b08      	ldr	r3, [pc, #32]	; (800476c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d006      	beq.n	8004764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004756:	4a05      	ldr	r2, [pc, #20]	; (800476c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f806 	bl	8004770 <HAL_GPIO_EXTI_Callback>
  }
}
 8004764:	bf00      	nop
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40013c00 	.word	0x40013c00

08004770 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e11f      	b.n	80049da <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fd f8c8 	bl	8001944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2224      	movs	r2, #36	; 0x24
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047ec:	f001 f82e 	bl	800584c <HAL_RCC_GetPCLK1Freq>
 80047f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4a7b      	ldr	r2, [pc, #492]	; (80049e4 <HAL_I2C_Init+0x25c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d807      	bhi.n	800480c <HAL_I2C_Init+0x84>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a7a      	ldr	r2, [pc, #488]	; (80049e8 <HAL_I2C_Init+0x260>)
 8004800:	4293      	cmp	r3, r2
 8004802:	bf94      	ite	ls
 8004804:	2301      	movls	r3, #1
 8004806:	2300      	movhi	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e006      	b.n	800481a <HAL_I2C_Init+0x92>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4a77      	ldr	r2, [pc, #476]	; (80049ec <HAL_I2C_Init+0x264>)
 8004810:	4293      	cmp	r3, r2
 8004812:	bf94      	ite	ls
 8004814:	2301      	movls	r3, #1
 8004816:	2300      	movhi	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e0db      	b.n	80049da <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4a72      	ldr	r2, [pc, #456]	; (80049f0 <HAL_I2C_Init+0x268>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	0c9b      	lsrs	r3, r3, #18
 800482c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a64      	ldr	r2, [pc, #400]	; (80049e4 <HAL_I2C_Init+0x25c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d802      	bhi.n	800485c <HAL_I2C_Init+0xd4>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	3301      	adds	r3, #1
 800485a:	e009      	b.n	8004870 <HAL_I2C_Init+0xe8>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	4a63      	ldr	r2, [pc, #396]	; (80049f4 <HAL_I2C_Init+0x26c>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	099b      	lsrs	r3, r3, #6
 800486e:	3301      	adds	r3, #1
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	430b      	orrs	r3, r1
 8004876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004882:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4956      	ldr	r1, [pc, #344]	; (80049e4 <HAL_I2C_Init+0x25c>)
 800488c:	428b      	cmp	r3, r1
 800488e:	d80d      	bhi.n	80048ac <HAL_I2C_Init+0x124>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1e59      	subs	r1, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	fbb1 f3f3 	udiv	r3, r1, r3
 800489e:	3301      	adds	r3, #1
 80048a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	bf38      	it	cc
 80048a8:	2304      	movcc	r3, #4
 80048aa:	e04f      	b.n	800494c <HAL_I2C_Init+0x1c4>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d111      	bne.n	80048d8 <HAL_I2C_Init+0x150>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1e58      	subs	r0, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6859      	ldr	r1, [r3, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	440b      	add	r3, r1
 80048c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048c6:	3301      	adds	r3, #1
 80048c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	bf0c      	ite	eq
 80048d0:	2301      	moveq	r3, #1
 80048d2:	2300      	movne	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	e012      	b.n	80048fe <HAL_I2C_Init+0x176>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1e58      	subs	r0, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6859      	ldr	r1, [r3, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	0099      	lsls	r1, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ee:	3301      	adds	r3, #1
 80048f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_I2C_Init+0x17e>
 8004902:	2301      	movs	r3, #1
 8004904:	e022      	b.n	800494c <HAL_I2C_Init+0x1c4>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10e      	bne.n	800492c <HAL_I2C_Init+0x1a4>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1e58      	subs	r0, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6859      	ldr	r1, [r3, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	440b      	add	r3, r1
 800491c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004920:	3301      	adds	r3, #1
 8004922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492a:	e00f      	b.n	800494c <HAL_I2C_Init+0x1c4>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1e58      	subs	r0, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6859      	ldr	r1, [r3, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	0099      	lsls	r1, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004942:	3301      	adds	r3, #1
 8004944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	6809      	ldr	r1, [r1, #0]
 8004950:	4313      	orrs	r3, r2
 8004952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800497a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6911      	ldr	r1, [r2, #16]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68d2      	ldr	r2, [r2, #12]
 8004986:	4311      	orrs	r1, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	430b      	orrs	r3, r1
 800498e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	000186a0 	.word	0x000186a0
 80049e8:	001e847f 	.word	0x001e847f
 80049ec:	003d08ff 	.word	0x003d08ff
 80049f0:	431bde83 	.word	0x431bde83
 80049f4:	10624dd3 	.word	0x10624dd3

080049f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	4608      	mov	r0, r1
 8004a02:	4611      	mov	r1, r2
 8004a04:	461a      	mov	r2, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	817b      	strh	r3, [r7, #10]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	813b      	strh	r3, [r7, #8]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a12:	f7fe fc0d 	bl	8003230 <HAL_GetTick>
 8004a16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	f040 80d9 	bne.w	8004bd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	2319      	movs	r3, #25
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	496d      	ldr	r1, [pc, #436]	; (8004be4 <HAL_I2C_Mem_Write+0x1ec>)
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f96f 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e0cc      	b.n	8004bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_I2C_Mem_Write+0x56>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e0c5      	b.n	8004bda <HAL_I2C_Mem_Write+0x1e2>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d007      	beq.n	8004a74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2221      	movs	r2, #33	; 0x21
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2240      	movs	r2, #64	; 0x40
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a3a      	ldr	r2, [r7, #32]
 8004a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a4d      	ldr	r2, [pc, #308]	; (8004be8 <HAL_I2C_Mem_Write+0x1f0>)
 8004ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ab6:	88f8      	ldrh	r0, [r7, #6]
 8004ab8:	893a      	ldrh	r2, [r7, #8]
 8004aba:	8979      	ldrh	r1, [r7, #10]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f890 	bl	8004bec <I2C_RequestMemoryWrite>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d052      	beq.n	8004b78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e081      	b.n	8004bda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f9f0 	bl	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00d      	beq.n	8004b02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d107      	bne.n	8004afe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e06b      	b.n	8004bda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	781a      	ldrb	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d11b      	bne.n	8004b78 <HAL_I2C_Mem_Write+0x180>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d017      	beq.n	8004b78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	781a      	ldrb	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1aa      	bne.n	8004ad6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f9dc 	bl	8004f42 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d107      	bne.n	8004ba8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e016      	b.n	8004bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e000      	b.n	8004bda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004bd8:	2302      	movs	r3, #2
  }
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	00100002 	.word	0x00100002
 8004be8:	ffff0000 	.word	0xffff0000

08004bec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	817b      	strh	r3, [r7, #10]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	813b      	strh	r3, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f876 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00c      	beq.n	8004c48 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e05f      	b.n	8004d08 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c48:	897b      	ldrh	r3, [r7, #10]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	6a3a      	ldr	r2, [r7, #32]
 8004c5c:	492c      	ldr	r1, [pc, #176]	; (8004d10 <I2C_RequestMemoryWrite+0x124>)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f8af 	bl	8004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e04c      	b.n	8004d08 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	6a39      	ldr	r1, [r7, #32]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f919 	bl	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00d      	beq.n	8004cb0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d107      	bne.n	8004cac <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004caa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e02b      	b.n	8004d08 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb6:	893b      	ldrh	r3, [r7, #8]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	611a      	str	r2, [r3, #16]
 8004cc0:	e021      	b.n	8004d06 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cc2:	893b      	ldrh	r3, [r7, #8]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd2:	6a39      	ldr	r1, [r7, #32]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f8f3 	bl	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00d      	beq.n	8004cfc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d107      	bne.n	8004cf8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e005      	b.n	8004d08 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cfc:	893b      	ldrh	r3, [r7, #8]
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	00010002 	.word	0x00010002

08004d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d24:	e025      	b.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d021      	beq.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2e:	f7fe fa7f 	bl	8003230 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d116      	bne.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f043 0220 	orr.w	r2, r3, #32
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e023      	b.n	8004dba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10d      	bne.n	8004d98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	43da      	mvns	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4013      	ands	r3, r2
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf0c      	ite	eq
 8004d8e:	2301      	moveq	r3, #1
 8004d90:	2300      	movne	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	e00c      	b.n	8004db2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	43da      	mvns	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d0b6      	beq.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dd0:	e051      	b.n	8004e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de0:	d123      	bne.n	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dfa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f043 0204 	orr.w	r2, r3, #4
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e046      	b.n	8004eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d021      	beq.n	8004e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e32:	f7fe f9fd 	bl	8003230 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d116      	bne.n	8004e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f043 0220 	orr.w	r2, r3, #32
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e020      	b.n	8004eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10c      	bne.n	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	43da      	mvns	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf14      	ite	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	2300      	moveq	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	e00b      	b.n	8004eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	43da      	mvns	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf14      	ite	ne
 8004eac:	2301      	movne	r3, #1
 8004eae:	2300      	moveq	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d18d      	bne.n	8004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ecc:	e02d      	b.n	8004f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f878 	bl	8004fc4 <I2C_IsAcknowledgeFailed>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e02d      	b.n	8004f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d021      	beq.n	8004f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee6:	f7fe f9a3 	bl	8003230 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d302      	bcc.n	8004efc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d116      	bne.n	8004f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e007      	b.n	8004f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b80      	cmp	r3, #128	; 0x80
 8004f36:	d1ca      	bne.n	8004ece <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f4e:	e02d      	b.n	8004fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f837 	bl	8004fc4 <I2C_IsAcknowledgeFailed>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e02d      	b.n	8004fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f66:	d021      	beq.n	8004fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f68:	f7fe f962 	bl	8003230 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d302      	bcc.n	8004f7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d116      	bne.n	8004fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e007      	b.n	8004fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d1ca      	bne.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	d11b      	bne.n	8005014 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fe4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	f043 0204 	orr.w	r2, r3, #4
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e25b      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d075      	beq.n	800512e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005042:	4ba3      	ldr	r3, [pc, #652]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b04      	cmp	r3, #4
 800504c:	d00c      	beq.n	8005068 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800504e:	4ba0      	ldr	r3, [pc, #640]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005056:	2b08      	cmp	r3, #8
 8005058:	d112      	bne.n	8005080 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800505a:	4b9d      	ldr	r3, [pc, #628]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005066:	d10b      	bne.n	8005080 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005068:	4b99      	ldr	r3, [pc, #612]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d05b      	beq.n	800512c <HAL_RCC_OscConfig+0x108>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d157      	bne.n	800512c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e236      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005088:	d106      	bne.n	8005098 <HAL_RCC_OscConfig+0x74>
 800508a:	4b91      	ldr	r3, [pc, #580]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a90      	ldr	r2, [pc, #576]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	e01d      	b.n	80050d4 <HAL_RCC_OscConfig+0xb0>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050a0:	d10c      	bne.n	80050bc <HAL_RCC_OscConfig+0x98>
 80050a2:	4b8b      	ldr	r3, [pc, #556]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a8a      	ldr	r2, [pc, #552]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	4b88      	ldr	r3, [pc, #544]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a87      	ldr	r2, [pc, #540]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80050b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	e00b      	b.n	80050d4 <HAL_RCC_OscConfig+0xb0>
 80050bc:	4b84      	ldr	r3, [pc, #528]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a83      	ldr	r2, [pc, #524]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80050c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	4b81      	ldr	r3, [pc, #516]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a80      	ldr	r2, [pc, #512]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80050ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d013      	beq.n	8005104 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050dc:	f7fe f8a8 	bl	8003230 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e4:	f7fe f8a4 	bl	8003230 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b64      	cmp	r3, #100	; 0x64
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e1fb      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f6:	4b76      	ldr	r3, [pc, #472]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0f0      	beq.n	80050e4 <HAL_RCC_OscConfig+0xc0>
 8005102:	e014      	b.n	800512e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005104:	f7fe f894 	bl	8003230 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800510c:	f7fe f890 	bl	8003230 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	; 0x64
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e1e7      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800511e:	4b6c      	ldr	r3, [pc, #432]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0xe8>
 800512a:	e000      	b.n	800512e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800512c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d063      	beq.n	8005202 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800513a:	4b65      	ldr	r3, [pc, #404]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005146:	4b62      	ldr	r3, [pc, #392]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800514e:	2b08      	cmp	r3, #8
 8005150:	d11c      	bne.n	800518c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005152:	4b5f      	ldr	r3, [pc, #380]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d116      	bne.n	800518c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515e:	4b5c      	ldr	r3, [pc, #368]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_RCC_OscConfig+0x152>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d001      	beq.n	8005176 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e1bb      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005176:	4b56      	ldr	r3, [pc, #344]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4952      	ldr	r1, [pc, #328]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518a:	e03a      	b.n	8005202 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d020      	beq.n	80051d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005194:	4b4f      	ldr	r3, [pc, #316]	; (80052d4 <HAL_RCC_OscConfig+0x2b0>)
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519a:	f7fe f849 	bl	8003230 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a2:	f7fe f845 	bl	8003230 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e19c      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b4:	4b46      	ldr	r3, [pc, #280]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f0      	beq.n	80051a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c0:	4b43      	ldr	r3, [pc, #268]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4940      	ldr	r1, [pc, #256]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]
 80051d4:	e015      	b.n	8005202 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051d6:	4b3f      	ldr	r3, [pc, #252]	; (80052d4 <HAL_RCC_OscConfig+0x2b0>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fe f828 	bl	8003230 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051e4:	f7fe f824 	bl	8003230 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e17b      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f6:	4b36      	ldr	r3, [pc, #216]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d030      	beq.n	8005270 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005216:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <HAL_RCC_OscConfig+0x2b4>)
 8005218:	2201      	movs	r2, #1
 800521a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521c:	f7fe f808 	bl	8003230 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005224:	f7fe f804 	bl	8003230 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e15b      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005236:	4b26      	ldr	r3, [pc, #152]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0x200>
 8005242:	e015      	b.n	8005270 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005244:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <HAL_RCC_OscConfig+0x2b4>)
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800524a:	f7fd fff1 	bl	8003230 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005252:	f7fd ffed 	bl	8003230 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e144      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005264:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f0      	bne.n	8005252 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80a0 	beq.w	80053be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005282:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	4a0e      	ldr	r2, [pc, #56]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529c:	6413      	str	r3, [r2, #64]	; 0x40
 800529e:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <HAL_RCC_OscConfig+0x2ac>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ae:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <HAL_RCC_OscConfig+0x2b8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d121      	bne.n	80052fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ba:	4b08      	ldr	r3, [pc, #32]	; (80052dc <HAL_RCC_OscConfig+0x2b8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a07      	ldr	r2, [pc, #28]	; (80052dc <HAL_RCC_OscConfig+0x2b8>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c6:	f7fd ffb3 	bl	8003230 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052cc:	e011      	b.n	80052f2 <HAL_RCC_OscConfig+0x2ce>
 80052ce:	bf00      	nop
 80052d0:	40023800 	.word	0x40023800
 80052d4:	42470000 	.word	0x42470000
 80052d8:	42470e80 	.word	0x42470e80
 80052dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e0:	f7fd ffa6 	bl	8003230 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e0fd      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f2:	4b81      	ldr	r3, [pc, #516]	; (80054f8 <HAL_RCC_OscConfig+0x4d4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d106      	bne.n	8005314 <HAL_RCC_OscConfig+0x2f0>
 8005306:	4b7d      	ldr	r3, [pc, #500]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 8005308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530a:	4a7c      	ldr	r2, [pc, #496]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	6713      	str	r3, [r2, #112]	; 0x70
 8005312:	e01c      	b.n	800534e <HAL_RCC_OscConfig+0x32a>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2b05      	cmp	r3, #5
 800531a:	d10c      	bne.n	8005336 <HAL_RCC_OscConfig+0x312>
 800531c:	4b77      	ldr	r3, [pc, #476]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	4a76      	ldr	r2, [pc, #472]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 8005322:	f043 0304 	orr.w	r3, r3, #4
 8005326:	6713      	str	r3, [r2, #112]	; 0x70
 8005328:	4b74      	ldr	r3, [pc, #464]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	4a73      	ldr	r2, [pc, #460]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	6713      	str	r3, [r2, #112]	; 0x70
 8005334:	e00b      	b.n	800534e <HAL_RCC_OscConfig+0x32a>
 8005336:	4b71      	ldr	r3, [pc, #452]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	4a70      	ldr	r2, [pc, #448]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 800533c:	f023 0301 	bic.w	r3, r3, #1
 8005340:	6713      	str	r3, [r2, #112]	; 0x70
 8005342:	4b6e      	ldr	r3, [pc, #440]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	4a6d      	ldr	r2, [pc, #436]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 8005348:	f023 0304 	bic.w	r3, r3, #4
 800534c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d015      	beq.n	8005382 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005356:	f7fd ff6b 	bl	8003230 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535c:	e00a      	b.n	8005374 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800535e:	f7fd ff67 	bl	8003230 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	f241 3288 	movw	r2, #5000	; 0x1388
 800536c:	4293      	cmp	r3, r2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e0bc      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005374:	4b61      	ldr	r3, [pc, #388]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0ee      	beq.n	800535e <HAL_RCC_OscConfig+0x33a>
 8005380:	e014      	b.n	80053ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005382:	f7fd ff55 	bl	8003230 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005388:	e00a      	b.n	80053a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800538a:	f7fd ff51 	bl	8003230 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	f241 3288 	movw	r2, #5000	; 0x1388
 8005398:	4293      	cmp	r3, r2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e0a6      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a0:	4b56      	ldr	r3, [pc, #344]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1ee      	bne.n	800538a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d105      	bne.n	80053be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b2:	4b52      	ldr	r3, [pc, #328]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	4a51      	ldr	r2, [pc, #324]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 80053b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8092 	beq.w	80054ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053c8:	4b4c      	ldr	r3, [pc, #304]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 030c 	and.w	r3, r3, #12
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d05c      	beq.n	800548e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d141      	bne.n	8005460 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053dc:	4b48      	ldr	r3, [pc, #288]	; (8005500 <HAL_RCC_OscConfig+0x4dc>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e2:	f7fd ff25 	bl	8003230 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ea:	f7fd ff21 	bl	8003230 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e078      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fc:	4b3f      	ldr	r3, [pc, #252]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1f0      	bne.n	80053ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	019b      	lsls	r3, r3, #6
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	3b01      	subs	r3, #1
 8005422:	041b      	lsls	r3, r3, #16
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	061b      	lsls	r3, r3, #24
 800542c:	4933      	ldr	r1, [pc, #204]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 800542e:	4313      	orrs	r3, r2
 8005430:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005432:	4b33      	ldr	r3, [pc, #204]	; (8005500 <HAL_RCC_OscConfig+0x4dc>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fd fefa 	bl	8003230 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005440:	f7fd fef6 	bl	8003230 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e04d      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005452:	4b2a      	ldr	r3, [pc, #168]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0x41c>
 800545e:	e045      	b.n	80054ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005460:	4b27      	ldr	r3, [pc, #156]	; (8005500 <HAL_RCC_OscConfig+0x4dc>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005466:	f7fd fee3 	bl	8003230 <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800546e:	f7fd fedf 	bl	8003230 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e036      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005480:	4b1e      	ldr	r3, [pc, #120]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f0      	bne.n	800546e <HAL_RCC_OscConfig+0x44a>
 800548c:	e02e      	b.n	80054ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d101      	bne.n	800549a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e029      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800549a:	4b18      	ldr	r3, [pc, #96]	; (80054fc <HAL_RCC_OscConfig+0x4d8>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d11c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d115      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054c2:	4013      	ands	r3, r2
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d10d      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d106      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40007000 	.word	0x40007000
 80054fc:	40023800 	.word	0x40023800
 8005500:	42470060 	.word	0x42470060

08005504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0cc      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005518:	4b68      	ldr	r3, [pc, #416]	; (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d90c      	bls.n	8005540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b65      	ldr	r3, [pc, #404]	; (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800552e:	4b63      	ldr	r3, [pc, #396]	; (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d001      	beq.n	8005540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0b8      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d020      	beq.n	800558e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005558:	4b59      	ldr	r3, [pc, #356]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a58      	ldr	r2, [pc, #352]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005570:	4b53      	ldr	r3, [pc, #332]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4a52      	ldr	r2, [pc, #328]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800557a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557c:	4b50      	ldr	r3, [pc, #320]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	494d      	ldr	r1, [pc, #308]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d044      	beq.n	8005624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d107      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a2:	4b47      	ldr	r3, [pc, #284]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d119      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e07f      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d003      	beq.n	80055c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d107      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c2:	4b3f      	ldr	r3, [pc, #252]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e06f      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d2:	4b3b      	ldr	r3, [pc, #236]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e067      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055e2:	4b37      	ldr	r3, [pc, #220]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 0203 	bic.w	r2, r3, #3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4934      	ldr	r1, [pc, #208]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055f4:	f7fd fe1c 	bl	8003230 <HAL_GetTick>
 80055f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fa:	e00a      	b.n	8005612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055fc:	f7fd fe18 	bl	8003230 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	f241 3288 	movw	r2, #5000	; 0x1388
 800560a:	4293      	cmp	r3, r2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e04f      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005612:	4b2b      	ldr	r3, [pc, #172]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 020c 	and.w	r2, r3, #12
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	429a      	cmp	r2, r3
 8005622:	d1eb      	bne.n	80055fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005624:	4b25      	ldr	r3, [pc, #148]	; (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d20c      	bcs.n	800564c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005632:	4b22      	ldr	r3, [pc, #136]	; (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800563a:	4b20      	ldr	r3, [pc, #128]	; (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d001      	beq.n	800564c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e032      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005658:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4916      	ldr	r1, [pc, #88]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	4313      	orrs	r3, r2
 8005668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005676:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	490e      	ldr	r1, [pc, #56]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800568a:	f000 f821 	bl	80056d0 <HAL_RCC_GetSysClockFreq>
 800568e:	4601      	mov	r1, r0
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	4a0a      	ldr	r2, [pc, #40]	; (80056c4 <HAL_RCC_ClockConfig+0x1c0>)
 800569c:	5cd3      	ldrb	r3, [r2, r3]
 800569e:	fa21 f303 	lsr.w	r3, r1, r3
 80056a2:	4a09      	ldr	r2, [pc, #36]	; (80056c8 <HAL_RCC_ClockConfig+0x1c4>)
 80056a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056a6:	4b09      	ldr	r3, [pc, #36]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fd fd7c 	bl	80031a8 <HAL_InitTick>

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40023c00 	.word	0x40023c00
 80056c0:	40023800 	.word	0x40023800
 80056c4:	08009abc 	.word	0x08009abc
 80056c8:	20000000 	.word	0x20000000
 80056cc:	20000020 	.word	0x20000020

080056d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	607b      	str	r3, [r7, #4]
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	2300      	movs	r3, #0
 80056e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e6:	4b50      	ldr	r3, [pc, #320]	; (8005828 <HAL_RCC_GetSysClockFreq+0x158>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 030c 	and.w	r3, r3, #12
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d007      	beq.n	8005702 <HAL_RCC_GetSysClockFreq+0x32>
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d008      	beq.n	8005708 <HAL_RCC_GetSysClockFreq+0x38>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f040 808d 	bne.w	8005816 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056fc:	4b4b      	ldr	r3, [pc, #300]	; (800582c <HAL_RCC_GetSysClockFreq+0x15c>)
 80056fe:	60bb      	str	r3, [r7, #8]
       break;
 8005700:	e08c      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005702:	4b4b      	ldr	r3, [pc, #300]	; (8005830 <HAL_RCC_GetSysClockFreq+0x160>)
 8005704:	60bb      	str	r3, [r7, #8]
      break;
 8005706:	e089      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005708:	4b47      	ldr	r3, [pc, #284]	; (8005828 <HAL_RCC_GetSysClockFreq+0x158>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005710:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005712:	4b45      	ldr	r3, [pc, #276]	; (8005828 <HAL_RCC_GetSysClockFreq+0x158>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d023      	beq.n	8005766 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800571e:	4b42      	ldr	r3, [pc, #264]	; (8005828 <HAL_RCC_GetSysClockFreq+0x158>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	099b      	lsrs	r3, r3, #6
 8005724:	f04f 0400 	mov.w	r4, #0
 8005728:	f240 11ff 	movw	r1, #511	; 0x1ff
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	ea03 0501 	and.w	r5, r3, r1
 8005734:	ea04 0602 	and.w	r6, r4, r2
 8005738:	4a3d      	ldr	r2, [pc, #244]	; (8005830 <HAL_RCC_GetSysClockFreq+0x160>)
 800573a:	fb02 f106 	mul.w	r1, r2, r6
 800573e:	2200      	movs	r2, #0
 8005740:	fb02 f205 	mul.w	r2, r2, r5
 8005744:	440a      	add	r2, r1
 8005746:	493a      	ldr	r1, [pc, #232]	; (8005830 <HAL_RCC_GetSysClockFreq+0x160>)
 8005748:	fba5 0101 	umull	r0, r1, r5, r1
 800574c:	1853      	adds	r3, r2, r1
 800574e:	4619      	mov	r1, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f04f 0400 	mov.w	r4, #0
 8005756:	461a      	mov	r2, r3
 8005758:	4623      	mov	r3, r4
 800575a:	f7fb fa25 	bl	8000ba8 <__aeabi_uldivmod>
 800575e:	4603      	mov	r3, r0
 8005760:	460c      	mov	r4, r1
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e049      	b.n	80057fa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005766:	4b30      	ldr	r3, [pc, #192]	; (8005828 <HAL_RCC_GetSysClockFreq+0x158>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	f04f 0400 	mov.w	r4, #0
 8005770:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	ea03 0501 	and.w	r5, r3, r1
 800577c:	ea04 0602 	and.w	r6, r4, r2
 8005780:	4629      	mov	r1, r5
 8005782:	4632      	mov	r2, r6
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	f04f 0400 	mov.w	r4, #0
 800578c:	0154      	lsls	r4, r2, #5
 800578e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005792:	014b      	lsls	r3, r1, #5
 8005794:	4619      	mov	r1, r3
 8005796:	4622      	mov	r2, r4
 8005798:	1b49      	subs	r1, r1, r5
 800579a:	eb62 0206 	sbc.w	r2, r2, r6
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	f04f 0400 	mov.w	r4, #0
 80057a6:	0194      	lsls	r4, r2, #6
 80057a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80057ac:	018b      	lsls	r3, r1, #6
 80057ae:	1a5b      	subs	r3, r3, r1
 80057b0:	eb64 0402 	sbc.w	r4, r4, r2
 80057b4:	f04f 0100 	mov.w	r1, #0
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	00e2      	lsls	r2, r4, #3
 80057be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80057c2:	00d9      	lsls	r1, r3, #3
 80057c4:	460b      	mov	r3, r1
 80057c6:	4614      	mov	r4, r2
 80057c8:	195b      	adds	r3, r3, r5
 80057ca:	eb44 0406 	adc.w	r4, r4, r6
 80057ce:	f04f 0100 	mov.w	r1, #0
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	02a2      	lsls	r2, r4, #10
 80057d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80057dc:	0299      	lsls	r1, r3, #10
 80057de:	460b      	mov	r3, r1
 80057e0:	4614      	mov	r4, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	4621      	mov	r1, r4
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f04f 0400 	mov.w	r4, #0
 80057ec:	461a      	mov	r2, r3
 80057ee:	4623      	mov	r3, r4
 80057f0:	f7fb f9da 	bl	8000ba8 <__aeabi_uldivmod>
 80057f4:	4603      	mov	r3, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057fa:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <HAL_RCC_GetSysClockFreq+0x158>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	0c1b      	lsrs	r3, r3, #16
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	3301      	adds	r3, #1
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005812:	60bb      	str	r3, [r7, #8]
      break;
 8005814:	e002      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005816:	4b05      	ldr	r3, [pc, #20]	; (800582c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005818:	60bb      	str	r3, [r7, #8]
      break;
 800581a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800581c:	68bb      	ldr	r3, [r7, #8]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005826:	bf00      	nop
 8005828:	40023800 	.word	0x40023800
 800582c:	00f42400 	.word	0x00f42400
 8005830:	017d7840 	.word	0x017d7840

08005834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005838:	4b03      	ldr	r3, [pc, #12]	; (8005848 <HAL_RCC_GetHCLKFreq+0x14>)
 800583a:	681b      	ldr	r3, [r3, #0]
}
 800583c:	4618      	mov	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	20000000 	.word	0x20000000

0800584c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005850:	f7ff fff0 	bl	8005834 <HAL_RCC_GetHCLKFreq>
 8005854:	4601      	mov	r1, r0
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	0a9b      	lsrs	r3, r3, #10
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	4a03      	ldr	r2, [pc, #12]	; (8005870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005862:	5cd3      	ldrb	r3, [r2, r3]
 8005864:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005868:	4618      	mov	r0, r3
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40023800 	.word	0x40023800
 8005870:	08009acc 	.word	0x08009acc

08005874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005878:	f7ff ffdc 	bl	8005834 <HAL_RCC_GetHCLKFreq>
 800587c:	4601      	mov	r1, r0
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	0b5b      	lsrs	r3, r3, #13
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	4a03      	ldr	r2, [pc, #12]	; (8005898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800588a:	5cd3      	ldrb	r3, [r2, r3]
 800588c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005890:	4618      	mov	r0, r3
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40023800 	.word	0x40023800
 8005898:	08009acc 	.word	0x08009acc

0800589c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e01d      	b.n	80058ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fc f990 	bl	8001be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f000 fb8c 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0201 	orr.w	r2, r2, #1
 8005908:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b06      	cmp	r3, #6
 800591a:	d007      	beq.n	800592c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0201 	bic.w	r2, r2, #1
 8005950:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6a1a      	ldr	r2, [r3, #32]
 8005958:	f241 1311 	movw	r3, #4369	; 0x1111
 800595c:	4013      	ands	r3, r2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10f      	bne.n	8005982 <HAL_TIM_Base_Stop_IT+0x48>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	f240 4344 	movw	r3, #1092	; 0x444
 800596c:	4013      	ands	r3, r2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d107      	bne.n	8005982 <HAL_TIM_Base_Stop_IT+0x48>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e01d      	b.n	80059de <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fc f82e 	bl	8001a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f000 fb12 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2201      	movs	r2, #1
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fd4c 	bl	8006498 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a15      	ldr	r2, [pc, #84]	; (8005a5c <HAL_TIM_PWM_Start+0x74>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_TIM_PWM_Start+0x2c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a14      	ldr	r2, [pc, #80]	; (8005a60 <HAL_TIM_PWM_Start+0x78>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d101      	bne.n	8005a18 <HAL_TIM_PWM_Start+0x30>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <HAL_TIM_PWM_Start+0x32>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b06      	cmp	r3, #6
 8005a3e:	d007      	beq.n	8005a50 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40010000 	.word	0x40010000
 8005a60:	40010400 	.word	0x40010400

08005a64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e083      	b.n	8005b80 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7fc f811 	bl	8001ab4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2202      	movs	r2, #2
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa8:	f023 0307 	bic.w	r3, r3, #7
 8005aac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4610      	mov	r0, r2
 8005aba:	f000 fa9d 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae6:	f023 0303 	bic.w	r3, r3, #3
 8005aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	4313      	orrs	r3, r2
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b04:	f023 030c 	bic.w	r3, r3, #12
 8005b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	4313      	orrs	r3, r2
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	011a      	lsls	r2, r3, #4
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	031b      	lsls	r3, r3, #12
 8005b34:	4313      	orrs	r3, r2
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	4313      	orrs	r3, r2
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_TIM_Encoder_Start+0x16>
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d008      	beq.n	8005bae <HAL_TIM_Encoder_Start+0x26>
 8005b9c:	e00f      	b.n	8005bbe <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fc76 	bl	8006498 <TIM_CCxChannelCmd>
      break;
 8005bac:	e016      	b.n	8005bdc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	2104      	movs	r1, #4
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fc6e 	bl	8006498 <TIM_CCxChannelCmd>
      break;
 8005bbc:	e00e      	b.n	8005bdc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fc66 	bl	8006498 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	2104      	movs	r1, #4
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fc5f 	bl	8006498 <TIM_CCxChannelCmd>
      break;
 8005bda:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d122      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d11b      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f06f 0202 	mvn.w	r2, #2
 8005c22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f9bf 	bl	8005fbc <HAL_TIM_IC_CaptureCallback>
 8005c3e:	e005      	b.n	8005c4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f9b1 	bl	8005fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f9c2 	bl	8005fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d122      	bne.n	8005ca6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d11b      	bne.n	8005ca6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f06f 0204 	mvn.w	r2, #4
 8005c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f995 	bl	8005fbc <HAL_TIM_IC_CaptureCallback>
 8005c92:	e005      	b.n	8005ca0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f987 	bl	8005fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f998 	bl	8005fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d122      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d11b      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f06f 0208 	mvn.w	r2, #8
 8005cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2204      	movs	r2, #4
 8005cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f96b 	bl	8005fbc <HAL_TIM_IC_CaptureCallback>
 8005ce6:	e005      	b.n	8005cf4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f95d 	bl	8005fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f96e 	bl	8005fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d122      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	d11b      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f06f 0210 	mvn.w	r2, #16
 8005d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2208      	movs	r2, #8
 8005d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f941 	bl	8005fbc <HAL_TIM_IC_CaptureCallback>
 8005d3a:	e005      	b.n	8005d48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f933 	bl	8005fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f944 	bl	8005fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d10e      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d107      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f06f 0201 	mvn.w	r2, #1
 8005d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f90d 	bl	8005f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d84:	2b80      	cmp	r3, #128	; 0x80
 8005d86:	d10e      	bne.n	8005da6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d92:	2b80      	cmp	r3, #128	; 0x80
 8005d94:	d107      	bne.n	8005da6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fc77 	bl	8006694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	d10e      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dbe:	2b40      	cmp	r3, #64	; 0x40
 8005dc0:	d107      	bne.n	8005dd2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f909 	bl	8005fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	d10e      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	d107      	bne.n	8005dfe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f06f 0220 	mvn.w	r2, #32
 8005df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fc41 	bl	8006680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dfe:	bf00      	nop
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e0b4      	b.n	8005f8c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b0c      	cmp	r3, #12
 8005e36:	f200 809f 	bhi.w	8005f78 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005e3a:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e40:	08005e75 	.word	0x08005e75
 8005e44:	08005f79 	.word	0x08005f79
 8005e48:	08005f79 	.word	0x08005f79
 8005e4c:	08005f79 	.word	0x08005f79
 8005e50:	08005eb5 	.word	0x08005eb5
 8005e54:	08005f79 	.word	0x08005f79
 8005e58:	08005f79 	.word	0x08005f79
 8005e5c:	08005f79 	.word	0x08005f79
 8005e60:	08005ef7 	.word	0x08005ef7
 8005e64:	08005f79 	.word	0x08005f79
 8005e68:	08005f79 	.word	0x08005f79
 8005e6c:	08005f79 	.word	0x08005f79
 8005e70:	08005f37 	.word	0x08005f37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f95c 	bl	8006138 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0208 	orr.w	r2, r2, #8
 8005e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0204 	bic.w	r2, r2, #4
 8005e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6999      	ldr	r1, [r3, #24]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	619a      	str	r2, [r3, #24]
      break;
 8005eb2:	e062      	b.n	8005f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 f9ac 	bl	8006218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6999      	ldr	r1, [r3, #24]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	021a      	lsls	r2, r3, #8
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	619a      	str	r2, [r3, #24]
      break;
 8005ef4:	e041      	b.n	8005f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 fa01 	bl	8006304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69da      	ldr	r2, [r3, #28]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0208 	orr.w	r2, r2, #8
 8005f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0204 	bic.w	r2, r2, #4
 8005f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69d9      	ldr	r1, [r3, #28]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	61da      	str	r2, [r3, #28]
      break;
 8005f34:	e021      	b.n	8005f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fa55 	bl	80063ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69da      	ldr	r2, [r3, #28]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69d9      	ldr	r1, [r3, #28]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	021a      	lsls	r2, r3, #8
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	61da      	str	r2, [r3, #28]
      break;
 8005f76:	e000      	b.n	8005f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005f78:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a40      	ldr	r2, [pc, #256]	; (800610c <TIM_Base_SetConfig+0x114>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006016:	d00f      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a3d      	ldr	r2, [pc, #244]	; (8006110 <TIM_Base_SetConfig+0x118>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00b      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a3c      	ldr	r2, [pc, #240]	; (8006114 <TIM_Base_SetConfig+0x11c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a3b      	ldr	r2, [pc, #236]	; (8006118 <TIM_Base_SetConfig+0x120>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_Base_SetConfig+0x40>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a3a      	ldr	r2, [pc, #232]	; (800611c <TIM_Base_SetConfig+0x124>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d108      	bne.n	800604a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2f      	ldr	r2, [pc, #188]	; (800610c <TIM_Base_SetConfig+0x114>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02b      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006058:	d027      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a2c      	ldr	r2, [pc, #176]	; (8006110 <TIM_Base_SetConfig+0x118>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d023      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2b      	ldr	r2, [pc, #172]	; (8006114 <TIM_Base_SetConfig+0x11c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01f      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a2a      	ldr	r2, [pc, #168]	; (8006118 <TIM_Base_SetConfig+0x120>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d01b      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a29      	ldr	r2, [pc, #164]	; (800611c <TIM_Base_SetConfig+0x124>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d017      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a28      	ldr	r2, [pc, #160]	; (8006120 <TIM_Base_SetConfig+0x128>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a27      	ldr	r2, [pc, #156]	; (8006124 <TIM_Base_SetConfig+0x12c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00f      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a26      	ldr	r2, [pc, #152]	; (8006128 <TIM_Base_SetConfig+0x130>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00b      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a25      	ldr	r2, [pc, #148]	; (800612c <TIM_Base_SetConfig+0x134>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d007      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a24      	ldr	r2, [pc, #144]	; (8006130 <TIM_Base_SetConfig+0x138>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d003      	beq.n	80060aa <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a23      	ldr	r2, [pc, #140]	; (8006134 <TIM_Base_SetConfig+0x13c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d108      	bne.n	80060bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a0a      	ldr	r2, [pc, #40]	; (800610c <TIM_Base_SetConfig+0x114>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_Base_SetConfig+0xf8>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a0c      	ldr	r2, [pc, #48]	; (800611c <TIM_Base_SetConfig+0x124>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d103      	bne.n	80060f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	615a      	str	r2, [r3, #20]
}
 80060fe:	bf00      	nop
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40010000 	.word	0x40010000
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40010400 	.word	0x40010400
 8006120:	40014000 	.word	0x40014000
 8006124:	40014400 	.word	0x40014400
 8006128:	40014800 	.word	0x40014800
 800612c:	40001800 	.word	0x40001800
 8006130:	40001c00 	.word	0x40001c00
 8006134:	40002000 	.word	0x40002000

08006138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	f023 0201 	bic.w	r2, r3, #1
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0303 	bic.w	r3, r3, #3
 800616e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f023 0302 	bic.w	r3, r3, #2
 8006180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a20      	ldr	r2, [pc, #128]	; (8006210 <TIM_OC1_SetConfig+0xd8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d003      	beq.n	800619c <TIM_OC1_SetConfig+0x64>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a1f      	ldr	r2, [pc, #124]	; (8006214 <TIM_OC1_SetConfig+0xdc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d10c      	bne.n	80061b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f023 0308 	bic.w	r3, r3, #8
 80061a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f023 0304 	bic.w	r3, r3, #4
 80061b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a15      	ldr	r2, [pc, #84]	; (8006210 <TIM_OC1_SetConfig+0xd8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d003      	beq.n	80061c6 <TIM_OC1_SetConfig+0x8e>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a14      	ldr	r2, [pc, #80]	; (8006214 <TIM_OC1_SetConfig+0xdc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d111      	bne.n	80061ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	621a      	str	r2, [r3, #32]
}
 8006204:	bf00      	nop
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	40010000 	.word	0x40010000
 8006214:	40010400 	.word	0x40010400

08006218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f023 0210 	bic.w	r2, r3, #16
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0320 	bic.w	r3, r3, #32
 8006262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a22      	ldr	r2, [pc, #136]	; (80062fc <TIM_OC2_SetConfig+0xe4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_OC2_SetConfig+0x68>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a21      	ldr	r2, [pc, #132]	; (8006300 <TIM_OC2_SetConfig+0xe8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10d      	bne.n	800629c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800629a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a17      	ldr	r2, [pc, #92]	; (80062fc <TIM_OC2_SetConfig+0xe4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_OC2_SetConfig+0x94>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a16      	ldr	r2, [pc, #88]	; (8006300 <TIM_OC2_SetConfig+0xe8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d113      	bne.n	80062d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40010000 	.word	0x40010000
 8006300:	40010400 	.word	0x40010400

08006304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0303 	bic.w	r3, r3, #3
 800633a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800634c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a21      	ldr	r2, [pc, #132]	; (80063e4 <TIM_OC3_SetConfig+0xe0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d003      	beq.n	800636a <TIM_OC3_SetConfig+0x66>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a20      	ldr	r2, [pc, #128]	; (80063e8 <TIM_OC3_SetConfig+0xe4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d10d      	bne.n	8006386 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a16      	ldr	r2, [pc, #88]	; (80063e4 <TIM_OC3_SetConfig+0xe0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_OC3_SetConfig+0x92>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a15      	ldr	r2, [pc, #84]	; (80063e8 <TIM_OC3_SetConfig+0xe4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d113      	bne.n	80063be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800639c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	bf00      	nop
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	40010000 	.word	0x40010000
 80063e8:	40010400 	.word	0x40010400

080063ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	031b      	lsls	r3, r3, #12
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a12      	ldr	r2, [pc, #72]	; (8006490 <TIM_OC4_SetConfig+0xa4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <TIM_OC4_SetConfig+0x68>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a11      	ldr	r2, [pc, #68]	; (8006494 <TIM_OC4_SetConfig+0xa8>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d109      	bne.n	8006468 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800645a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	019b      	lsls	r3, r3, #6
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	40010000 	.word	0x40010000
 8006494:	40010400 	.word	0x40010400

08006498 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	2201      	movs	r2, #1
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a1a      	ldr	r2, [r3, #32]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	43db      	mvns	r3, r3
 80064ba:	401a      	ands	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a1a      	ldr	r2, [r3, #32]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	fa01 f303 	lsl.w	r3, r1, r3
 80064d0:	431a      	orrs	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	621a      	str	r2, [r3, #32]
}
 80064d6:	bf00      	nop
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
	...

080064e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e05a      	b.n	80065b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d022      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006548:	d01d      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1d      	ldr	r2, [pc, #116]	; (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d018      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1b      	ldr	r2, [pc, #108]	; (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1a      	ldr	r2, [pc, #104]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00e      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a18      	ldr	r2, [pc, #96]	; (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a17      	ldr	r2, [pc, #92]	; (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a15      	ldr	r2, [pc, #84]	; (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d10c      	bne.n	80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800658c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	4313      	orrs	r3, r2
 8006596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40010000 	.word	0x40010000
 80065c4:	40000400 	.word	0x40000400
 80065c8:	40000800 	.word	0x40000800
 80065cc:	40000c00 	.word	0x40000c00
 80065d0:	40010400 	.word	0x40010400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40001800 	.word	0x40001800

080065dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e03d      	b.n	8006674 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e03f      	b.n	800673a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fb fb3e 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2224      	movs	r2, #36	; 0x24
 80066d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f90b 	bl	8006908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691a      	ldr	r2, [r3, #16]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695a      	ldr	r2, [r3, #20]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b088      	sub	sp, #32
 8006746:	af02      	add	r7, sp, #8
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	603b      	str	r3, [r7, #0]
 800674e:	4613      	mov	r3, r2
 8006750:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b20      	cmp	r3, #32
 8006760:	f040 8083 	bne.w	800686a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_UART_Transmit+0x2e>
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e07b      	b.n	800686c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_UART_Transmit+0x40>
 800677e:	2302      	movs	r3, #2
 8006780:	e074      	b.n	800686c <HAL_UART_Transmit+0x12a>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2221      	movs	r2, #33	; 0x21
 8006794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006798:	f7fc fd4a 	bl	8003230 <HAL_GetTick>
 800679c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	88fa      	ldrh	r2, [r7, #6]
 80067a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	88fa      	ldrh	r2, [r7, #6]
 80067a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80067b2:	e042      	b.n	800683a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ca:	d122      	bne.n	8006812 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2200      	movs	r2, #0
 80067d4:	2180      	movs	r1, #128	; 0x80
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 f84c 	bl	8006874 <UART_WaitOnFlagUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e042      	b.n	800686c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d103      	bne.n	800680a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	3302      	adds	r3, #2
 8006806:	60bb      	str	r3, [r7, #8]
 8006808:	e017      	b.n	800683a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	3301      	adds	r3, #1
 800680e:	60bb      	str	r3, [r7, #8]
 8006810:	e013      	b.n	800683a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2200      	movs	r2, #0
 800681a:	2180      	movs	r1, #128	; 0x80
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f829 	bl	8006874 <UART_WaitOnFlagUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e01f      	b.n	800686c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	60ba      	str	r2, [r7, #8]
 8006832:	781a      	ldrb	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800683e:	b29b      	uxth	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1b7      	bne.n	80067b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2200      	movs	r2, #0
 800684c:	2140      	movs	r1, #64	; 0x40
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 f810 	bl	8006874 <UART_WaitOnFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e006      	b.n	800686c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2220      	movs	r2, #32
 8006862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	e000      	b.n	800686c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800686a:	2302      	movs	r3, #2
  }
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	4613      	mov	r3, r2
 8006882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006884:	e02c      	b.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688c:	d028      	beq.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d007      	beq.n	80068a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006894:	f7fc fccc 	bl	8003230 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d21d      	bcs.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0201 	bic.w	r2, r2, #1
 80068c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e00f      	b.n	8006900 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	4013      	ands	r3, r2
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	bf0c      	ite	eq
 80068f0:	2301      	moveq	r3, #1
 80068f2:	2300      	movne	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d0c3      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800694a:	f023 030c 	bic.w	r3, r3, #12
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	68f9      	ldr	r1, [r7, #12]
 8006954:	430b      	orrs	r3, r1
 8006956:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006976:	f040 818b 	bne.w	8006c90 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4ac1      	ldr	r2, [pc, #772]	; (8006c84 <UART_SetConfig+0x37c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d005      	beq.n	8006990 <UART_SetConfig+0x88>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4abf      	ldr	r2, [pc, #764]	; (8006c88 <UART_SetConfig+0x380>)
 800698a:	4293      	cmp	r3, r2
 800698c:	f040 80bd 	bne.w	8006b0a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006990:	f7fe ff70 	bl	8005874 <HAL_RCC_GetPCLK2Freq>
 8006994:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	461d      	mov	r5, r3
 800699a:	f04f 0600 	mov.w	r6, #0
 800699e:	46a8      	mov	r8, r5
 80069a0:	46b1      	mov	r9, r6
 80069a2:	eb18 0308 	adds.w	r3, r8, r8
 80069a6:	eb49 0409 	adc.w	r4, r9, r9
 80069aa:	4698      	mov	r8, r3
 80069ac:	46a1      	mov	r9, r4
 80069ae:	eb18 0805 	adds.w	r8, r8, r5
 80069b2:	eb49 0906 	adc.w	r9, r9, r6
 80069b6:	f04f 0100 	mov.w	r1, #0
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069ca:	4688      	mov	r8, r1
 80069cc:	4691      	mov	r9, r2
 80069ce:	eb18 0005 	adds.w	r0, r8, r5
 80069d2:	eb49 0106 	adc.w	r1, r9, r6
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	461d      	mov	r5, r3
 80069dc:	f04f 0600 	mov.w	r6, #0
 80069e0:	196b      	adds	r3, r5, r5
 80069e2:	eb46 0406 	adc.w	r4, r6, r6
 80069e6:	461a      	mov	r2, r3
 80069e8:	4623      	mov	r3, r4
 80069ea:	f7fa f8dd 	bl	8000ba8 <__aeabi_uldivmod>
 80069ee:	4603      	mov	r3, r0
 80069f0:	460c      	mov	r4, r1
 80069f2:	461a      	mov	r2, r3
 80069f4:	4ba5      	ldr	r3, [pc, #660]	; (8006c8c <UART_SetConfig+0x384>)
 80069f6:	fba3 2302 	umull	r2, r3, r3, r2
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	461d      	mov	r5, r3
 8006a04:	f04f 0600 	mov.w	r6, #0
 8006a08:	46a9      	mov	r9, r5
 8006a0a:	46b2      	mov	sl, r6
 8006a0c:	eb19 0309 	adds.w	r3, r9, r9
 8006a10:	eb4a 040a 	adc.w	r4, sl, sl
 8006a14:	4699      	mov	r9, r3
 8006a16:	46a2      	mov	sl, r4
 8006a18:	eb19 0905 	adds.w	r9, r9, r5
 8006a1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a20:	f04f 0100 	mov.w	r1, #0
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a34:	4689      	mov	r9, r1
 8006a36:	4692      	mov	sl, r2
 8006a38:	eb19 0005 	adds.w	r0, r9, r5
 8006a3c:	eb4a 0106 	adc.w	r1, sl, r6
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	461d      	mov	r5, r3
 8006a46:	f04f 0600 	mov.w	r6, #0
 8006a4a:	196b      	adds	r3, r5, r5
 8006a4c:	eb46 0406 	adc.w	r4, r6, r6
 8006a50:	461a      	mov	r2, r3
 8006a52:	4623      	mov	r3, r4
 8006a54:	f7fa f8a8 	bl	8000ba8 <__aeabi_uldivmod>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4b8b      	ldr	r3, [pc, #556]	; (8006c8c <UART_SetConfig+0x384>)
 8006a60:	fba3 1302 	umull	r1, r3, r3, r2
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	2164      	movs	r1, #100	; 0x64
 8006a68:	fb01 f303 	mul.w	r3, r1, r3
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	3332      	adds	r3, #50	; 0x32
 8006a72:	4a86      	ldr	r2, [pc, #536]	; (8006c8c <UART_SetConfig+0x384>)
 8006a74:	fba2 2303 	umull	r2, r3, r2, r3
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a80:	4498      	add	r8, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	461d      	mov	r5, r3
 8006a86:	f04f 0600 	mov.w	r6, #0
 8006a8a:	46a9      	mov	r9, r5
 8006a8c:	46b2      	mov	sl, r6
 8006a8e:	eb19 0309 	adds.w	r3, r9, r9
 8006a92:	eb4a 040a 	adc.w	r4, sl, sl
 8006a96:	4699      	mov	r9, r3
 8006a98:	46a2      	mov	sl, r4
 8006a9a:	eb19 0905 	adds.w	r9, r9, r5
 8006a9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006aa2:	f04f 0100 	mov.w	r1, #0
 8006aa6:	f04f 0200 	mov.w	r2, #0
 8006aaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ab2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ab6:	4689      	mov	r9, r1
 8006ab8:	4692      	mov	sl, r2
 8006aba:	eb19 0005 	adds.w	r0, r9, r5
 8006abe:	eb4a 0106 	adc.w	r1, sl, r6
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	461d      	mov	r5, r3
 8006ac8:	f04f 0600 	mov.w	r6, #0
 8006acc:	196b      	adds	r3, r5, r5
 8006ace:	eb46 0406 	adc.w	r4, r6, r6
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	4623      	mov	r3, r4
 8006ad6:	f7fa f867 	bl	8000ba8 <__aeabi_uldivmod>
 8006ada:	4603      	mov	r3, r0
 8006adc:	460c      	mov	r4, r1
 8006ade:	461a      	mov	r2, r3
 8006ae0:	4b6a      	ldr	r3, [pc, #424]	; (8006c8c <UART_SetConfig+0x384>)
 8006ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	2164      	movs	r1, #100	; 0x64
 8006aea:	fb01 f303 	mul.w	r3, r1, r3
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	3332      	adds	r3, #50	; 0x32
 8006af4:	4a65      	ldr	r2, [pc, #404]	; (8006c8c <UART_SetConfig+0x384>)
 8006af6:	fba2 2303 	umull	r2, r3, r2, r3
 8006afa:	095b      	lsrs	r3, r3, #5
 8006afc:	f003 0207 	and.w	r2, r3, #7
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4442      	add	r2, r8
 8006b06:	609a      	str	r2, [r3, #8]
 8006b08:	e26f      	b.n	8006fea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b0a:	f7fe fe9f 	bl	800584c <HAL_RCC_GetPCLK1Freq>
 8006b0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	461d      	mov	r5, r3
 8006b14:	f04f 0600 	mov.w	r6, #0
 8006b18:	46a8      	mov	r8, r5
 8006b1a:	46b1      	mov	r9, r6
 8006b1c:	eb18 0308 	adds.w	r3, r8, r8
 8006b20:	eb49 0409 	adc.w	r4, r9, r9
 8006b24:	4698      	mov	r8, r3
 8006b26:	46a1      	mov	r9, r4
 8006b28:	eb18 0805 	adds.w	r8, r8, r5
 8006b2c:	eb49 0906 	adc.w	r9, r9, r6
 8006b30:	f04f 0100 	mov.w	r1, #0
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b44:	4688      	mov	r8, r1
 8006b46:	4691      	mov	r9, r2
 8006b48:	eb18 0005 	adds.w	r0, r8, r5
 8006b4c:	eb49 0106 	adc.w	r1, r9, r6
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	461d      	mov	r5, r3
 8006b56:	f04f 0600 	mov.w	r6, #0
 8006b5a:	196b      	adds	r3, r5, r5
 8006b5c:	eb46 0406 	adc.w	r4, r6, r6
 8006b60:	461a      	mov	r2, r3
 8006b62:	4623      	mov	r3, r4
 8006b64:	f7fa f820 	bl	8000ba8 <__aeabi_uldivmod>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4b47      	ldr	r3, [pc, #284]	; (8006c8c <UART_SetConfig+0x384>)
 8006b70:	fba3 2302 	umull	r2, r3, r3, r2
 8006b74:	095b      	lsrs	r3, r3, #5
 8006b76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	461d      	mov	r5, r3
 8006b7e:	f04f 0600 	mov.w	r6, #0
 8006b82:	46a9      	mov	r9, r5
 8006b84:	46b2      	mov	sl, r6
 8006b86:	eb19 0309 	adds.w	r3, r9, r9
 8006b8a:	eb4a 040a 	adc.w	r4, sl, sl
 8006b8e:	4699      	mov	r9, r3
 8006b90:	46a2      	mov	sl, r4
 8006b92:	eb19 0905 	adds.w	r9, r9, r5
 8006b96:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b9a:	f04f 0100 	mov.w	r1, #0
 8006b9e:	f04f 0200 	mov.w	r2, #0
 8006ba2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ba6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006baa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bae:	4689      	mov	r9, r1
 8006bb0:	4692      	mov	sl, r2
 8006bb2:	eb19 0005 	adds.w	r0, r9, r5
 8006bb6:	eb4a 0106 	adc.w	r1, sl, r6
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	461d      	mov	r5, r3
 8006bc0:	f04f 0600 	mov.w	r6, #0
 8006bc4:	196b      	adds	r3, r5, r5
 8006bc6:	eb46 0406 	adc.w	r4, r6, r6
 8006bca:	461a      	mov	r2, r3
 8006bcc:	4623      	mov	r3, r4
 8006bce:	f7f9 ffeb 	bl	8000ba8 <__aeabi_uldivmod>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4b2c      	ldr	r3, [pc, #176]	; (8006c8c <UART_SetConfig+0x384>)
 8006bda:	fba3 1302 	umull	r1, r3, r3, r2
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	2164      	movs	r1, #100	; 0x64
 8006be2:	fb01 f303 	mul.w	r3, r1, r3
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	3332      	adds	r3, #50	; 0x32
 8006bec:	4a27      	ldr	r2, [pc, #156]	; (8006c8c <UART_SetConfig+0x384>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bfa:	4498      	add	r8, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	461d      	mov	r5, r3
 8006c00:	f04f 0600 	mov.w	r6, #0
 8006c04:	46a9      	mov	r9, r5
 8006c06:	46b2      	mov	sl, r6
 8006c08:	eb19 0309 	adds.w	r3, r9, r9
 8006c0c:	eb4a 040a 	adc.w	r4, sl, sl
 8006c10:	4699      	mov	r9, r3
 8006c12:	46a2      	mov	sl, r4
 8006c14:	eb19 0905 	adds.w	r9, r9, r5
 8006c18:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c1c:	f04f 0100 	mov.w	r1, #0
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c30:	4689      	mov	r9, r1
 8006c32:	4692      	mov	sl, r2
 8006c34:	eb19 0005 	adds.w	r0, r9, r5
 8006c38:	eb4a 0106 	adc.w	r1, sl, r6
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	461d      	mov	r5, r3
 8006c42:	f04f 0600 	mov.w	r6, #0
 8006c46:	196b      	adds	r3, r5, r5
 8006c48:	eb46 0406 	adc.w	r4, r6, r6
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4623      	mov	r3, r4
 8006c50:	f7f9 ffaa 	bl	8000ba8 <__aeabi_uldivmod>
 8006c54:	4603      	mov	r3, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	461a      	mov	r2, r3
 8006c5a:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <UART_SetConfig+0x384>)
 8006c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	2164      	movs	r1, #100	; 0x64
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	3332      	adds	r3, #50	; 0x32
 8006c6e:	4a07      	ldr	r2, [pc, #28]	; (8006c8c <UART_SetConfig+0x384>)
 8006c70:	fba2 2303 	umull	r2, r3, r2, r3
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	f003 0207 	and.w	r2, r3, #7
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4442      	add	r2, r8
 8006c80:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006c82:	e1b2      	b.n	8006fea <UART_SetConfig+0x6e2>
 8006c84:	40011000 	.word	0x40011000
 8006c88:	40011400 	.word	0x40011400
 8006c8c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4ad7      	ldr	r2, [pc, #860]	; (8006ff4 <UART_SetConfig+0x6ec>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d005      	beq.n	8006ca6 <UART_SetConfig+0x39e>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4ad6      	ldr	r2, [pc, #856]	; (8006ff8 <UART_SetConfig+0x6f0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	f040 80d1 	bne.w	8006e48 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ca6:	f7fe fde5 	bl	8005874 <HAL_RCC_GetPCLK2Freq>
 8006caa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	469a      	mov	sl, r3
 8006cb0:	f04f 0b00 	mov.w	fp, #0
 8006cb4:	46d0      	mov	r8, sl
 8006cb6:	46d9      	mov	r9, fp
 8006cb8:	eb18 0308 	adds.w	r3, r8, r8
 8006cbc:	eb49 0409 	adc.w	r4, r9, r9
 8006cc0:	4698      	mov	r8, r3
 8006cc2:	46a1      	mov	r9, r4
 8006cc4:	eb18 080a 	adds.w	r8, r8, sl
 8006cc8:	eb49 090b 	adc.w	r9, r9, fp
 8006ccc:	f04f 0100 	mov.w	r1, #0
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cd8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cdc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ce0:	4688      	mov	r8, r1
 8006ce2:	4691      	mov	r9, r2
 8006ce4:	eb1a 0508 	adds.w	r5, sl, r8
 8006ce8:	eb4b 0609 	adc.w	r6, fp, r9
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	f04f 0400 	mov.w	r4, #0
 8006cfe:	0094      	lsls	r4, r2, #2
 8006d00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d04:	008b      	lsls	r3, r1, #2
 8006d06:	461a      	mov	r2, r3
 8006d08:	4623      	mov	r3, r4
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	f7f9 ff4b 	bl	8000ba8 <__aeabi_uldivmod>
 8006d12:	4603      	mov	r3, r0
 8006d14:	460c      	mov	r4, r1
 8006d16:	461a      	mov	r2, r3
 8006d18:	4bb8      	ldr	r3, [pc, #736]	; (8006ffc <UART_SetConfig+0x6f4>)
 8006d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	469b      	mov	fp, r3
 8006d28:	f04f 0c00 	mov.w	ip, #0
 8006d2c:	46d9      	mov	r9, fp
 8006d2e:	46e2      	mov	sl, ip
 8006d30:	eb19 0309 	adds.w	r3, r9, r9
 8006d34:	eb4a 040a 	adc.w	r4, sl, sl
 8006d38:	4699      	mov	r9, r3
 8006d3a:	46a2      	mov	sl, r4
 8006d3c:	eb19 090b 	adds.w	r9, r9, fp
 8006d40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d44:	f04f 0100 	mov.w	r1, #0
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d58:	4689      	mov	r9, r1
 8006d5a:	4692      	mov	sl, r2
 8006d5c:	eb1b 0509 	adds.w	r5, fp, r9
 8006d60:	eb4c 060a 	adc.w	r6, ip, sl
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	f04f 0400 	mov.w	r4, #0
 8006d76:	0094      	lsls	r4, r2, #2
 8006d78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d7c:	008b      	lsls	r3, r1, #2
 8006d7e:	461a      	mov	r2, r3
 8006d80:	4623      	mov	r3, r4
 8006d82:	4628      	mov	r0, r5
 8006d84:	4631      	mov	r1, r6
 8006d86:	f7f9 ff0f 	bl	8000ba8 <__aeabi_uldivmod>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	461a      	mov	r2, r3
 8006d90:	4b9a      	ldr	r3, [pc, #616]	; (8006ffc <UART_SetConfig+0x6f4>)
 8006d92:	fba3 1302 	umull	r1, r3, r3, r2
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	2164      	movs	r1, #100	; 0x64
 8006d9a:	fb01 f303 	mul.w	r3, r1, r3
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	3332      	adds	r3, #50	; 0x32
 8006da4:	4a95      	ldr	r2, [pc, #596]	; (8006ffc <UART_SetConfig+0x6f4>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	095b      	lsrs	r3, r3, #5
 8006dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006db0:	4498      	add	r8, r3
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	469b      	mov	fp, r3
 8006db6:	f04f 0c00 	mov.w	ip, #0
 8006dba:	46d9      	mov	r9, fp
 8006dbc:	46e2      	mov	sl, ip
 8006dbe:	eb19 0309 	adds.w	r3, r9, r9
 8006dc2:	eb4a 040a 	adc.w	r4, sl, sl
 8006dc6:	4699      	mov	r9, r3
 8006dc8:	46a2      	mov	sl, r4
 8006dca:	eb19 090b 	adds.w	r9, r9, fp
 8006dce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006dd2:	f04f 0100 	mov.w	r1, #0
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006de2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006de6:	4689      	mov	r9, r1
 8006de8:	4692      	mov	sl, r2
 8006dea:	eb1b 0509 	adds.w	r5, fp, r9
 8006dee:	eb4c 060a 	adc.w	r6, ip, sl
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	4619      	mov	r1, r3
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	f04f 0300 	mov.w	r3, #0
 8006e00:	f04f 0400 	mov.w	r4, #0
 8006e04:	0094      	lsls	r4, r2, #2
 8006e06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e0a:	008b      	lsls	r3, r1, #2
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	4623      	mov	r3, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	4631      	mov	r1, r6
 8006e14:	f7f9 fec8 	bl	8000ba8 <__aeabi_uldivmod>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	4b77      	ldr	r3, [pc, #476]	; (8006ffc <UART_SetConfig+0x6f4>)
 8006e20:	fba3 1302 	umull	r1, r3, r3, r2
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	2164      	movs	r1, #100	; 0x64
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	011b      	lsls	r3, r3, #4
 8006e30:	3332      	adds	r3, #50	; 0x32
 8006e32:	4a72      	ldr	r2, [pc, #456]	; (8006ffc <UART_SetConfig+0x6f4>)
 8006e34:	fba2 2303 	umull	r2, r3, r2, r3
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	f003 020f 	and.w	r2, r3, #15
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4442      	add	r2, r8
 8006e44:	609a      	str	r2, [r3, #8]
 8006e46:	e0d0      	b.n	8006fea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e48:	f7fe fd00 	bl	800584c <HAL_RCC_GetPCLK1Freq>
 8006e4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	469a      	mov	sl, r3
 8006e52:	f04f 0b00 	mov.w	fp, #0
 8006e56:	46d0      	mov	r8, sl
 8006e58:	46d9      	mov	r9, fp
 8006e5a:	eb18 0308 	adds.w	r3, r8, r8
 8006e5e:	eb49 0409 	adc.w	r4, r9, r9
 8006e62:	4698      	mov	r8, r3
 8006e64:	46a1      	mov	r9, r4
 8006e66:	eb18 080a 	adds.w	r8, r8, sl
 8006e6a:	eb49 090b 	adc.w	r9, r9, fp
 8006e6e:	f04f 0100 	mov.w	r1, #0
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e82:	4688      	mov	r8, r1
 8006e84:	4691      	mov	r9, r2
 8006e86:	eb1a 0508 	adds.w	r5, sl, r8
 8006e8a:	eb4b 0609 	adc.w	r6, fp, r9
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	4619      	mov	r1, r3
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	f04f 0400 	mov.w	r4, #0
 8006ea0:	0094      	lsls	r4, r2, #2
 8006ea2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ea6:	008b      	lsls	r3, r1, #2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4623      	mov	r3, r4
 8006eac:	4628      	mov	r0, r5
 8006eae:	4631      	mov	r1, r6
 8006eb0:	f7f9 fe7a 	bl	8000ba8 <__aeabi_uldivmod>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4b50      	ldr	r3, [pc, #320]	; (8006ffc <UART_SetConfig+0x6f4>)
 8006ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8006ec0:	095b      	lsrs	r3, r3, #5
 8006ec2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	469b      	mov	fp, r3
 8006eca:	f04f 0c00 	mov.w	ip, #0
 8006ece:	46d9      	mov	r9, fp
 8006ed0:	46e2      	mov	sl, ip
 8006ed2:	eb19 0309 	adds.w	r3, r9, r9
 8006ed6:	eb4a 040a 	adc.w	r4, sl, sl
 8006eda:	4699      	mov	r9, r3
 8006edc:	46a2      	mov	sl, r4
 8006ede:	eb19 090b 	adds.w	r9, r9, fp
 8006ee2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ee6:	f04f 0100 	mov.w	r1, #0
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ef2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ef6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006efa:	4689      	mov	r9, r1
 8006efc:	4692      	mov	sl, r2
 8006efe:	eb1b 0509 	adds.w	r5, fp, r9
 8006f02:	eb4c 060a 	adc.w	r6, ip, sl
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	f04f 0400 	mov.w	r4, #0
 8006f18:	0094      	lsls	r4, r2, #2
 8006f1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f1e:	008b      	lsls	r3, r1, #2
 8006f20:	461a      	mov	r2, r3
 8006f22:	4623      	mov	r3, r4
 8006f24:	4628      	mov	r0, r5
 8006f26:	4631      	mov	r1, r6
 8006f28:	f7f9 fe3e 	bl	8000ba8 <__aeabi_uldivmod>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	461a      	mov	r2, r3
 8006f32:	4b32      	ldr	r3, [pc, #200]	; (8006ffc <UART_SetConfig+0x6f4>)
 8006f34:	fba3 1302 	umull	r1, r3, r3, r2
 8006f38:	095b      	lsrs	r3, r3, #5
 8006f3a:	2164      	movs	r1, #100	; 0x64
 8006f3c:	fb01 f303 	mul.w	r3, r1, r3
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	3332      	adds	r3, #50	; 0x32
 8006f46:	4a2d      	ldr	r2, [pc, #180]	; (8006ffc <UART_SetConfig+0x6f4>)
 8006f48:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f52:	4498      	add	r8, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	469b      	mov	fp, r3
 8006f58:	f04f 0c00 	mov.w	ip, #0
 8006f5c:	46d9      	mov	r9, fp
 8006f5e:	46e2      	mov	sl, ip
 8006f60:	eb19 0309 	adds.w	r3, r9, r9
 8006f64:	eb4a 040a 	adc.w	r4, sl, sl
 8006f68:	4699      	mov	r9, r3
 8006f6a:	46a2      	mov	sl, r4
 8006f6c:	eb19 090b 	adds.w	r9, r9, fp
 8006f70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f74:	f04f 0100 	mov.w	r1, #0
 8006f78:	f04f 0200 	mov.w	r2, #0
 8006f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f88:	4689      	mov	r9, r1
 8006f8a:	4692      	mov	sl, r2
 8006f8c:	eb1b 0509 	adds.w	r5, fp, r9
 8006f90:	eb4c 060a 	adc.w	r6, ip, sl
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	f04f 0400 	mov.w	r4, #0
 8006fa6:	0094      	lsls	r4, r2, #2
 8006fa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fac:	008b      	lsls	r3, r1, #2
 8006fae:	461a      	mov	r2, r3
 8006fb0:	4623      	mov	r3, r4
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	f7f9 fdf7 	bl	8000ba8 <__aeabi_uldivmod>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <UART_SetConfig+0x6f4>)
 8006fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	2164      	movs	r1, #100	; 0x64
 8006fca:	fb01 f303 	mul.w	r3, r1, r3
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	3332      	adds	r3, #50	; 0x32
 8006fd4:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <UART_SetConfig+0x6f4>)
 8006fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fda:	095b      	lsrs	r3, r3, #5
 8006fdc:	f003 020f 	and.w	r2, r3, #15
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4442      	add	r2, r8
 8006fe6:	609a      	str	r2, [r3, #8]
}
 8006fe8:	e7ff      	b.n	8006fea <UART_SetConfig+0x6e2>
 8006fea:	bf00      	nop
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff4:	40011000 	.word	0x40011000
 8006ff8:	40011400 	.word	0x40011400
 8006ffc:	51eb851f 	.word	0x51eb851f

08007000 <__errno>:
 8007000:	4b01      	ldr	r3, [pc, #4]	; (8007008 <__errno+0x8>)
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20000028 	.word	0x20000028

0800700c <__libc_init_array>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	4e0d      	ldr	r6, [pc, #52]	; (8007044 <__libc_init_array+0x38>)
 8007010:	4c0d      	ldr	r4, [pc, #52]	; (8007048 <__libc_init_array+0x3c>)
 8007012:	1ba4      	subs	r4, r4, r6
 8007014:	10a4      	asrs	r4, r4, #2
 8007016:	2500      	movs	r5, #0
 8007018:	42a5      	cmp	r5, r4
 800701a:	d109      	bne.n	8007030 <__libc_init_array+0x24>
 800701c:	4e0b      	ldr	r6, [pc, #44]	; (800704c <__libc_init_array+0x40>)
 800701e:	4c0c      	ldr	r4, [pc, #48]	; (8007050 <__libc_init_array+0x44>)
 8007020:	f002 fc22 	bl	8009868 <_init>
 8007024:	1ba4      	subs	r4, r4, r6
 8007026:	10a4      	asrs	r4, r4, #2
 8007028:	2500      	movs	r5, #0
 800702a:	42a5      	cmp	r5, r4
 800702c:	d105      	bne.n	800703a <__libc_init_array+0x2e>
 800702e:	bd70      	pop	{r4, r5, r6, pc}
 8007030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007034:	4798      	blx	r3
 8007036:	3501      	adds	r5, #1
 8007038:	e7ee      	b.n	8007018 <__libc_init_array+0xc>
 800703a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800703e:	4798      	blx	r3
 8007040:	3501      	adds	r5, #1
 8007042:	e7f2      	b.n	800702a <__libc_init_array+0x1e>
 8007044:	0800ba70 	.word	0x0800ba70
 8007048:	0800ba70 	.word	0x0800ba70
 800704c:	0800ba70 	.word	0x0800ba70
 8007050:	0800ba74 	.word	0x0800ba74

08007054 <memset>:
 8007054:	4402      	add	r2, r0
 8007056:	4603      	mov	r3, r0
 8007058:	4293      	cmp	r3, r2
 800705a:	d100      	bne.n	800705e <memset+0xa>
 800705c:	4770      	bx	lr
 800705e:	f803 1b01 	strb.w	r1, [r3], #1
 8007062:	e7f9      	b.n	8007058 <memset+0x4>

08007064 <__cvt>:
 8007064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	ec55 4b10 	vmov	r4, r5, d0
 800706c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800706e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007072:	2d00      	cmp	r5, #0
 8007074:	460e      	mov	r6, r1
 8007076:	4691      	mov	r9, r2
 8007078:	4619      	mov	r1, r3
 800707a:	bfb8      	it	lt
 800707c:	4622      	movlt	r2, r4
 800707e:	462b      	mov	r3, r5
 8007080:	f027 0720 	bic.w	r7, r7, #32
 8007084:	bfbb      	ittet	lt
 8007086:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800708a:	461d      	movlt	r5, r3
 800708c:	2300      	movge	r3, #0
 800708e:	232d      	movlt	r3, #45	; 0x2d
 8007090:	bfb8      	it	lt
 8007092:	4614      	movlt	r4, r2
 8007094:	2f46      	cmp	r7, #70	; 0x46
 8007096:	700b      	strb	r3, [r1, #0]
 8007098:	d004      	beq.n	80070a4 <__cvt+0x40>
 800709a:	2f45      	cmp	r7, #69	; 0x45
 800709c:	d100      	bne.n	80070a0 <__cvt+0x3c>
 800709e:	3601      	adds	r6, #1
 80070a0:	2102      	movs	r1, #2
 80070a2:	e000      	b.n	80070a6 <__cvt+0x42>
 80070a4:	2103      	movs	r1, #3
 80070a6:	ab03      	add	r3, sp, #12
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	ab02      	add	r3, sp, #8
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	4632      	mov	r2, r6
 80070b0:	4653      	mov	r3, sl
 80070b2:	ec45 4b10 	vmov	d0, r4, r5
 80070b6:	f000 fe17 	bl	8007ce8 <_dtoa_r>
 80070ba:	2f47      	cmp	r7, #71	; 0x47
 80070bc:	4680      	mov	r8, r0
 80070be:	d102      	bne.n	80070c6 <__cvt+0x62>
 80070c0:	f019 0f01 	tst.w	r9, #1
 80070c4:	d026      	beq.n	8007114 <__cvt+0xb0>
 80070c6:	2f46      	cmp	r7, #70	; 0x46
 80070c8:	eb08 0906 	add.w	r9, r8, r6
 80070cc:	d111      	bne.n	80070f2 <__cvt+0x8e>
 80070ce:	f898 3000 	ldrb.w	r3, [r8]
 80070d2:	2b30      	cmp	r3, #48	; 0x30
 80070d4:	d10a      	bne.n	80070ec <__cvt+0x88>
 80070d6:	2200      	movs	r2, #0
 80070d8:	2300      	movs	r3, #0
 80070da:	4620      	mov	r0, r4
 80070dc:	4629      	mov	r1, r5
 80070de:	f7f9 fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80070e2:	b918      	cbnz	r0, 80070ec <__cvt+0x88>
 80070e4:	f1c6 0601 	rsb	r6, r6, #1
 80070e8:	f8ca 6000 	str.w	r6, [sl]
 80070ec:	f8da 3000 	ldr.w	r3, [sl]
 80070f0:	4499      	add	r9, r3
 80070f2:	2200      	movs	r2, #0
 80070f4:	2300      	movs	r3, #0
 80070f6:	4620      	mov	r0, r4
 80070f8:	4629      	mov	r1, r5
 80070fa:	f7f9 fce5 	bl	8000ac8 <__aeabi_dcmpeq>
 80070fe:	b938      	cbnz	r0, 8007110 <__cvt+0xac>
 8007100:	2230      	movs	r2, #48	; 0x30
 8007102:	9b03      	ldr	r3, [sp, #12]
 8007104:	454b      	cmp	r3, r9
 8007106:	d205      	bcs.n	8007114 <__cvt+0xb0>
 8007108:	1c59      	adds	r1, r3, #1
 800710a:	9103      	str	r1, [sp, #12]
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	e7f8      	b.n	8007102 <__cvt+0x9e>
 8007110:	f8cd 900c 	str.w	r9, [sp, #12]
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007118:	eba3 0308 	sub.w	r3, r3, r8
 800711c:	4640      	mov	r0, r8
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	b004      	add	sp, #16
 8007122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007126 <__exponent>:
 8007126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007128:	2900      	cmp	r1, #0
 800712a:	4604      	mov	r4, r0
 800712c:	bfba      	itte	lt
 800712e:	4249      	neglt	r1, r1
 8007130:	232d      	movlt	r3, #45	; 0x2d
 8007132:	232b      	movge	r3, #43	; 0x2b
 8007134:	2909      	cmp	r1, #9
 8007136:	f804 2b02 	strb.w	r2, [r4], #2
 800713a:	7043      	strb	r3, [r0, #1]
 800713c:	dd20      	ble.n	8007180 <__exponent+0x5a>
 800713e:	f10d 0307 	add.w	r3, sp, #7
 8007142:	461f      	mov	r7, r3
 8007144:	260a      	movs	r6, #10
 8007146:	fb91 f5f6 	sdiv	r5, r1, r6
 800714a:	fb06 1115 	mls	r1, r6, r5, r1
 800714e:	3130      	adds	r1, #48	; 0x30
 8007150:	2d09      	cmp	r5, #9
 8007152:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007156:	f103 32ff 	add.w	r2, r3, #4294967295
 800715a:	4629      	mov	r1, r5
 800715c:	dc09      	bgt.n	8007172 <__exponent+0x4c>
 800715e:	3130      	adds	r1, #48	; 0x30
 8007160:	3b02      	subs	r3, #2
 8007162:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007166:	42bb      	cmp	r3, r7
 8007168:	4622      	mov	r2, r4
 800716a:	d304      	bcc.n	8007176 <__exponent+0x50>
 800716c:	1a10      	subs	r0, r2, r0
 800716e:	b003      	add	sp, #12
 8007170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007172:	4613      	mov	r3, r2
 8007174:	e7e7      	b.n	8007146 <__exponent+0x20>
 8007176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800717a:	f804 2b01 	strb.w	r2, [r4], #1
 800717e:	e7f2      	b.n	8007166 <__exponent+0x40>
 8007180:	2330      	movs	r3, #48	; 0x30
 8007182:	4419      	add	r1, r3
 8007184:	7083      	strb	r3, [r0, #2]
 8007186:	1d02      	adds	r2, r0, #4
 8007188:	70c1      	strb	r1, [r0, #3]
 800718a:	e7ef      	b.n	800716c <__exponent+0x46>

0800718c <_printf_float>:
 800718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	b08d      	sub	sp, #52	; 0x34
 8007192:	460c      	mov	r4, r1
 8007194:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007198:	4616      	mov	r6, r2
 800719a:	461f      	mov	r7, r3
 800719c:	4605      	mov	r5, r0
 800719e:	f001 fcd5 	bl	8008b4c <_localeconv_r>
 80071a2:	6803      	ldr	r3, [r0, #0]
 80071a4:	9304      	str	r3, [sp, #16]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7f9 f812 	bl	80001d0 <strlen>
 80071ac:	2300      	movs	r3, #0
 80071ae:	930a      	str	r3, [sp, #40]	; 0x28
 80071b0:	f8d8 3000 	ldr.w	r3, [r8]
 80071b4:	9005      	str	r0, [sp, #20]
 80071b6:	3307      	adds	r3, #7
 80071b8:	f023 0307 	bic.w	r3, r3, #7
 80071bc:	f103 0208 	add.w	r2, r3, #8
 80071c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071c4:	f8d4 b000 	ldr.w	fp, [r4]
 80071c8:	f8c8 2000 	str.w	r2, [r8]
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80071d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071dc:	9307      	str	r3, [sp, #28]
 80071de:	f8cd 8018 	str.w	r8, [sp, #24]
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295
 80071e6:	4ba7      	ldr	r3, [pc, #668]	; (8007484 <_printf_float+0x2f8>)
 80071e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071ec:	f7f9 fc9e 	bl	8000b2c <__aeabi_dcmpun>
 80071f0:	bb70      	cbnz	r0, 8007250 <_printf_float+0xc4>
 80071f2:	f04f 32ff 	mov.w	r2, #4294967295
 80071f6:	4ba3      	ldr	r3, [pc, #652]	; (8007484 <_printf_float+0x2f8>)
 80071f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071fc:	f7f9 fc78 	bl	8000af0 <__aeabi_dcmple>
 8007200:	bb30      	cbnz	r0, 8007250 <_printf_float+0xc4>
 8007202:	2200      	movs	r2, #0
 8007204:	2300      	movs	r3, #0
 8007206:	4640      	mov	r0, r8
 8007208:	4649      	mov	r1, r9
 800720a:	f7f9 fc67 	bl	8000adc <__aeabi_dcmplt>
 800720e:	b110      	cbz	r0, 8007216 <_printf_float+0x8a>
 8007210:	232d      	movs	r3, #45	; 0x2d
 8007212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007216:	4a9c      	ldr	r2, [pc, #624]	; (8007488 <_printf_float+0x2fc>)
 8007218:	4b9c      	ldr	r3, [pc, #624]	; (800748c <_printf_float+0x300>)
 800721a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800721e:	bf8c      	ite	hi
 8007220:	4690      	movhi	r8, r2
 8007222:	4698      	movls	r8, r3
 8007224:	2303      	movs	r3, #3
 8007226:	f02b 0204 	bic.w	r2, fp, #4
 800722a:	6123      	str	r3, [r4, #16]
 800722c:	6022      	str	r2, [r4, #0]
 800722e:	f04f 0900 	mov.w	r9, #0
 8007232:	9700      	str	r7, [sp, #0]
 8007234:	4633      	mov	r3, r6
 8007236:	aa0b      	add	r2, sp, #44	; 0x2c
 8007238:	4621      	mov	r1, r4
 800723a:	4628      	mov	r0, r5
 800723c:	f000 f9e6 	bl	800760c <_printf_common>
 8007240:	3001      	adds	r0, #1
 8007242:	f040 808d 	bne.w	8007360 <_printf_float+0x1d4>
 8007246:	f04f 30ff 	mov.w	r0, #4294967295
 800724a:	b00d      	add	sp, #52	; 0x34
 800724c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007250:	4642      	mov	r2, r8
 8007252:	464b      	mov	r3, r9
 8007254:	4640      	mov	r0, r8
 8007256:	4649      	mov	r1, r9
 8007258:	f7f9 fc68 	bl	8000b2c <__aeabi_dcmpun>
 800725c:	b110      	cbz	r0, 8007264 <_printf_float+0xd8>
 800725e:	4a8c      	ldr	r2, [pc, #560]	; (8007490 <_printf_float+0x304>)
 8007260:	4b8c      	ldr	r3, [pc, #560]	; (8007494 <_printf_float+0x308>)
 8007262:	e7da      	b.n	800721a <_printf_float+0x8e>
 8007264:	6861      	ldr	r1, [r4, #4]
 8007266:	1c4b      	adds	r3, r1, #1
 8007268:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800726c:	a80a      	add	r0, sp, #40	; 0x28
 800726e:	d13e      	bne.n	80072ee <_printf_float+0x162>
 8007270:	2306      	movs	r3, #6
 8007272:	6063      	str	r3, [r4, #4]
 8007274:	2300      	movs	r3, #0
 8007276:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800727a:	ab09      	add	r3, sp, #36	; 0x24
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	ec49 8b10 	vmov	d0, r8, r9
 8007282:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007286:	6022      	str	r2, [r4, #0]
 8007288:	f8cd a004 	str.w	sl, [sp, #4]
 800728c:	6861      	ldr	r1, [r4, #4]
 800728e:	4628      	mov	r0, r5
 8007290:	f7ff fee8 	bl	8007064 <__cvt>
 8007294:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007298:	2b47      	cmp	r3, #71	; 0x47
 800729a:	4680      	mov	r8, r0
 800729c:	d109      	bne.n	80072b2 <_printf_float+0x126>
 800729e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a0:	1cd8      	adds	r0, r3, #3
 80072a2:	db02      	blt.n	80072aa <_printf_float+0x11e>
 80072a4:	6862      	ldr	r2, [r4, #4]
 80072a6:	4293      	cmp	r3, r2
 80072a8:	dd47      	ble.n	800733a <_printf_float+0x1ae>
 80072aa:	f1aa 0a02 	sub.w	sl, sl, #2
 80072ae:	fa5f fa8a 	uxtb.w	sl, sl
 80072b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80072b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072b8:	d824      	bhi.n	8007304 <_printf_float+0x178>
 80072ba:	3901      	subs	r1, #1
 80072bc:	4652      	mov	r2, sl
 80072be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072c2:	9109      	str	r1, [sp, #36]	; 0x24
 80072c4:	f7ff ff2f 	bl	8007126 <__exponent>
 80072c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ca:	1813      	adds	r3, r2, r0
 80072cc:	2a01      	cmp	r2, #1
 80072ce:	4681      	mov	r9, r0
 80072d0:	6123      	str	r3, [r4, #16]
 80072d2:	dc02      	bgt.n	80072da <_printf_float+0x14e>
 80072d4:	6822      	ldr	r2, [r4, #0]
 80072d6:	07d1      	lsls	r1, r2, #31
 80072d8:	d501      	bpl.n	80072de <_printf_float+0x152>
 80072da:	3301      	adds	r3, #1
 80072dc:	6123      	str	r3, [r4, #16]
 80072de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0a5      	beq.n	8007232 <_printf_float+0xa6>
 80072e6:	232d      	movs	r3, #45	; 0x2d
 80072e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ec:	e7a1      	b.n	8007232 <_printf_float+0xa6>
 80072ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80072f2:	f000 8177 	beq.w	80075e4 <_printf_float+0x458>
 80072f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80072fa:	d1bb      	bne.n	8007274 <_printf_float+0xe8>
 80072fc:	2900      	cmp	r1, #0
 80072fe:	d1b9      	bne.n	8007274 <_printf_float+0xe8>
 8007300:	2301      	movs	r3, #1
 8007302:	e7b6      	b.n	8007272 <_printf_float+0xe6>
 8007304:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007308:	d119      	bne.n	800733e <_printf_float+0x1b2>
 800730a:	2900      	cmp	r1, #0
 800730c:	6863      	ldr	r3, [r4, #4]
 800730e:	dd0c      	ble.n	800732a <_printf_float+0x19e>
 8007310:	6121      	str	r1, [r4, #16]
 8007312:	b913      	cbnz	r3, 800731a <_printf_float+0x18e>
 8007314:	6822      	ldr	r2, [r4, #0]
 8007316:	07d2      	lsls	r2, r2, #31
 8007318:	d502      	bpl.n	8007320 <_printf_float+0x194>
 800731a:	3301      	adds	r3, #1
 800731c:	440b      	add	r3, r1
 800731e:	6123      	str	r3, [r4, #16]
 8007320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007322:	65a3      	str	r3, [r4, #88]	; 0x58
 8007324:	f04f 0900 	mov.w	r9, #0
 8007328:	e7d9      	b.n	80072de <_printf_float+0x152>
 800732a:	b913      	cbnz	r3, 8007332 <_printf_float+0x1a6>
 800732c:	6822      	ldr	r2, [r4, #0]
 800732e:	07d0      	lsls	r0, r2, #31
 8007330:	d501      	bpl.n	8007336 <_printf_float+0x1aa>
 8007332:	3302      	adds	r3, #2
 8007334:	e7f3      	b.n	800731e <_printf_float+0x192>
 8007336:	2301      	movs	r3, #1
 8007338:	e7f1      	b.n	800731e <_printf_float+0x192>
 800733a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800733e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007342:	4293      	cmp	r3, r2
 8007344:	db05      	blt.n	8007352 <_printf_float+0x1c6>
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	6123      	str	r3, [r4, #16]
 800734a:	07d1      	lsls	r1, r2, #31
 800734c:	d5e8      	bpl.n	8007320 <_printf_float+0x194>
 800734e:	3301      	adds	r3, #1
 8007350:	e7e5      	b.n	800731e <_printf_float+0x192>
 8007352:	2b00      	cmp	r3, #0
 8007354:	bfd4      	ite	le
 8007356:	f1c3 0302 	rsble	r3, r3, #2
 800735a:	2301      	movgt	r3, #1
 800735c:	4413      	add	r3, r2
 800735e:	e7de      	b.n	800731e <_printf_float+0x192>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	055a      	lsls	r2, r3, #21
 8007364:	d407      	bmi.n	8007376 <_printf_float+0x1ea>
 8007366:	6923      	ldr	r3, [r4, #16]
 8007368:	4642      	mov	r2, r8
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	d12b      	bne.n	80073cc <_printf_float+0x240>
 8007374:	e767      	b.n	8007246 <_printf_float+0xba>
 8007376:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800737a:	f240 80dc 	bls.w	8007536 <_printf_float+0x3aa>
 800737e:	2200      	movs	r2, #0
 8007380:	2300      	movs	r3, #0
 8007382:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007386:	f7f9 fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800738a:	2800      	cmp	r0, #0
 800738c:	d033      	beq.n	80073f6 <_printf_float+0x26a>
 800738e:	2301      	movs	r3, #1
 8007390:	4a41      	ldr	r2, [pc, #260]	; (8007498 <_printf_float+0x30c>)
 8007392:	4631      	mov	r1, r6
 8007394:	4628      	mov	r0, r5
 8007396:	47b8      	blx	r7
 8007398:	3001      	adds	r0, #1
 800739a:	f43f af54 	beq.w	8007246 <_printf_float+0xba>
 800739e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073a2:	429a      	cmp	r2, r3
 80073a4:	db02      	blt.n	80073ac <_printf_float+0x220>
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	07d8      	lsls	r0, r3, #31
 80073aa:	d50f      	bpl.n	80073cc <_printf_float+0x240>
 80073ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073b0:	4631      	mov	r1, r6
 80073b2:	4628      	mov	r0, r5
 80073b4:	47b8      	blx	r7
 80073b6:	3001      	adds	r0, #1
 80073b8:	f43f af45 	beq.w	8007246 <_printf_float+0xba>
 80073bc:	f04f 0800 	mov.w	r8, #0
 80073c0:	f104 091a 	add.w	r9, r4, #26
 80073c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c6:	3b01      	subs	r3, #1
 80073c8:	4543      	cmp	r3, r8
 80073ca:	dc09      	bgt.n	80073e0 <_printf_float+0x254>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	079b      	lsls	r3, r3, #30
 80073d0:	f100 8103 	bmi.w	80075da <_printf_float+0x44e>
 80073d4:	68e0      	ldr	r0, [r4, #12]
 80073d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d8:	4298      	cmp	r0, r3
 80073da:	bfb8      	it	lt
 80073dc:	4618      	movlt	r0, r3
 80073de:	e734      	b.n	800724a <_printf_float+0xbe>
 80073e0:	2301      	movs	r3, #1
 80073e2:	464a      	mov	r2, r9
 80073e4:	4631      	mov	r1, r6
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b8      	blx	r7
 80073ea:	3001      	adds	r0, #1
 80073ec:	f43f af2b 	beq.w	8007246 <_printf_float+0xba>
 80073f0:	f108 0801 	add.w	r8, r8, #1
 80073f4:	e7e6      	b.n	80073c4 <_printf_float+0x238>
 80073f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	dc2b      	bgt.n	8007454 <_printf_float+0x2c8>
 80073fc:	2301      	movs	r3, #1
 80073fe:	4a26      	ldr	r2, [pc, #152]	; (8007498 <_printf_float+0x30c>)
 8007400:	4631      	mov	r1, r6
 8007402:	4628      	mov	r0, r5
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	f43f af1d 	beq.w	8007246 <_printf_float+0xba>
 800740c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800740e:	b923      	cbnz	r3, 800741a <_printf_float+0x28e>
 8007410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007412:	b913      	cbnz	r3, 800741a <_printf_float+0x28e>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	07d9      	lsls	r1, r3, #31
 8007418:	d5d8      	bpl.n	80073cc <_printf_float+0x240>
 800741a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	f43f af0e 	beq.w	8007246 <_printf_float+0xba>
 800742a:	f04f 0900 	mov.w	r9, #0
 800742e:	f104 0a1a 	add.w	sl, r4, #26
 8007432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007434:	425b      	negs	r3, r3
 8007436:	454b      	cmp	r3, r9
 8007438:	dc01      	bgt.n	800743e <_printf_float+0x2b2>
 800743a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800743c:	e794      	b.n	8007368 <_printf_float+0x1dc>
 800743e:	2301      	movs	r3, #1
 8007440:	4652      	mov	r2, sl
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	f43f aefc 	beq.w	8007246 <_printf_float+0xba>
 800744e:	f109 0901 	add.w	r9, r9, #1
 8007452:	e7ee      	b.n	8007432 <_printf_float+0x2a6>
 8007454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007458:	429a      	cmp	r2, r3
 800745a:	bfa8      	it	ge
 800745c:	461a      	movge	r2, r3
 800745e:	2a00      	cmp	r2, #0
 8007460:	4691      	mov	r9, r2
 8007462:	dd07      	ble.n	8007474 <_printf_float+0x2e8>
 8007464:	4613      	mov	r3, r2
 8007466:	4631      	mov	r1, r6
 8007468:	4642      	mov	r2, r8
 800746a:	4628      	mov	r0, r5
 800746c:	47b8      	blx	r7
 800746e:	3001      	adds	r0, #1
 8007470:	f43f aee9 	beq.w	8007246 <_printf_float+0xba>
 8007474:	f104 031a 	add.w	r3, r4, #26
 8007478:	f04f 0b00 	mov.w	fp, #0
 800747c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007480:	9306      	str	r3, [sp, #24]
 8007482:	e015      	b.n	80074b0 <_printf_float+0x324>
 8007484:	7fefffff 	.word	0x7fefffff
 8007488:	0800b7ac 	.word	0x0800b7ac
 800748c:	0800b7a8 	.word	0x0800b7a8
 8007490:	0800b7b4 	.word	0x0800b7b4
 8007494:	0800b7b0 	.word	0x0800b7b0
 8007498:	0800b7b8 	.word	0x0800b7b8
 800749c:	2301      	movs	r3, #1
 800749e:	9a06      	ldr	r2, [sp, #24]
 80074a0:	4631      	mov	r1, r6
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	f43f aecd 	beq.w	8007246 <_printf_float+0xba>
 80074ac:	f10b 0b01 	add.w	fp, fp, #1
 80074b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80074b4:	ebaa 0309 	sub.w	r3, sl, r9
 80074b8:	455b      	cmp	r3, fp
 80074ba:	dcef      	bgt.n	800749c <_printf_float+0x310>
 80074bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074c0:	429a      	cmp	r2, r3
 80074c2:	44d0      	add	r8, sl
 80074c4:	db15      	blt.n	80074f2 <_printf_float+0x366>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	07da      	lsls	r2, r3, #31
 80074ca:	d412      	bmi.n	80074f2 <_printf_float+0x366>
 80074cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074d0:	eba3 020a 	sub.w	r2, r3, sl
 80074d4:	eba3 0a01 	sub.w	sl, r3, r1
 80074d8:	4592      	cmp	sl, r2
 80074da:	bfa8      	it	ge
 80074dc:	4692      	movge	sl, r2
 80074de:	f1ba 0f00 	cmp.w	sl, #0
 80074e2:	dc0e      	bgt.n	8007502 <_printf_float+0x376>
 80074e4:	f04f 0800 	mov.w	r8, #0
 80074e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074ec:	f104 091a 	add.w	r9, r4, #26
 80074f0:	e019      	b.n	8007526 <_printf_float+0x39a>
 80074f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	d1e5      	bne.n	80074cc <_printf_float+0x340>
 8007500:	e6a1      	b.n	8007246 <_printf_float+0xba>
 8007502:	4653      	mov	r3, sl
 8007504:	4642      	mov	r2, r8
 8007506:	4631      	mov	r1, r6
 8007508:	4628      	mov	r0, r5
 800750a:	47b8      	blx	r7
 800750c:	3001      	adds	r0, #1
 800750e:	d1e9      	bne.n	80074e4 <_printf_float+0x358>
 8007510:	e699      	b.n	8007246 <_printf_float+0xba>
 8007512:	2301      	movs	r3, #1
 8007514:	464a      	mov	r2, r9
 8007516:	4631      	mov	r1, r6
 8007518:	4628      	mov	r0, r5
 800751a:	47b8      	blx	r7
 800751c:	3001      	adds	r0, #1
 800751e:	f43f ae92 	beq.w	8007246 <_printf_float+0xba>
 8007522:	f108 0801 	add.w	r8, r8, #1
 8007526:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	eba3 030a 	sub.w	r3, r3, sl
 8007530:	4543      	cmp	r3, r8
 8007532:	dcee      	bgt.n	8007512 <_printf_float+0x386>
 8007534:	e74a      	b.n	80073cc <_printf_float+0x240>
 8007536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007538:	2a01      	cmp	r2, #1
 800753a:	dc01      	bgt.n	8007540 <_printf_float+0x3b4>
 800753c:	07db      	lsls	r3, r3, #31
 800753e:	d53a      	bpl.n	80075b6 <_printf_float+0x42a>
 8007540:	2301      	movs	r3, #1
 8007542:	4642      	mov	r2, r8
 8007544:	4631      	mov	r1, r6
 8007546:	4628      	mov	r0, r5
 8007548:	47b8      	blx	r7
 800754a:	3001      	adds	r0, #1
 800754c:	f43f ae7b 	beq.w	8007246 <_printf_float+0xba>
 8007550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007554:	4631      	mov	r1, r6
 8007556:	4628      	mov	r0, r5
 8007558:	47b8      	blx	r7
 800755a:	3001      	adds	r0, #1
 800755c:	f108 0801 	add.w	r8, r8, #1
 8007560:	f43f ae71 	beq.w	8007246 <_printf_float+0xba>
 8007564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007566:	2200      	movs	r2, #0
 8007568:	f103 3aff 	add.w	sl, r3, #4294967295
 800756c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007570:	2300      	movs	r3, #0
 8007572:	f7f9 faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007576:	b9c8      	cbnz	r0, 80075ac <_printf_float+0x420>
 8007578:	4653      	mov	r3, sl
 800757a:	4642      	mov	r2, r8
 800757c:	4631      	mov	r1, r6
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	d10e      	bne.n	80075a4 <_printf_float+0x418>
 8007586:	e65e      	b.n	8007246 <_printf_float+0xba>
 8007588:	2301      	movs	r3, #1
 800758a:	4652      	mov	r2, sl
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f ae57 	beq.w	8007246 <_printf_float+0xba>
 8007598:	f108 0801 	add.w	r8, r8, #1
 800759c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800759e:	3b01      	subs	r3, #1
 80075a0:	4543      	cmp	r3, r8
 80075a2:	dcf1      	bgt.n	8007588 <_printf_float+0x3fc>
 80075a4:	464b      	mov	r3, r9
 80075a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075aa:	e6de      	b.n	800736a <_printf_float+0x1de>
 80075ac:	f04f 0800 	mov.w	r8, #0
 80075b0:	f104 0a1a 	add.w	sl, r4, #26
 80075b4:	e7f2      	b.n	800759c <_printf_float+0x410>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e7df      	b.n	800757a <_printf_float+0x3ee>
 80075ba:	2301      	movs	r3, #1
 80075bc:	464a      	mov	r2, r9
 80075be:	4631      	mov	r1, r6
 80075c0:	4628      	mov	r0, r5
 80075c2:	47b8      	blx	r7
 80075c4:	3001      	adds	r0, #1
 80075c6:	f43f ae3e 	beq.w	8007246 <_printf_float+0xba>
 80075ca:	f108 0801 	add.w	r8, r8, #1
 80075ce:	68e3      	ldr	r3, [r4, #12]
 80075d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075d2:	1a9b      	subs	r3, r3, r2
 80075d4:	4543      	cmp	r3, r8
 80075d6:	dcf0      	bgt.n	80075ba <_printf_float+0x42e>
 80075d8:	e6fc      	b.n	80073d4 <_printf_float+0x248>
 80075da:	f04f 0800 	mov.w	r8, #0
 80075de:	f104 0919 	add.w	r9, r4, #25
 80075e2:	e7f4      	b.n	80075ce <_printf_float+0x442>
 80075e4:	2900      	cmp	r1, #0
 80075e6:	f43f ae8b 	beq.w	8007300 <_printf_float+0x174>
 80075ea:	2300      	movs	r3, #0
 80075ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80075f0:	ab09      	add	r3, sp, #36	; 0x24
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	ec49 8b10 	vmov	d0, r8, r9
 80075f8:	6022      	str	r2, [r4, #0]
 80075fa:	f8cd a004 	str.w	sl, [sp, #4]
 80075fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007602:	4628      	mov	r0, r5
 8007604:	f7ff fd2e 	bl	8007064 <__cvt>
 8007608:	4680      	mov	r8, r0
 800760a:	e648      	b.n	800729e <_printf_float+0x112>

0800760c <_printf_common>:
 800760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	4691      	mov	r9, r2
 8007612:	461f      	mov	r7, r3
 8007614:	688a      	ldr	r2, [r1, #8]
 8007616:	690b      	ldr	r3, [r1, #16]
 8007618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800761c:	4293      	cmp	r3, r2
 800761e:	bfb8      	it	lt
 8007620:	4613      	movlt	r3, r2
 8007622:	f8c9 3000 	str.w	r3, [r9]
 8007626:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800762a:	4606      	mov	r6, r0
 800762c:	460c      	mov	r4, r1
 800762e:	b112      	cbz	r2, 8007636 <_printf_common+0x2a>
 8007630:	3301      	adds	r3, #1
 8007632:	f8c9 3000 	str.w	r3, [r9]
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	0699      	lsls	r1, r3, #26
 800763a:	bf42      	ittt	mi
 800763c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007640:	3302      	addmi	r3, #2
 8007642:	f8c9 3000 	strmi.w	r3, [r9]
 8007646:	6825      	ldr	r5, [r4, #0]
 8007648:	f015 0506 	ands.w	r5, r5, #6
 800764c:	d107      	bne.n	800765e <_printf_common+0x52>
 800764e:	f104 0a19 	add.w	sl, r4, #25
 8007652:	68e3      	ldr	r3, [r4, #12]
 8007654:	f8d9 2000 	ldr.w	r2, [r9]
 8007658:	1a9b      	subs	r3, r3, r2
 800765a:	42ab      	cmp	r3, r5
 800765c:	dc28      	bgt.n	80076b0 <_printf_common+0xa4>
 800765e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007662:	6822      	ldr	r2, [r4, #0]
 8007664:	3300      	adds	r3, #0
 8007666:	bf18      	it	ne
 8007668:	2301      	movne	r3, #1
 800766a:	0692      	lsls	r2, r2, #26
 800766c:	d42d      	bmi.n	80076ca <_printf_common+0xbe>
 800766e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007672:	4639      	mov	r1, r7
 8007674:	4630      	mov	r0, r6
 8007676:	47c0      	blx	r8
 8007678:	3001      	adds	r0, #1
 800767a:	d020      	beq.n	80076be <_printf_common+0xb2>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	68e5      	ldr	r5, [r4, #12]
 8007680:	f8d9 2000 	ldr.w	r2, [r9]
 8007684:	f003 0306 	and.w	r3, r3, #6
 8007688:	2b04      	cmp	r3, #4
 800768a:	bf08      	it	eq
 800768c:	1aad      	subeq	r5, r5, r2
 800768e:	68a3      	ldr	r3, [r4, #8]
 8007690:	6922      	ldr	r2, [r4, #16]
 8007692:	bf0c      	ite	eq
 8007694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007698:	2500      	movne	r5, #0
 800769a:	4293      	cmp	r3, r2
 800769c:	bfc4      	itt	gt
 800769e:	1a9b      	subgt	r3, r3, r2
 80076a0:	18ed      	addgt	r5, r5, r3
 80076a2:	f04f 0900 	mov.w	r9, #0
 80076a6:	341a      	adds	r4, #26
 80076a8:	454d      	cmp	r5, r9
 80076aa:	d11a      	bne.n	80076e2 <_printf_common+0xd6>
 80076ac:	2000      	movs	r0, #0
 80076ae:	e008      	b.n	80076c2 <_printf_common+0xb6>
 80076b0:	2301      	movs	r3, #1
 80076b2:	4652      	mov	r2, sl
 80076b4:	4639      	mov	r1, r7
 80076b6:	4630      	mov	r0, r6
 80076b8:	47c0      	blx	r8
 80076ba:	3001      	adds	r0, #1
 80076bc:	d103      	bne.n	80076c6 <_printf_common+0xba>
 80076be:	f04f 30ff 	mov.w	r0, #4294967295
 80076c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c6:	3501      	adds	r5, #1
 80076c8:	e7c3      	b.n	8007652 <_printf_common+0x46>
 80076ca:	18e1      	adds	r1, r4, r3
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	2030      	movs	r0, #48	; 0x30
 80076d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076d4:	4422      	add	r2, r4
 80076d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076de:	3302      	adds	r3, #2
 80076e0:	e7c5      	b.n	800766e <_printf_common+0x62>
 80076e2:	2301      	movs	r3, #1
 80076e4:	4622      	mov	r2, r4
 80076e6:	4639      	mov	r1, r7
 80076e8:	4630      	mov	r0, r6
 80076ea:	47c0      	blx	r8
 80076ec:	3001      	adds	r0, #1
 80076ee:	d0e6      	beq.n	80076be <_printf_common+0xb2>
 80076f0:	f109 0901 	add.w	r9, r9, #1
 80076f4:	e7d8      	b.n	80076a8 <_printf_common+0x9c>
	...

080076f8 <_printf_i>:
 80076f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007700:	460c      	mov	r4, r1
 8007702:	7e09      	ldrb	r1, [r1, #24]
 8007704:	b085      	sub	sp, #20
 8007706:	296e      	cmp	r1, #110	; 0x6e
 8007708:	4617      	mov	r7, r2
 800770a:	4606      	mov	r6, r0
 800770c:	4698      	mov	r8, r3
 800770e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007710:	f000 80b3 	beq.w	800787a <_printf_i+0x182>
 8007714:	d822      	bhi.n	800775c <_printf_i+0x64>
 8007716:	2963      	cmp	r1, #99	; 0x63
 8007718:	d036      	beq.n	8007788 <_printf_i+0x90>
 800771a:	d80a      	bhi.n	8007732 <_printf_i+0x3a>
 800771c:	2900      	cmp	r1, #0
 800771e:	f000 80b9 	beq.w	8007894 <_printf_i+0x19c>
 8007722:	2958      	cmp	r1, #88	; 0x58
 8007724:	f000 8083 	beq.w	800782e <_printf_i+0x136>
 8007728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800772c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007730:	e032      	b.n	8007798 <_printf_i+0xa0>
 8007732:	2964      	cmp	r1, #100	; 0x64
 8007734:	d001      	beq.n	800773a <_printf_i+0x42>
 8007736:	2969      	cmp	r1, #105	; 0x69
 8007738:	d1f6      	bne.n	8007728 <_printf_i+0x30>
 800773a:	6820      	ldr	r0, [r4, #0]
 800773c:	6813      	ldr	r3, [r2, #0]
 800773e:	0605      	lsls	r5, r0, #24
 8007740:	f103 0104 	add.w	r1, r3, #4
 8007744:	d52a      	bpl.n	800779c <_printf_i+0xa4>
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6011      	str	r1, [r2, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	da03      	bge.n	8007756 <_printf_i+0x5e>
 800774e:	222d      	movs	r2, #45	; 0x2d
 8007750:	425b      	negs	r3, r3
 8007752:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007756:	486f      	ldr	r0, [pc, #444]	; (8007914 <_printf_i+0x21c>)
 8007758:	220a      	movs	r2, #10
 800775a:	e039      	b.n	80077d0 <_printf_i+0xd8>
 800775c:	2973      	cmp	r1, #115	; 0x73
 800775e:	f000 809d 	beq.w	800789c <_printf_i+0x1a4>
 8007762:	d808      	bhi.n	8007776 <_printf_i+0x7e>
 8007764:	296f      	cmp	r1, #111	; 0x6f
 8007766:	d020      	beq.n	80077aa <_printf_i+0xb2>
 8007768:	2970      	cmp	r1, #112	; 0x70
 800776a:	d1dd      	bne.n	8007728 <_printf_i+0x30>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	f043 0320 	orr.w	r3, r3, #32
 8007772:	6023      	str	r3, [r4, #0]
 8007774:	e003      	b.n	800777e <_printf_i+0x86>
 8007776:	2975      	cmp	r1, #117	; 0x75
 8007778:	d017      	beq.n	80077aa <_printf_i+0xb2>
 800777a:	2978      	cmp	r1, #120	; 0x78
 800777c:	d1d4      	bne.n	8007728 <_printf_i+0x30>
 800777e:	2378      	movs	r3, #120	; 0x78
 8007780:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007784:	4864      	ldr	r0, [pc, #400]	; (8007918 <_printf_i+0x220>)
 8007786:	e055      	b.n	8007834 <_printf_i+0x13c>
 8007788:	6813      	ldr	r3, [r2, #0]
 800778a:	1d19      	adds	r1, r3, #4
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6011      	str	r1, [r2, #0]
 8007790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007798:	2301      	movs	r3, #1
 800779a:	e08c      	b.n	80078b6 <_printf_i+0x1be>
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6011      	str	r1, [r2, #0]
 80077a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077a4:	bf18      	it	ne
 80077a6:	b21b      	sxthne	r3, r3
 80077a8:	e7cf      	b.n	800774a <_printf_i+0x52>
 80077aa:	6813      	ldr	r3, [r2, #0]
 80077ac:	6825      	ldr	r5, [r4, #0]
 80077ae:	1d18      	adds	r0, r3, #4
 80077b0:	6010      	str	r0, [r2, #0]
 80077b2:	0628      	lsls	r0, r5, #24
 80077b4:	d501      	bpl.n	80077ba <_printf_i+0xc2>
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	e002      	b.n	80077c0 <_printf_i+0xc8>
 80077ba:	0668      	lsls	r0, r5, #25
 80077bc:	d5fb      	bpl.n	80077b6 <_printf_i+0xbe>
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	4854      	ldr	r0, [pc, #336]	; (8007914 <_printf_i+0x21c>)
 80077c2:	296f      	cmp	r1, #111	; 0x6f
 80077c4:	bf14      	ite	ne
 80077c6:	220a      	movne	r2, #10
 80077c8:	2208      	moveq	r2, #8
 80077ca:	2100      	movs	r1, #0
 80077cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077d0:	6865      	ldr	r5, [r4, #4]
 80077d2:	60a5      	str	r5, [r4, #8]
 80077d4:	2d00      	cmp	r5, #0
 80077d6:	f2c0 8095 	blt.w	8007904 <_printf_i+0x20c>
 80077da:	6821      	ldr	r1, [r4, #0]
 80077dc:	f021 0104 	bic.w	r1, r1, #4
 80077e0:	6021      	str	r1, [r4, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d13d      	bne.n	8007862 <_printf_i+0x16a>
 80077e6:	2d00      	cmp	r5, #0
 80077e8:	f040 808e 	bne.w	8007908 <_printf_i+0x210>
 80077ec:	4665      	mov	r5, ip
 80077ee:	2a08      	cmp	r2, #8
 80077f0:	d10b      	bne.n	800780a <_printf_i+0x112>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	07db      	lsls	r3, r3, #31
 80077f6:	d508      	bpl.n	800780a <_printf_i+0x112>
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	6862      	ldr	r2, [r4, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	bfde      	ittt	le
 8007800:	2330      	movle	r3, #48	; 0x30
 8007802:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007806:	f105 35ff 	addle.w	r5, r5, #4294967295
 800780a:	ebac 0305 	sub.w	r3, ip, r5
 800780e:	6123      	str	r3, [r4, #16]
 8007810:	f8cd 8000 	str.w	r8, [sp]
 8007814:	463b      	mov	r3, r7
 8007816:	aa03      	add	r2, sp, #12
 8007818:	4621      	mov	r1, r4
 800781a:	4630      	mov	r0, r6
 800781c:	f7ff fef6 	bl	800760c <_printf_common>
 8007820:	3001      	adds	r0, #1
 8007822:	d14d      	bne.n	80078c0 <_printf_i+0x1c8>
 8007824:	f04f 30ff 	mov.w	r0, #4294967295
 8007828:	b005      	add	sp, #20
 800782a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800782e:	4839      	ldr	r0, [pc, #228]	; (8007914 <_printf_i+0x21c>)
 8007830:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007834:	6813      	ldr	r3, [r2, #0]
 8007836:	6821      	ldr	r1, [r4, #0]
 8007838:	1d1d      	adds	r5, r3, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6015      	str	r5, [r2, #0]
 800783e:	060a      	lsls	r2, r1, #24
 8007840:	d50b      	bpl.n	800785a <_printf_i+0x162>
 8007842:	07ca      	lsls	r2, r1, #31
 8007844:	bf44      	itt	mi
 8007846:	f041 0120 	orrmi.w	r1, r1, #32
 800784a:	6021      	strmi	r1, [r4, #0]
 800784c:	b91b      	cbnz	r3, 8007856 <_printf_i+0x15e>
 800784e:	6822      	ldr	r2, [r4, #0]
 8007850:	f022 0220 	bic.w	r2, r2, #32
 8007854:	6022      	str	r2, [r4, #0]
 8007856:	2210      	movs	r2, #16
 8007858:	e7b7      	b.n	80077ca <_printf_i+0xd2>
 800785a:	064d      	lsls	r5, r1, #25
 800785c:	bf48      	it	mi
 800785e:	b29b      	uxthmi	r3, r3
 8007860:	e7ef      	b.n	8007842 <_printf_i+0x14a>
 8007862:	4665      	mov	r5, ip
 8007864:	fbb3 f1f2 	udiv	r1, r3, r2
 8007868:	fb02 3311 	mls	r3, r2, r1, r3
 800786c:	5cc3      	ldrb	r3, [r0, r3]
 800786e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007872:	460b      	mov	r3, r1
 8007874:	2900      	cmp	r1, #0
 8007876:	d1f5      	bne.n	8007864 <_printf_i+0x16c>
 8007878:	e7b9      	b.n	80077ee <_printf_i+0xf6>
 800787a:	6813      	ldr	r3, [r2, #0]
 800787c:	6825      	ldr	r5, [r4, #0]
 800787e:	6961      	ldr	r1, [r4, #20]
 8007880:	1d18      	adds	r0, r3, #4
 8007882:	6010      	str	r0, [r2, #0]
 8007884:	0628      	lsls	r0, r5, #24
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	d501      	bpl.n	800788e <_printf_i+0x196>
 800788a:	6019      	str	r1, [r3, #0]
 800788c:	e002      	b.n	8007894 <_printf_i+0x19c>
 800788e:	066a      	lsls	r2, r5, #25
 8007890:	d5fb      	bpl.n	800788a <_printf_i+0x192>
 8007892:	8019      	strh	r1, [r3, #0]
 8007894:	2300      	movs	r3, #0
 8007896:	6123      	str	r3, [r4, #16]
 8007898:	4665      	mov	r5, ip
 800789a:	e7b9      	b.n	8007810 <_printf_i+0x118>
 800789c:	6813      	ldr	r3, [r2, #0]
 800789e:	1d19      	adds	r1, r3, #4
 80078a0:	6011      	str	r1, [r2, #0]
 80078a2:	681d      	ldr	r5, [r3, #0]
 80078a4:	6862      	ldr	r2, [r4, #4]
 80078a6:	2100      	movs	r1, #0
 80078a8:	4628      	mov	r0, r5
 80078aa:	f7f8 fc99 	bl	80001e0 <memchr>
 80078ae:	b108      	cbz	r0, 80078b4 <_printf_i+0x1bc>
 80078b0:	1b40      	subs	r0, r0, r5
 80078b2:	6060      	str	r0, [r4, #4]
 80078b4:	6863      	ldr	r3, [r4, #4]
 80078b6:	6123      	str	r3, [r4, #16]
 80078b8:	2300      	movs	r3, #0
 80078ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078be:	e7a7      	b.n	8007810 <_printf_i+0x118>
 80078c0:	6923      	ldr	r3, [r4, #16]
 80078c2:	462a      	mov	r2, r5
 80078c4:	4639      	mov	r1, r7
 80078c6:	4630      	mov	r0, r6
 80078c8:	47c0      	blx	r8
 80078ca:	3001      	adds	r0, #1
 80078cc:	d0aa      	beq.n	8007824 <_printf_i+0x12c>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	079b      	lsls	r3, r3, #30
 80078d2:	d413      	bmi.n	80078fc <_printf_i+0x204>
 80078d4:	68e0      	ldr	r0, [r4, #12]
 80078d6:	9b03      	ldr	r3, [sp, #12]
 80078d8:	4298      	cmp	r0, r3
 80078da:	bfb8      	it	lt
 80078dc:	4618      	movlt	r0, r3
 80078de:	e7a3      	b.n	8007828 <_printf_i+0x130>
 80078e0:	2301      	movs	r3, #1
 80078e2:	464a      	mov	r2, r9
 80078e4:	4639      	mov	r1, r7
 80078e6:	4630      	mov	r0, r6
 80078e8:	47c0      	blx	r8
 80078ea:	3001      	adds	r0, #1
 80078ec:	d09a      	beq.n	8007824 <_printf_i+0x12c>
 80078ee:	3501      	adds	r5, #1
 80078f0:	68e3      	ldr	r3, [r4, #12]
 80078f2:	9a03      	ldr	r2, [sp, #12]
 80078f4:	1a9b      	subs	r3, r3, r2
 80078f6:	42ab      	cmp	r3, r5
 80078f8:	dcf2      	bgt.n	80078e0 <_printf_i+0x1e8>
 80078fa:	e7eb      	b.n	80078d4 <_printf_i+0x1dc>
 80078fc:	2500      	movs	r5, #0
 80078fe:	f104 0919 	add.w	r9, r4, #25
 8007902:	e7f5      	b.n	80078f0 <_printf_i+0x1f8>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1ac      	bne.n	8007862 <_printf_i+0x16a>
 8007908:	7803      	ldrb	r3, [r0, #0]
 800790a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800790e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007912:	e76c      	b.n	80077ee <_printf_i+0xf6>
 8007914:	0800b7ba 	.word	0x0800b7ba
 8007918:	0800b7cb 	.word	0x0800b7cb

0800791c <_puts_r>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	460e      	mov	r6, r1
 8007920:	4605      	mov	r5, r0
 8007922:	b118      	cbz	r0, 800792c <_puts_r+0x10>
 8007924:	6983      	ldr	r3, [r0, #24]
 8007926:	b90b      	cbnz	r3, 800792c <_puts_r+0x10>
 8007928:	f001 f886 	bl	8008a38 <__sinit>
 800792c:	69ab      	ldr	r3, [r5, #24]
 800792e:	68ac      	ldr	r4, [r5, #8]
 8007930:	b913      	cbnz	r3, 8007938 <_puts_r+0x1c>
 8007932:	4628      	mov	r0, r5
 8007934:	f001 f880 	bl	8008a38 <__sinit>
 8007938:	4b23      	ldr	r3, [pc, #140]	; (80079c8 <_puts_r+0xac>)
 800793a:	429c      	cmp	r4, r3
 800793c:	d117      	bne.n	800796e <_puts_r+0x52>
 800793e:	686c      	ldr	r4, [r5, #4]
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	071b      	lsls	r3, r3, #28
 8007944:	d51d      	bpl.n	8007982 <_puts_r+0x66>
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	b1db      	cbz	r3, 8007982 <_puts_r+0x66>
 800794a:	3e01      	subs	r6, #1
 800794c:	68a3      	ldr	r3, [r4, #8]
 800794e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007952:	3b01      	subs	r3, #1
 8007954:	60a3      	str	r3, [r4, #8]
 8007956:	b9e9      	cbnz	r1, 8007994 <_puts_r+0x78>
 8007958:	2b00      	cmp	r3, #0
 800795a:	da2e      	bge.n	80079ba <_puts_r+0x9e>
 800795c:	4622      	mov	r2, r4
 800795e:	210a      	movs	r1, #10
 8007960:	4628      	mov	r0, r5
 8007962:	f000 f873 	bl	8007a4c <__swbuf_r>
 8007966:	3001      	adds	r0, #1
 8007968:	d011      	beq.n	800798e <_puts_r+0x72>
 800796a:	200a      	movs	r0, #10
 800796c:	e011      	b.n	8007992 <_puts_r+0x76>
 800796e:	4b17      	ldr	r3, [pc, #92]	; (80079cc <_puts_r+0xb0>)
 8007970:	429c      	cmp	r4, r3
 8007972:	d101      	bne.n	8007978 <_puts_r+0x5c>
 8007974:	68ac      	ldr	r4, [r5, #8]
 8007976:	e7e3      	b.n	8007940 <_puts_r+0x24>
 8007978:	4b15      	ldr	r3, [pc, #84]	; (80079d0 <_puts_r+0xb4>)
 800797a:	429c      	cmp	r4, r3
 800797c:	bf08      	it	eq
 800797e:	68ec      	ldreq	r4, [r5, #12]
 8007980:	e7de      	b.n	8007940 <_puts_r+0x24>
 8007982:	4621      	mov	r1, r4
 8007984:	4628      	mov	r0, r5
 8007986:	f000 f8b3 	bl	8007af0 <__swsetup_r>
 800798a:	2800      	cmp	r0, #0
 800798c:	d0dd      	beq.n	800794a <_puts_r+0x2e>
 800798e:	f04f 30ff 	mov.w	r0, #4294967295
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	2b00      	cmp	r3, #0
 8007996:	da04      	bge.n	80079a2 <_puts_r+0x86>
 8007998:	69a2      	ldr	r2, [r4, #24]
 800799a:	429a      	cmp	r2, r3
 800799c:	dc06      	bgt.n	80079ac <_puts_r+0x90>
 800799e:	290a      	cmp	r1, #10
 80079a0:	d004      	beq.n	80079ac <_puts_r+0x90>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	6022      	str	r2, [r4, #0]
 80079a8:	7019      	strb	r1, [r3, #0]
 80079aa:	e7cf      	b.n	800794c <_puts_r+0x30>
 80079ac:	4622      	mov	r2, r4
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 f84c 	bl	8007a4c <__swbuf_r>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d1c9      	bne.n	800794c <_puts_r+0x30>
 80079b8:	e7e9      	b.n	800798e <_puts_r+0x72>
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	200a      	movs	r0, #10
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	6022      	str	r2, [r4, #0]
 80079c2:	7018      	strb	r0, [r3, #0]
 80079c4:	e7e5      	b.n	8007992 <_puts_r+0x76>
 80079c6:	bf00      	nop
 80079c8:	0800b80c 	.word	0x0800b80c
 80079cc:	0800b82c 	.word	0x0800b82c
 80079d0:	0800b7ec 	.word	0x0800b7ec

080079d4 <puts>:
 80079d4:	4b02      	ldr	r3, [pc, #8]	; (80079e0 <puts+0xc>)
 80079d6:	4601      	mov	r1, r0
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	f7ff bf9f 	b.w	800791c <_puts_r>
 80079de:	bf00      	nop
 80079e0:	20000028 	.word	0x20000028

080079e4 <sniprintf>:
 80079e4:	b40c      	push	{r2, r3}
 80079e6:	b530      	push	{r4, r5, lr}
 80079e8:	4b17      	ldr	r3, [pc, #92]	; (8007a48 <sniprintf+0x64>)
 80079ea:	1e0c      	subs	r4, r1, #0
 80079ec:	b09d      	sub	sp, #116	; 0x74
 80079ee:	681d      	ldr	r5, [r3, #0]
 80079f0:	da08      	bge.n	8007a04 <sniprintf+0x20>
 80079f2:	238b      	movs	r3, #139	; 0x8b
 80079f4:	602b      	str	r3, [r5, #0]
 80079f6:	f04f 30ff 	mov.w	r0, #4294967295
 80079fa:	b01d      	add	sp, #116	; 0x74
 80079fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a00:	b002      	add	sp, #8
 8007a02:	4770      	bx	lr
 8007a04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007a08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a0c:	bf14      	ite	ne
 8007a0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a12:	4623      	moveq	r3, r4
 8007a14:	9304      	str	r3, [sp, #16]
 8007a16:	9307      	str	r3, [sp, #28]
 8007a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a1c:	9002      	str	r0, [sp, #8]
 8007a1e:	9006      	str	r0, [sp, #24]
 8007a20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a26:	ab21      	add	r3, sp, #132	; 0x84
 8007a28:	a902      	add	r1, sp, #8
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	f001 fcfd 	bl	800942c <_svfiprintf_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	bfbc      	itt	lt
 8007a36:	238b      	movlt	r3, #139	; 0x8b
 8007a38:	602b      	strlt	r3, [r5, #0]
 8007a3a:	2c00      	cmp	r4, #0
 8007a3c:	d0dd      	beq.n	80079fa <sniprintf+0x16>
 8007a3e:	9b02      	ldr	r3, [sp, #8]
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	e7d9      	b.n	80079fa <sniprintf+0x16>
 8007a46:	bf00      	nop
 8007a48:	20000028 	.word	0x20000028

08007a4c <__swbuf_r>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	460e      	mov	r6, r1
 8007a50:	4614      	mov	r4, r2
 8007a52:	4605      	mov	r5, r0
 8007a54:	b118      	cbz	r0, 8007a5e <__swbuf_r+0x12>
 8007a56:	6983      	ldr	r3, [r0, #24]
 8007a58:	b90b      	cbnz	r3, 8007a5e <__swbuf_r+0x12>
 8007a5a:	f000 ffed 	bl	8008a38 <__sinit>
 8007a5e:	4b21      	ldr	r3, [pc, #132]	; (8007ae4 <__swbuf_r+0x98>)
 8007a60:	429c      	cmp	r4, r3
 8007a62:	d12a      	bne.n	8007aba <__swbuf_r+0x6e>
 8007a64:	686c      	ldr	r4, [r5, #4]
 8007a66:	69a3      	ldr	r3, [r4, #24]
 8007a68:	60a3      	str	r3, [r4, #8]
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	071a      	lsls	r2, r3, #28
 8007a6e:	d52e      	bpl.n	8007ace <__swbuf_r+0x82>
 8007a70:	6923      	ldr	r3, [r4, #16]
 8007a72:	b363      	cbz	r3, 8007ace <__swbuf_r+0x82>
 8007a74:	6923      	ldr	r3, [r4, #16]
 8007a76:	6820      	ldr	r0, [r4, #0]
 8007a78:	1ac0      	subs	r0, r0, r3
 8007a7a:	6963      	ldr	r3, [r4, #20]
 8007a7c:	b2f6      	uxtb	r6, r6
 8007a7e:	4283      	cmp	r3, r0
 8007a80:	4637      	mov	r7, r6
 8007a82:	dc04      	bgt.n	8007a8e <__swbuf_r+0x42>
 8007a84:	4621      	mov	r1, r4
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 ff6c 	bl	8008964 <_fflush_r>
 8007a8c:	bb28      	cbnz	r0, 8007ada <__swbuf_r+0x8e>
 8007a8e:	68a3      	ldr	r3, [r4, #8]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	60a3      	str	r3, [r4, #8]
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	6022      	str	r2, [r4, #0]
 8007a9a:	701e      	strb	r6, [r3, #0]
 8007a9c:	6963      	ldr	r3, [r4, #20]
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	4283      	cmp	r3, r0
 8007aa2:	d004      	beq.n	8007aae <__swbuf_r+0x62>
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	07db      	lsls	r3, r3, #31
 8007aa8:	d519      	bpl.n	8007ade <__swbuf_r+0x92>
 8007aaa:	2e0a      	cmp	r6, #10
 8007aac:	d117      	bne.n	8007ade <__swbuf_r+0x92>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f000 ff57 	bl	8008964 <_fflush_r>
 8007ab6:	b190      	cbz	r0, 8007ade <__swbuf_r+0x92>
 8007ab8:	e00f      	b.n	8007ada <__swbuf_r+0x8e>
 8007aba:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <__swbuf_r+0x9c>)
 8007abc:	429c      	cmp	r4, r3
 8007abe:	d101      	bne.n	8007ac4 <__swbuf_r+0x78>
 8007ac0:	68ac      	ldr	r4, [r5, #8]
 8007ac2:	e7d0      	b.n	8007a66 <__swbuf_r+0x1a>
 8007ac4:	4b09      	ldr	r3, [pc, #36]	; (8007aec <__swbuf_r+0xa0>)
 8007ac6:	429c      	cmp	r4, r3
 8007ac8:	bf08      	it	eq
 8007aca:	68ec      	ldreq	r4, [r5, #12]
 8007acc:	e7cb      	b.n	8007a66 <__swbuf_r+0x1a>
 8007ace:	4621      	mov	r1, r4
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f000 f80d 	bl	8007af0 <__swsetup_r>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d0cc      	beq.n	8007a74 <__swbuf_r+0x28>
 8007ada:	f04f 37ff 	mov.w	r7, #4294967295
 8007ade:	4638      	mov	r0, r7
 8007ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	0800b80c 	.word	0x0800b80c
 8007ae8:	0800b82c 	.word	0x0800b82c
 8007aec:	0800b7ec 	.word	0x0800b7ec

08007af0 <__swsetup_r>:
 8007af0:	4b32      	ldr	r3, [pc, #200]	; (8007bbc <__swsetup_r+0xcc>)
 8007af2:	b570      	push	{r4, r5, r6, lr}
 8007af4:	681d      	ldr	r5, [r3, #0]
 8007af6:	4606      	mov	r6, r0
 8007af8:	460c      	mov	r4, r1
 8007afa:	b125      	cbz	r5, 8007b06 <__swsetup_r+0x16>
 8007afc:	69ab      	ldr	r3, [r5, #24]
 8007afe:	b913      	cbnz	r3, 8007b06 <__swsetup_r+0x16>
 8007b00:	4628      	mov	r0, r5
 8007b02:	f000 ff99 	bl	8008a38 <__sinit>
 8007b06:	4b2e      	ldr	r3, [pc, #184]	; (8007bc0 <__swsetup_r+0xd0>)
 8007b08:	429c      	cmp	r4, r3
 8007b0a:	d10f      	bne.n	8007b2c <__swsetup_r+0x3c>
 8007b0c:	686c      	ldr	r4, [r5, #4]
 8007b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	0715      	lsls	r5, r2, #28
 8007b16:	d42c      	bmi.n	8007b72 <__swsetup_r+0x82>
 8007b18:	06d0      	lsls	r0, r2, #27
 8007b1a:	d411      	bmi.n	8007b40 <__swsetup_r+0x50>
 8007b1c:	2209      	movs	r2, #9
 8007b1e:	6032      	str	r2, [r6, #0]
 8007b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b24:	81a3      	strh	r3, [r4, #12]
 8007b26:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2a:	e03e      	b.n	8007baa <__swsetup_r+0xba>
 8007b2c:	4b25      	ldr	r3, [pc, #148]	; (8007bc4 <__swsetup_r+0xd4>)
 8007b2e:	429c      	cmp	r4, r3
 8007b30:	d101      	bne.n	8007b36 <__swsetup_r+0x46>
 8007b32:	68ac      	ldr	r4, [r5, #8]
 8007b34:	e7eb      	b.n	8007b0e <__swsetup_r+0x1e>
 8007b36:	4b24      	ldr	r3, [pc, #144]	; (8007bc8 <__swsetup_r+0xd8>)
 8007b38:	429c      	cmp	r4, r3
 8007b3a:	bf08      	it	eq
 8007b3c:	68ec      	ldreq	r4, [r5, #12]
 8007b3e:	e7e6      	b.n	8007b0e <__swsetup_r+0x1e>
 8007b40:	0751      	lsls	r1, r2, #29
 8007b42:	d512      	bpl.n	8007b6a <__swsetup_r+0x7a>
 8007b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b46:	b141      	cbz	r1, 8007b5a <__swsetup_r+0x6a>
 8007b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b4c:	4299      	cmp	r1, r3
 8007b4e:	d002      	beq.n	8007b56 <__swsetup_r+0x66>
 8007b50:	4630      	mov	r0, r6
 8007b52:	f001 fb69 	bl	8009228 <_free_r>
 8007b56:	2300      	movs	r3, #0
 8007b58:	6363      	str	r3, [r4, #52]	; 0x34
 8007b5a:	89a3      	ldrh	r3, [r4, #12]
 8007b5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b60:	81a3      	strh	r3, [r4, #12]
 8007b62:	2300      	movs	r3, #0
 8007b64:	6063      	str	r3, [r4, #4]
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	f043 0308 	orr.w	r3, r3, #8
 8007b70:	81a3      	strh	r3, [r4, #12]
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	b94b      	cbnz	r3, 8007b8a <__swsetup_r+0x9a>
 8007b76:	89a3      	ldrh	r3, [r4, #12]
 8007b78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b80:	d003      	beq.n	8007b8a <__swsetup_r+0x9a>
 8007b82:	4621      	mov	r1, r4
 8007b84:	4630      	mov	r0, r6
 8007b86:	f001 f813 	bl	8008bb0 <__smakebuf_r>
 8007b8a:	89a2      	ldrh	r2, [r4, #12]
 8007b8c:	f012 0301 	ands.w	r3, r2, #1
 8007b90:	d00c      	beq.n	8007bac <__swsetup_r+0xbc>
 8007b92:	2300      	movs	r3, #0
 8007b94:	60a3      	str	r3, [r4, #8]
 8007b96:	6963      	ldr	r3, [r4, #20]
 8007b98:	425b      	negs	r3, r3
 8007b9a:	61a3      	str	r3, [r4, #24]
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	b953      	cbnz	r3, 8007bb6 <__swsetup_r+0xc6>
 8007ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ba4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ba8:	d1ba      	bne.n	8007b20 <__swsetup_r+0x30>
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	0792      	lsls	r2, r2, #30
 8007bae:	bf58      	it	pl
 8007bb0:	6963      	ldrpl	r3, [r4, #20]
 8007bb2:	60a3      	str	r3, [r4, #8]
 8007bb4:	e7f2      	b.n	8007b9c <__swsetup_r+0xac>
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	e7f7      	b.n	8007baa <__swsetup_r+0xba>
 8007bba:	bf00      	nop
 8007bbc:	20000028 	.word	0x20000028
 8007bc0:	0800b80c 	.word	0x0800b80c
 8007bc4:	0800b82c 	.word	0x0800b82c
 8007bc8:	0800b7ec 	.word	0x0800b7ec

08007bcc <quorem>:
 8007bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd0:	6903      	ldr	r3, [r0, #16]
 8007bd2:	690c      	ldr	r4, [r1, #16]
 8007bd4:	42a3      	cmp	r3, r4
 8007bd6:	4680      	mov	r8, r0
 8007bd8:	f2c0 8082 	blt.w	8007ce0 <quorem+0x114>
 8007bdc:	3c01      	subs	r4, #1
 8007bde:	f101 0714 	add.w	r7, r1, #20
 8007be2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007be6:	f100 0614 	add.w	r6, r0, #20
 8007bea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007bee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007bf2:	eb06 030c 	add.w	r3, r6, ip
 8007bf6:	3501      	adds	r5, #1
 8007bf8:	eb07 090c 	add.w	r9, r7, ip
 8007bfc:	9301      	str	r3, [sp, #4]
 8007bfe:	fbb0 f5f5 	udiv	r5, r0, r5
 8007c02:	b395      	cbz	r5, 8007c6a <quorem+0x9e>
 8007c04:	f04f 0a00 	mov.w	sl, #0
 8007c08:	4638      	mov	r0, r7
 8007c0a:	46b6      	mov	lr, r6
 8007c0c:	46d3      	mov	fp, sl
 8007c0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c12:	b293      	uxth	r3, r2
 8007c14:	fb05 a303 	mla	r3, r5, r3, sl
 8007c18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	ebab 0303 	sub.w	r3, fp, r3
 8007c22:	0c12      	lsrs	r2, r2, #16
 8007c24:	f8de b000 	ldr.w	fp, [lr]
 8007c28:	fb05 a202 	mla	r2, r5, r2, sl
 8007c2c:	fa13 f38b 	uxtah	r3, r3, fp
 8007c30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007c34:	fa1f fb82 	uxth.w	fp, r2
 8007c38:	f8de 2000 	ldr.w	r2, [lr]
 8007c3c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c4a:	4581      	cmp	r9, r0
 8007c4c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007c50:	f84e 3b04 	str.w	r3, [lr], #4
 8007c54:	d2db      	bcs.n	8007c0e <quorem+0x42>
 8007c56:	f856 300c 	ldr.w	r3, [r6, ip]
 8007c5a:	b933      	cbnz	r3, 8007c6a <quorem+0x9e>
 8007c5c:	9b01      	ldr	r3, [sp, #4]
 8007c5e:	3b04      	subs	r3, #4
 8007c60:	429e      	cmp	r6, r3
 8007c62:	461a      	mov	r2, r3
 8007c64:	d330      	bcc.n	8007cc8 <quorem+0xfc>
 8007c66:	f8c8 4010 	str.w	r4, [r8, #16]
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	f001 fa08 	bl	8009080 <__mcmp>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	db25      	blt.n	8007cc0 <quorem+0xf4>
 8007c74:	3501      	adds	r5, #1
 8007c76:	4630      	mov	r0, r6
 8007c78:	f04f 0c00 	mov.w	ip, #0
 8007c7c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007c80:	f8d0 e000 	ldr.w	lr, [r0]
 8007c84:	b293      	uxth	r3, r2
 8007c86:	ebac 0303 	sub.w	r3, ip, r3
 8007c8a:	0c12      	lsrs	r2, r2, #16
 8007c8c:	fa13 f38e 	uxtah	r3, r3, lr
 8007c90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c9e:	45b9      	cmp	r9, r7
 8007ca0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ca4:	f840 3b04 	str.w	r3, [r0], #4
 8007ca8:	d2e8      	bcs.n	8007c7c <quorem+0xb0>
 8007caa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007cae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007cb2:	b92a      	cbnz	r2, 8007cc0 <quorem+0xf4>
 8007cb4:	3b04      	subs	r3, #4
 8007cb6:	429e      	cmp	r6, r3
 8007cb8:	461a      	mov	r2, r3
 8007cba:	d30b      	bcc.n	8007cd4 <quorem+0x108>
 8007cbc:	f8c8 4010 	str.w	r4, [r8, #16]
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	b003      	add	sp, #12
 8007cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc8:	6812      	ldr	r2, [r2, #0]
 8007cca:	3b04      	subs	r3, #4
 8007ccc:	2a00      	cmp	r2, #0
 8007cce:	d1ca      	bne.n	8007c66 <quorem+0x9a>
 8007cd0:	3c01      	subs	r4, #1
 8007cd2:	e7c5      	b.n	8007c60 <quorem+0x94>
 8007cd4:	6812      	ldr	r2, [r2, #0]
 8007cd6:	3b04      	subs	r3, #4
 8007cd8:	2a00      	cmp	r2, #0
 8007cda:	d1ef      	bne.n	8007cbc <quorem+0xf0>
 8007cdc:	3c01      	subs	r4, #1
 8007cde:	e7ea      	b.n	8007cb6 <quorem+0xea>
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	e7ee      	b.n	8007cc2 <quorem+0xf6>
 8007ce4:	0000      	movs	r0, r0
	...

08007ce8 <_dtoa_r>:
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	ec57 6b10 	vmov	r6, r7, d0
 8007cf0:	b097      	sub	sp, #92	; 0x5c
 8007cf2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cf4:	9106      	str	r1, [sp, #24]
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007cfa:	9312      	str	r3, [sp, #72]	; 0x48
 8007cfc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d00:	e9cd 6700 	strd	r6, r7, [sp]
 8007d04:	b93d      	cbnz	r5, 8007d16 <_dtoa_r+0x2e>
 8007d06:	2010      	movs	r0, #16
 8007d08:	f000 ff92 	bl	8008c30 <malloc>
 8007d0c:	6260      	str	r0, [r4, #36]	; 0x24
 8007d0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d12:	6005      	str	r5, [r0, #0]
 8007d14:	60c5      	str	r5, [r0, #12]
 8007d16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d18:	6819      	ldr	r1, [r3, #0]
 8007d1a:	b151      	cbz	r1, 8007d32 <_dtoa_r+0x4a>
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	604a      	str	r2, [r1, #4]
 8007d20:	2301      	movs	r3, #1
 8007d22:	4093      	lsls	r3, r2
 8007d24:	608b      	str	r3, [r1, #8]
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 ffc9 	bl	8008cbe <_Bfree>
 8007d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	1e3b      	subs	r3, r7, #0
 8007d34:	bfbb      	ittet	lt
 8007d36:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d3a:	9301      	strlt	r3, [sp, #4]
 8007d3c:	2300      	movge	r3, #0
 8007d3e:	2201      	movlt	r2, #1
 8007d40:	bfac      	ite	ge
 8007d42:	f8c8 3000 	strge.w	r3, [r8]
 8007d46:	f8c8 2000 	strlt.w	r2, [r8]
 8007d4a:	4baf      	ldr	r3, [pc, #700]	; (8008008 <_dtoa_r+0x320>)
 8007d4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d50:	ea33 0308 	bics.w	r3, r3, r8
 8007d54:	d114      	bne.n	8007d80 <_dtoa_r+0x98>
 8007d56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d58:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	9b00      	ldr	r3, [sp, #0]
 8007d60:	b923      	cbnz	r3, 8007d6c <_dtoa_r+0x84>
 8007d62:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007d66:	2800      	cmp	r0, #0
 8007d68:	f000 8542 	beq.w	80087f0 <_dtoa_r+0xb08>
 8007d6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d6e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800801c <_dtoa_r+0x334>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 8544 	beq.w	8008800 <_dtoa_r+0xb18>
 8007d78:	f10b 0303 	add.w	r3, fp, #3
 8007d7c:	f000 bd3e 	b.w	80087fc <_dtoa_r+0xb14>
 8007d80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007d84:	2200      	movs	r2, #0
 8007d86:	2300      	movs	r3, #0
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f7f8 fe9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d90:	4681      	mov	r9, r0
 8007d92:	b168      	cbz	r0, 8007db0 <_dtoa_r+0xc8>
 8007d94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d96:	2301      	movs	r3, #1
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 8524 	beq.w	80087ea <_dtoa_r+0xb02>
 8007da2:	4b9a      	ldr	r3, [pc, #616]	; (800800c <_dtoa_r+0x324>)
 8007da4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007da6:	f103 3bff 	add.w	fp, r3, #4294967295
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	f000 bd28 	b.w	8008800 <_dtoa_r+0xb18>
 8007db0:	aa14      	add	r2, sp, #80	; 0x50
 8007db2:	a915      	add	r1, sp, #84	; 0x54
 8007db4:	ec47 6b10 	vmov	d0, r6, r7
 8007db8:	4620      	mov	r0, r4
 8007dba:	f001 f9d8 	bl	800916e <__d2b>
 8007dbe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007dc2:	9004      	str	r0, [sp, #16]
 8007dc4:	2d00      	cmp	r5, #0
 8007dc6:	d07c      	beq.n	8007ec2 <_dtoa_r+0x1da>
 8007dc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007dcc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007dd0:	46b2      	mov	sl, r6
 8007dd2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007dd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dda:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007dde:	2200      	movs	r2, #0
 8007de0:	4b8b      	ldr	r3, [pc, #556]	; (8008010 <_dtoa_r+0x328>)
 8007de2:	4650      	mov	r0, sl
 8007de4:	4659      	mov	r1, fp
 8007de6:	f7f8 fa4f 	bl	8000288 <__aeabi_dsub>
 8007dea:	a381      	add	r3, pc, #516	; (adr r3, 8007ff0 <_dtoa_r+0x308>)
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f7f8 fc02 	bl	80005f8 <__aeabi_dmul>
 8007df4:	a380      	add	r3, pc, #512	; (adr r3, 8007ff8 <_dtoa_r+0x310>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f7f8 fa47 	bl	800028c <__adddf3>
 8007dfe:	4606      	mov	r6, r0
 8007e00:	4628      	mov	r0, r5
 8007e02:	460f      	mov	r7, r1
 8007e04:	f7f8 fb8e 	bl	8000524 <__aeabi_i2d>
 8007e08:	a37d      	add	r3, pc, #500	; (adr r3, 8008000 <_dtoa_r+0x318>)
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	f7f8 fbf3 	bl	80005f8 <__aeabi_dmul>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4630      	mov	r0, r6
 8007e18:	4639      	mov	r1, r7
 8007e1a:	f7f8 fa37 	bl	800028c <__adddf3>
 8007e1e:	4606      	mov	r6, r0
 8007e20:	460f      	mov	r7, r1
 8007e22:	f7f8 fe99 	bl	8000b58 <__aeabi_d2iz>
 8007e26:	2200      	movs	r2, #0
 8007e28:	4682      	mov	sl, r0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	4639      	mov	r1, r7
 8007e30:	f7f8 fe54 	bl	8000adc <__aeabi_dcmplt>
 8007e34:	b148      	cbz	r0, 8007e4a <_dtoa_r+0x162>
 8007e36:	4650      	mov	r0, sl
 8007e38:	f7f8 fb74 	bl	8000524 <__aeabi_i2d>
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	463b      	mov	r3, r7
 8007e40:	f7f8 fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e44:	b908      	cbnz	r0, 8007e4a <_dtoa_r+0x162>
 8007e46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e4a:	f1ba 0f16 	cmp.w	sl, #22
 8007e4e:	d859      	bhi.n	8007f04 <_dtoa_r+0x21c>
 8007e50:	4970      	ldr	r1, [pc, #448]	; (8008014 <_dtoa_r+0x32c>)
 8007e52:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007e56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e5e:	f7f8 fe5b 	bl	8000b18 <__aeabi_dcmpgt>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d050      	beq.n	8007f08 <_dtoa_r+0x220>
 8007e66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e70:	1b5d      	subs	r5, r3, r5
 8007e72:	f1b5 0801 	subs.w	r8, r5, #1
 8007e76:	bf49      	itett	mi
 8007e78:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e7c:	2300      	movpl	r3, #0
 8007e7e:	9305      	strmi	r3, [sp, #20]
 8007e80:	f04f 0800 	movmi.w	r8, #0
 8007e84:	bf58      	it	pl
 8007e86:	9305      	strpl	r3, [sp, #20]
 8007e88:	f1ba 0f00 	cmp.w	sl, #0
 8007e8c:	db3e      	blt.n	8007f0c <_dtoa_r+0x224>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	44d0      	add	r8, sl
 8007e92:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007e96:	9307      	str	r3, [sp, #28]
 8007e98:	9b06      	ldr	r3, [sp, #24]
 8007e9a:	2b09      	cmp	r3, #9
 8007e9c:	f200 8090 	bhi.w	8007fc0 <_dtoa_r+0x2d8>
 8007ea0:	2b05      	cmp	r3, #5
 8007ea2:	bfc4      	itt	gt
 8007ea4:	3b04      	subgt	r3, #4
 8007ea6:	9306      	strgt	r3, [sp, #24]
 8007ea8:	9b06      	ldr	r3, [sp, #24]
 8007eaa:	f1a3 0302 	sub.w	r3, r3, #2
 8007eae:	bfcc      	ite	gt
 8007eb0:	2500      	movgt	r5, #0
 8007eb2:	2501      	movle	r5, #1
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	f200 808f 	bhi.w	8007fd8 <_dtoa_r+0x2f0>
 8007eba:	e8df f003 	tbb	[pc, r3]
 8007ebe:	7f7d      	.short	0x7f7d
 8007ec0:	7131      	.short	0x7131
 8007ec2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007ec6:	441d      	add	r5, r3
 8007ec8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007ecc:	2820      	cmp	r0, #32
 8007ece:	dd13      	ble.n	8007ef8 <_dtoa_r+0x210>
 8007ed0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007ed4:	9b00      	ldr	r3, [sp, #0]
 8007ed6:	fa08 f800 	lsl.w	r8, r8, r0
 8007eda:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007ede:	fa23 f000 	lsr.w	r0, r3, r0
 8007ee2:	ea48 0000 	orr.w	r0, r8, r0
 8007ee6:	f7f8 fb0d 	bl	8000504 <__aeabi_ui2d>
 8007eea:	2301      	movs	r3, #1
 8007eec:	4682      	mov	sl, r0
 8007eee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007ef2:	3d01      	subs	r5, #1
 8007ef4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ef6:	e772      	b.n	8007dde <_dtoa_r+0xf6>
 8007ef8:	9b00      	ldr	r3, [sp, #0]
 8007efa:	f1c0 0020 	rsb	r0, r0, #32
 8007efe:	fa03 f000 	lsl.w	r0, r3, r0
 8007f02:	e7f0      	b.n	8007ee6 <_dtoa_r+0x1fe>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e7b1      	b.n	8007e6c <_dtoa_r+0x184>
 8007f08:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f0a:	e7b0      	b.n	8007e6e <_dtoa_r+0x186>
 8007f0c:	9b05      	ldr	r3, [sp, #20]
 8007f0e:	eba3 030a 	sub.w	r3, r3, sl
 8007f12:	9305      	str	r3, [sp, #20]
 8007f14:	f1ca 0300 	rsb	r3, sl, #0
 8007f18:	9307      	str	r3, [sp, #28]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	930e      	str	r3, [sp, #56]	; 0x38
 8007f1e:	e7bb      	b.n	8007e98 <_dtoa_r+0x1b0>
 8007f20:	2301      	movs	r3, #1
 8007f22:	930a      	str	r3, [sp, #40]	; 0x28
 8007f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	dd59      	ble.n	8007fde <_dtoa_r+0x2f6>
 8007f2a:	9302      	str	r3, [sp, #8]
 8007f2c:	4699      	mov	r9, r3
 8007f2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f30:	2200      	movs	r2, #0
 8007f32:	6072      	str	r2, [r6, #4]
 8007f34:	2204      	movs	r2, #4
 8007f36:	f102 0014 	add.w	r0, r2, #20
 8007f3a:	4298      	cmp	r0, r3
 8007f3c:	6871      	ldr	r1, [r6, #4]
 8007f3e:	d953      	bls.n	8007fe8 <_dtoa_r+0x300>
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 fe88 	bl	8008c56 <_Balloc>
 8007f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f48:	6030      	str	r0, [r6, #0]
 8007f4a:	f1b9 0f0e 	cmp.w	r9, #14
 8007f4e:	f8d3 b000 	ldr.w	fp, [r3]
 8007f52:	f200 80e6 	bhi.w	8008122 <_dtoa_r+0x43a>
 8007f56:	2d00      	cmp	r5, #0
 8007f58:	f000 80e3 	beq.w	8008122 <_dtoa_r+0x43a>
 8007f5c:	ed9d 7b00 	vldr	d7, [sp]
 8007f60:	f1ba 0f00 	cmp.w	sl, #0
 8007f64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007f68:	dd74      	ble.n	8008054 <_dtoa_r+0x36c>
 8007f6a:	4a2a      	ldr	r2, [pc, #168]	; (8008014 <_dtoa_r+0x32c>)
 8007f6c:	f00a 030f 	and.w	r3, sl, #15
 8007f70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f74:	ed93 7b00 	vldr	d7, [r3]
 8007f78:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007f7c:	06f0      	lsls	r0, r6, #27
 8007f7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007f82:	d565      	bpl.n	8008050 <_dtoa_r+0x368>
 8007f84:	4b24      	ldr	r3, [pc, #144]	; (8008018 <_dtoa_r+0x330>)
 8007f86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f8e:	f7f8 fc5d 	bl	800084c <__aeabi_ddiv>
 8007f92:	e9cd 0100 	strd	r0, r1, [sp]
 8007f96:	f006 060f 	and.w	r6, r6, #15
 8007f9a:	2503      	movs	r5, #3
 8007f9c:	4f1e      	ldr	r7, [pc, #120]	; (8008018 <_dtoa_r+0x330>)
 8007f9e:	e04c      	b.n	800803a <_dtoa_r+0x352>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8007fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fa6:	4453      	add	r3, sl
 8007fa8:	f103 0901 	add.w	r9, r3, #1
 8007fac:	9302      	str	r3, [sp, #8]
 8007fae:	464b      	mov	r3, r9
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	bfb8      	it	lt
 8007fb4:	2301      	movlt	r3, #1
 8007fb6:	e7ba      	b.n	8007f2e <_dtoa_r+0x246>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e7b2      	b.n	8007f22 <_dtoa_r+0x23a>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e7f0      	b.n	8007fa2 <_dtoa_r+0x2ba>
 8007fc0:	2501      	movs	r5, #1
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9306      	str	r3, [sp, #24]
 8007fc6:	950a      	str	r5, [sp, #40]	; 0x28
 8007fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fcc:	9302      	str	r3, [sp, #8]
 8007fce:	4699      	mov	r9, r3
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2312      	movs	r3, #18
 8007fd4:	920b      	str	r2, [sp, #44]	; 0x2c
 8007fd6:	e7aa      	b.n	8007f2e <_dtoa_r+0x246>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	930a      	str	r3, [sp, #40]	; 0x28
 8007fdc:	e7f4      	b.n	8007fc8 <_dtoa_r+0x2e0>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	9302      	str	r3, [sp, #8]
 8007fe2:	4699      	mov	r9, r3
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	e7f5      	b.n	8007fd4 <_dtoa_r+0x2ec>
 8007fe8:	3101      	adds	r1, #1
 8007fea:	6071      	str	r1, [r6, #4]
 8007fec:	0052      	lsls	r2, r2, #1
 8007fee:	e7a2      	b.n	8007f36 <_dtoa_r+0x24e>
 8007ff0:	636f4361 	.word	0x636f4361
 8007ff4:	3fd287a7 	.word	0x3fd287a7
 8007ff8:	8b60c8b3 	.word	0x8b60c8b3
 8007ffc:	3fc68a28 	.word	0x3fc68a28
 8008000:	509f79fb 	.word	0x509f79fb
 8008004:	3fd34413 	.word	0x3fd34413
 8008008:	7ff00000 	.word	0x7ff00000
 800800c:	0800b7b9 	.word	0x0800b7b9
 8008010:	3ff80000 	.word	0x3ff80000
 8008014:	0800b878 	.word	0x0800b878
 8008018:	0800b850 	.word	0x0800b850
 800801c:	0800b7e5 	.word	0x0800b7e5
 8008020:	07f1      	lsls	r1, r6, #31
 8008022:	d508      	bpl.n	8008036 <_dtoa_r+0x34e>
 8008024:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800802c:	f7f8 fae4 	bl	80005f8 <__aeabi_dmul>
 8008030:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008034:	3501      	adds	r5, #1
 8008036:	1076      	asrs	r6, r6, #1
 8008038:	3708      	adds	r7, #8
 800803a:	2e00      	cmp	r6, #0
 800803c:	d1f0      	bne.n	8008020 <_dtoa_r+0x338>
 800803e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008042:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008046:	f7f8 fc01 	bl	800084c <__aeabi_ddiv>
 800804a:	e9cd 0100 	strd	r0, r1, [sp]
 800804e:	e01a      	b.n	8008086 <_dtoa_r+0x39e>
 8008050:	2502      	movs	r5, #2
 8008052:	e7a3      	b.n	8007f9c <_dtoa_r+0x2b4>
 8008054:	f000 80a0 	beq.w	8008198 <_dtoa_r+0x4b0>
 8008058:	f1ca 0600 	rsb	r6, sl, #0
 800805c:	4b9f      	ldr	r3, [pc, #636]	; (80082dc <_dtoa_r+0x5f4>)
 800805e:	4fa0      	ldr	r7, [pc, #640]	; (80082e0 <_dtoa_r+0x5f8>)
 8008060:	f006 020f 	and.w	r2, r6, #15
 8008064:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008070:	f7f8 fac2 	bl	80005f8 <__aeabi_dmul>
 8008074:	e9cd 0100 	strd	r0, r1, [sp]
 8008078:	1136      	asrs	r6, r6, #4
 800807a:	2300      	movs	r3, #0
 800807c:	2502      	movs	r5, #2
 800807e:	2e00      	cmp	r6, #0
 8008080:	d17f      	bne.n	8008182 <_dtoa_r+0x49a>
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1e1      	bne.n	800804a <_dtoa_r+0x362>
 8008086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8087 	beq.w	800819c <_dtoa_r+0x4b4>
 800808e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008092:	2200      	movs	r2, #0
 8008094:	4b93      	ldr	r3, [pc, #588]	; (80082e4 <_dtoa_r+0x5fc>)
 8008096:	4630      	mov	r0, r6
 8008098:	4639      	mov	r1, r7
 800809a:	f7f8 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d07c      	beq.n	800819c <_dtoa_r+0x4b4>
 80080a2:	f1b9 0f00 	cmp.w	r9, #0
 80080a6:	d079      	beq.n	800819c <_dtoa_r+0x4b4>
 80080a8:	9b02      	ldr	r3, [sp, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dd35      	ble.n	800811a <_dtoa_r+0x432>
 80080ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80080b2:	9308      	str	r3, [sp, #32]
 80080b4:	4639      	mov	r1, r7
 80080b6:	2200      	movs	r2, #0
 80080b8:	4b8b      	ldr	r3, [pc, #556]	; (80082e8 <_dtoa_r+0x600>)
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7f8 fa9c 	bl	80005f8 <__aeabi_dmul>
 80080c0:	e9cd 0100 	strd	r0, r1, [sp]
 80080c4:	9f02      	ldr	r7, [sp, #8]
 80080c6:	3501      	adds	r5, #1
 80080c8:	4628      	mov	r0, r5
 80080ca:	f7f8 fa2b 	bl	8000524 <__aeabi_i2d>
 80080ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080d2:	f7f8 fa91 	bl	80005f8 <__aeabi_dmul>
 80080d6:	2200      	movs	r2, #0
 80080d8:	4b84      	ldr	r3, [pc, #528]	; (80082ec <_dtoa_r+0x604>)
 80080da:	f7f8 f8d7 	bl	800028c <__adddf3>
 80080de:	4605      	mov	r5, r0
 80080e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80080e4:	2f00      	cmp	r7, #0
 80080e6:	d15d      	bne.n	80081a4 <_dtoa_r+0x4bc>
 80080e8:	2200      	movs	r2, #0
 80080ea:	4b81      	ldr	r3, [pc, #516]	; (80082f0 <_dtoa_r+0x608>)
 80080ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080f0:	f7f8 f8ca 	bl	8000288 <__aeabi_dsub>
 80080f4:	462a      	mov	r2, r5
 80080f6:	4633      	mov	r3, r6
 80080f8:	e9cd 0100 	strd	r0, r1, [sp]
 80080fc:	f7f8 fd0c 	bl	8000b18 <__aeabi_dcmpgt>
 8008100:	2800      	cmp	r0, #0
 8008102:	f040 8288 	bne.w	8008616 <_dtoa_r+0x92e>
 8008106:	462a      	mov	r2, r5
 8008108:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800810c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008110:	f7f8 fce4 	bl	8000adc <__aeabi_dcmplt>
 8008114:	2800      	cmp	r0, #0
 8008116:	f040 827c 	bne.w	8008612 <_dtoa_r+0x92a>
 800811a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800811e:	e9cd 2300 	strd	r2, r3, [sp]
 8008122:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008124:	2b00      	cmp	r3, #0
 8008126:	f2c0 8150 	blt.w	80083ca <_dtoa_r+0x6e2>
 800812a:	f1ba 0f0e 	cmp.w	sl, #14
 800812e:	f300 814c 	bgt.w	80083ca <_dtoa_r+0x6e2>
 8008132:	4b6a      	ldr	r3, [pc, #424]	; (80082dc <_dtoa_r+0x5f4>)
 8008134:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008138:	ed93 7b00 	vldr	d7, [r3]
 800813c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800813e:	2b00      	cmp	r3, #0
 8008140:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008144:	f280 80d8 	bge.w	80082f8 <_dtoa_r+0x610>
 8008148:	f1b9 0f00 	cmp.w	r9, #0
 800814c:	f300 80d4 	bgt.w	80082f8 <_dtoa_r+0x610>
 8008150:	f040 825e 	bne.w	8008610 <_dtoa_r+0x928>
 8008154:	2200      	movs	r2, #0
 8008156:	4b66      	ldr	r3, [pc, #408]	; (80082f0 <_dtoa_r+0x608>)
 8008158:	ec51 0b17 	vmov	r0, r1, d7
 800815c:	f7f8 fa4c 	bl	80005f8 <__aeabi_dmul>
 8008160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008164:	f7f8 fcce 	bl	8000b04 <__aeabi_dcmpge>
 8008168:	464f      	mov	r7, r9
 800816a:	464e      	mov	r6, r9
 800816c:	2800      	cmp	r0, #0
 800816e:	f040 8234 	bne.w	80085da <_dtoa_r+0x8f2>
 8008172:	2331      	movs	r3, #49	; 0x31
 8008174:	f10b 0501 	add.w	r5, fp, #1
 8008178:	f88b 3000 	strb.w	r3, [fp]
 800817c:	f10a 0a01 	add.w	sl, sl, #1
 8008180:	e22f      	b.n	80085e2 <_dtoa_r+0x8fa>
 8008182:	07f2      	lsls	r2, r6, #31
 8008184:	d505      	bpl.n	8008192 <_dtoa_r+0x4aa>
 8008186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800818a:	f7f8 fa35 	bl	80005f8 <__aeabi_dmul>
 800818e:	3501      	adds	r5, #1
 8008190:	2301      	movs	r3, #1
 8008192:	1076      	asrs	r6, r6, #1
 8008194:	3708      	adds	r7, #8
 8008196:	e772      	b.n	800807e <_dtoa_r+0x396>
 8008198:	2502      	movs	r5, #2
 800819a:	e774      	b.n	8008086 <_dtoa_r+0x39e>
 800819c:	f8cd a020 	str.w	sl, [sp, #32]
 80081a0:	464f      	mov	r7, r9
 80081a2:	e791      	b.n	80080c8 <_dtoa_r+0x3e0>
 80081a4:	4b4d      	ldr	r3, [pc, #308]	; (80082dc <_dtoa_r+0x5f4>)
 80081a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80081ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d047      	beq.n	8008244 <_dtoa_r+0x55c>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	2000      	movs	r0, #0
 80081ba:	494e      	ldr	r1, [pc, #312]	; (80082f4 <_dtoa_r+0x60c>)
 80081bc:	f7f8 fb46 	bl	800084c <__aeabi_ddiv>
 80081c0:	462a      	mov	r2, r5
 80081c2:	4633      	mov	r3, r6
 80081c4:	f7f8 f860 	bl	8000288 <__aeabi_dsub>
 80081c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80081cc:	465d      	mov	r5, fp
 80081ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081d2:	f7f8 fcc1 	bl	8000b58 <__aeabi_d2iz>
 80081d6:	4606      	mov	r6, r0
 80081d8:	f7f8 f9a4 	bl	8000524 <__aeabi_i2d>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081e4:	f7f8 f850 	bl	8000288 <__aeabi_dsub>
 80081e8:	3630      	adds	r6, #48	; 0x30
 80081ea:	f805 6b01 	strb.w	r6, [r5], #1
 80081ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80081f2:	e9cd 0100 	strd	r0, r1, [sp]
 80081f6:	f7f8 fc71 	bl	8000adc <__aeabi_dcmplt>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d163      	bne.n	80082c6 <_dtoa_r+0x5de>
 80081fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008202:	2000      	movs	r0, #0
 8008204:	4937      	ldr	r1, [pc, #220]	; (80082e4 <_dtoa_r+0x5fc>)
 8008206:	f7f8 f83f 	bl	8000288 <__aeabi_dsub>
 800820a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800820e:	f7f8 fc65 	bl	8000adc <__aeabi_dcmplt>
 8008212:	2800      	cmp	r0, #0
 8008214:	f040 80b7 	bne.w	8008386 <_dtoa_r+0x69e>
 8008218:	eba5 030b 	sub.w	r3, r5, fp
 800821c:	429f      	cmp	r7, r3
 800821e:	f77f af7c 	ble.w	800811a <_dtoa_r+0x432>
 8008222:	2200      	movs	r2, #0
 8008224:	4b30      	ldr	r3, [pc, #192]	; (80082e8 <_dtoa_r+0x600>)
 8008226:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800822a:	f7f8 f9e5 	bl	80005f8 <__aeabi_dmul>
 800822e:	2200      	movs	r2, #0
 8008230:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008234:	4b2c      	ldr	r3, [pc, #176]	; (80082e8 <_dtoa_r+0x600>)
 8008236:	e9dd 0100 	ldrd	r0, r1, [sp]
 800823a:	f7f8 f9dd 	bl	80005f8 <__aeabi_dmul>
 800823e:	e9cd 0100 	strd	r0, r1, [sp]
 8008242:	e7c4      	b.n	80081ce <_dtoa_r+0x4e6>
 8008244:	462a      	mov	r2, r5
 8008246:	4633      	mov	r3, r6
 8008248:	f7f8 f9d6 	bl	80005f8 <__aeabi_dmul>
 800824c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008250:	eb0b 0507 	add.w	r5, fp, r7
 8008254:	465e      	mov	r6, fp
 8008256:	e9dd 0100 	ldrd	r0, r1, [sp]
 800825a:	f7f8 fc7d 	bl	8000b58 <__aeabi_d2iz>
 800825e:	4607      	mov	r7, r0
 8008260:	f7f8 f960 	bl	8000524 <__aeabi_i2d>
 8008264:	3730      	adds	r7, #48	; 0x30
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800826e:	f7f8 f80b 	bl	8000288 <__aeabi_dsub>
 8008272:	f806 7b01 	strb.w	r7, [r6], #1
 8008276:	42ae      	cmp	r6, r5
 8008278:	e9cd 0100 	strd	r0, r1, [sp]
 800827c:	f04f 0200 	mov.w	r2, #0
 8008280:	d126      	bne.n	80082d0 <_dtoa_r+0x5e8>
 8008282:	4b1c      	ldr	r3, [pc, #112]	; (80082f4 <_dtoa_r+0x60c>)
 8008284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008288:	f7f8 f800 	bl	800028c <__adddf3>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008294:	f7f8 fc40 	bl	8000b18 <__aeabi_dcmpgt>
 8008298:	2800      	cmp	r0, #0
 800829a:	d174      	bne.n	8008386 <_dtoa_r+0x69e>
 800829c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082a0:	2000      	movs	r0, #0
 80082a2:	4914      	ldr	r1, [pc, #80]	; (80082f4 <_dtoa_r+0x60c>)
 80082a4:	f7f7 fff0 	bl	8000288 <__aeabi_dsub>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082b0:	f7f8 fc14 	bl	8000adc <__aeabi_dcmplt>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	f43f af30 	beq.w	800811a <_dtoa_r+0x432>
 80082ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082be:	2b30      	cmp	r3, #48	; 0x30
 80082c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80082c4:	d002      	beq.n	80082cc <_dtoa_r+0x5e4>
 80082c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80082ca:	e04a      	b.n	8008362 <_dtoa_r+0x67a>
 80082cc:	4615      	mov	r5, r2
 80082ce:	e7f4      	b.n	80082ba <_dtoa_r+0x5d2>
 80082d0:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <_dtoa_r+0x600>)
 80082d2:	f7f8 f991 	bl	80005f8 <__aeabi_dmul>
 80082d6:	e9cd 0100 	strd	r0, r1, [sp]
 80082da:	e7bc      	b.n	8008256 <_dtoa_r+0x56e>
 80082dc:	0800b878 	.word	0x0800b878
 80082e0:	0800b850 	.word	0x0800b850
 80082e4:	3ff00000 	.word	0x3ff00000
 80082e8:	40240000 	.word	0x40240000
 80082ec:	401c0000 	.word	0x401c0000
 80082f0:	40140000 	.word	0x40140000
 80082f4:	3fe00000 	.word	0x3fe00000
 80082f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80082fc:	465d      	mov	r5, fp
 80082fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008302:	4630      	mov	r0, r6
 8008304:	4639      	mov	r1, r7
 8008306:	f7f8 faa1 	bl	800084c <__aeabi_ddiv>
 800830a:	f7f8 fc25 	bl	8000b58 <__aeabi_d2iz>
 800830e:	4680      	mov	r8, r0
 8008310:	f7f8 f908 	bl	8000524 <__aeabi_i2d>
 8008314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008318:	f7f8 f96e 	bl	80005f8 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4630      	mov	r0, r6
 8008322:	4639      	mov	r1, r7
 8008324:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008328:	f7f7 ffae 	bl	8000288 <__aeabi_dsub>
 800832c:	f805 6b01 	strb.w	r6, [r5], #1
 8008330:	eba5 060b 	sub.w	r6, r5, fp
 8008334:	45b1      	cmp	r9, r6
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	d139      	bne.n	80083b0 <_dtoa_r+0x6c8>
 800833c:	f7f7 ffa6 	bl	800028c <__adddf3>
 8008340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008344:	4606      	mov	r6, r0
 8008346:	460f      	mov	r7, r1
 8008348:	f7f8 fbe6 	bl	8000b18 <__aeabi_dcmpgt>
 800834c:	b9c8      	cbnz	r0, 8008382 <_dtoa_r+0x69a>
 800834e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008352:	4630      	mov	r0, r6
 8008354:	4639      	mov	r1, r7
 8008356:	f7f8 fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800835a:	b110      	cbz	r0, 8008362 <_dtoa_r+0x67a>
 800835c:	f018 0f01 	tst.w	r8, #1
 8008360:	d10f      	bne.n	8008382 <_dtoa_r+0x69a>
 8008362:	9904      	ldr	r1, [sp, #16]
 8008364:	4620      	mov	r0, r4
 8008366:	f000 fcaa 	bl	8008cbe <_Bfree>
 800836a:	2300      	movs	r3, #0
 800836c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800836e:	702b      	strb	r3, [r5, #0]
 8008370:	f10a 0301 	add.w	r3, sl, #1
 8008374:	6013      	str	r3, [r2, #0]
 8008376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 8241 	beq.w	8008800 <_dtoa_r+0xb18>
 800837e:	601d      	str	r5, [r3, #0]
 8008380:	e23e      	b.n	8008800 <_dtoa_r+0xb18>
 8008382:	f8cd a020 	str.w	sl, [sp, #32]
 8008386:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800838a:	2a39      	cmp	r2, #57	; 0x39
 800838c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008390:	d108      	bne.n	80083a4 <_dtoa_r+0x6bc>
 8008392:	459b      	cmp	fp, r3
 8008394:	d10a      	bne.n	80083ac <_dtoa_r+0x6c4>
 8008396:	9b08      	ldr	r3, [sp, #32]
 8008398:	3301      	adds	r3, #1
 800839a:	9308      	str	r3, [sp, #32]
 800839c:	2330      	movs	r3, #48	; 0x30
 800839e:	f88b 3000 	strb.w	r3, [fp]
 80083a2:	465b      	mov	r3, fp
 80083a4:	781a      	ldrb	r2, [r3, #0]
 80083a6:	3201      	adds	r2, #1
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	e78c      	b.n	80082c6 <_dtoa_r+0x5de>
 80083ac:	461d      	mov	r5, r3
 80083ae:	e7ea      	b.n	8008386 <_dtoa_r+0x69e>
 80083b0:	2200      	movs	r2, #0
 80083b2:	4b9b      	ldr	r3, [pc, #620]	; (8008620 <_dtoa_r+0x938>)
 80083b4:	f7f8 f920 	bl	80005f8 <__aeabi_dmul>
 80083b8:	2200      	movs	r2, #0
 80083ba:	2300      	movs	r3, #0
 80083bc:	4606      	mov	r6, r0
 80083be:	460f      	mov	r7, r1
 80083c0:	f7f8 fb82 	bl	8000ac8 <__aeabi_dcmpeq>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d09a      	beq.n	80082fe <_dtoa_r+0x616>
 80083c8:	e7cb      	b.n	8008362 <_dtoa_r+0x67a>
 80083ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083cc:	2a00      	cmp	r2, #0
 80083ce:	f000 808b 	beq.w	80084e8 <_dtoa_r+0x800>
 80083d2:	9a06      	ldr	r2, [sp, #24]
 80083d4:	2a01      	cmp	r2, #1
 80083d6:	dc6e      	bgt.n	80084b6 <_dtoa_r+0x7ce>
 80083d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083da:	2a00      	cmp	r2, #0
 80083dc:	d067      	beq.n	80084ae <_dtoa_r+0x7c6>
 80083de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083e2:	9f07      	ldr	r7, [sp, #28]
 80083e4:	9d05      	ldr	r5, [sp, #20]
 80083e6:	9a05      	ldr	r2, [sp, #20]
 80083e8:	2101      	movs	r1, #1
 80083ea:	441a      	add	r2, r3
 80083ec:	4620      	mov	r0, r4
 80083ee:	9205      	str	r2, [sp, #20]
 80083f0:	4498      	add	r8, r3
 80083f2:	f000 fd04 	bl	8008dfe <__i2b>
 80083f6:	4606      	mov	r6, r0
 80083f8:	2d00      	cmp	r5, #0
 80083fa:	dd0c      	ble.n	8008416 <_dtoa_r+0x72e>
 80083fc:	f1b8 0f00 	cmp.w	r8, #0
 8008400:	dd09      	ble.n	8008416 <_dtoa_r+0x72e>
 8008402:	4545      	cmp	r5, r8
 8008404:	9a05      	ldr	r2, [sp, #20]
 8008406:	462b      	mov	r3, r5
 8008408:	bfa8      	it	ge
 800840a:	4643      	movge	r3, r8
 800840c:	1ad2      	subs	r2, r2, r3
 800840e:	9205      	str	r2, [sp, #20]
 8008410:	1aed      	subs	r5, r5, r3
 8008412:	eba8 0803 	sub.w	r8, r8, r3
 8008416:	9b07      	ldr	r3, [sp, #28]
 8008418:	b1eb      	cbz	r3, 8008456 <_dtoa_r+0x76e>
 800841a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841c:	2b00      	cmp	r3, #0
 800841e:	d067      	beq.n	80084f0 <_dtoa_r+0x808>
 8008420:	b18f      	cbz	r7, 8008446 <_dtoa_r+0x75e>
 8008422:	4631      	mov	r1, r6
 8008424:	463a      	mov	r2, r7
 8008426:	4620      	mov	r0, r4
 8008428:	f000 fd88 	bl	8008f3c <__pow5mult>
 800842c:	9a04      	ldr	r2, [sp, #16]
 800842e:	4601      	mov	r1, r0
 8008430:	4606      	mov	r6, r0
 8008432:	4620      	mov	r0, r4
 8008434:	f000 fcec 	bl	8008e10 <__multiply>
 8008438:	9904      	ldr	r1, [sp, #16]
 800843a:	9008      	str	r0, [sp, #32]
 800843c:	4620      	mov	r0, r4
 800843e:	f000 fc3e 	bl	8008cbe <_Bfree>
 8008442:	9b08      	ldr	r3, [sp, #32]
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	9b07      	ldr	r3, [sp, #28]
 8008448:	1bda      	subs	r2, r3, r7
 800844a:	d004      	beq.n	8008456 <_dtoa_r+0x76e>
 800844c:	9904      	ldr	r1, [sp, #16]
 800844e:	4620      	mov	r0, r4
 8008450:	f000 fd74 	bl	8008f3c <__pow5mult>
 8008454:	9004      	str	r0, [sp, #16]
 8008456:	2101      	movs	r1, #1
 8008458:	4620      	mov	r0, r4
 800845a:	f000 fcd0 	bl	8008dfe <__i2b>
 800845e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008460:	4607      	mov	r7, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 81d0 	beq.w	8008808 <_dtoa_r+0xb20>
 8008468:	461a      	mov	r2, r3
 800846a:	4601      	mov	r1, r0
 800846c:	4620      	mov	r0, r4
 800846e:	f000 fd65 	bl	8008f3c <__pow5mult>
 8008472:	9b06      	ldr	r3, [sp, #24]
 8008474:	2b01      	cmp	r3, #1
 8008476:	4607      	mov	r7, r0
 8008478:	dc40      	bgt.n	80084fc <_dtoa_r+0x814>
 800847a:	9b00      	ldr	r3, [sp, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d139      	bne.n	80084f4 <_dtoa_r+0x80c>
 8008480:	9b01      	ldr	r3, [sp, #4]
 8008482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008486:	2b00      	cmp	r3, #0
 8008488:	d136      	bne.n	80084f8 <_dtoa_r+0x810>
 800848a:	9b01      	ldr	r3, [sp, #4]
 800848c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008490:	0d1b      	lsrs	r3, r3, #20
 8008492:	051b      	lsls	r3, r3, #20
 8008494:	b12b      	cbz	r3, 80084a2 <_dtoa_r+0x7ba>
 8008496:	9b05      	ldr	r3, [sp, #20]
 8008498:	3301      	adds	r3, #1
 800849a:	9305      	str	r3, [sp, #20]
 800849c:	f108 0801 	add.w	r8, r8, #1
 80084a0:	2301      	movs	r3, #1
 80084a2:	9307      	str	r3, [sp, #28]
 80084a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d12a      	bne.n	8008500 <_dtoa_r+0x818>
 80084aa:	2001      	movs	r0, #1
 80084ac:	e030      	b.n	8008510 <_dtoa_r+0x828>
 80084ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80084b4:	e795      	b.n	80083e2 <_dtoa_r+0x6fa>
 80084b6:	9b07      	ldr	r3, [sp, #28]
 80084b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80084bc:	42bb      	cmp	r3, r7
 80084be:	bfbf      	itttt	lt
 80084c0:	9b07      	ldrlt	r3, [sp, #28]
 80084c2:	9707      	strlt	r7, [sp, #28]
 80084c4:	1afa      	sublt	r2, r7, r3
 80084c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80084c8:	bfbb      	ittet	lt
 80084ca:	189b      	addlt	r3, r3, r2
 80084cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80084ce:	1bdf      	subge	r7, r3, r7
 80084d0:	2700      	movlt	r7, #0
 80084d2:	f1b9 0f00 	cmp.w	r9, #0
 80084d6:	bfb5      	itete	lt
 80084d8:	9b05      	ldrlt	r3, [sp, #20]
 80084da:	9d05      	ldrge	r5, [sp, #20]
 80084dc:	eba3 0509 	sublt.w	r5, r3, r9
 80084e0:	464b      	movge	r3, r9
 80084e2:	bfb8      	it	lt
 80084e4:	2300      	movlt	r3, #0
 80084e6:	e77e      	b.n	80083e6 <_dtoa_r+0x6fe>
 80084e8:	9f07      	ldr	r7, [sp, #28]
 80084ea:	9d05      	ldr	r5, [sp, #20]
 80084ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80084ee:	e783      	b.n	80083f8 <_dtoa_r+0x710>
 80084f0:	9a07      	ldr	r2, [sp, #28]
 80084f2:	e7ab      	b.n	800844c <_dtoa_r+0x764>
 80084f4:	2300      	movs	r3, #0
 80084f6:	e7d4      	b.n	80084a2 <_dtoa_r+0x7ba>
 80084f8:	9b00      	ldr	r3, [sp, #0]
 80084fa:	e7d2      	b.n	80084a2 <_dtoa_r+0x7ba>
 80084fc:	2300      	movs	r3, #0
 80084fe:	9307      	str	r3, [sp, #28]
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008506:	6918      	ldr	r0, [r3, #16]
 8008508:	f000 fc2b 	bl	8008d62 <__hi0bits>
 800850c:	f1c0 0020 	rsb	r0, r0, #32
 8008510:	4440      	add	r0, r8
 8008512:	f010 001f 	ands.w	r0, r0, #31
 8008516:	d047      	beq.n	80085a8 <_dtoa_r+0x8c0>
 8008518:	f1c0 0320 	rsb	r3, r0, #32
 800851c:	2b04      	cmp	r3, #4
 800851e:	dd3b      	ble.n	8008598 <_dtoa_r+0x8b0>
 8008520:	9b05      	ldr	r3, [sp, #20]
 8008522:	f1c0 001c 	rsb	r0, r0, #28
 8008526:	4403      	add	r3, r0
 8008528:	9305      	str	r3, [sp, #20]
 800852a:	4405      	add	r5, r0
 800852c:	4480      	add	r8, r0
 800852e:	9b05      	ldr	r3, [sp, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	dd05      	ble.n	8008540 <_dtoa_r+0x858>
 8008534:	461a      	mov	r2, r3
 8008536:	9904      	ldr	r1, [sp, #16]
 8008538:	4620      	mov	r0, r4
 800853a:	f000 fd4d 	bl	8008fd8 <__lshift>
 800853e:	9004      	str	r0, [sp, #16]
 8008540:	f1b8 0f00 	cmp.w	r8, #0
 8008544:	dd05      	ble.n	8008552 <_dtoa_r+0x86a>
 8008546:	4639      	mov	r1, r7
 8008548:	4642      	mov	r2, r8
 800854a:	4620      	mov	r0, r4
 800854c:	f000 fd44 	bl	8008fd8 <__lshift>
 8008550:	4607      	mov	r7, r0
 8008552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008554:	b353      	cbz	r3, 80085ac <_dtoa_r+0x8c4>
 8008556:	4639      	mov	r1, r7
 8008558:	9804      	ldr	r0, [sp, #16]
 800855a:	f000 fd91 	bl	8009080 <__mcmp>
 800855e:	2800      	cmp	r0, #0
 8008560:	da24      	bge.n	80085ac <_dtoa_r+0x8c4>
 8008562:	2300      	movs	r3, #0
 8008564:	220a      	movs	r2, #10
 8008566:	9904      	ldr	r1, [sp, #16]
 8008568:	4620      	mov	r0, r4
 800856a:	f000 fbbf 	bl	8008cec <__multadd>
 800856e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008570:	9004      	str	r0, [sp, #16]
 8008572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 814d 	beq.w	8008816 <_dtoa_r+0xb2e>
 800857c:	2300      	movs	r3, #0
 800857e:	4631      	mov	r1, r6
 8008580:	220a      	movs	r2, #10
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fbb2 	bl	8008cec <__multadd>
 8008588:	9b02      	ldr	r3, [sp, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	4606      	mov	r6, r0
 800858e:	dc4f      	bgt.n	8008630 <_dtoa_r+0x948>
 8008590:	9b06      	ldr	r3, [sp, #24]
 8008592:	2b02      	cmp	r3, #2
 8008594:	dd4c      	ble.n	8008630 <_dtoa_r+0x948>
 8008596:	e011      	b.n	80085bc <_dtoa_r+0x8d4>
 8008598:	d0c9      	beq.n	800852e <_dtoa_r+0x846>
 800859a:	9a05      	ldr	r2, [sp, #20]
 800859c:	331c      	adds	r3, #28
 800859e:	441a      	add	r2, r3
 80085a0:	9205      	str	r2, [sp, #20]
 80085a2:	441d      	add	r5, r3
 80085a4:	4498      	add	r8, r3
 80085a6:	e7c2      	b.n	800852e <_dtoa_r+0x846>
 80085a8:	4603      	mov	r3, r0
 80085aa:	e7f6      	b.n	800859a <_dtoa_r+0x8b2>
 80085ac:	f1b9 0f00 	cmp.w	r9, #0
 80085b0:	dc38      	bgt.n	8008624 <_dtoa_r+0x93c>
 80085b2:	9b06      	ldr	r3, [sp, #24]
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	dd35      	ble.n	8008624 <_dtoa_r+0x93c>
 80085b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80085bc:	9b02      	ldr	r3, [sp, #8]
 80085be:	b963      	cbnz	r3, 80085da <_dtoa_r+0x8f2>
 80085c0:	4639      	mov	r1, r7
 80085c2:	2205      	movs	r2, #5
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 fb91 	bl	8008cec <__multadd>
 80085ca:	4601      	mov	r1, r0
 80085cc:	4607      	mov	r7, r0
 80085ce:	9804      	ldr	r0, [sp, #16]
 80085d0:	f000 fd56 	bl	8009080 <__mcmp>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	f73f adcc 	bgt.w	8008172 <_dtoa_r+0x48a>
 80085da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085dc:	465d      	mov	r5, fp
 80085de:	ea6f 0a03 	mvn.w	sl, r3
 80085e2:	f04f 0900 	mov.w	r9, #0
 80085e6:	4639      	mov	r1, r7
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 fb68 	bl	8008cbe <_Bfree>
 80085ee:	2e00      	cmp	r6, #0
 80085f0:	f43f aeb7 	beq.w	8008362 <_dtoa_r+0x67a>
 80085f4:	f1b9 0f00 	cmp.w	r9, #0
 80085f8:	d005      	beq.n	8008606 <_dtoa_r+0x91e>
 80085fa:	45b1      	cmp	r9, r6
 80085fc:	d003      	beq.n	8008606 <_dtoa_r+0x91e>
 80085fe:	4649      	mov	r1, r9
 8008600:	4620      	mov	r0, r4
 8008602:	f000 fb5c 	bl	8008cbe <_Bfree>
 8008606:	4631      	mov	r1, r6
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fb58 	bl	8008cbe <_Bfree>
 800860e:	e6a8      	b.n	8008362 <_dtoa_r+0x67a>
 8008610:	2700      	movs	r7, #0
 8008612:	463e      	mov	r6, r7
 8008614:	e7e1      	b.n	80085da <_dtoa_r+0x8f2>
 8008616:	f8dd a020 	ldr.w	sl, [sp, #32]
 800861a:	463e      	mov	r6, r7
 800861c:	e5a9      	b.n	8008172 <_dtoa_r+0x48a>
 800861e:	bf00      	nop
 8008620:	40240000 	.word	0x40240000
 8008624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008626:	f8cd 9008 	str.w	r9, [sp, #8]
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 80fa 	beq.w	8008824 <_dtoa_r+0xb3c>
 8008630:	2d00      	cmp	r5, #0
 8008632:	dd05      	ble.n	8008640 <_dtoa_r+0x958>
 8008634:	4631      	mov	r1, r6
 8008636:	462a      	mov	r2, r5
 8008638:	4620      	mov	r0, r4
 800863a:	f000 fccd 	bl	8008fd8 <__lshift>
 800863e:	4606      	mov	r6, r0
 8008640:	9b07      	ldr	r3, [sp, #28]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d04c      	beq.n	80086e0 <_dtoa_r+0x9f8>
 8008646:	6871      	ldr	r1, [r6, #4]
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fb04 	bl	8008c56 <_Balloc>
 800864e:	6932      	ldr	r2, [r6, #16]
 8008650:	3202      	adds	r2, #2
 8008652:	4605      	mov	r5, r0
 8008654:	0092      	lsls	r2, r2, #2
 8008656:	f106 010c 	add.w	r1, r6, #12
 800865a:	300c      	adds	r0, #12
 800865c:	f000 faf0 	bl	8008c40 <memcpy>
 8008660:	2201      	movs	r2, #1
 8008662:	4629      	mov	r1, r5
 8008664:	4620      	mov	r0, r4
 8008666:	f000 fcb7 	bl	8008fd8 <__lshift>
 800866a:	9b00      	ldr	r3, [sp, #0]
 800866c:	f8cd b014 	str.w	fp, [sp, #20]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	46b1      	mov	r9, r6
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	4606      	mov	r6, r0
 800867a:	4639      	mov	r1, r7
 800867c:	9804      	ldr	r0, [sp, #16]
 800867e:	f7ff faa5 	bl	8007bcc <quorem>
 8008682:	4649      	mov	r1, r9
 8008684:	4605      	mov	r5, r0
 8008686:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800868a:	9804      	ldr	r0, [sp, #16]
 800868c:	f000 fcf8 	bl	8009080 <__mcmp>
 8008690:	4632      	mov	r2, r6
 8008692:	9000      	str	r0, [sp, #0]
 8008694:	4639      	mov	r1, r7
 8008696:	4620      	mov	r0, r4
 8008698:	f000 fd0c 	bl	80090b4 <__mdiff>
 800869c:	68c3      	ldr	r3, [r0, #12]
 800869e:	4602      	mov	r2, r0
 80086a0:	bb03      	cbnz	r3, 80086e4 <_dtoa_r+0x9fc>
 80086a2:	4601      	mov	r1, r0
 80086a4:	9008      	str	r0, [sp, #32]
 80086a6:	9804      	ldr	r0, [sp, #16]
 80086a8:	f000 fcea 	bl	8009080 <__mcmp>
 80086ac:	9a08      	ldr	r2, [sp, #32]
 80086ae:	4603      	mov	r3, r0
 80086b0:	4611      	mov	r1, r2
 80086b2:	4620      	mov	r0, r4
 80086b4:	9308      	str	r3, [sp, #32]
 80086b6:	f000 fb02 	bl	8008cbe <_Bfree>
 80086ba:	9b08      	ldr	r3, [sp, #32]
 80086bc:	b9a3      	cbnz	r3, 80086e8 <_dtoa_r+0xa00>
 80086be:	9a06      	ldr	r2, [sp, #24]
 80086c0:	b992      	cbnz	r2, 80086e8 <_dtoa_r+0xa00>
 80086c2:	9a07      	ldr	r2, [sp, #28]
 80086c4:	b982      	cbnz	r2, 80086e8 <_dtoa_r+0xa00>
 80086c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80086ca:	d029      	beq.n	8008720 <_dtoa_r+0xa38>
 80086cc:	9b00      	ldr	r3, [sp, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	dd01      	ble.n	80086d6 <_dtoa_r+0x9ee>
 80086d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80086d6:	9b05      	ldr	r3, [sp, #20]
 80086d8:	1c5d      	adds	r5, r3, #1
 80086da:	f883 8000 	strb.w	r8, [r3]
 80086de:	e782      	b.n	80085e6 <_dtoa_r+0x8fe>
 80086e0:	4630      	mov	r0, r6
 80086e2:	e7c2      	b.n	800866a <_dtoa_r+0x982>
 80086e4:	2301      	movs	r3, #1
 80086e6:	e7e3      	b.n	80086b0 <_dtoa_r+0x9c8>
 80086e8:	9a00      	ldr	r2, [sp, #0]
 80086ea:	2a00      	cmp	r2, #0
 80086ec:	db04      	blt.n	80086f8 <_dtoa_r+0xa10>
 80086ee:	d125      	bne.n	800873c <_dtoa_r+0xa54>
 80086f0:	9a06      	ldr	r2, [sp, #24]
 80086f2:	bb1a      	cbnz	r2, 800873c <_dtoa_r+0xa54>
 80086f4:	9a07      	ldr	r2, [sp, #28]
 80086f6:	bb0a      	cbnz	r2, 800873c <_dtoa_r+0xa54>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	ddec      	ble.n	80086d6 <_dtoa_r+0x9ee>
 80086fc:	2201      	movs	r2, #1
 80086fe:	9904      	ldr	r1, [sp, #16]
 8008700:	4620      	mov	r0, r4
 8008702:	f000 fc69 	bl	8008fd8 <__lshift>
 8008706:	4639      	mov	r1, r7
 8008708:	9004      	str	r0, [sp, #16]
 800870a:	f000 fcb9 	bl	8009080 <__mcmp>
 800870e:	2800      	cmp	r0, #0
 8008710:	dc03      	bgt.n	800871a <_dtoa_r+0xa32>
 8008712:	d1e0      	bne.n	80086d6 <_dtoa_r+0x9ee>
 8008714:	f018 0f01 	tst.w	r8, #1
 8008718:	d0dd      	beq.n	80086d6 <_dtoa_r+0x9ee>
 800871a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800871e:	d1d8      	bne.n	80086d2 <_dtoa_r+0x9ea>
 8008720:	9b05      	ldr	r3, [sp, #20]
 8008722:	9a05      	ldr	r2, [sp, #20]
 8008724:	1c5d      	adds	r5, r3, #1
 8008726:	2339      	movs	r3, #57	; 0x39
 8008728:	7013      	strb	r3, [r2, #0]
 800872a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800872e:	2b39      	cmp	r3, #57	; 0x39
 8008730:	f105 32ff 	add.w	r2, r5, #4294967295
 8008734:	d04f      	beq.n	80087d6 <_dtoa_r+0xaee>
 8008736:	3301      	adds	r3, #1
 8008738:	7013      	strb	r3, [r2, #0]
 800873a:	e754      	b.n	80085e6 <_dtoa_r+0x8fe>
 800873c:	9a05      	ldr	r2, [sp, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f102 0501 	add.w	r5, r2, #1
 8008744:	dd06      	ble.n	8008754 <_dtoa_r+0xa6c>
 8008746:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800874a:	d0e9      	beq.n	8008720 <_dtoa_r+0xa38>
 800874c:	f108 0801 	add.w	r8, r8, #1
 8008750:	9b05      	ldr	r3, [sp, #20]
 8008752:	e7c2      	b.n	80086da <_dtoa_r+0x9f2>
 8008754:	9a02      	ldr	r2, [sp, #8]
 8008756:	f805 8c01 	strb.w	r8, [r5, #-1]
 800875a:	eba5 030b 	sub.w	r3, r5, fp
 800875e:	4293      	cmp	r3, r2
 8008760:	d021      	beq.n	80087a6 <_dtoa_r+0xabe>
 8008762:	2300      	movs	r3, #0
 8008764:	220a      	movs	r2, #10
 8008766:	9904      	ldr	r1, [sp, #16]
 8008768:	4620      	mov	r0, r4
 800876a:	f000 fabf 	bl	8008cec <__multadd>
 800876e:	45b1      	cmp	r9, r6
 8008770:	9004      	str	r0, [sp, #16]
 8008772:	f04f 0300 	mov.w	r3, #0
 8008776:	f04f 020a 	mov.w	r2, #10
 800877a:	4649      	mov	r1, r9
 800877c:	4620      	mov	r0, r4
 800877e:	d105      	bne.n	800878c <_dtoa_r+0xaa4>
 8008780:	f000 fab4 	bl	8008cec <__multadd>
 8008784:	4681      	mov	r9, r0
 8008786:	4606      	mov	r6, r0
 8008788:	9505      	str	r5, [sp, #20]
 800878a:	e776      	b.n	800867a <_dtoa_r+0x992>
 800878c:	f000 faae 	bl	8008cec <__multadd>
 8008790:	4631      	mov	r1, r6
 8008792:	4681      	mov	r9, r0
 8008794:	2300      	movs	r3, #0
 8008796:	220a      	movs	r2, #10
 8008798:	4620      	mov	r0, r4
 800879a:	f000 faa7 	bl	8008cec <__multadd>
 800879e:	4606      	mov	r6, r0
 80087a0:	e7f2      	b.n	8008788 <_dtoa_r+0xaa0>
 80087a2:	f04f 0900 	mov.w	r9, #0
 80087a6:	2201      	movs	r2, #1
 80087a8:	9904      	ldr	r1, [sp, #16]
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 fc14 	bl	8008fd8 <__lshift>
 80087b0:	4639      	mov	r1, r7
 80087b2:	9004      	str	r0, [sp, #16]
 80087b4:	f000 fc64 	bl	8009080 <__mcmp>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	dcb6      	bgt.n	800872a <_dtoa_r+0xa42>
 80087bc:	d102      	bne.n	80087c4 <_dtoa_r+0xadc>
 80087be:	f018 0f01 	tst.w	r8, #1
 80087c2:	d1b2      	bne.n	800872a <_dtoa_r+0xa42>
 80087c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087c8:	2b30      	cmp	r3, #48	; 0x30
 80087ca:	f105 32ff 	add.w	r2, r5, #4294967295
 80087ce:	f47f af0a 	bne.w	80085e6 <_dtoa_r+0x8fe>
 80087d2:	4615      	mov	r5, r2
 80087d4:	e7f6      	b.n	80087c4 <_dtoa_r+0xadc>
 80087d6:	4593      	cmp	fp, r2
 80087d8:	d105      	bne.n	80087e6 <_dtoa_r+0xafe>
 80087da:	2331      	movs	r3, #49	; 0x31
 80087dc:	f10a 0a01 	add.w	sl, sl, #1
 80087e0:	f88b 3000 	strb.w	r3, [fp]
 80087e4:	e6ff      	b.n	80085e6 <_dtoa_r+0x8fe>
 80087e6:	4615      	mov	r5, r2
 80087e8:	e79f      	b.n	800872a <_dtoa_r+0xa42>
 80087ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008850 <_dtoa_r+0xb68>
 80087ee:	e007      	b.n	8008800 <_dtoa_r+0xb18>
 80087f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008854 <_dtoa_r+0xb6c>
 80087f6:	b11b      	cbz	r3, 8008800 <_dtoa_r+0xb18>
 80087f8:	f10b 0308 	add.w	r3, fp, #8
 80087fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	4658      	mov	r0, fp
 8008802:	b017      	add	sp, #92	; 0x5c
 8008804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008808:	9b06      	ldr	r3, [sp, #24]
 800880a:	2b01      	cmp	r3, #1
 800880c:	f77f ae35 	ble.w	800847a <_dtoa_r+0x792>
 8008810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008812:	9307      	str	r3, [sp, #28]
 8008814:	e649      	b.n	80084aa <_dtoa_r+0x7c2>
 8008816:	9b02      	ldr	r3, [sp, #8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	dc03      	bgt.n	8008824 <_dtoa_r+0xb3c>
 800881c:	9b06      	ldr	r3, [sp, #24]
 800881e:	2b02      	cmp	r3, #2
 8008820:	f73f aecc 	bgt.w	80085bc <_dtoa_r+0x8d4>
 8008824:	465d      	mov	r5, fp
 8008826:	4639      	mov	r1, r7
 8008828:	9804      	ldr	r0, [sp, #16]
 800882a:	f7ff f9cf 	bl	8007bcc <quorem>
 800882e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008832:	f805 8b01 	strb.w	r8, [r5], #1
 8008836:	9a02      	ldr	r2, [sp, #8]
 8008838:	eba5 030b 	sub.w	r3, r5, fp
 800883c:	429a      	cmp	r2, r3
 800883e:	ddb0      	ble.n	80087a2 <_dtoa_r+0xaba>
 8008840:	2300      	movs	r3, #0
 8008842:	220a      	movs	r2, #10
 8008844:	9904      	ldr	r1, [sp, #16]
 8008846:	4620      	mov	r0, r4
 8008848:	f000 fa50 	bl	8008cec <__multadd>
 800884c:	9004      	str	r0, [sp, #16]
 800884e:	e7ea      	b.n	8008826 <_dtoa_r+0xb3e>
 8008850:	0800b7b8 	.word	0x0800b7b8
 8008854:	0800b7dc 	.word	0x0800b7dc

08008858 <__sflush_r>:
 8008858:	898a      	ldrh	r2, [r1, #12]
 800885a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885e:	4605      	mov	r5, r0
 8008860:	0710      	lsls	r0, r2, #28
 8008862:	460c      	mov	r4, r1
 8008864:	d458      	bmi.n	8008918 <__sflush_r+0xc0>
 8008866:	684b      	ldr	r3, [r1, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	dc05      	bgt.n	8008878 <__sflush_r+0x20>
 800886c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800886e:	2b00      	cmp	r3, #0
 8008870:	dc02      	bgt.n	8008878 <__sflush_r+0x20>
 8008872:	2000      	movs	r0, #0
 8008874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800887a:	2e00      	cmp	r6, #0
 800887c:	d0f9      	beq.n	8008872 <__sflush_r+0x1a>
 800887e:	2300      	movs	r3, #0
 8008880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008884:	682f      	ldr	r7, [r5, #0]
 8008886:	6a21      	ldr	r1, [r4, #32]
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	d032      	beq.n	80088f2 <__sflush_r+0x9a>
 800888c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	075a      	lsls	r2, r3, #29
 8008892:	d505      	bpl.n	80088a0 <__sflush_r+0x48>
 8008894:	6863      	ldr	r3, [r4, #4]
 8008896:	1ac0      	subs	r0, r0, r3
 8008898:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800889a:	b10b      	cbz	r3, 80088a0 <__sflush_r+0x48>
 800889c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800889e:	1ac0      	subs	r0, r0, r3
 80088a0:	2300      	movs	r3, #0
 80088a2:	4602      	mov	r2, r0
 80088a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088a6:	6a21      	ldr	r1, [r4, #32]
 80088a8:	4628      	mov	r0, r5
 80088aa:	47b0      	blx	r6
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	d106      	bne.n	80088c0 <__sflush_r+0x68>
 80088b2:	6829      	ldr	r1, [r5, #0]
 80088b4:	291d      	cmp	r1, #29
 80088b6:	d848      	bhi.n	800894a <__sflush_r+0xf2>
 80088b8:	4a29      	ldr	r2, [pc, #164]	; (8008960 <__sflush_r+0x108>)
 80088ba:	40ca      	lsrs	r2, r1
 80088bc:	07d6      	lsls	r6, r2, #31
 80088be:	d544      	bpl.n	800894a <__sflush_r+0xf2>
 80088c0:	2200      	movs	r2, #0
 80088c2:	6062      	str	r2, [r4, #4]
 80088c4:	04d9      	lsls	r1, r3, #19
 80088c6:	6922      	ldr	r2, [r4, #16]
 80088c8:	6022      	str	r2, [r4, #0]
 80088ca:	d504      	bpl.n	80088d6 <__sflush_r+0x7e>
 80088cc:	1c42      	adds	r2, r0, #1
 80088ce:	d101      	bne.n	80088d4 <__sflush_r+0x7c>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b903      	cbnz	r3, 80088d6 <__sflush_r+0x7e>
 80088d4:	6560      	str	r0, [r4, #84]	; 0x54
 80088d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088d8:	602f      	str	r7, [r5, #0]
 80088da:	2900      	cmp	r1, #0
 80088dc:	d0c9      	beq.n	8008872 <__sflush_r+0x1a>
 80088de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088e2:	4299      	cmp	r1, r3
 80088e4:	d002      	beq.n	80088ec <__sflush_r+0x94>
 80088e6:	4628      	mov	r0, r5
 80088e8:	f000 fc9e 	bl	8009228 <_free_r>
 80088ec:	2000      	movs	r0, #0
 80088ee:	6360      	str	r0, [r4, #52]	; 0x34
 80088f0:	e7c0      	b.n	8008874 <__sflush_r+0x1c>
 80088f2:	2301      	movs	r3, #1
 80088f4:	4628      	mov	r0, r5
 80088f6:	47b0      	blx	r6
 80088f8:	1c41      	adds	r1, r0, #1
 80088fa:	d1c8      	bne.n	800888e <__sflush_r+0x36>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0c5      	beq.n	800888e <__sflush_r+0x36>
 8008902:	2b1d      	cmp	r3, #29
 8008904:	d001      	beq.n	800890a <__sflush_r+0xb2>
 8008906:	2b16      	cmp	r3, #22
 8008908:	d101      	bne.n	800890e <__sflush_r+0xb6>
 800890a:	602f      	str	r7, [r5, #0]
 800890c:	e7b1      	b.n	8008872 <__sflush_r+0x1a>
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	e7ad      	b.n	8008874 <__sflush_r+0x1c>
 8008918:	690f      	ldr	r7, [r1, #16]
 800891a:	2f00      	cmp	r7, #0
 800891c:	d0a9      	beq.n	8008872 <__sflush_r+0x1a>
 800891e:	0793      	lsls	r3, r2, #30
 8008920:	680e      	ldr	r6, [r1, #0]
 8008922:	bf08      	it	eq
 8008924:	694b      	ldreq	r3, [r1, #20]
 8008926:	600f      	str	r7, [r1, #0]
 8008928:	bf18      	it	ne
 800892a:	2300      	movne	r3, #0
 800892c:	eba6 0807 	sub.w	r8, r6, r7
 8008930:	608b      	str	r3, [r1, #8]
 8008932:	f1b8 0f00 	cmp.w	r8, #0
 8008936:	dd9c      	ble.n	8008872 <__sflush_r+0x1a>
 8008938:	4643      	mov	r3, r8
 800893a:	463a      	mov	r2, r7
 800893c:	6a21      	ldr	r1, [r4, #32]
 800893e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008940:	4628      	mov	r0, r5
 8008942:	47b0      	blx	r6
 8008944:	2800      	cmp	r0, #0
 8008946:	dc06      	bgt.n	8008956 <__sflush_r+0xfe>
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	f04f 30ff 	mov.w	r0, #4294967295
 8008954:	e78e      	b.n	8008874 <__sflush_r+0x1c>
 8008956:	4407      	add	r7, r0
 8008958:	eba8 0800 	sub.w	r8, r8, r0
 800895c:	e7e9      	b.n	8008932 <__sflush_r+0xda>
 800895e:	bf00      	nop
 8008960:	20400001 	.word	0x20400001

08008964 <_fflush_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	690b      	ldr	r3, [r1, #16]
 8008968:	4605      	mov	r5, r0
 800896a:	460c      	mov	r4, r1
 800896c:	b1db      	cbz	r3, 80089a6 <_fflush_r+0x42>
 800896e:	b118      	cbz	r0, 8008978 <_fflush_r+0x14>
 8008970:	6983      	ldr	r3, [r0, #24]
 8008972:	b90b      	cbnz	r3, 8008978 <_fflush_r+0x14>
 8008974:	f000 f860 	bl	8008a38 <__sinit>
 8008978:	4b0c      	ldr	r3, [pc, #48]	; (80089ac <_fflush_r+0x48>)
 800897a:	429c      	cmp	r4, r3
 800897c:	d109      	bne.n	8008992 <_fflush_r+0x2e>
 800897e:	686c      	ldr	r4, [r5, #4]
 8008980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008984:	b17b      	cbz	r3, 80089a6 <_fflush_r+0x42>
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800898e:	f7ff bf63 	b.w	8008858 <__sflush_r>
 8008992:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <_fflush_r+0x4c>)
 8008994:	429c      	cmp	r4, r3
 8008996:	d101      	bne.n	800899c <_fflush_r+0x38>
 8008998:	68ac      	ldr	r4, [r5, #8]
 800899a:	e7f1      	b.n	8008980 <_fflush_r+0x1c>
 800899c:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <_fflush_r+0x50>)
 800899e:	429c      	cmp	r4, r3
 80089a0:	bf08      	it	eq
 80089a2:	68ec      	ldreq	r4, [r5, #12]
 80089a4:	e7ec      	b.n	8008980 <_fflush_r+0x1c>
 80089a6:	2000      	movs	r0, #0
 80089a8:	bd38      	pop	{r3, r4, r5, pc}
 80089aa:	bf00      	nop
 80089ac:	0800b80c 	.word	0x0800b80c
 80089b0:	0800b82c 	.word	0x0800b82c
 80089b4:	0800b7ec 	.word	0x0800b7ec

080089b8 <std>:
 80089b8:	2300      	movs	r3, #0
 80089ba:	b510      	push	{r4, lr}
 80089bc:	4604      	mov	r4, r0
 80089be:	e9c0 3300 	strd	r3, r3, [r0]
 80089c2:	6083      	str	r3, [r0, #8]
 80089c4:	8181      	strh	r1, [r0, #12]
 80089c6:	6643      	str	r3, [r0, #100]	; 0x64
 80089c8:	81c2      	strh	r2, [r0, #14]
 80089ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089ce:	6183      	str	r3, [r0, #24]
 80089d0:	4619      	mov	r1, r3
 80089d2:	2208      	movs	r2, #8
 80089d4:	305c      	adds	r0, #92	; 0x5c
 80089d6:	f7fe fb3d 	bl	8007054 <memset>
 80089da:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <std+0x38>)
 80089dc:	6263      	str	r3, [r4, #36]	; 0x24
 80089de:	4b05      	ldr	r3, [pc, #20]	; (80089f4 <std+0x3c>)
 80089e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80089e2:	4b05      	ldr	r3, [pc, #20]	; (80089f8 <std+0x40>)
 80089e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089e6:	4b05      	ldr	r3, [pc, #20]	; (80089fc <std+0x44>)
 80089e8:	6224      	str	r4, [r4, #32]
 80089ea:	6323      	str	r3, [r4, #48]	; 0x30
 80089ec:	bd10      	pop	{r4, pc}
 80089ee:	bf00      	nop
 80089f0:	0800963d 	.word	0x0800963d
 80089f4:	0800965f 	.word	0x0800965f
 80089f8:	08009697 	.word	0x08009697
 80089fc:	080096bb 	.word	0x080096bb

08008a00 <_cleanup_r>:
 8008a00:	4901      	ldr	r1, [pc, #4]	; (8008a08 <_cleanup_r+0x8>)
 8008a02:	f000 b885 	b.w	8008b10 <_fwalk_reent>
 8008a06:	bf00      	nop
 8008a08:	08008965 	.word	0x08008965

08008a0c <__sfmoreglue>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	1e4a      	subs	r2, r1, #1
 8008a10:	2568      	movs	r5, #104	; 0x68
 8008a12:	4355      	muls	r5, r2
 8008a14:	460e      	mov	r6, r1
 8008a16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a1a:	f000 fc53 	bl	80092c4 <_malloc_r>
 8008a1e:	4604      	mov	r4, r0
 8008a20:	b140      	cbz	r0, 8008a34 <__sfmoreglue+0x28>
 8008a22:	2100      	movs	r1, #0
 8008a24:	e9c0 1600 	strd	r1, r6, [r0]
 8008a28:	300c      	adds	r0, #12
 8008a2a:	60a0      	str	r0, [r4, #8]
 8008a2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a30:	f7fe fb10 	bl	8007054 <memset>
 8008a34:	4620      	mov	r0, r4
 8008a36:	bd70      	pop	{r4, r5, r6, pc}

08008a38 <__sinit>:
 8008a38:	6983      	ldr	r3, [r0, #24]
 8008a3a:	b510      	push	{r4, lr}
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	bb33      	cbnz	r3, 8008a8e <__sinit+0x56>
 8008a40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008a44:	6503      	str	r3, [r0, #80]	; 0x50
 8008a46:	4b12      	ldr	r3, [pc, #72]	; (8008a90 <__sinit+0x58>)
 8008a48:	4a12      	ldr	r2, [pc, #72]	; (8008a94 <__sinit+0x5c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6282      	str	r2, [r0, #40]	; 0x28
 8008a4e:	4298      	cmp	r0, r3
 8008a50:	bf04      	itt	eq
 8008a52:	2301      	moveq	r3, #1
 8008a54:	6183      	streq	r3, [r0, #24]
 8008a56:	f000 f81f 	bl	8008a98 <__sfp>
 8008a5a:	6060      	str	r0, [r4, #4]
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 f81b 	bl	8008a98 <__sfp>
 8008a62:	60a0      	str	r0, [r4, #8]
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 f817 	bl	8008a98 <__sfp>
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	60e0      	str	r0, [r4, #12]
 8008a6e:	2104      	movs	r1, #4
 8008a70:	6860      	ldr	r0, [r4, #4]
 8008a72:	f7ff ffa1 	bl	80089b8 <std>
 8008a76:	2201      	movs	r2, #1
 8008a78:	2109      	movs	r1, #9
 8008a7a:	68a0      	ldr	r0, [r4, #8]
 8008a7c:	f7ff ff9c 	bl	80089b8 <std>
 8008a80:	2202      	movs	r2, #2
 8008a82:	2112      	movs	r1, #18
 8008a84:	68e0      	ldr	r0, [r4, #12]
 8008a86:	f7ff ff97 	bl	80089b8 <std>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	61a3      	str	r3, [r4, #24]
 8008a8e:	bd10      	pop	{r4, pc}
 8008a90:	0800b7a4 	.word	0x0800b7a4
 8008a94:	08008a01 	.word	0x08008a01

08008a98 <__sfp>:
 8008a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9a:	4b1b      	ldr	r3, [pc, #108]	; (8008b08 <__sfp+0x70>)
 8008a9c:	681e      	ldr	r6, [r3, #0]
 8008a9e:	69b3      	ldr	r3, [r6, #24]
 8008aa0:	4607      	mov	r7, r0
 8008aa2:	b913      	cbnz	r3, 8008aaa <__sfp+0x12>
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f7ff ffc7 	bl	8008a38 <__sinit>
 8008aaa:	3648      	adds	r6, #72	; 0x48
 8008aac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	d503      	bpl.n	8008abc <__sfp+0x24>
 8008ab4:	6833      	ldr	r3, [r6, #0]
 8008ab6:	b133      	cbz	r3, 8008ac6 <__sfp+0x2e>
 8008ab8:	6836      	ldr	r6, [r6, #0]
 8008aba:	e7f7      	b.n	8008aac <__sfp+0x14>
 8008abc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ac0:	b16d      	cbz	r5, 8008ade <__sfp+0x46>
 8008ac2:	3468      	adds	r4, #104	; 0x68
 8008ac4:	e7f4      	b.n	8008ab0 <__sfp+0x18>
 8008ac6:	2104      	movs	r1, #4
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f7ff ff9f 	bl	8008a0c <__sfmoreglue>
 8008ace:	6030      	str	r0, [r6, #0]
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d1f1      	bne.n	8008ab8 <__sfp+0x20>
 8008ad4:	230c      	movs	r3, #12
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	4604      	mov	r4, r0
 8008ada:	4620      	mov	r0, r4
 8008adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ade:	4b0b      	ldr	r3, [pc, #44]	; (8008b0c <__sfp+0x74>)
 8008ae0:	6665      	str	r5, [r4, #100]	; 0x64
 8008ae2:	e9c4 5500 	strd	r5, r5, [r4]
 8008ae6:	60a5      	str	r5, [r4, #8]
 8008ae8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008aec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008af0:	2208      	movs	r2, #8
 8008af2:	4629      	mov	r1, r5
 8008af4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008af8:	f7fe faac 	bl	8007054 <memset>
 8008afc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b04:	e7e9      	b.n	8008ada <__sfp+0x42>
 8008b06:	bf00      	nop
 8008b08:	0800b7a4 	.word	0x0800b7a4
 8008b0c:	ffff0001 	.word	0xffff0001

08008b10 <_fwalk_reent>:
 8008b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b14:	4680      	mov	r8, r0
 8008b16:	4689      	mov	r9, r1
 8008b18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b1c:	2600      	movs	r6, #0
 8008b1e:	b914      	cbnz	r4, 8008b26 <_fwalk_reent+0x16>
 8008b20:	4630      	mov	r0, r6
 8008b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b26:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008b2a:	3f01      	subs	r7, #1
 8008b2c:	d501      	bpl.n	8008b32 <_fwalk_reent+0x22>
 8008b2e:	6824      	ldr	r4, [r4, #0]
 8008b30:	e7f5      	b.n	8008b1e <_fwalk_reent+0xe>
 8008b32:	89ab      	ldrh	r3, [r5, #12]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d907      	bls.n	8008b48 <_fwalk_reent+0x38>
 8008b38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	d003      	beq.n	8008b48 <_fwalk_reent+0x38>
 8008b40:	4629      	mov	r1, r5
 8008b42:	4640      	mov	r0, r8
 8008b44:	47c8      	blx	r9
 8008b46:	4306      	orrs	r6, r0
 8008b48:	3568      	adds	r5, #104	; 0x68
 8008b4a:	e7ee      	b.n	8008b2a <_fwalk_reent+0x1a>

08008b4c <_localeconv_r>:
 8008b4c:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <_localeconv_r+0x14>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6a18      	ldr	r0, [r3, #32]
 8008b52:	4b04      	ldr	r3, [pc, #16]	; (8008b64 <_localeconv_r+0x18>)
 8008b54:	2800      	cmp	r0, #0
 8008b56:	bf08      	it	eq
 8008b58:	4618      	moveq	r0, r3
 8008b5a:	30f0      	adds	r0, #240	; 0xf0
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	20000028 	.word	0x20000028
 8008b64:	2000008c 	.word	0x2000008c

08008b68 <__swhatbuf_r>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	460e      	mov	r6, r1
 8008b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b70:	2900      	cmp	r1, #0
 8008b72:	b096      	sub	sp, #88	; 0x58
 8008b74:	4614      	mov	r4, r2
 8008b76:	461d      	mov	r5, r3
 8008b78:	da07      	bge.n	8008b8a <__swhatbuf_r+0x22>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	89b3      	ldrh	r3, [r6, #12]
 8008b80:	061a      	lsls	r2, r3, #24
 8008b82:	d410      	bmi.n	8008ba6 <__swhatbuf_r+0x3e>
 8008b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b88:	e00e      	b.n	8008ba8 <__swhatbuf_r+0x40>
 8008b8a:	466a      	mov	r2, sp
 8008b8c:	f000 fdbc 	bl	8009708 <_fstat_r>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	dbf2      	blt.n	8008b7a <__swhatbuf_r+0x12>
 8008b94:	9a01      	ldr	r2, [sp, #4]
 8008b96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b9e:	425a      	negs	r2, r3
 8008ba0:	415a      	adcs	r2, r3
 8008ba2:	602a      	str	r2, [r5, #0]
 8008ba4:	e7ee      	b.n	8008b84 <__swhatbuf_r+0x1c>
 8008ba6:	2340      	movs	r3, #64	; 0x40
 8008ba8:	2000      	movs	r0, #0
 8008baa:	6023      	str	r3, [r4, #0]
 8008bac:	b016      	add	sp, #88	; 0x58
 8008bae:	bd70      	pop	{r4, r5, r6, pc}

08008bb0 <__smakebuf_r>:
 8008bb0:	898b      	ldrh	r3, [r1, #12]
 8008bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bb4:	079d      	lsls	r5, r3, #30
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	460c      	mov	r4, r1
 8008bba:	d507      	bpl.n	8008bcc <__smakebuf_r+0x1c>
 8008bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	6123      	str	r3, [r4, #16]
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	6163      	str	r3, [r4, #20]
 8008bc8:	b002      	add	sp, #8
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
 8008bcc:	ab01      	add	r3, sp, #4
 8008bce:	466a      	mov	r2, sp
 8008bd0:	f7ff ffca 	bl	8008b68 <__swhatbuf_r>
 8008bd4:	9900      	ldr	r1, [sp, #0]
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f000 fb73 	bl	80092c4 <_malloc_r>
 8008bde:	b948      	cbnz	r0, 8008bf4 <__smakebuf_r+0x44>
 8008be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be4:	059a      	lsls	r2, r3, #22
 8008be6:	d4ef      	bmi.n	8008bc8 <__smakebuf_r+0x18>
 8008be8:	f023 0303 	bic.w	r3, r3, #3
 8008bec:	f043 0302 	orr.w	r3, r3, #2
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	e7e3      	b.n	8008bbc <__smakebuf_r+0xc>
 8008bf4:	4b0d      	ldr	r3, [pc, #52]	; (8008c2c <__smakebuf_r+0x7c>)
 8008bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	6020      	str	r0, [r4, #0]
 8008bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c00:	81a3      	strh	r3, [r4, #12]
 8008c02:	9b00      	ldr	r3, [sp, #0]
 8008c04:	6163      	str	r3, [r4, #20]
 8008c06:	9b01      	ldr	r3, [sp, #4]
 8008c08:	6120      	str	r0, [r4, #16]
 8008c0a:	b15b      	cbz	r3, 8008c24 <__smakebuf_r+0x74>
 8008c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c10:	4630      	mov	r0, r6
 8008c12:	f000 fd8b 	bl	800972c <_isatty_r>
 8008c16:	b128      	cbz	r0, 8008c24 <__smakebuf_r+0x74>
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	f023 0303 	bic.w	r3, r3, #3
 8008c1e:	f043 0301 	orr.w	r3, r3, #1
 8008c22:	81a3      	strh	r3, [r4, #12]
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	431d      	orrs	r5, r3
 8008c28:	81a5      	strh	r5, [r4, #12]
 8008c2a:	e7cd      	b.n	8008bc8 <__smakebuf_r+0x18>
 8008c2c:	08008a01 	.word	0x08008a01

08008c30 <malloc>:
 8008c30:	4b02      	ldr	r3, [pc, #8]	; (8008c3c <malloc+0xc>)
 8008c32:	4601      	mov	r1, r0
 8008c34:	6818      	ldr	r0, [r3, #0]
 8008c36:	f000 bb45 	b.w	80092c4 <_malloc_r>
 8008c3a:	bf00      	nop
 8008c3c:	20000028 	.word	0x20000028

08008c40 <memcpy>:
 8008c40:	b510      	push	{r4, lr}
 8008c42:	1e43      	subs	r3, r0, #1
 8008c44:	440a      	add	r2, r1
 8008c46:	4291      	cmp	r1, r2
 8008c48:	d100      	bne.n	8008c4c <memcpy+0xc>
 8008c4a:	bd10      	pop	{r4, pc}
 8008c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c54:	e7f7      	b.n	8008c46 <memcpy+0x6>

08008c56 <_Balloc>:
 8008c56:	b570      	push	{r4, r5, r6, lr}
 8008c58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	460e      	mov	r6, r1
 8008c5e:	b93d      	cbnz	r5, 8008c70 <_Balloc+0x1a>
 8008c60:	2010      	movs	r0, #16
 8008c62:	f7ff ffe5 	bl	8008c30 <malloc>
 8008c66:	6260      	str	r0, [r4, #36]	; 0x24
 8008c68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c6c:	6005      	str	r5, [r0, #0]
 8008c6e:	60c5      	str	r5, [r0, #12]
 8008c70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008c72:	68eb      	ldr	r3, [r5, #12]
 8008c74:	b183      	cbz	r3, 8008c98 <_Balloc+0x42>
 8008c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008c7e:	b9b8      	cbnz	r0, 8008cb0 <_Balloc+0x5a>
 8008c80:	2101      	movs	r1, #1
 8008c82:	fa01 f506 	lsl.w	r5, r1, r6
 8008c86:	1d6a      	adds	r2, r5, #5
 8008c88:	0092      	lsls	r2, r2, #2
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 fabe 	bl	800920c <_calloc_r>
 8008c90:	b160      	cbz	r0, 8008cac <_Balloc+0x56>
 8008c92:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008c96:	e00e      	b.n	8008cb6 <_Balloc+0x60>
 8008c98:	2221      	movs	r2, #33	; 0x21
 8008c9a:	2104      	movs	r1, #4
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f000 fab5 	bl	800920c <_calloc_r>
 8008ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ca4:	60e8      	str	r0, [r5, #12]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e4      	bne.n	8008c76 <_Balloc+0x20>
 8008cac:	2000      	movs	r0, #0
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	6802      	ldr	r2, [r0, #0]
 8008cb2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cbc:	e7f7      	b.n	8008cae <_Balloc+0x58>

08008cbe <_Bfree>:
 8008cbe:	b570      	push	{r4, r5, r6, lr}
 8008cc0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	b93c      	cbnz	r4, 8008cd8 <_Bfree+0x1a>
 8008cc8:	2010      	movs	r0, #16
 8008cca:	f7ff ffb1 	bl	8008c30 <malloc>
 8008cce:	6270      	str	r0, [r6, #36]	; 0x24
 8008cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cd4:	6004      	str	r4, [r0, #0]
 8008cd6:	60c4      	str	r4, [r0, #12]
 8008cd8:	b13d      	cbz	r5, 8008cea <_Bfree+0x2c>
 8008cda:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008cdc:	686a      	ldr	r2, [r5, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ce4:	6029      	str	r1, [r5, #0]
 8008ce6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008cea:	bd70      	pop	{r4, r5, r6, pc}

08008cec <__multadd>:
 8008cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf0:	690d      	ldr	r5, [r1, #16]
 8008cf2:	461f      	mov	r7, r3
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	f101 0c14 	add.w	ip, r1, #20
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f8dc 0000 	ldr.w	r0, [ip]
 8008d02:	b281      	uxth	r1, r0
 8008d04:	fb02 7101 	mla	r1, r2, r1, r7
 8008d08:	0c0f      	lsrs	r7, r1, #16
 8008d0a:	0c00      	lsrs	r0, r0, #16
 8008d0c:	fb02 7000 	mla	r0, r2, r0, r7
 8008d10:	b289      	uxth	r1, r1
 8008d12:	3301      	adds	r3, #1
 8008d14:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008d18:	429d      	cmp	r5, r3
 8008d1a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008d1e:	f84c 1b04 	str.w	r1, [ip], #4
 8008d22:	dcec      	bgt.n	8008cfe <__multadd+0x12>
 8008d24:	b1d7      	cbz	r7, 8008d5c <__multadd+0x70>
 8008d26:	68a3      	ldr	r3, [r4, #8]
 8008d28:	42ab      	cmp	r3, r5
 8008d2a:	dc12      	bgt.n	8008d52 <__multadd+0x66>
 8008d2c:	6861      	ldr	r1, [r4, #4]
 8008d2e:	4630      	mov	r0, r6
 8008d30:	3101      	adds	r1, #1
 8008d32:	f7ff ff90 	bl	8008c56 <_Balloc>
 8008d36:	6922      	ldr	r2, [r4, #16]
 8008d38:	3202      	adds	r2, #2
 8008d3a:	f104 010c 	add.w	r1, r4, #12
 8008d3e:	4680      	mov	r8, r0
 8008d40:	0092      	lsls	r2, r2, #2
 8008d42:	300c      	adds	r0, #12
 8008d44:	f7ff ff7c 	bl	8008c40 <memcpy>
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7ff ffb7 	bl	8008cbe <_Bfree>
 8008d50:	4644      	mov	r4, r8
 8008d52:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d56:	3501      	adds	r5, #1
 8008d58:	615f      	str	r7, [r3, #20]
 8008d5a:	6125      	str	r5, [r4, #16]
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008d62 <__hi0bits>:
 8008d62:	0c02      	lsrs	r2, r0, #16
 8008d64:	0412      	lsls	r2, r2, #16
 8008d66:	4603      	mov	r3, r0
 8008d68:	b9b2      	cbnz	r2, 8008d98 <__hi0bits+0x36>
 8008d6a:	0403      	lsls	r3, r0, #16
 8008d6c:	2010      	movs	r0, #16
 8008d6e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008d72:	bf04      	itt	eq
 8008d74:	021b      	lsleq	r3, r3, #8
 8008d76:	3008      	addeq	r0, #8
 8008d78:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008d7c:	bf04      	itt	eq
 8008d7e:	011b      	lsleq	r3, r3, #4
 8008d80:	3004      	addeq	r0, #4
 8008d82:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008d86:	bf04      	itt	eq
 8008d88:	009b      	lsleq	r3, r3, #2
 8008d8a:	3002      	addeq	r0, #2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	db06      	blt.n	8008d9e <__hi0bits+0x3c>
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	d503      	bpl.n	8008d9c <__hi0bits+0x3a>
 8008d94:	3001      	adds	r0, #1
 8008d96:	4770      	bx	lr
 8008d98:	2000      	movs	r0, #0
 8008d9a:	e7e8      	b.n	8008d6e <__hi0bits+0xc>
 8008d9c:	2020      	movs	r0, #32
 8008d9e:	4770      	bx	lr

08008da0 <__lo0bits>:
 8008da0:	6803      	ldr	r3, [r0, #0]
 8008da2:	f013 0207 	ands.w	r2, r3, #7
 8008da6:	4601      	mov	r1, r0
 8008da8:	d00b      	beq.n	8008dc2 <__lo0bits+0x22>
 8008daa:	07da      	lsls	r2, r3, #31
 8008dac:	d423      	bmi.n	8008df6 <__lo0bits+0x56>
 8008dae:	0798      	lsls	r0, r3, #30
 8008db0:	bf49      	itett	mi
 8008db2:	085b      	lsrmi	r3, r3, #1
 8008db4:	089b      	lsrpl	r3, r3, #2
 8008db6:	2001      	movmi	r0, #1
 8008db8:	600b      	strmi	r3, [r1, #0]
 8008dba:	bf5c      	itt	pl
 8008dbc:	600b      	strpl	r3, [r1, #0]
 8008dbe:	2002      	movpl	r0, #2
 8008dc0:	4770      	bx	lr
 8008dc2:	b298      	uxth	r0, r3
 8008dc4:	b9a8      	cbnz	r0, 8008df2 <__lo0bits+0x52>
 8008dc6:	0c1b      	lsrs	r3, r3, #16
 8008dc8:	2010      	movs	r0, #16
 8008dca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008dce:	bf04      	itt	eq
 8008dd0:	0a1b      	lsreq	r3, r3, #8
 8008dd2:	3008      	addeq	r0, #8
 8008dd4:	071a      	lsls	r2, r3, #28
 8008dd6:	bf04      	itt	eq
 8008dd8:	091b      	lsreq	r3, r3, #4
 8008dda:	3004      	addeq	r0, #4
 8008ddc:	079a      	lsls	r2, r3, #30
 8008dde:	bf04      	itt	eq
 8008de0:	089b      	lsreq	r3, r3, #2
 8008de2:	3002      	addeq	r0, #2
 8008de4:	07da      	lsls	r2, r3, #31
 8008de6:	d402      	bmi.n	8008dee <__lo0bits+0x4e>
 8008de8:	085b      	lsrs	r3, r3, #1
 8008dea:	d006      	beq.n	8008dfa <__lo0bits+0x5a>
 8008dec:	3001      	adds	r0, #1
 8008dee:	600b      	str	r3, [r1, #0]
 8008df0:	4770      	bx	lr
 8008df2:	4610      	mov	r0, r2
 8008df4:	e7e9      	b.n	8008dca <__lo0bits+0x2a>
 8008df6:	2000      	movs	r0, #0
 8008df8:	4770      	bx	lr
 8008dfa:	2020      	movs	r0, #32
 8008dfc:	4770      	bx	lr

08008dfe <__i2b>:
 8008dfe:	b510      	push	{r4, lr}
 8008e00:	460c      	mov	r4, r1
 8008e02:	2101      	movs	r1, #1
 8008e04:	f7ff ff27 	bl	8008c56 <_Balloc>
 8008e08:	2201      	movs	r2, #1
 8008e0a:	6144      	str	r4, [r0, #20]
 8008e0c:	6102      	str	r2, [r0, #16]
 8008e0e:	bd10      	pop	{r4, pc}

08008e10 <__multiply>:
 8008e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e14:	4614      	mov	r4, r2
 8008e16:	690a      	ldr	r2, [r1, #16]
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	bfb8      	it	lt
 8008e1e:	460b      	movlt	r3, r1
 8008e20:	4688      	mov	r8, r1
 8008e22:	bfbc      	itt	lt
 8008e24:	46a0      	movlt	r8, r4
 8008e26:	461c      	movlt	r4, r3
 8008e28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008e30:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e38:	eb07 0609 	add.w	r6, r7, r9
 8008e3c:	42b3      	cmp	r3, r6
 8008e3e:	bfb8      	it	lt
 8008e40:	3101      	addlt	r1, #1
 8008e42:	f7ff ff08 	bl	8008c56 <_Balloc>
 8008e46:	f100 0514 	add.w	r5, r0, #20
 8008e4a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008e4e:	462b      	mov	r3, r5
 8008e50:	2200      	movs	r2, #0
 8008e52:	4573      	cmp	r3, lr
 8008e54:	d316      	bcc.n	8008e84 <__multiply+0x74>
 8008e56:	f104 0214 	add.w	r2, r4, #20
 8008e5a:	f108 0114 	add.w	r1, r8, #20
 8008e5e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008e62:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	9b00      	ldr	r3, [sp, #0]
 8008e6a:	9201      	str	r2, [sp, #4]
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d80c      	bhi.n	8008e8a <__multiply+0x7a>
 8008e70:	2e00      	cmp	r6, #0
 8008e72:	dd03      	ble.n	8008e7c <__multiply+0x6c>
 8008e74:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d05d      	beq.n	8008f38 <__multiply+0x128>
 8008e7c:	6106      	str	r6, [r0, #16]
 8008e7e:	b003      	add	sp, #12
 8008e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e84:	f843 2b04 	str.w	r2, [r3], #4
 8008e88:	e7e3      	b.n	8008e52 <__multiply+0x42>
 8008e8a:	f8b2 b000 	ldrh.w	fp, [r2]
 8008e8e:	f1bb 0f00 	cmp.w	fp, #0
 8008e92:	d023      	beq.n	8008edc <__multiply+0xcc>
 8008e94:	4689      	mov	r9, r1
 8008e96:	46ac      	mov	ip, r5
 8008e98:	f04f 0800 	mov.w	r8, #0
 8008e9c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008ea0:	f8dc a000 	ldr.w	sl, [ip]
 8008ea4:	b2a3      	uxth	r3, r4
 8008ea6:	fa1f fa8a 	uxth.w	sl, sl
 8008eaa:	fb0b a303 	mla	r3, fp, r3, sl
 8008eae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008eb2:	f8dc 4000 	ldr.w	r4, [ip]
 8008eb6:	4443      	add	r3, r8
 8008eb8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008ebc:	fb0b 840a 	mla	r4, fp, sl, r8
 8008ec0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008ec4:	46e2      	mov	sl, ip
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ecc:	454f      	cmp	r7, r9
 8008ece:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008ed2:	f84a 3b04 	str.w	r3, [sl], #4
 8008ed6:	d82b      	bhi.n	8008f30 <__multiply+0x120>
 8008ed8:	f8cc 8004 	str.w	r8, [ip, #4]
 8008edc:	9b01      	ldr	r3, [sp, #4]
 8008ede:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008ee2:	3204      	adds	r2, #4
 8008ee4:	f1ba 0f00 	cmp.w	sl, #0
 8008ee8:	d020      	beq.n	8008f2c <__multiply+0x11c>
 8008eea:	682b      	ldr	r3, [r5, #0]
 8008eec:	4689      	mov	r9, r1
 8008eee:	46a8      	mov	r8, r5
 8008ef0:	f04f 0b00 	mov.w	fp, #0
 8008ef4:	f8b9 c000 	ldrh.w	ip, [r9]
 8008ef8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008efc:	fb0a 440c 	mla	r4, sl, ip, r4
 8008f00:	445c      	add	r4, fp
 8008f02:	46c4      	mov	ip, r8
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008f0a:	f84c 3b04 	str.w	r3, [ip], #4
 8008f0e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f12:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008f16:	0c1b      	lsrs	r3, r3, #16
 8008f18:	fb0a b303 	mla	r3, sl, r3, fp
 8008f1c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008f20:	454f      	cmp	r7, r9
 8008f22:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008f26:	d805      	bhi.n	8008f34 <__multiply+0x124>
 8008f28:	f8c8 3004 	str.w	r3, [r8, #4]
 8008f2c:	3504      	adds	r5, #4
 8008f2e:	e79b      	b.n	8008e68 <__multiply+0x58>
 8008f30:	46d4      	mov	ip, sl
 8008f32:	e7b3      	b.n	8008e9c <__multiply+0x8c>
 8008f34:	46e0      	mov	r8, ip
 8008f36:	e7dd      	b.n	8008ef4 <__multiply+0xe4>
 8008f38:	3e01      	subs	r6, #1
 8008f3a:	e799      	b.n	8008e70 <__multiply+0x60>

08008f3c <__pow5mult>:
 8008f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f40:	4615      	mov	r5, r2
 8008f42:	f012 0203 	ands.w	r2, r2, #3
 8008f46:	4606      	mov	r6, r0
 8008f48:	460f      	mov	r7, r1
 8008f4a:	d007      	beq.n	8008f5c <__pow5mult+0x20>
 8008f4c:	3a01      	subs	r2, #1
 8008f4e:	4c21      	ldr	r4, [pc, #132]	; (8008fd4 <__pow5mult+0x98>)
 8008f50:	2300      	movs	r3, #0
 8008f52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f56:	f7ff fec9 	bl	8008cec <__multadd>
 8008f5a:	4607      	mov	r7, r0
 8008f5c:	10ad      	asrs	r5, r5, #2
 8008f5e:	d035      	beq.n	8008fcc <__pow5mult+0x90>
 8008f60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f62:	b93c      	cbnz	r4, 8008f74 <__pow5mult+0x38>
 8008f64:	2010      	movs	r0, #16
 8008f66:	f7ff fe63 	bl	8008c30 <malloc>
 8008f6a:	6270      	str	r0, [r6, #36]	; 0x24
 8008f6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f70:	6004      	str	r4, [r0, #0]
 8008f72:	60c4      	str	r4, [r0, #12]
 8008f74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f7c:	b94c      	cbnz	r4, 8008f92 <__pow5mult+0x56>
 8008f7e:	f240 2171 	movw	r1, #625	; 0x271
 8008f82:	4630      	mov	r0, r6
 8008f84:	f7ff ff3b 	bl	8008dfe <__i2b>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f8e:	4604      	mov	r4, r0
 8008f90:	6003      	str	r3, [r0, #0]
 8008f92:	f04f 0800 	mov.w	r8, #0
 8008f96:	07eb      	lsls	r3, r5, #31
 8008f98:	d50a      	bpl.n	8008fb0 <__pow5mult+0x74>
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	4622      	mov	r2, r4
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7ff ff36 	bl	8008e10 <__multiply>
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	4681      	mov	r9, r0
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f7ff fe88 	bl	8008cbe <_Bfree>
 8008fae:	464f      	mov	r7, r9
 8008fb0:	106d      	asrs	r5, r5, #1
 8008fb2:	d00b      	beq.n	8008fcc <__pow5mult+0x90>
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	b938      	cbnz	r0, 8008fc8 <__pow5mult+0x8c>
 8008fb8:	4622      	mov	r2, r4
 8008fba:	4621      	mov	r1, r4
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	f7ff ff27 	bl	8008e10 <__multiply>
 8008fc2:	6020      	str	r0, [r4, #0]
 8008fc4:	f8c0 8000 	str.w	r8, [r0]
 8008fc8:	4604      	mov	r4, r0
 8008fca:	e7e4      	b.n	8008f96 <__pow5mult+0x5a>
 8008fcc:	4638      	mov	r0, r7
 8008fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fd2:	bf00      	nop
 8008fd4:	0800b940 	.word	0x0800b940

08008fd8 <__lshift>:
 8008fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fdc:	460c      	mov	r4, r1
 8008fde:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	6849      	ldr	r1, [r1, #4]
 8008fe6:	eb0a 0903 	add.w	r9, sl, r3
 8008fea:	68a3      	ldr	r3, [r4, #8]
 8008fec:	4607      	mov	r7, r0
 8008fee:	4616      	mov	r6, r2
 8008ff0:	f109 0501 	add.w	r5, r9, #1
 8008ff4:	42ab      	cmp	r3, r5
 8008ff6:	db32      	blt.n	800905e <__lshift+0x86>
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff fe2c 	bl	8008c56 <_Balloc>
 8008ffe:	2300      	movs	r3, #0
 8009000:	4680      	mov	r8, r0
 8009002:	f100 0114 	add.w	r1, r0, #20
 8009006:	461a      	mov	r2, r3
 8009008:	4553      	cmp	r3, sl
 800900a:	db2b      	blt.n	8009064 <__lshift+0x8c>
 800900c:	6920      	ldr	r0, [r4, #16]
 800900e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009012:	f104 0314 	add.w	r3, r4, #20
 8009016:	f016 021f 	ands.w	r2, r6, #31
 800901a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800901e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009022:	d025      	beq.n	8009070 <__lshift+0x98>
 8009024:	f1c2 0e20 	rsb	lr, r2, #32
 8009028:	2000      	movs	r0, #0
 800902a:	681e      	ldr	r6, [r3, #0]
 800902c:	468a      	mov	sl, r1
 800902e:	4096      	lsls	r6, r2
 8009030:	4330      	orrs	r0, r6
 8009032:	f84a 0b04 	str.w	r0, [sl], #4
 8009036:	f853 0b04 	ldr.w	r0, [r3], #4
 800903a:	459c      	cmp	ip, r3
 800903c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009040:	d814      	bhi.n	800906c <__lshift+0x94>
 8009042:	6048      	str	r0, [r1, #4]
 8009044:	b108      	cbz	r0, 800904a <__lshift+0x72>
 8009046:	f109 0502 	add.w	r5, r9, #2
 800904a:	3d01      	subs	r5, #1
 800904c:	4638      	mov	r0, r7
 800904e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009052:	4621      	mov	r1, r4
 8009054:	f7ff fe33 	bl	8008cbe <_Bfree>
 8009058:	4640      	mov	r0, r8
 800905a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800905e:	3101      	adds	r1, #1
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	e7c7      	b.n	8008ff4 <__lshift+0x1c>
 8009064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009068:	3301      	adds	r3, #1
 800906a:	e7cd      	b.n	8009008 <__lshift+0x30>
 800906c:	4651      	mov	r1, sl
 800906e:	e7dc      	b.n	800902a <__lshift+0x52>
 8009070:	3904      	subs	r1, #4
 8009072:	f853 2b04 	ldr.w	r2, [r3], #4
 8009076:	f841 2f04 	str.w	r2, [r1, #4]!
 800907a:	459c      	cmp	ip, r3
 800907c:	d8f9      	bhi.n	8009072 <__lshift+0x9a>
 800907e:	e7e4      	b.n	800904a <__lshift+0x72>

08009080 <__mcmp>:
 8009080:	6903      	ldr	r3, [r0, #16]
 8009082:	690a      	ldr	r2, [r1, #16]
 8009084:	1a9b      	subs	r3, r3, r2
 8009086:	b530      	push	{r4, r5, lr}
 8009088:	d10c      	bne.n	80090a4 <__mcmp+0x24>
 800908a:	0092      	lsls	r2, r2, #2
 800908c:	3014      	adds	r0, #20
 800908e:	3114      	adds	r1, #20
 8009090:	1884      	adds	r4, r0, r2
 8009092:	4411      	add	r1, r2
 8009094:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009098:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800909c:	4295      	cmp	r5, r2
 800909e:	d003      	beq.n	80090a8 <__mcmp+0x28>
 80090a0:	d305      	bcc.n	80090ae <__mcmp+0x2e>
 80090a2:	2301      	movs	r3, #1
 80090a4:	4618      	mov	r0, r3
 80090a6:	bd30      	pop	{r4, r5, pc}
 80090a8:	42a0      	cmp	r0, r4
 80090aa:	d3f3      	bcc.n	8009094 <__mcmp+0x14>
 80090ac:	e7fa      	b.n	80090a4 <__mcmp+0x24>
 80090ae:	f04f 33ff 	mov.w	r3, #4294967295
 80090b2:	e7f7      	b.n	80090a4 <__mcmp+0x24>

080090b4 <__mdiff>:
 80090b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b8:	460d      	mov	r5, r1
 80090ba:	4607      	mov	r7, r0
 80090bc:	4611      	mov	r1, r2
 80090be:	4628      	mov	r0, r5
 80090c0:	4614      	mov	r4, r2
 80090c2:	f7ff ffdd 	bl	8009080 <__mcmp>
 80090c6:	1e06      	subs	r6, r0, #0
 80090c8:	d108      	bne.n	80090dc <__mdiff+0x28>
 80090ca:	4631      	mov	r1, r6
 80090cc:	4638      	mov	r0, r7
 80090ce:	f7ff fdc2 	bl	8008c56 <_Balloc>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80090d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090dc:	bfa4      	itt	ge
 80090de:	4623      	movge	r3, r4
 80090e0:	462c      	movge	r4, r5
 80090e2:	4638      	mov	r0, r7
 80090e4:	6861      	ldr	r1, [r4, #4]
 80090e6:	bfa6      	itte	ge
 80090e8:	461d      	movge	r5, r3
 80090ea:	2600      	movge	r6, #0
 80090ec:	2601      	movlt	r6, #1
 80090ee:	f7ff fdb2 	bl	8008c56 <_Balloc>
 80090f2:	692b      	ldr	r3, [r5, #16]
 80090f4:	60c6      	str	r6, [r0, #12]
 80090f6:	6926      	ldr	r6, [r4, #16]
 80090f8:	f105 0914 	add.w	r9, r5, #20
 80090fc:	f104 0214 	add.w	r2, r4, #20
 8009100:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009104:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009108:	f100 0514 	add.w	r5, r0, #20
 800910c:	f04f 0e00 	mov.w	lr, #0
 8009110:	f852 ab04 	ldr.w	sl, [r2], #4
 8009114:	f859 4b04 	ldr.w	r4, [r9], #4
 8009118:	fa1e f18a 	uxtah	r1, lr, sl
 800911c:	b2a3      	uxth	r3, r4
 800911e:	1ac9      	subs	r1, r1, r3
 8009120:	0c23      	lsrs	r3, r4, #16
 8009122:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009126:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800912a:	b289      	uxth	r1, r1
 800912c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009130:	45c8      	cmp	r8, r9
 8009132:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009136:	4694      	mov	ip, r2
 8009138:	f845 3b04 	str.w	r3, [r5], #4
 800913c:	d8e8      	bhi.n	8009110 <__mdiff+0x5c>
 800913e:	45bc      	cmp	ip, r7
 8009140:	d304      	bcc.n	800914c <__mdiff+0x98>
 8009142:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009146:	b183      	cbz	r3, 800916a <__mdiff+0xb6>
 8009148:	6106      	str	r6, [r0, #16]
 800914a:	e7c5      	b.n	80090d8 <__mdiff+0x24>
 800914c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009150:	fa1e f381 	uxtah	r3, lr, r1
 8009154:	141a      	asrs	r2, r3, #16
 8009156:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800915a:	b29b      	uxth	r3, r3
 800915c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009160:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009164:	f845 3b04 	str.w	r3, [r5], #4
 8009168:	e7e9      	b.n	800913e <__mdiff+0x8a>
 800916a:	3e01      	subs	r6, #1
 800916c:	e7e9      	b.n	8009142 <__mdiff+0x8e>

0800916e <__d2b>:
 800916e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009172:	460e      	mov	r6, r1
 8009174:	2101      	movs	r1, #1
 8009176:	ec59 8b10 	vmov	r8, r9, d0
 800917a:	4615      	mov	r5, r2
 800917c:	f7ff fd6b 	bl	8008c56 <_Balloc>
 8009180:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009184:	4607      	mov	r7, r0
 8009186:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800918a:	bb34      	cbnz	r4, 80091da <__d2b+0x6c>
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	f1b8 0300 	subs.w	r3, r8, #0
 8009192:	d027      	beq.n	80091e4 <__d2b+0x76>
 8009194:	a802      	add	r0, sp, #8
 8009196:	f840 3d08 	str.w	r3, [r0, #-8]!
 800919a:	f7ff fe01 	bl	8008da0 <__lo0bits>
 800919e:	9900      	ldr	r1, [sp, #0]
 80091a0:	b1f0      	cbz	r0, 80091e0 <__d2b+0x72>
 80091a2:	9a01      	ldr	r2, [sp, #4]
 80091a4:	f1c0 0320 	rsb	r3, r0, #32
 80091a8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ac:	430b      	orrs	r3, r1
 80091ae:	40c2      	lsrs	r2, r0
 80091b0:	617b      	str	r3, [r7, #20]
 80091b2:	9201      	str	r2, [sp, #4]
 80091b4:	9b01      	ldr	r3, [sp, #4]
 80091b6:	61bb      	str	r3, [r7, #24]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bf14      	ite	ne
 80091bc:	2102      	movne	r1, #2
 80091be:	2101      	moveq	r1, #1
 80091c0:	6139      	str	r1, [r7, #16]
 80091c2:	b1c4      	cbz	r4, 80091f6 <__d2b+0x88>
 80091c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80091c8:	4404      	add	r4, r0
 80091ca:	6034      	str	r4, [r6, #0]
 80091cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091d0:	6028      	str	r0, [r5, #0]
 80091d2:	4638      	mov	r0, r7
 80091d4:	b003      	add	sp, #12
 80091d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091de:	e7d5      	b.n	800918c <__d2b+0x1e>
 80091e0:	6179      	str	r1, [r7, #20]
 80091e2:	e7e7      	b.n	80091b4 <__d2b+0x46>
 80091e4:	a801      	add	r0, sp, #4
 80091e6:	f7ff fddb 	bl	8008da0 <__lo0bits>
 80091ea:	9b01      	ldr	r3, [sp, #4]
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	2101      	movs	r1, #1
 80091f0:	6139      	str	r1, [r7, #16]
 80091f2:	3020      	adds	r0, #32
 80091f4:	e7e5      	b.n	80091c2 <__d2b+0x54>
 80091f6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80091fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091fe:	6030      	str	r0, [r6, #0]
 8009200:	6918      	ldr	r0, [r3, #16]
 8009202:	f7ff fdae 	bl	8008d62 <__hi0bits>
 8009206:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800920a:	e7e1      	b.n	80091d0 <__d2b+0x62>

0800920c <_calloc_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	fb02 f401 	mul.w	r4, r2, r1
 8009212:	4621      	mov	r1, r4
 8009214:	f000 f856 	bl	80092c4 <_malloc_r>
 8009218:	4605      	mov	r5, r0
 800921a:	b118      	cbz	r0, 8009224 <_calloc_r+0x18>
 800921c:	4622      	mov	r2, r4
 800921e:	2100      	movs	r1, #0
 8009220:	f7fd ff18 	bl	8007054 <memset>
 8009224:	4628      	mov	r0, r5
 8009226:	bd38      	pop	{r3, r4, r5, pc}

08009228 <_free_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4605      	mov	r5, r0
 800922c:	2900      	cmp	r1, #0
 800922e:	d045      	beq.n	80092bc <_free_r+0x94>
 8009230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009234:	1f0c      	subs	r4, r1, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	bfb8      	it	lt
 800923a:	18e4      	addlt	r4, r4, r3
 800923c:	f000 fac3 	bl	80097c6 <__malloc_lock>
 8009240:	4a1f      	ldr	r2, [pc, #124]	; (80092c0 <_free_r+0x98>)
 8009242:	6813      	ldr	r3, [r2, #0]
 8009244:	4610      	mov	r0, r2
 8009246:	b933      	cbnz	r3, 8009256 <_free_r+0x2e>
 8009248:	6063      	str	r3, [r4, #4]
 800924a:	6014      	str	r4, [r2, #0]
 800924c:	4628      	mov	r0, r5
 800924e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009252:	f000 bab9 	b.w	80097c8 <__malloc_unlock>
 8009256:	42a3      	cmp	r3, r4
 8009258:	d90c      	bls.n	8009274 <_free_r+0x4c>
 800925a:	6821      	ldr	r1, [r4, #0]
 800925c:	1862      	adds	r2, r4, r1
 800925e:	4293      	cmp	r3, r2
 8009260:	bf04      	itt	eq
 8009262:	681a      	ldreq	r2, [r3, #0]
 8009264:	685b      	ldreq	r3, [r3, #4]
 8009266:	6063      	str	r3, [r4, #4]
 8009268:	bf04      	itt	eq
 800926a:	1852      	addeq	r2, r2, r1
 800926c:	6022      	streq	r2, [r4, #0]
 800926e:	6004      	str	r4, [r0, #0]
 8009270:	e7ec      	b.n	800924c <_free_r+0x24>
 8009272:	4613      	mov	r3, r2
 8009274:	685a      	ldr	r2, [r3, #4]
 8009276:	b10a      	cbz	r2, 800927c <_free_r+0x54>
 8009278:	42a2      	cmp	r2, r4
 800927a:	d9fa      	bls.n	8009272 <_free_r+0x4a>
 800927c:	6819      	ldr	r1, [r3, #0]
 800927e:	1858      	adds	r0, r3, r1
 8009280:	42a0      	cmp	r0, r4
 8009282:	d10b      	bne.n	800929c <_free_r+0x74>
 8009284:	6820      	ldr	r0, [r4, #0]
 8009286:	4401      	add	r1, r0
 8009288:	1858      	adds	r0, r3, r1
 800928a:	4282      	cmp	r2, r0
 800928c:	6019      	str	r1, [r3, #0]
 800928e:	d1dd      	bne.n	800924c <_free_r+0x24>
 8009290:	6810      	ldr	r0, [r2, #0]
 8009292:	6852      	ldr	r2, [r2, #4]
 8009294:	605a      	str	r2, [r3, #4]
 8009296:	4401      	add	r1, r0
 8009298:	6019      	str	r1, [r3, #0]
 800929a:	e7d7      	b.n	800924c <_free_r+0x24>
 800929c:	d902      	bls.n	80092a4 <_free_r+0x7c>
 800929e:	230c      	movs	r3, #12
 80092a0:	602b      	str	r3, [r5, #0]
 80092a2:	e7d3      	b.n	800924c <_free_r+0x24>
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	1821      	adds	r1, r4, r0
 80092a8:	428a      	cmp	r2, r1
 80092aa:	bf04      	itt	eq
 80092ac:	6811      	ldreq	r1, [r2, #0]
 80092ae:	6852      	ldreq	r2, [r2, #4]
 80092b0:	6062      	str	r2, [r4, #4]
 80092b2:	bf04      	itt	eq
 80092b4:	1809      	addeq	r1, r1, r0
 80092b6:	6021      	streq	r1, [r4, #0]
 80092b8:	605c      	str	r4, [r3, #4]
 80092ba:	e7c7      	b.n	800924c <_free_r+0x24>
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	bf00      	nop
 80092c0:	20000634 	.word	0x20000634

080092c4 <_malloc_r>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	1ccd      	adds	r5, r1, #3
 80092c8:	f025 0503 	bic.w	r5, r5, #3
 80092cc:	3508      	adds	r5, #8
 80092ce:	2d0c      	cmp	r5, #12
 80092d0:	bf38      	it	cc
 80092d2:	250c      	movcc	r5, #12
 80092d4:	2d00      	cmp	r5, #0
 80092d6:	4606      	mov	r6, r0
 80092d8:	db01      	blt.n	80092de <_malloc_r+0x1a>
 80092da:	42a9      	cmp	r1, r5
 80092dc:	d903      	bls.n	80092e6 <_malloc_r+0x22>
 80092de:	230c      	movs	r3, #12
 80092e0:	6033      	str	r3, [r6, #0]
 80092e2:	2000      	movs	r0, #0
 80092e4:	bd70      	pop	{r4, r5, r6, pc}
 80092e6:	f000 fa6e 	bl	80097c6 <__malloc_lock>
 80092ea:	4a21      	ldr	r2, [pc, #132]	; (8009370 <_malloc_r+0xac>)
 80092ec:	6814      	ldr	r4, [r2, #0]
 80092ee:	4621      	mov	r1, r4
 80092f0:	b991      	cbnz	r1, 8009318 <_malloc_r+0x54>
 80092f2:	4c20      	ldr	r4, [pc, #128]	; (8009374 <_malloc_r+0xb0>)
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	b91b      	cbnz	r3, 8009300 <_malloc_r+0x3c>
 80092f8:	4630      	mov	r0, r6
 80092fa:	f000 f98f 	bl	800961c <_sbrk_r>
 80092fe:	6020      	str	r0, [r4, #0]
 8009300:	4629      	mov	r1, r5
 8009302:	4630      	mov	r0, r6
 8009304:	f000 f98a 	bl	800961c <_sbrk_r>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d124      	bne.n	8009356 <_malloc_r+0x92>
 800930c:	230c      	movs	r3, #12
 800930e:	6033      	str	r3, [r6, #0]
 8009310:	4630      	mov	r0, r6
 8009312:	f000 fa59 	bl	80097c8 <__malloc_unlock>
 8009316:	e7e4      	b.n	80092e2 <_malloc_r+0x1e>
 8009318:	680b      	ldr	r3, [r1, #0]
 800931a:	1b5b      	subs	r3, r3, r5
 800931c:	d418      	bmi.n	8009350 <_malloc_r+0x8c>
 800931e:	2b0b      	cmp	r3, #11
 8009320:	d90f      	bls.n	8009342 <_malloc_r+0x7e>
 8009322:	600b      	str	r3, [r1, #0]
 8009324:	50cd      	str	r5, [r1, r3]
 8009326:	18cc      	adds	r4, r1, r3
 8009328:	4630      	mov	r0, r6
 800932a:	f000 fa4d 	bl	80097c8 <__malloc_unlock>
 800932e:	f104 000b 	add.w	r0, r4, #11
 8009332:	1d23      	adds	r3, r4, #4
 8009334:	f020 0007 	bic.w	r0, r0, #7
 8009338:	1ac3      	subs	r3, r0, r3
 800933a:	d0d3      	beq.n	80092e4 <_malloc_r+0x20>
 800933c:	425a      	negs	r2, r3
 800933e:	50e2      	str	r2, [r4, r3]
 8009340:	e7d0      	b.n	80092e4 <_malloc_r+0x20>
 8009342:	428c      	cmp	r4, r1
 8009344:	684b      	ldr	r3, [r1, #4]
 8009346:	bf16      	itet	ne
 8009348:	6063      	strne	r3, [r4, #4]
 800934a:	6013      	streq	r3, [r2, #0]
 800934c:	460c      	movne	r4, r1
 800934e:	e7eb      	b.n	8009328 <_malloc_r+0x64>
 8009350:	460c      	mov	r4, r1
 8009352:	6849      	ldr	r1, [r1, #4]
 8009354:	e7cc      	b.n	80092f0 <_malloc_r+0x2c>
 8009356:	1cc4      	adds	r4, r0, #3
 8009358:	f024 0403 	bic.w	r4, r4, #3
 800935c:	42a0      	cmp	r0, r4
 800935e:	d005      	beq.n	800936c <_malloc_r+0xa8>
 8009360:	1a21      	subs	r1, r4, r0
 8009362:	4630      	mov	r0, r6
 8009364:	f000 f95a 	bl	800961c <_sbrk_r>
 8009368:	3001      	adds	r0, #1
 800936a:	d0cf      	beq.n	800930c <_malloc_r+0x48>
 800936c:	6025      	str	r5, [r4, #0]
 800936e:	e7db      	b.n	8009328 <_malloc_r+0x64>
 8009370:	20000634 	.word	0x20000634
 8009374:	20000638 	.word	0x20000638

08009378 <__ssputs_r>:
 8009378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800937c:	688e      	ldr	r6, [r1, #8]
 800937e:	429e      	cmp	r6, r3
 8009380:	4682      	mov	sl, r0
 8009382:	460c      	mov	r4, r1
 8009384:	4690      	mov	r8, r2
 8009386:	4699      	mov	r9, r3
 8009388:	d837      	bhi.n	80093fa <__ssputs_r+0x82>
 800938a:	898a      	ldrh	r2, [r1, #12]
 800938c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009390:	d031      	beq.n	80093f6 <__ssputs_r+0x7e>
 8009392:	6825      	ldr	r5, [r4, #0]
 8009394:	6909      	ldr	r1, [r1, #16]
 8009396:	1a6f      	subs	r7, r5, r1
 8009398:	6965      	ldr	r5, [r4, #20]
 800939a:	2302      	movs	r3, #2
 800939c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80093a4:	f109 0301 	add.w	r3, r9, #1
 80093a8:	443b      	add	r3, r7
 80093aa:	429d      	cmp	r5, r3
 80093ac:	bf38      	it	cc
 80093ae:	461d      	movcc	r5, r3
 80093b0:	0553      	lsls	r3, r2, #21
 80093b2:	d530      	bpl.n	8009416 <__ssputs_r+0x9e>
 80093b4:	4629      	mov	r1, r5
 80093b6:	f7ff ff85 	bl	80092c4 <_malloc_r>
 80093ba:	4606      	mov	r6, r0
 80093bc:	b950      	cbnz	r0, 80093d4 <__ssputs_r+0x5c>
 80093be:	230c      	movs	r3, #12
 80093c0:	f8ca 3000 	str.w	r3, [sl]
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ca:	81a3      	strh	r3, [r4, #12]
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295
 80093d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d4:	463a      	mov	r2, r7
 80093d6:	6921      	ldr	r1, [r4, #16]
 80093d8:	f7ff fc32 	bl	8008c40 <memcpy>
 80093dc:	89a3      	ldrh	r3, [r4, #12]
 80093de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e6:	81a3      	strh	r3, [r4, #12]
 80093e8:	6126      	str	r6, [r4, #16]
 80093ea:	6165      	str	r5, [r4, #20]
 80093ec:	443e      	add	r6, r7
 80093ee:	1bed      	subs	r5, r5, r7
 80093f0:	6026      	str	r6, [r4, #0]
 80093f2:	60a5      	str	r5, [r4, #8]
 80093f4:	464e      	mov	r6, r9
 80093f6:	454e      	cmp	r6, r9
 80093f8:	d900      	bls.n	80093fc <__ssputs_r+0x84>
 80093fa:	464e      	mov	r6, r9
 80093fc:	4632      	mov	r2, r6
 80093fe:	4641      	mov	r1, r8
 8009400:	6820      	ldr	r0, [r4, #0]
 8009402:	f000 f9c7 	bl	8009794 <memmove>
 8009406:	68a3      	ldr	r3, [r4, #8]
 8009408:	1b9b      	subs	r3, r3, r6
 800940a:	60a3      	str	r3, [r4, #8]
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	441e      	add	r6, r3
 8009410:	6026      	str	r6, [r4, #0]
 8009412:	2000      	movs	r0, #0
 8009414:	e7dc      	b.n	80093d0 <__ssputs_r+0x58>
 8009416:	462a      	mov	r2, r5
 8009418:	f000 f9d7 	bl	80097ca <_realloc_r>
 800941c:	4606      	mov	r6, r0
 800941e:	2800      	cmp	r0, #0
 8009420:	d1e2      	bne.n	80093e8 <__ssputs_r+0x70>
 8009422:	6921      	ldr	r1, [r4, #16]
 8009424:	4650      	mov	r0, sl
 8009426:	f7ff feff 	bl	8009228 <_free_r>
 800942a:	e7c8      	b.n	80093be <__ssputs_r+0x46>

0800942c <_svfiprintf_r>:
 800942c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009430:	461d      	mov	r5, r3
 8009432:	898b      	ldrh	r3, [r1, #12]
 8009434:	061f      	lsls	r7, r3, #24
 8009436:	b09d      	sub	sp, #116	; 0x74
 8009438:	4680      	mov	r8, r0
 800943a:	460c      	mov	r4, r1
 800943c:	4616      	mov	r6, r2
 800943e:	d50f      	bpl.n	8009460 <_svfiprintf_r+0x34>
 8009440:	690b      	ldr	r3, [r1, #16]
 8009442:	b96b      	cbnz	r3, 8009460 <_svfiprintf_r+0x34>
 8009444:	2140      	movs	r1, #64	; 0x40
 8009446:	f7ff ff3d 	bl	80092c4 <_malloc_r>
 800944a:	6020      	str	r0, [r4, #0]
 800944c:	6120      	str	r0, [r4, #16]
 800944e:	b928      	cbnz	r0, 800945c <_svfiprintf_r+0x30>
 8009450:	230c      	movs	r3, #12
 8009452:	f8c8 3000 	str.w	r3, [r8]
 8009456:	f04f 30ff 	mov.w	r0, #4294967295
 800945a:	e0c8      	b.n	80095ee <_svfiprintf_r+0x1c2>
 800945c:	2340      	movs	r3, #64	; 0x40
 800945e:	6163      	str	r3, [r4, #20]
 8009460:	2300      	movs	r3, #0
 8009462:	9309      	str	r3, [sp, #36]	; 0x24
 8009464:	2320      	movs	r3, #32
 8009466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800946a:	2330      	movs	r3, #48	; 0x30
 800946c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009470:	9503      	str	r5, [sp, #12]
 8009472:	f04f 0b01 	mov.w	fp, #1
 8009476:	4637      	mov	r7, r6
 8009478:	463d      	mov	r5, r7
 800947a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800947e:	b10b      	cbz	r3, 8009484 <_svfiprintf_r+0x58>
 8009480:	2b25      	cmp	r3, #37	; 0x25
 8009482:	d13e      	bne.n	8009502 <_svfiprintf_r+0xd6>
 8009484:	ebb7 0a06 	subs.w	sl, r7, r6
 8009488:	d00b      	beq.n	80094a2 <_svfiprintf_r+0x76>
 800948a:	4653      	mov	r3, sl
 800948c:	4632      	mov	r2, r6
 800948e:	4621      	mov	r1, r4
 8009490:	4640      	mov	r0, r8
 8009492:	f7ff ff71 	bl	8009378 <__ssputs_r>
 8009496:	3001      	adds	r0, #1
 8009498:	f000 80a4 	beq.w	80095e4 <_svfiprintf_r+0x1b8>
 800949c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800949e:	4453      	add	r3, sl
 80094a0:	9309      	str	r3, [sp, #36]	; 0x24
 80094a2:	783b      	ldrb	r3, [r7, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 809d 	beq.w	80095e4 <_svfiprintf_r+0x1b8>
 80094aa:	2300      	movs	r3, #0
 80094ac:	f04f 32ff 	mov.w	r2, #4294967295
 80094b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	9307      	str	r3, [sp, #28]
 80094b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094bc:	931a      	str	r3, [sp, #104]	; 0x68
 80094be:	462f      	mov	r7, r5
 80094c0:	2205      	movs	r2, #5
 80094c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80094c6:	4850      	ldr	r0, [pc, #320]	; (8009608 <_svfiprintf_r+0x1dc>)
 80094c8:	f7f6 fe8a 	bl	80001e0 <memchr>
 80094cc:	9b04      	ldr	r3, [sp, #16]
 80094ce:	b9d0      	cbnz	r0, 8009506 <_svfiprintf_r+0xda>
 80094d0:	06d9      	lsls	r1, r3, #27
 80094d2:	bf44      	itt	mi
 80094d4:	2220      	movmi	r2, #32
 80094d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094da:	071a      	lsls	r2, r3, #28
 80094dc:	bf44      	itt	mi
 80094de:	222b      	movmi	r2, #43	; 0x2b
 80094e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094e4:	782a      	ldrb	r2, [r5, #0]
 80094e6:	2a2a      	cmp	r2, #42	; 0x2a
 80094e8:	d015      	beq.n	8009516 <_svfiprintf_r+0xea>
 80094ea:	9a07      	ldr	r2, [sp, #28]
 80094ec:	462f      	mov	r7, r5
 80094ee:	2000      	movs	r0, #0
 80094f0:	250a      	movs	r5, #10
 80094f2:	4639      	mov	r1, r7
 80094f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094f8:	3b30      	subs	r3, #48	; 0x30
 80094fa:	2b09      	cmp	r3, #9
 80094fc:	d94d      	bls.n	800959a <_svfiprintf_r+0x16e>
 80094fe:	b1b8      	cbz	r0, 8009530 <_svfiprintf_r+0x104>
 8009500:	e00f      	b.n	8009522 <_svfiprintf_r+0xf6>
 8009502:	462f      	mov	r7, r5
 8009504:	e7b8      	b.n	8009478 <_svfiprintf_r+0x4c>
 8009506:	4a40      	ldr	r2, [pc, #256]	; (8009608 <_svfiprintf_r+0x1dc>)
 8009508:	1a80      	subs	r0, r0, r2
 800950a:	fa0b f000 	lsl.w	r0, fp, r0
 800950e:	4318      	orrs	r0, r3
 8009510:	9004      	str	r0, [sp, #16]
 8009512:	463d      	mov	r5, r7
 8009514:	e7d3      	b.n	80094be <_svfiprintf_r+0x92>
 8009516:	9a03      	ldr	r2, [sp, #12]
 8009518:	1d11      	adds	r1, r2, #4
 800951a:	6812      	ldr	r2, [r2, #0]
 800951c:	9103      	str	r1, [sp, #12]
 800951e:	2a00      	cmp	r2, #0
 8009520:	db01      	blt.n	8009526 <_svfiprintf_r+0xfa>
 8009522:	9207      	str	r2, [sp, #28]
 8009524:	e004      	b.n	8009530 <_svfiprintf_r+0x104>
 8009526:	4252      	negs	r2, r2
 8009528:	f043 0302 	orr.w	r3, r3, #2
 800952c:	9207      	str	r2, [sp, #28]
 800952e:	9304      	str	r3, [sp, #16]
 8009530:	783b      	ldrb	r3, [r7, #0]
 8009532:	2b2e      	cmp	r3, #46	; 0x2e
 8009534:	d10c      	bne.n	8009550 <_svfiprintf_r+0x124>
 8009536:	787b      	ldrb	r3, [r7, #1]
 8009538:	2b2a      	cmp	r3, #42	; 0x2a
 800953a:	d133      	bne.n	80095a4 <_svfiprintf_r+0x178>
 800953c:	9b03      	ldr	r3, [sp, #12]
 800953e:	1d1a      	adds	r2, r3, #4
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	9203      	str	r2, [sp, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	bfb8      	it	lt
 8009548:	f04f 33ff 	movlt.w	r3, #4294967295
 800954c:	3702      	adds	r7, #2
 800954e:	9305      	str	r3, [sp, #20]
 8009550:	4d2e      	ldr	r5, [pc, #184]	; (800960c <_svfiprintf_r+0x1e0>)
 8009552:	7839      	ldrb	r1, [r7, #0]
 8009554:	2203      	movs	r2, #3
 8009556:	4628      	mov	r0, r5
 8009558:	f7f6 fe42 	bl	80001e0 <memchr>
 800955c:	b138      	cbz	r0, 800956e <_svfiprintf_r+0x142>
 800955e:	2340      	movs	r3, #64	; 0x40
 8009560:	1b40      	subs	r0, r0, r5
 8009562:	fa03 f000 	lsl.w	r0, r3, r0
 8009566:	9b04      	ldr	r3, [sp, #16]
 8009568:	4303      	orrs	r3, r0
 800956a:	3701      	adds	r7, #1
 800956c:	9304      	str	r3, [sp, #16]
 800956e:	7839      	ldrb	r1, [r7, #0]
 8009570:	4827      	ldr	r0, [pc, #156]	; (8009610 <_svfiprintf_r+0x1e4>)
 8009572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009576:	2206      	movs	r2, #6
 8009578:	1c7e      	adds	r6, r7, #1
 800957a:	f7f6 fe31 	bl	80001e0 <memchr>
 800957e:	2800      	cmp	r0, #0
 8009580:	d038      	beq.n	80095f4 <_svfiprintf_r+0x1c8>
 8009582:	4b24      	ldr	r3, [pc, #144]	; (8009614 <_svfiprintf_r+0x1e8>)
 8009584:	bb13      	cbnz	r3, 80095cc <_svfiprintf_r+0x1a0>
 8009586:	9b03      	ldr	r3, [sp, #12]
 8009588:	3307      	adds	r3, #7
 800958a:	f023 0307 	bic.w	r3, r3, #7
 800958e:	3308      	adds	r3, #8
 8009590:	9303      	str	r3, [sp, #12]
 8009592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009594:	444b      	add	r3, r9
 8009596:	9309      	str	r3, [sp, #36]	; 0x24
 8009598:	e76d      	b.n	8009476 <_svfiprintf_r+0x4a>
 800959a:	fb05 3202 	mla	r2, r5, r2, r3
 800959e:	2001      	movs	r0, #1
 80095a0:	460f      	mov	r7, r1
 80095a2:	e7a6      	b.n	80094f2 <_svfiprintf_r+0xc6>
 80095a4:	2300      	movs	r3, #0
 80095a6:	3701      	adds	r7, #1
 80095a8:	9305      	str	r3, [sp, #20]
 80095aa:	4619      	mov	r1, r3
 80095ac:	250a      	movs	r5, #10
 80095ae:	4638      	mov	r0, r7
 80095b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095b4:	3a30      	subs	r2, #48	; 0x30
 80095b6:	2a09      	cmp	r2, #9
 80095b8:	d903      	bls.n	80095c2 <_svfiprintf_r+0x196>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d0c8      	beq.n	8009550 <_svfiprintf_r+0x124>
 80095be:	9105      	str	r1, [sp, #20]
 80095c0:	e7c6      	b.n	8009550 <_svfiprintf_r+0x124>
 80095c2:	fb05 2101 	mla	r1, r5, r1, r2
 80095c6:	2301      	movs	r3, #1
 80095c8:	4607      	mov	r7, r0
 80095ca:	e7f0      	b.n	80095ae <_svfiprintf_r+0x182>
 80095cc:	ab03      	add	r3, sp, #12
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	4622      	mov	r2, r4
 80095d2:	4b11      	ldr	r3, [pc, #68]	; (8009618 <_svfiprintf_r+0x1ec>)
 80095d4:	a904      	add	r1, sp, #16
 80095d6:	4640      	mov	r0, r8
 80095d8:	f7fd fdd8 	bl	800718c <_printf_float>
 80095dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80095e0:	4681      	mov	r9, r0
 80095e2:	d1d6      	bne.n	8009592 <_svfiprintf_r+0x166>
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	065b      	lsls	r3, r3, #25
 80095e8:	f53f af35 	bmi.w	8009456 <_svfiprintf_r+0x2a>
 80095ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095ee:	b01d      	add	sp, #116	; 0x74
 80095f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f4:	ab03      	add	r3, sp, #12
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	4622      	mov	r2, r4
 80095fa:	4b07      	ldr	r3, [pc, #28]	; (8009618 <_svfiprintf_r+0x1ec>)
 80095fc:	a904      	add	r1, sp, #16
 80095fe:	4640      	mov	r0, r8
 8009600:	f7fe f87a 	bl	80076f8 <_printf_i>
 8009604:	e7ea      	b.n	80095dc <_svfiprintf_r+0x1b0>
 8009606:	bf00      	nop
 8009608:	0800b94c 	.word	0x0800b94c
 800960c:	0800b952 	.word	0x0800b952
 8009610:	0800b956 	.word	0x0800b956
 8009614:	0800718d 	.word	0x0800718d
 8009618:	08009379 	.word	0x08009379

0800961c <_sbrk_r>:
 800961c:	b538      	push	{r3, r4, r5, lr}
 800961e:	4c06      	ldr	r4, [pc, #24]	; (8009638 <_sbrk_r+0x1c>)
 8009620:	2300      	movs	r3, #0
 8009622:	4605      	mov	r5, r0
 8009624:	4608      	mov	r0, r1
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	f7f8 fcb2 	bl	8001f90 <_sbrk>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d102      	bne.n	8009636 <_sbrk_r+0x1a>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	b103      	cbz	r3, 8009636 <_sbrk_r+0x1a>
 8009634:	602b      	str	r3, [r5, #0]
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	20000ac8 	.word	0x20000ac8

0800963c <__sread>:
 800963c:	b510      	push	{r4, lr}
 800963e:	460c      	mov	r4, r1
 8009640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009644:	f000 f8e8 	bl	8009818 <_read_r>
 8009648:	2800      	cmp	r0, #0
 800964a:	bfab      	itete	ge
 800964c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800964e:	89a3      	ldrhlt	r3, [r4, #12]
 8009650:	181b      	addge	r3, r3, r0
 8009652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009656:	bfac      	ite	ge
 8009658:	6563      	strge	r3, [r4, #84]	; 0x54
 800965a:	81a3      	strhlt	r3, [r4, #12]
 800965c:	bd10      	pop	{r4, pc}

0800965e <__swrite>:
 800965e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009662:	461f      	mov	r7, r3
 8009664:	898b      	ldrh	r3, [r1, #12]
 8009666:	05db      	lsls	r3, r3, #23
 8009668:	4605      	mov	r5, r0
 800966a:	460c      	mov	r4, r1
 800966c:	4616      	mov	r6, r2
 800966e:	d505      	bpl.n	800967c <__swrite+0x1e>
 8009670:	2302      	movs	r3, #2
 8009672:	2200      	movs	r2, #0
 8009674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009678:	f000 f868 	bl	800974c <_lseek_r>
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009686:	81a3      	strh	r3, [r4, #12]
 8009688:	4632      	mov	r2, r6
 800968a:	463b      	mov	r3, r7
 800968c:	4628      	mov	r0, r5
 800968e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009692:	f000 b817 	b.w	80096c4 <_write_r>

08009696 <__sseek>:
 8009696:	b510      	push	{r4, lr}
 8009698:	460c      	mov	r4, r1
 800969a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800969e:	f000 f855 	bl	800974c <_lseek_r>
 80096a2:	1c43      	adds	r3, r0, #1
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	bf15      	itete	ne
 80096a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80096aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096b2:	81a3      	strheq	r3, [r4, #12]
 80096b4:	bf18      	it	ne
 80096b6:	81a3      	strhne	r3, [r4, #12]
 80096b8:	bd10      	pop	{r4, pc}

080096ba <__sclose>:
 80096ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096be:	f000 b813 	b.w	80096e8 <_close_r>
	...

080096c4 <_write_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4c07      	ldr	r4, [pc, #28]	; (80096e4 <_write_r+0x20>)
 80096c8:	4605      	mov	r5, r0
 80096ca:	4608      	mov	r0, r1
 80096cc:	4611      	mov	r1, r2
 80096ce:	2200      	movs	r2, #0
 80096d0:	6022      	str	r2, [r4, #0]
 80096d2:	461a      	mov	r2, r3
 80096d4:	f7f8 fc0b 	bl	8001eee <_write>
 80096d8:	1c43      	adds	r3, r0, #1
 80096da:	d102      	bne.n	80096e2 <_write_r+0x1e>
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	b103      	cbz	r3, 80096e2 <_write_r+0x1e>
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	bd38      	pop	{r3, r4, r5, pc}
 80096e4:	20000ac8 	.word	0x20000ac8

080096e8 <_close_r>:
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	4c06      	ldr	r4, [pc, #24]	; (8009704 <_close_r+0x1c>)
 80096ec:	2300      	movs	r3, #0
 80096ee:	4605      	mov	r5, r0
 80096f0:	4608      	mov	r0, r1
 80096f2:	6023      	str	r3, [r4, #0]
 80096f4:	f7f8 fc17 	bl	8001f26 <_close>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_close_r+0x1a>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_close_r+0x1a>
 8009700:	602b      	str	r3, [r5, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	20000ac8 	.word	0x20000ac8

08009708 <_fstat_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4c07      	ldr	r4, [pc, #28]	; (8009728 <_fstat_r+0x20>)
 800970c:	2300      	movs	r3, #0
 800970e:	4605      	mov	r5, r0
 8009710:	4608      	mov	r0, r1
 8009712:	4611      	mov	r1, r2
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	f7f8 fc12 	bl	8001f3e <_fstat>
 800971a:	1c43      	adds	r3, r0, #1
 800971c:	d102      	bne.n	8009724 <_fstat_r+0x1c>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	b103      	cbz	r3, 8009724 <_fstat_r+0x1c>
 8009722:	602b      	str	r3, [r5, #0]
 8009724:	bd38      	pop	{r3, r4, r5, pc}
 8009726:	bf00      	nop
 8009728:	20000ac8 	.word	0x20000ac8

0800972c <_isatty_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4c06      	ldr	r4, [pc, #24]	; (8009748 <_isatty_r+0x1c>)
 8009730:	2300      	movs	r3, #0
 8009732:	4605      	mov	r5, r0
 8009734:	4608      	mov	r0, r1
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	f7f8 fc11 	bl	8001f5e <_isatty>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_isatty_r+0x1a>
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	b103      	cbz	r3, 8009746 <_isatty_r+0x1a>
 8009744:	602b      	str	r3, [r5, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	20000ac8 	.word	0x20000ac8

0800974c <_lseek_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4c07      	ldr	r4, [pc, #28]	; (800976c <_lseek_r+0x20>)
 8009750:	4605      	mov	r5, r0
 8009752:	4608      	mov	r0, r1
 8009754:	4611      	mov	r1, r2
 8009756:	2200      	movs	r2, #0
 8009758:	6022      	str	r2, [r4, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	f7f8 fc0a 	bl	8001f74 <_lseek>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d102      	bne.n	800976a <_lseek_r+0x1e>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	b103      	cbz	r3, 800976a <_lseek_r+0x1e>
 8009768:	602b      	str	r3, [r5, #0]
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	20000ac8 	.word	0x20000ac8

08009770 <__ascii_mbtowc>:
 8009770:	b082      	sub	sp, #8
 8009772:	b901      	cbnz	r1, 8009776 <__ascii_mbtowc+0x6>
 8009774:	a901      	add	r1, sp, #4
 8009776:	b142      	cbz	r2, 800978a <__ascii_mbtowc+0x1a>
 8009778:	b14b      	cbz	r3, 800978e <__ascii_mbtowc+0x1e>
 800977a:	7813      	ldrb	r3, [r2, #0]
 800977c:	600b      	str	r3, [r1, #0]
 800977e:	7812      	ldrb	r2, [r2, #0]
 8009780:	1c10      	adds	r0, r2, #0
 8009782:	bf18      	it	ne
 8009784:	2001      	movne	r0, #1
 8009786:	b002      	add	sp, #8
 8009788:	4770      	bx	lr
 800978a:	4610      	mov	r0, r2
 800978c:	e7fb      	b.n	8009786 <__ascii_mbtowc+0x16>
 800978e:	f06f 0001 	mvn.w	r0, #1
 8009792:	e7f8      	b.n	8009786 <__ascii_mbtowc+0x16>

08009794 <memmove>:
 8009794:	4288      	cmp	r0, r1
 8009796:	b510      	push	{r4, lr}
 8009798:	eb01 0302 	add.w	r3, r1, r2
 800979c:	d807      	bhi.n	80097ae <memmove+0x1a>
 800979e:	1e42      	subs	r2, r0, #1
 80097a0:	4299      	cmp	r1, r3
 80097a2:	d00a      	beq.n	80097ba <memmove+0x26>
 80097a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80097ac:	e7f8      	b.n	80097a0 <memmove+0xc>
 80097ae:	4283      	cmp	r3, r0
 80097b0:	d9f5      	bls.n	800979e <memmove+0xa>
 80097b2:	1881      	adds	r1, r0, r2
 80097b4:	1ad2      	subs	r2, r2, r3
 80097b6:	42d3      	cmn	r3, r2
 80097b8:	d100      	bne.n	80097bc <memmove+0x28>
 80097ba:	bd10      	pop	{r4, pc}
 80097bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80097c4:	e7f7      	b.n	80097b6 <memmove+0x22>

080097c6 <__malloc_lock>:
 80097c6:	4770      	bx	lr

080097c8 <__malloc_unlock>:
 80097c8:	4770      	bx	lr

080097ca <_realloc_r>:
 80097ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097cc:	4607      	mov	r7, r0
 80097ce:	4614      	mov	r4, r2
 80097d0:	460e      	mov	r6, r1
 80097d2:	b921      	cbnz	r1, 80097de <_realloc_r+0x14>
 80097d4:	4611      	mov	r1, r2
 80097d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80097da:	f7ff bd73 	b.w	80092c4 <_malloc_r>
 80097de:	b922      	cbnz	r2, 80097ea <_realloc_r+0x20>
 80097e0:	f7ff fd22 	bl	8009228 <_free_r>
 80097e4:	4625      	mov	r5, r4
 80097e6:	4628      	mov	r0, r5
 80097e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ea:	f000 f834 	bl	8009856 <_malloc_usable_size_r>
 80097ee:	42a0      	cmp	r0, r4
 80097f0:	d20f      	bcs.n	8009812 <_realloc_r+0x48>
 80097f2:	4621      	mov	r1, r4
 80097f4:	4638      	mov	r0, r7
 80097f6:	f7ff fd65 	bl	80092c4 <_malloc_r>
 80097fa:	4605      	mov	r5, r0
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d0f2      	beq.n	80097e6 <_realloc_r+0x1c>
 8009800:	4631      	mov	r1, r6
 8009802:	4622      	mov	r2, r4
 8009804:	f7ff fa1c 	bl	8008c40 <memcpy>
 8009808:	4631      	mov	r1, r6
 800980a:	4638      	mov	r0, r7
 800980c:	f7ff fd0c 	bl	8009228 <_free_r>
 8009810:	e7e9      	b.n	80097e6 <_realloc_r+0x1c>
 8009812:	4635      	mov	r5, r6
 8009814:	e7e7      	b.n	80097e6 <_realloc_r+0x1c>
	...

08009818 <_read_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4c07      	ldr	r4, [pc, #28]	; (8009838 <_read_r+0x20>)
 800981c:	4605      	mov	r5, r0
 800981e:	4608      	mov	r0, r1
 8009820:	4611      	mov	r1, r2
 8009822:	2200      	movs	r2, #0
 8009824:	6022      	str	r2, [r4, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	f7f8 fb44 	bl	8001eb4 <_read>
 800982c:	1c43      	adds	r3, r0, #1
 800982e:	d102      	bne.n	8009836 <_read_r+0x1e>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	b103      	cbz	r3, 8009836 <_read_r+0x1e>
 8009834:	602b      	str	r3, [r5, #0]
 8009836:	bd38      	pop	{r3, r4, r5, pc}
 8009838:	20000ac8 	.word	0x20000ac8

0800983c <__ascii_wctomb>:
 800983c:	b149      	cbz	r1, 8009852 <__ascii_wctomb+0x16>
 800983e:	2aff      	cmp	r2, #255	; 0xff
 8009840:	bf85      	ittet	hi
 8009842:	238a      	movhi	r3, #138	; 0x8a
 8009844:	6003      	strhi	r3, [r0, #0]
 8009846:	700a      	strbls	r2, [r1, #0]
 8009848:	f04f 30ff 	movhi.w	r0, #4294967295
 800984c:	bf98      	it	ls
 800984e:	2001      	movls	r0, #1
 8009850:	4770      	bx	lr
 8009852:	4608      	mov	r0, r1
 8009854:	4770      	bx	lr

08009856 <_malloc_usable_size_r>:
 8009856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800985a:	1f18      	subs	r0, r3, #4
 800985c:	2b00      	cmp	r3, #0
 800985e:	bfbc      	itt	lt
 8009860:	580b      	ldrlt	r3, [r1, r0]
 8009862:	18c0      	addlt	r0, r0, r3
 8009864:	4770      	bx	lr
	...

08009868 <_init>:
 8009868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986a:	bf00      	nop
 800986c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800986e:	bc08      	pop	{r3}
 8009870:	469e      	mov	lr, r3
 8009872:	4770      	bx	lr

08009874 <_fini>:
 8009874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009876:	bf00      	nop
 8009878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800987a:	bc08      	pop	{r3}
 800987c:	469e      	mov	lr, r3
 800987e:	4770      	bx	lr
