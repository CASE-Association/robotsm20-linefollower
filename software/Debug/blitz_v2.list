
blitz_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ed4  08005cbc  08005cbc  00015cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b90  08007b90  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b98  08007b98  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b98  08007b98  00017b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  20000080  08007c20  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000838  08007c20  00020838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ad7  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027b6  00000000  00000000  00032b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b8  00000000  00000000  00035340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  000363f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021414  00000000  00000000  00037368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d549  00000000  00000000  0005877c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2d3d  00000000  00000000  00065cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128a02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a90  00000000  00000000  00128a80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ca4 	.word	0x08005ca4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08005ca4 	.word	0x08005ca4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 80004d0:	1d39      	adds	r1, r7, #4
 80004d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d6:	2201      	movs	r2, #1
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <__io_putchar+0x20>)
 80004da:	f004 faea 	bl	8004ab2 <HAL_UART_Transmit>
	return ch;
 80004de:	687b      	ldr	r3, [r7, #4]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200005d8 	.word	0x200005d8

080004ec <tests_run>:

void tests_run(){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	printf("\r\n========== RUN TESTS ==========\r\n");
 80004f0:	480f      	ldr	r0, [pc, #60]	; (8000530 <tests_run+0x44>)
 80004f2:	f004 ffcb 	bl	800548c <puts>
	printf("\t- Buzzer\r\n");
 80004f6:	480f      	ldr	r0, [pc, #60]	; (8000534 <tests_run+0x48>)
 80004f8:	f004 ffc8 	bl	800548c <puts>
	test_buzzer();
 80004fc:	f000 fffe 	bl	80014fc <test_buzzer>
	HAL_Delay(2000);
 8000500:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000504:	f001 ffba 	bl	800247c <HAL_Delay>
	printf("\t- Motors\r\n");
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <tests_run+0x4c>)
 800050a:	f004 ffbf 	bl	800548c <puts>
	test_motors();
 800050e:	f001 f9a3 	bl	8001858 <test_motors>
	HAL_Delay(2000);
 8000512:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000516:	f001 ffb1 	bl	800247c <HAL_Delay>
	printf("\t- Fans\r\n");
 800051a:	4808      	ldr	r0, [pc, #32]	; (800053c <tests_run+0x50>)
 800051c:	f004 ffb6 	bl	800548c <puts>
	test_fan();
 8000520:	f001 f820 	bl	8001564 <test_fan>
	HAL_Delay(2000);
 8000524:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000528:	f001 ffa8 	bl	800247c <HAL_Delay>
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	08005cbc 	.word	0x08005cbc
 8000534:	08005ce0 	.word	0x08005ce0
 8000538:	08005cec 	.word	0x08005cec
 800053c:	08005cf8 	.word	0x08005cf8

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000544:	f001 ff28 	bl	8002398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f88c 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 fb56 	bl	8000bfc <MX_GPIO_Init>
  MX_I2C3_Init();
 8000550:	f000 f8e6 	bl	8000720 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000554:	f000 f912 	bl	800077c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000558:	f000 fb26 	bl	8000ba8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800055c:	f000 fa48 	bl	80009f0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000560:	f000 f9e2 	bl	8000928 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000564:	f000 f98c 	bl	8000880 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000568:	f000 faa6 	bl	8000ab8 <MX_TIM5_Init>
  MX_TIM14_Init();
 800056c:	f000 faf8 	bl	8000b60 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  printf("========== Blitz V2 ==========\r\n");
 8000570:	4832      	ldr	r0, [pc, #200]	; (800063c <main+0xfc>)
 8000572:	f004 ff8b 	bl	800548c <puts>
  printf("Created by Oskar & Isak\r\n");
 8000576:	4832      	ldr	r0, [pc, #200]	; (8000640 <main+0x100>)
 8000578:	f004 ff88 	bl	800548c <puts>


  printf("\r\n========== Initializing peripherals ==========\r\n");
 800057c:	4831      	ldr	r0, [pc, #196]	; (8000644 <main+0x104>)
 800057e:	f004 ff85 	bl	800548c <puts>
  printf("\t- Buzzer\r\n");
 8000582:	4831      	ldr	r0, [pc, #196]	; (8000648 <main+0x108>)
 8000584:	f004 ff82 	bl	800548c <puts>
  init_buzzer();
 8000588:	f000 ff66 	bl	8001458 <init_buzzer>
  //Startup beep
  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800058c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000590:	482e      	ldr	r0, [pc, #184]	; (800064c <main+0x10c>)
 8000592:	f002 fa72 	bl	8002a7a <HAL_GPIO_TogglePin>
	tone(523,200);
 8000596:	21c8      	movs	r1, #200	; 0xc8
 8000598:	f240 200b 	movw	r0, #523	; 0x20b
 800059c:	f000 ff86 	bl	80014ac <tone>
	HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80005a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a4:	4829      	ldr	r0, [pc, #164]	; (800064c <main+0x10c>)
 80005a6:	f002 fa68 	bl	8002a7a <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80005aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ae:	4827      	ldr	r0, [pc, #156]	; (800064c <main+0x10c>)
 80005b0:	f002 fa63 	bl	8002a7a <HAL_GPIO_TogglePin>
	tone(659,200);
 80005b4:	21c8      	movs	r1, #200	; 0xc8
 80005b6:	f240 2093 	movw	r0, #659	; 0x293
 80005ba:	f000 ff77 	bl	80014ac <tone>
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	4822      	ldr	r0, [pc, #136]	; (800064c <main+0x10c>)
 80005c4:	f002 fa59 	bl	8002a7a <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 80005c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005cc:	4820      	ldr	r0, [pc, #128]	; (8000650 <main+0x110>)
 80005ce:	f002 fa54 	bl	8002a7a <HAL_GPIO_TogglePin>
	tone(784,200);
 80005d2:	21c8      	movs	r1, #200	; 0xc8
 80005d4:	f44f 7044 	mov.w	r0, #784	; 0x310
 80005d8:	f000 ff68 	bl	80014ac <tone>
	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 80005dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e0:	481b      	ldr	r0, [pc, #108]	; (8000650 <main+0x110>)
 80005e2:	f002 fa4a 	bl	8002a7a <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80005e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ea:	f001 ff47 	bl	800247c <HAL_Delay>

  printf("\t- OLED\r\n");
 80005ee:	4819      	ldr	r0, [pc, #100]	; (8000654 <main+0x114>)
 80005f0:	f004 ff4c 	bl	800548c <puts>
  init_oled(); // Draws CASE LOGO for now
 80005f4:	f001 f9a0 	bl	8001938 <init_oled>
  HAL_Delay(500);
 80005f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005fc:	f001 ff3e 	bl	800247c <HAL_Delay>
  printf("\t- Motors\r\n");
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <main+0x118>)
 8000602:	f004 ff43 	bl	800548c <puts>
  init_motors();
 8000606:	f001 f871 	bl	80016ec <init_motors>
  HAL_Delay(500);
 800060a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060e:	f001 ff35 	bl	800247c <HAL_Delay>
  printf("\t- Fans\r\n");
 8000612:	4812      	ldr	r0, [pc, #72]	; (800065c <main+0x11c>)
 8000614:	f004 ff3a 	bl	800548c <puts>
  init_fans();
 8000618:	f000 ff80 	bl	800151c <init_fans>
  HAL_Delay(3000); //Wait for fans to beep
 800061c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000620:	f001 ff2c 	bl	800247c <HAL_Delay>


  // Run all tests
  tests_run();
 8000624:	f7ff ff62 	bl	80004ec <tests_run>

  printf("\r\n========== Starting Blitz ==========\r\n");
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <main+0x120>)
 800062a:	f004 ff2f 	bl	800548c <puts>

    /* USER CODE BEGIN 3 */

  	//printf("Left Enc: %d\t\t Right Enc: %d\r\n", (int)TIM2->CNT, (int)TIM5->CNT);

  	oled_update();
 800062e:	f001 fa55 	bl	8001adc <oled_update>
  	HAL_Delay(10);
 8000632:	200a      	movs	r0, #10
 8000634:	f001 ff22 	bl	800247c <HAL_Delay>
  	oled_update();
 8000638:	e7f9      	b.n	800062e <main+0xee>
 800063a:	bf00      	nop
 800063c:	08005d04 	.word	0x08005d04
 8000640:	08005d24 	.word	0x08005d24
 8000644:	08005d40 	.word	0x08005d40
 8000648:	08005ce0 	.word	0x08005ce0
 800064c:	40020800 	.word	0x40020800
 8000650:	40020000 	.word	0x40020000
 8000654:	08005d74 	.word	0x08005d74
 8000658:	08005cec 	.word	0x08005cec
 800065c:	08005cf8 	.word	0x08005cf8
 8000660:	08005d80 	.word	0x08005d80

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f004 fea6 	bl	80053c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xb4>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xb4>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xb4>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <SystemClock_Config+0xb8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <SystemClock_Config+0xb8>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <SystemClock_Config+0xb8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fe5d 	bl	8003394 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006e0:	f000 fb2c 	bl	8000d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 f8b8 	bl	8003874 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800070a:	f000 fb17 	bl	8000d3c <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_I2C3_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <MX_I2C3_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_I2C3_Init+0x50>)
 800072c:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_I2C3_Init+0x58>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_I2C3_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_I2C3_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_I2C3_Init+0x50>)
 800073e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000742:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_I2C3_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_I2C3_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_I2C3_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_I2C3_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_I2C3_Init+0x50>)
 800075e:	f002 f9cb 	bl	8002af8 <HAL_I2C_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 fae8 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200004c4 	.word	0x200004c4
 8000774:	40005c00 	.word	0x40005c00
 8000778:	00061a80 	.word	0x00061a80

0800077c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b092      	sub	sp, #72	; 0x48
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000782:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2220      	movs	r2, #32
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 fe0c 	bl	80053c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ac:	4b32      	ldr	r3, [pc, #200]	; (8000878 <MX_TIM1_Init+0xfc>)
 80007ae:	4a33      	ldr	r2, [pc, #204]	; (800087c <MX_TIM1_Init+0x100>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 80007b2:	4b31      	ldr	r3, [pc, #196]	; (8000878 <MX_TIM1_Init+0xfc>)
 80007b4:	2203      	movs	r2, #3
 80007b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <MX_TIM1_Init+0xfc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80007be:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <MX_TIM1_Init+0xfc>)
 80007c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <MX_TIM1_Init+0xfc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007cc:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <MX_TIM1_Init+0xfc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_TIM1_Init+0xfc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007d8:	4827      	ldr	r0, [pc, #156]	; (8000878 <MX_TIM1_Init+0xfc>)
 80007da:	f003 fa91 	bl	8003d00 <HAL_TIM_PWM_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80007e4:	f000 faaa 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007f4:	4619      	mov	r1, r3
 80007f6:	4820      	ldr	r0, [pc, #128]	; (8000878 <MX_TIM1_Init+0xfc>)
 80007f8:	f004 f82c 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000802:	f000 fa9b 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000806:	2360      	movs	r3, #96	; 0x60
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	220c      	movs	r2, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4814      	ldr	r0, [pc, #80]	; (8000878 <MX_TIM1_Init+0xfc>)
 8000828:	f003 fca6 	bl	8004178 <HAL_TIM_PWM_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000832:	f000 fa83 	bl	8000d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800084a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <MX_TIM1_Init+0xfc>)
 800085a:	f004 f877 	bl	800494c <HAL_TIMEx_ConfigBreakDeadTime>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000864:	f000 fa6a 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <MX_TIM1_Init+0xfc>)
 800086a:	f000 fc11 	bl	8001090 <HAL_TIM_MspPostInit>

}
 800086e:	bf00      	nop
 8000870:	3748      	adds	r7, #72	; 0x48
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000618 	.word	0x20000618
 800087c:	40010000 	.word	0x40010000

08000880 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	; 0x30
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	2224      	movs	r2, #36	; 0x24
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f004 fd98 	bl	80053c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_TIM2_Init+0xa4>)
 800089e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008b2:	f04f 32ff 	mov.w	r2, #4294967295
 80008b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008c4:	2303      	movs	r3, #3
 80008c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008cc:	2301      	movs	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008dc:	2301      	movs	r3, #1
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008f0:	f003 fa70 	bl	8003dd4 <HAL_TIM_Encoder_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80008fa:	f000 fa1f 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4619      	mov	r1, r3
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <MX_TIM2_Init+0xa4>)
 800090c:	f003 ffa2 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000916:	f000 fa11 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	3730      	adds	r7, #48	; 0x30
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000658 	.word	0x20000658

08000928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800094a:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <MX_TIM3_Init+0xc0>)
 800094c:	4a27      	ldr	r2, [pc, #156]	; (80009ec <MX_TIM3_Init+0xc4>)
 800094e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <MX_TIM3_Init+0xc0>)
 8000952:	220f      	movs	r2, #15
 8000954:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <MX_TIM3_Init+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <MX_TIM3_Init+0xc0>)
 800095e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000962:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <MX_TIM3_Init+0xc0>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_TIM3_Init+0xc0>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000970:	481d      	ldr	r0, [pc, #116]	; (80009e8 <MX_TIM3_Init+0xc0>)
 8000972:	f003 f9c5 	bl	8003d00 <HAL_TIM_PWM_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 f9de 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4619      	mov	r1, r3
 800098e:	4816      	ldr	r0, [pc, #88]	; (80009e8 <MX_TIM3_Init+0xc0>)
 8000990:	f003 ff60 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800099a:	f000 f9cf 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099e:	2360      	movs	r3, #96	; 0x60
 80009a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <MX_TIM3_Init+0xc0>)
 80009b6:	f003 fbdf 	bl	8004178 <HAL_TIM_PWM_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80009c0:	f000 f9bc 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2204      	movs	r2, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	4807      	ldr	r0, [pc, #28]	; (80009e8 <MX_TIM3_Init+0xc0>)
 80009cc:	f003 fbd4 	bl	8004178 <HAL_TIM_PWM_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009d6:	f000 f9b1 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009da:	4803      	ldr	r0, [pc, #12]	; (80009e8 <MX_TIM3_Init+0xc0>)
 80009dc:	f000 fb58 	bl	8001090 <HAL_TIM_MspPostInit>

}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000598 	.word	0x20000598
 80009ec:	40000400 	.word	0x40000400

080009f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a14:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <MX_TIM4_Init+0xc4>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a38:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a3a:	f003 f961 	bl	8003d00 <HAL_TIM_PWM_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000a44:	f000 f97a 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	4619      	mov	r1, r3
 8000a56:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a58:	f003 fefc 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a62:	f000 f96b 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a66:	2360      	movs	r3, #96	; 0x60
 8000a68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2208      	movs	r2, #8
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a7e:	f003 fb7b 	bl	8004178 <HAL_TIM_PWM_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a88:	f000 f958 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	220c      	movs	r2, #12
 8000a90:	4619      	mov	r1, r3
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a94:	f003 fb70 	bl	8004178 <HAL_TIM_PWM_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a9e:	f000 f94d 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000aa4:	f000 faf4 	bl	8001090 <HAL_TIM_MspPostInit>

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000518 	.word	0x20000518
 8000ab4:	40000800 	.word	0x40000800

08000ab8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	2224      	movs	r2, #36	; 0x24
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f004 fc7c 	bl	80053c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ad4:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <MX_TIM5_Init+0xa0>)
 8000ad6:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <MX_TIM5_Init+0xa4>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_TIM5_Init+0xa0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_TIM5_Init+0xa0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_TIM5_Init+0xa0>)
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_TIM5_Init+0xa0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_TIM5_Init+0xa0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b12:	2301      	movs	r3, #1
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4619      	mov	r1, r3
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <MX_TIM5_Init+0xa0>)
 8000b26:	f003 f955 	bl	8003dd4 <HAL_TIM_Encoder_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f000 f904 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_TIM5_Init+0xa0>)
 8000b42:	f003 fe87 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000b4c:	f000 f8f6 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	3730      	adds	r7, #48	; 0x30
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000558 	.word	0x20000558
 8000b5c:	40000c00 	.word	0x40000c00

08000b60 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_TIM14_Init+0x40>)
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <MX_TIM14_Init+0x44>)
 8000b68:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000;
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <MX_TIM14_Init+0x40>)
 8000b6c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000b70:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_TIM14_Init+0x40>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_TIM14_Init+0x40>)
 8000b7a:	2232      	movs	r2, #50	; 0x32
 8000b7c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_TIM14_Init+0x40>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_TIM14_Init+0x40>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_TIM14_Init+0x40>)
 8000b8c:	f003 f83e 	bl	8003c0c <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000b96:	f000 f8d1 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000698 	.word	0x20000698
 8000ba4:	40002000 	.word	0x40002000

08000ba8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_USART1_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000be0:	f003 ff1a 	bl	8004a18 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f000 f8a7 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200005d8 	.word	0x200005d8
 8000bf8:	40011000 	.word	0x40011000

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	4b44      	ldr	r3, [pc, #272]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a43      	ldr	r2, [pc, #268]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b41      	ldr	r3, [pc, #260]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b3d      	ldr	r3, [pc, #244]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b3a      	ldr	r3, [pc, #232]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a35      	ldr	r2, [pc, #212]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b33      	ldr	r3, [pc, #204]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c6c:	482f      	ldr	r0, [pc, #188]	; (8000d2c <MX_GPIO_Init+0x130>)
 8000c6e:	f001 feeb 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000c78:	482d      	ldr	r0, [pc, #180]	; (8000d30 <MX_GPIO_Init+0x134>)
 8000c7a:	f001 fee5 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin|MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	21f0      	movs	r1, #240	; 0xf0
 8000c82:	482c      	ldr	r0, [pc, #176]	; (8000d34 <MX_GPIO_Init+0x138>)
 8000c84:	f001 fee0 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_SELECT_Pin */
  GPIO_InitStruct.Pin = BUTTON_SELECT_Pin;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c8c:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <MX_GPIO_Init+0x13c>)
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_SELECT_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4825      	ldr	r0, [pc, #148]	; (8000d30 <MX_GPIO_Init+0x134>)
 8000c9c:	f001 fd22 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4820      	ldr	r0, [pc, #128]	; (8000d34 <MX_GPIO_Init+0x138>)
 8000cb4:	f001 fd16 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4816      	ldr	r0, [pc, #88]	; (8000d2c <MX_GPIO_Init+0x130>)
 8000cd2:	f001 fd07 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8000cd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4619      	mov	r1, r3
 8000cee:	4810      	ldr	r0, [pc, #64]	; (8000d30 <MX_GPIO_Init+0x134>)
 8000cf0:	f001 fcf8 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_R_IN2_Pin MOTOR_R_IN1_Pin MOTOR_L_IN2_Pin MOTOR_L_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin|MOTOR_L_IN1_Pin;
 8000cf4:	23f0      	movs	r3, #240	; 0xf0
 8000cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480a      	ldr	r0, [pc, #40]	; (8000d34 <MX_GPIO_Init+0x138>)
 8000d0c:	f001 fcea 	bl	80026e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	2009      	movs	r0, #9
 8000d16:	f001 fcae 	bl	8002676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d1a:	2009      	movs	r0, #9
 8000d1c:	f001 fcc7 	bl	80026ae <HAL_NVIC_EnableIRQ>

}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020400 	.word	0x40020400
 8000d38:	10210000 	.word	0x10210000

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <HAL_I2C_MspInit+0xc4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d14b      	bne.n	8000e56 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <HAL_I2C_MspInit+0xc8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <HAL_I2C_MspInit+0xc8>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_I2C_MspInit+0xc8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_I2C_MspInit+0xc8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <HAL_I2C_MspInit+0xc8>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <HAL_I2C_MspInit+0xc8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = SDA_Pin;
 8000df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfc:	2312      	movs	r3, #18
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4815      	ldr	r0, [pc, #84]	; (8000e68 <HAL_I2C_MspInit+0xcc>)
 8000e14:	f001 fc66 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCL_Pin;
 8000e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1e:	2312      	movs	r3, #18
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <HAL_I2C_MspInit+0xd0>)
 8000e36:	f001 fc55 	bl	80026e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_I2C_MspInit+0xc8>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_I2C_MspInit+0xc8>)
 8000e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_I2C_MspInit+0xc8>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	; 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40005c00 	.word	0x40005c00
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	40020000 	.word	0x40020000

08000e70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a1f      	ldr	r2, [pc, #124]	; (8000efc <HAL_TIM_PWM_MspInit+0x8c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d10e      	bne.n	8000ea0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <HAL_TIM_PWM_MspInit+0x90>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <HAL_TIM_PWM_MspInit+0x90>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <HAL_TIM_PWM_MspInit+0x90>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e9e:	e026      	b.n	8000eee <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_TIM_PWM_MspInit+0x94>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d10e      	bne.n	8000ec8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <HAL_TIM_PWM_MspInit+0x90>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <HAL_TIM_PWM_MspInit+0x90>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_TIM_PWM_MspInit+0x90>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
}
 8000ec6:	e012      	b.n	8000eee <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_TIM_PWM_MspInit+0x98>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d10d      	bne.n	8000eee <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_TIM_PWM_MspInit+0x90>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <HAL_TIM_PWM_MspInit+0x90>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <HAL_TIM_PWM_MspInit+0x90>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
}
 8000eee:	bf00      	nop
 8000ef0:	371c      	adds	r7, #28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40010000 	.word	0x40010000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40000400 	.word	0x40000400
 8000f08:	40000800 	.word	0x40000800

08000f0c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f2c:	d14a      	bne.n	8000fc4 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a3e      	ldr	r2, [pc, #248]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
 8000f48:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	4b38      	ldr	r3, [pc, #224]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a37      	ldr	r2, [pc, #220]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a30      	ldr	r2, [pc, #192]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_L_A_Pin;
 8000f82:	2320      	movs	r3, #32
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f92:	2301      	movs	r3, #1
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4825      	ldr	r0, [pc, #148]	; (8001034 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f9e:	f001 fba1 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_L_B_Pin;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481e      	ldr	r0, [pc, #120]	; (8001038 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000fbe:	f001 fb91 	bl	80026e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000fc2:	e030      	b.n	8001026 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1c      	ldr	r2, [pc, #112]	; (800103c <HAL_TIM_Encoder_MspInit+0x130>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d12b      	bne.n	8001026 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a16      	ldr	r2, [pc, #88]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_TIM_Encoder_MspInit+0x124>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_R_B_Pin|ENC_R_A_Pin;
 8001006:	2303      	movs	r3, #3
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001016:	2302      	movs	r3, #2
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <HAL_TIM_Encoder_MspInit+0x128>)
 8001022:	f001 fb5f 	bl	80026e4 <HAL_GPIO_Init>
}
 8001026:	bf00      	nop
 8001028:	3730      	adds	r7, #48	; 0x30
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40000c00 	.word	0x40000c00

08001040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_TIM_Base_MspInit+0x48>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d115      	bne.n	800107e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_TIM_Base_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <HAL_TIM_Base_MspInit+0x4c>)
 800105c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_TIM_Base_MspInit+0x4c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	202d      	movs	r0, #45	; 0x2d
 8001074:	f001 faff 	bl	8002676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001078:	202d      	movs	r0, #45	; 0x2d
 800107a:	f001 fb18 	bl	80026ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40002000 	.word	0x40002000
 800108c:	40023800 	.word	0x40023800

08001090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a37      	ldr	r2, [pc, #220]	; (800118c <HAL_TIM_MspPostInit+0xfc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d11f      	bne.n	80010f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <HAL_TIM_MspPostInit+0x100>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a35      	ldr	r2, [pc, #212]	; (8001190 <HAL_TIM_MspPostInit+0x100>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <HAL_TIM_MspPostInit+0x100>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80010ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	482a      	ldr	r0, [pc, #168]	; (8001194 <HAL_TIM_MspPostInit+0x104>)
 80010ec:	f001 fafa 	bl	80026e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010f0:	e047      	b.n	8001182 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a28      	ldr	r2, [pc, #160]	; (8001198 <HAL_TIM_MspPostInit+0x108>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d11e      	bne.n	800113a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <HAL_TIM_MspPostInit+0x100>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a22      	ldr	r2, [pc, #136]	; (8001190 <HAL_TIM_MspPostInit+0x100>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_TIM_MspPostInit+0x100>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_L_PWM_Pin|FAN_R_PWM_Pin;
 8001118:	23c0      	movs	r3, #192	; 0xc0
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001128:	2302      	movs	r3, #2
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	481a      	ldr	r0, [pc, #104]	; (800119c <HAL_TIM_MspPostInit+0x10c>)
 8001134:	f001 fad6 	bl	80026e4 <HAL_GPIO_Init>
}
 8001138:	e023      	b.n	8001182 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <HAL_TIM_MspPostInit+0x110>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d11e      	bne.n	8001182 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_TIM_MspPostInit+0x100>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_TIM_MspPostInit+0x100>)
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	6313      	str	r3, [r2, #48]	; 0x30
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_TIM_MspPostInit+0x100>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin|MOTOR_L_PWM_Pin;
 8001160:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001172:	2302      	movs	r3, #2
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <HAL_TIM_MspPostInit+0x114>)
 800117e:	f001 fab1 	bl	80026e4 <HAL_GPIO_Init>
}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010000 	.word	0x40010000
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000
 8001198:	40000400 	.word	0x40000400
 800119c:	40020800 	.word	0x40020800
 80011a0:	40000800 	.word	0x40000800
 80011a4:	40020400 	.word	0x40020400

080011a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a19      	ldr	r2, [pc, #100]	; (800122c <HAL_UART_MspInit+0x84>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12c      	bne.n	8001224 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_UART_MspInit+0x88>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_UART_MspInit+0x88>)
 80011d4:	f043 0310 	orr.w	r3, r3, #16
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_UART_MspInit+0x88>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_UART_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a10      	ldr	r2, [pc, #64]	; (8001230 <HAL_UART_MspInit+0x88>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_UART_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001202:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001214:	2307      	movs	r3, #7
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <HAL_UART_MspInit+0x8c>)
 8001220:	f001 fa60 	bl	80026e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	; 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40011000 	.word	0x40011000
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <MemManage_Handler+0x4>

08001252 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <UsageFault_Handler+0x4>

0800125e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128c:	f001 f8d6 	bl	800243c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001298:	2008      	movs	r0, #8
 800129a:	f001 fc09 	bl	8002ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  // Button might have been pressed when this interrupt is called
  // Software debounce
  if(!checking){
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <EXTI3_IRQHandler+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <EXTI3_IRQHandler+0x1e>
		HAL_TIM_Base_Start_IT(&htim14);
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <EXTI3_IRQHandler+0x28>)
 80012a8:	f002 fcdb 	bl	8003c62 <HAL_TIM_Base_Start_IT>
		checking = 1;
 80012ac:	4b02      	ldr	r3, [pc, #8]	; (80012b8 <EXTI3_IRQHandler+0x24>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END EXTI3_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000009c 	.word	0x2000009c
 80012bc:	20000698 	.word	0x20000698

080012c0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 80012c6:	f002 fe4e 	bl	8003f66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
  if(HAL_GPIO_ReadPin(BUTTON_SELECT_GPIO_Port, BUTTON_SELECT_Pin) == GPIO_PIN_RESET){
 80012ca:	2108      	movs	r1, #8
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 80012ce:	f001 fba3 	bl	8002a18 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d107      	bne.n	80012e8 <TIM8_TRG_COM_TIM14_IRQHandler+0x28>
		checking = 0;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim14);
 80012de:	4803      	ldr	r0, [pc, #12]	; (80012ec <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 80012e0:	f002 fce3 	bl	8003caa <HAL_TIM_Base_Stop_IT>
		oled_button_press();
 80012e4:	f000 fd50 	bl	8001d88 <oled_button_press>
	}

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000698 	.word	0x20000698
 80012f0:	40020800 	.word	0x40020800
 80012f4:	2000009c 	.word	0x2000009c

080012f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e00a      	b.n	8001320 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800130a:	f3af 8000 	nop.w
 800130e:	4601      	mov	r1, r0
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	60ba      	str	r2, [r7, #8]
 8001316:	b2ca      	uxtb	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf0      	blt.n	800130a <_read+0x12>
	}

return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	e009      	b.n	8001358 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60ba      	str	r2, [r7, #8]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8bb 	bl	80004c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	dbf1      	blt.n	8001344 <_write+0x12>
	}
	return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_close>:

int _close(int file)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	return -1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001392:	605a      	str	r2, [r3, #4]
	return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <_isatty>:

int _isatty(int file)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	return 1;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <_sbrk+0x50>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x16>
		heap_end = &end;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <_sbrk+0x50>)
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <_sbrk+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <_sbrk+0x50>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <_sbrk+0x50>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	466a      	mov	r2, sp
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d907      	bls.n	800140e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013fe:	f003 ffb7 	bl	8005370 <__errno>
 8001402:	4602      	mov	r2, r0
 8001404:	230c      	movs	r3, #12
 8001406:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	e006      	b.n	800141c <_sbrk+0x48>
	}

	heap_end += incr;
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <_sbrk+0x50>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a03      	ldr	r2, [pc, #12]	; (8001424 <_sbrk+0x50>)
 8001418:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200000a0 	.word	0x200000a0
 8001428:	20000838 	.word	0x20000838

0800142c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <SystemInit+0x28>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001436:	4a07      	ldr	r2, [pc, #28]	; (8001454 <SystemInit+0x28>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <SystemInit+0x28>)
 8001442:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001446:	609a      	str	r2, [r3, #8]
#endif
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <init_buzzer>:
  NOTE_GS5,2,

};


void init_buzzer(void){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800145c:	210c      	movs	r1, #12
 800145e:	4802      	ldr	r0, [pc, #8]	; (8001468 <init_buzzer+0x10>)
 8001460:	f002 fc7a 	bl	8003d58 <HAL_TIM_PWM_Start>


}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000618 	.word	0x20000618

0800146c <beep>:

void beep(int duration){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    if(duration > 1000)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800147a:	dd02      	ble.n	8001482 <beep+0x16>
        duration = 1000;
 800147c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001480:	607b      	str	r3, [r7, #4]
    if(duration < 0)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	da01      	bge.n	800148c <beep+0x20>
        duration = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]

    TIM1->CCR4 = 200;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <beep+0x3c>)
 800148e:	22c8      	movs	r2, #200	; 0xc8
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_Delay(duration);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 fff1 	bl	800247c <HAL_Delay>
    TIM1->CCR4 = 0;
 800149a:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <beep+0x3c>)
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40010000 	.word	0x40010000

080014ac <tone>:
 * Plays a frequency for a duration
 *
 * @param int frequency - Hertz [Hz] (MAX 16kHz)
 * @param int duration - miliseconds [ms]
 */
void tone(int frequency, int duration){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	//Check for devision by 0
	if(frequency == 0){
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d104      	bne.n	80014c6 <tone+0x1a>
		HAL_Delay(duration);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 ffdc 	bl	800247c <HAL_Delay>
		return;
 80014c4:	e015      	b.n	80014f2 <tone+0x46>
	}

	//Calculate prescaler value
	int prescalar = 16000000 / 1000 / frequency;
 80014c6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80014d0:	60fb      	str	r3, [r7, #12]
	TIM1->PSC = prescalar;
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <tone+0x4c>)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6293      	str	r3, [r2, #40]	; 0x28

	//Play tone
	TIM1->CCR4 = 200;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <tone+0x4c>)
 80014da:	22c8      	movs	r2, #200	; 0xc8
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(duration);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 ffcb 	bl	800247c <HAL_Delay>
	TIM1->CCR4 = 0;
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <tone+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40

	//Base prescalar
	TIM1->PSC = 4;
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <tone+0x4c>)
 80014ee:	2204      	movs	r2, #4
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40010000 	.word	0x40010000

080014fc <test_buzzer>:
	    // Wait for the specified duration before playing the next note.
	    HAL_Delay(noteDuration);
	  }
}

void test_buzzer(void){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    beep(50);
 8001500:	2032      	movs	r0, #50	; 0x32
 8001502:	f7ff ffb3 	bl	800146c <beep>
    HAL_Delay(50);
 8001506:	2032      	movs	r0, #50	; 0x32
 8001508:	f000 ffb8 	bl	800247c <HAL_Delay>

    beep(50);
 800150c:	2032      	movs	r0, #50	; 0x32
 800150e:	f7ff ffad 	bl	800146c <beep>
    HAL_Delay(50);
 8001512:	2032      	movs	r0, #50	; 0x32
 8001514:	f000 ffb2 	bl	800247c <HAL_Delay>
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <init_fans>:


/**
 * Initialize fans by starting PWM timers and running startup sequence required by the ESCs.
 */
void init_fans(void){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Right
 8001520:	2104      	movs	r1, #4
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <init_fans+0x40>)
 8001524:	f002 fc18 	bl	8003d58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Left
 8001528:	2100      	movs	r1, #0
 800152a:	480c      	ldr	r0, [pc, #48]	; (800155c <init_fans+0x40>)
 800152c:	f002 fc14 	bl	8003d58 <HAL_TIM_PWM_Start>

	// Startup sequence
	// 1. Start arming by applying a OK signal
	// 2. Finish arming by applying 0 throttle

	TIM3->CCR2 = 1600;
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <init_fans+0x44>)
 8001532:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001536:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = 1600;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <init_fans+0x44>)
 800153a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800153e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(3000);
 8001540:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001544:	f000 ff9a 	bl	800247c <HAL_Delay>

	TIM3->CCR2 = 1500;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <init_fans+0x44>)
 800154a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800154e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = 1500;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <init_fans+0x44>)
 8001552:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001556:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000598 	.word	0x20000598
 8001560:	40000400 	.word	0x40000400

08001564 <test_fan>:
/**
 * Test fans by spinning them and showing directions with LED. Forward = green, Backwards = red
 * 1. Left forward, wait 1s, left backwards, wait 1s.
 * 2. Right forward, wait 1s, right backwards, wait 1s.
 */
void test_fan(void){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	//Left forward
	fan_l_set_speed(10);
 8001568:	200a      	movs	r0, #10
 800156a:	f000 f8a9 	bl	80016c0 <fan_l_set_speed>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001574:	4832      	ldr	r0, [pc, #200]	; (8001640 <test_fan+0xdc>)
 8001576:	f001 fa67 	bl	8002a48 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800157a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800157e:	f000 ff7d 	bl	800247c <HAL_Delay>

	//Wait 1s
	fan_l_set_speed(0);
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f89c 	bl	80016c0 <fan_l_set_speed>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158e:	482c      	ldr	r0, [pc, #176]	; (8001640 <test_fan+0xdc>)
 8001590:	f001 fa5a 	bl	8002a48 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001598:	f000 ff70 	bl	800247c <HAL_Delay>

	//Left backwards
	fan_l_set_speed(-10);
 800159c:	f06f 0009 	mvn.w	r0, #9
 80015a0:	f000 f88e 	bl	80016c0 <fan_l_set_speed>
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015aa:	4825      	ldr	r0, [pc, #148]	; (8001640 <test_fan+0xdc>)
 80015ac:	f001 fa4c 	bl	8002a48 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80015b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b4:	f000 ff62 	bl	800247c <HAL_Delay>

	//Wait 1s
	fan_l_set_speed(0);
 80015b8:	2000      	movs	r0, #0
 80015ba:	f000 f881 	bl	80016c0 <fan_l_set_speed>
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c4:	481e      	ldr	r0, [pc, #120]	; (8001640 <test_fan+0xdc>)
 80015c6:	f001 fa3f 	bl	8002a48 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80015ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ce:	f000 ff55 	bl	800247c <HAL_Delay>




	//Right forward
	fan_r_set_speed(10);
 80015d2:	200a      	movs	r0, #10
 80015d4:	f000 f85e 	bl	8001694 <fan_r_set_speed>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015de:	4818      	ldr	r0, [pc, #96]	; (8001640 <test_fan+0xdc>)
 80015e0:	f001 fa32 	bl	8002a48 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80015e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015e8:	f000 ff48 	bl	800247c <HAL_Delay>

	//Wait 1s
	fan_r_set_speed(0);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 f851 	bl	8001694 <fan_r_set_speed>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <test_fan+0xdc>)
 80015fa:	f001 fa25 	bl	8002a48 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80015fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001602:	f000 ff3b 	bl	800247c <HAL_Delay>

	//Right backwards
	fan_r_set_speed(-10);
 8001606:	f06f 0009 	mvn.w	r0, #9
 800160a:	f000 f843 	bl	8001694 <fan_r_set_speed>
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001614:	480a      	ldr	r0, [pc, #40]	; (8001640 <test_fan+0xdc>)
 8001616:	f001 fa17 	bl	8002a48 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800161a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800161e:	f000 ff2d 	bl	800247c <HAL_Delay>

	//Wait 1s
	fan_r_set_speed(0);
 8001622:	2000      	movs	r0, #0
 8001624:	f000 f836 	bl	8001694 <fan_r_set_speed>
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800162e:	4804      	ldr	r0, [pc, #16]	; (8001640 <test_fan+0xdc>)
 8001630:	f001 fa0a 	bl	8002a48 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001638:	f000 ff20 	bl	800247c <HAL_Delay>
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40020800 	.word	0x40020800

08001644 <fan_limit_speed>:
 *
 * @param int speed - Unlimited speed
 *
 * @return int - Limited speed
 */
int fan_limit_speed(int speed){
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	if(speed > 100)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	dd01      	ble.n	8001656 <fan_limit_speed+0x12>
		speed = 100;
 8001652:	2364      	movs	r3, #100	; 0x64
 8001654:	607b      	str	r3, [r7, #4]
	if(speed < -100)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800165c:	da02      	bge.n	8001664 <fan_limit_speed+0x20>
		speed = -100;
 800165e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001662:	607b      	str	r3, [r7, #4]
	return speed;
 8001664:	687b      	ldr	r3, [r7, #4]
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <fan_convert_speed>:
 *
 * @param int speed - Desired speed
 *
 * @return int - Scaled timer value
 */
int fan_convert_speed(int speed){
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
	return 1500 + speed * 5;
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <fan_r_set_speed>:
/**
 * Set right fan speed between [-100,100] (%)
 *
 * @param int speed - Desired fan speed
 */
void fan_r_set_speed(int speed){
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	int limited_speed = fan_limit_speed(speed);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ffd1 	bl	8001644 <fan_limit_speed>
 80016a2:	60f8      	str	r0, [r7, #12]
	int CCR_val = fan_convert_speed(limited_speed);
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7ff ffe4 	bl	8001672 <fan_convert_speed>
 80016aa:	60b8      	str	r0, [r7, #8]
	TIM3->CCR2 = CCR_val;
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <fan_r_set_speed+0x28>)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40000400 	.word	0x40000400

080016c0 <fan_l_set_speed>:
/**
 * Set left fan speed between [-100,100] (%)
 *
 * @param int speed - Desired fan speed
 */
void fan_l_set_speed(int speed){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	int limited_speed = fan_limit_speed(speed);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ffbb 	bl	8001644 <fan_limit_speed>
 80016ce:	60f8      	str	r0, [r7, #12]
	int CCR_val = fan_convert_speed(limited_speed);
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff ffce 	bl	8001672 <fan_convert_speed>
 80016d6:	60b8      	str	r0, [r7, #8]
	TIM3->CCR1 = CCR_val;
 80016d8:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <fan_l_set_speed+0x28>)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	6353      	str	r3, [r2, #52]	; 0x34
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40000400 	.word	0x40000400

080016ec <init_motors>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

void init_motors(void){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
    // Start encoder inputs
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Right
 80016f0:	213c      	movs	r1, #60	; 0x3c
 80016f2:	4809      	ldr	r0, [pc, #36]	; (8001718 <init_motors+0x2c>)
 80016f4:	f002 fc00 	bl	8003ef8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left
 80016f8:	213c      	movs	r1, #60	; 0x3c
 80016fa:	4808      	ldr	r0, [pc, #32]	; (800171c <init_motors+0x30>)
 80016fc:	f002 fbfc 	bl	8003ef8 <HAL_TIM_Encoder_Start>

    // Start PWM generation for motors
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Right
 8001700:	2108      	movs	r1, #8
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <init_motors+0x34>)
 8001704:	f002 fb28 	bl	8003d58 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Left
 8001708:	210c      	movs	r1, #12
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <init_motors+0x34>)
 800170c:	f002 fb24 	bl	8003d58 <HAL_TIM_PWM_Start>

    // Put both motors in Hi-Z (high impedance output => rotate freely)
    motors_stop();
 8001710:	f000 f880 	bl	8001814 <motors_stop>
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000558 	.word	0x20000558
 800171c:	20000658 	.word	0x20000658
 8001720:	20000518 	.word	0x20000518

08001724 <limit_speed>:

int limit_speed(int speed){
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    if(speed > 1000){
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001732:	dd03      	ble.n	800173c <limit_speed+0x18>
        speed = 1000;
 8001734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	e005      	b.n	8001748 <limit_speed+0x24>
    }else if(speed < -1000){
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001742:	da01      	bge.n	8001748 <limit_speed+0x24>
        speed = -1000;
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <limit_speed+0x34>)
 8001746:	607b      	str	r3, [r7, #4]
    }
    return speed;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	fffffc18 	.word	0xfffffc18

0800175c <motor_l_set_speed>:


void motor_l_set_speed(int speed){
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    int limited_speed = limit_speed(speed);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ffdd 	bl	8001724 <limit_speed>
 800176a:	60f8      	str	r0, [r7, #12]

    if(limited_speed < 0){
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	da0d      	bge.n	800178e <motor_l_set_speed+0x32>
        limited_speed = -limited_speed;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	425b      	negs	r3, r3
 8001776:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(MOTOR_L_IN1_GPIO_Port, MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	480c      	ldr	r0, [pc, #48]	; (80017b0 <motor_l_set_speed+0x54>)
 800177e:	f001 f963 	bl	8002a48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR_L_IN2_GPIO_Port, MOTOR_L_IN2_Pin, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	2140      	movs	r1, #64	; 0x40
 8001786:	480a      	ldr	r0, [pc, #40]	; (80017b0 <motor_l_set_speed+0x54>)
 8001788:	f001 f95e 	bl	8002a48 <HAL_GPIO_WritePin>
 800178c:	e009      	b.n	80017a2 <motor_l_set_speed+0x46>
    }else{
        HAL_GPIO_WritePin(MOTOR_L_IN1_GPIO_Port, MOTOR_L_IN1_Pin, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	4807      	ldr	r0, [pc, #28]	; (80017b0 <motor_l_set_speed+0x54>)
 8001794:	f001 f958 	bl	8002a48 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR_L_IN2_GPIO_Port, MOTOR_L_IN2_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2140      	movs	r1, #64	; 0x40
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <motor_l_set_speed+0x54>)
 800179e:	f001 f953 	bl	8002a48 <HAL_GPIO_WritePin>
    }

    TIM4->CCR4 = limited_speed;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <motor_l_set_speed+0x58>)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40000800 	.word	0x40000800

080017b8 <motor_r_set_speed>:

void motor_r_set_speed(int speed){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    int limited_speed = limit_speed(speed);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ffaf 	bl	8001724 <limit_speed>
 80017c6:	60f8      	str	r0, [r7, #12]

    if(limited_speed < 0){
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da0d      	bge.n	80017ea <motor_r_set_speed+0x32>
        limited_speed = -limited_speed;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	425b      	negs	r3, r3
 80017d2:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(MOTOR_R_IN1_GPIO_Port, MOTOR_R_IN1_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2120      	movs	r1, #32
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <motor_r_set_speed+0x54>)
 80017da:	f001 f935 	bl	8002a48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_R_IN2_GPIO_Port, MOTOR_R_IN2_Pin, GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2110      	movs	r1, #16
 80017e2:	480a      	ldr	r0, [pc, #40]	; (800180c <motor_r_set_speed+0x54>)
 80017e4:	f001 f930 	bl	8002a48 <HAL_GPIO_WritePin>
 80017e8:	e009      	b.n	80017fe <motor_r_set_speed+0x46>
        
    }else{   
        HAL_GPIO_WritePin(MOTOR_R_IN1_GPIO_Port, MOTOR_R_IN1_Pin, GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	2120      	movs	r1, #32
 80017ee:	4807      	ldr	r0, [pc, #28]	; (800180c <motor_r_set_speed+0x54>)
 80017f0:	f001 f92a 	bl	8002a48 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_R_IN2_GPIO_Port, MOTOR_R_IN2_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2110      	movs	r1, #16
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <motor_r_set_speed+0x54>)
 80017fa:	f001 f925 	bl	8002a48 <HAL_GPIO_WritePin>
    }

    TIM4->CCR3 = limited_speed;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <motor_r_set_speed+0x58>)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40020400 	.word	0x40020400
 8001810:	40000800 	.word	0x40000800

08001814 <motors_stop>:

void motors_stop(void){
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
    TIM4->CCR3 = 0;
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <motors_stop+0x3c>)
 800181a:	2200      	movs	r2, #0
 800181c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_WritePin(MOTOR_R_IN1_GPIO_Port, MOTOR_R_IN1_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2120      	movs	r1, #32
 8001822:	480c      	ldr	r0, [pc, #48]	; (8001854 <motors_stop+0x40>)
 8001824:	f001 f910 	bl	8002a48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_R_IN2_GPIO_Port, MOTOR_R_IN2_Pin, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	2110      	movs	r1, #16
 800182c:	4809      	ldr	r0, [pc, #36]	; (8001854 <motors_stop+0x40>)
 800182e:	f001 f90b 	bl	8002a48 <HAL_GPIO_WritePin>

    TIM4->CCR4 = 0;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <motors_stop+0x3c>)
 8001834:	2200      	movs	r2, #0
 8001836:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_GPIO_WritePin(MOTOR_L_IN1_GPIO_Port, MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <motors_stop+0x40>)
 800183e:	f001 f903 	bl	8002a48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_L_IN2_GPIO_Port, MOTOR_L_IN2_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	2140      	movs	r1, #64	; 0x40
 8001846:	4803      	ldr	r0, [pc, #12]	; (8001854 <motors_stop+0x40>)
 8001848:	f001 f8fe 	bl	8002a48 <HAL_GPIO_WritePin>
};
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40000800 	.word	0x40000800
 8001854:	40020400 	.word	0x40020400

08001858 <test_motors>:
/**
 * Test motors by spinning them and showing directions with LED. Forward = green, Backwards = red
 * 1. Left forward, wait 1s, left backwards, wait 1s.
 * 2. Right forward, wait 1s, right backwards, wait 1s.
 */
void test_motors(void){
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
		//Left forward
		motor_l_set_speed(100);
 800185c:	2064      	movs	r0, #100	; 0x64
 800185e:	f7ff ff7d 	bl	800175c <motor_l_set_speed>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001862:	2201      	movs	r2, #1
 8001864:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001868:	4832      	ldr	r0, [pc, #200]	; (8001934 <test_motors+0xdc>)
 800186a:	f001 f8ed 	bl	8002a48 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800186e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001872:	f000 fe03 	bl	800247c <HAL_Delay>

		//Wait 1s
		motor_l_set_speed(0);
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff ff70 	bl	800175c <motor_l_set_speed>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001882:	482c      	ldr	r0, [pc, #176]	; (8001934 <test_motors+0xdc>)
 8001884:	f001 f8e0 	bl	8002a48 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800188c:	f000 fdf6 	bl	800247c <HAL_Delay>

		//Left backwards
		motor_l_set_speed(-100);
 8001890:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8001894:	f7ff ff62 	bl	800175c <motor_l_set_speed>
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800189e:	4825      	ldr	r0, [pc, #148]	; (8001934 <test_motors+0xdc>)
 80018a0:	f001 f8d2 	bl	8002a48 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80018a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018a8:	f000 fde8 	bl	800247c <HAL_Delay>

		//Wait 1s
		motor_l_set_speed(0);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff ff55 	bl	800175c <motor_l_set_speed>
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b8:	481e      	ldr	r0, [pc, #120]	; (8001934 <test_motors+0xdc>)
 80018ba:	f001 f8c5 	bl	8002a48 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80018be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c2:	f000 fddb 	bl	800247c <HAL_Delay>




		//Right forward
		motor_r_set_speed(100);
 80018c6:	2064      	movs	r0, #100	; 0x64
 80018c8:	f7ff ff76 	bl	80017b8 <motor_r_set_speed>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d2:	4818      	ldr	r0, [pc, #96]	; (8001934 <test_motors+0xdc>)
 80018d4:	f001 f8b8 	bl	8002a48 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80018d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018dc:	f000 fdce 	bl	800247c <HAL_Delay>

		//Wait 1s
		motor_r_set_speed(0);
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff ff69 	bl	80017b8 <motor_r_set_speed>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ec:	4811      	ldr	r0, [pc, #68]	; (8001934 <test_motors+0xdc>)
 80018ee:	f001 f8ab 	bl	8002a48 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80018f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018f6:	f000 fdc1 	bl	800247c <HAL_Delay>

		//Right backwards
		motor_r_set_speed(-100);
 80018fa:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80018fe:	f7ff ff5b 	bl	80017b8 <motor_r_set_speed>
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001908:	480a      	ldr	r0, [pc, #40]	; (8001934 <test_motors+0xdc>)
 800190a:	f001 f89d 	bl	8002a48 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800190e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001912:	f000 fdb3 	bl	800247c <HAL_Delay>

		//Wait 1s
		motor_r_set_speed(0);
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff ff4e 	bl	80017b8 <motor_r_set_speed>
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001922:	4804      	ldr	r0, [pc, #16]	; (8001934 <test_motors+0xdc>)
 8001924:	f001 f890 	bl	8002a48 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001928:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800192c:	f000 fda6 	bl	800247c <HAL_Delay>
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40020800 	.word	0x40020800

08001938 <init_oled>:


/**
	* @brief Initialize the oled screen and a welcome screen. 
*/
void init_oled(void){
 8001938:	b598      	push	{r3, r4, r7, lr}
 800193a:	af00      	add	r7, sp, #0
	ssd1306_Init();
 800193c:	f000 fae6 	bl	8001f0c <ssd1306_Init>
	
	ssd1306_DrawBitmap(case_head_bmp);
 8001940:	4848      	ldr	r0, [pc, #288]	; (8001a64 <init_oled+0x12c>)
 8001942:	f000 fbf9 	bl	8002138 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001946:	f000 fb71 	bl	800202c <ssd1306_UpdateScreen>

	HAL_Delay(1000);
 800194a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800194e:	f000 fd95 	bl	800247c <HAL_Delay>
	
	// Show main menu
	active_screen = MENU;
 8001952:	4b45      	ldr	r3, [pc, #276]	; (8001a68 <init_oled+0x130>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
	
	// Main Menu
	strcpy(main_menu.name, "Main menu");
 8001958:	4b44      	ldr	r3, [pc, #272]	; (8001a6c <init_oled+0x134>)
 800195a:	4a45      	ldr	r2, [pc, #276]	; (8001a70 <init_oled+0x138>)
 800195c:	ca07      	ldmia	r2, {r0, r1, r2}
 800195e:	c303      	stmia	r3!, {r0, r1}
 8001960:	801a      	strh	r2, [r3, #0]
	main_menu.head_item = NULL; 	// main menu has no items, only sub menus
 8001962:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <init_oled+0x134>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
	main_menu.pNext  = &sub_menu_1; // Start of submenus
 8001968:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <init_oled+0x134>)
 800196a:	4a42      	ldr	r2, [pc, #264]	; (8001a74 <init_oled+0x13c>)
 800196c:	619a      	str	r2, [r3, #24]
	
	// Back to main menu item
	strcpy(menu_item_back_main.name, "Back");
 800196e:	4b42      	ldr	r3, [pc, #264]	; (8001a78 <init_oled+0x140>)
 8001970:	4a42      	ldr	r2, [pc, #264]	; (8001a7c <init_oled+0x144>)
 8001972:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001976:	6018      	str	r0, [r3, #0]
 8001978:	3304      	adds	r3, #4
 800197a:	7019      	strb	r1, [r3, #0]
	menu_item_back_main.pNext = NULL;
 800197c:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <init_oled+0x140>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
	menu_item_back_main.function = go_back_main;
 8001982:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <init_oled+0x140>)
 8001984:	4a3e      	ldr	r2, [pc, #248]	; (8001a80 <init_oled+0x148>)
 8001986:	615a      	str	r2, [r3, #20]
	
	// Sub menu 1 + items
	strcpy(sub_menu_1.name, "General");
 8001988:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <init_oled+0x13c>)
 800198a:	4a3e      	ldr	r2, [pc, #248]	; (8001a84 <init_oled+0x14c>)
 800198c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001990:	e883 0003 	stmia.w	r3, {r0, r1}
	sub_menu_1.pNext = &sub_menu_2;
 8001994:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <init_oled+0x13c>)
 8001996:	4a3c      	ldr	r2, [pc, #240]	; (8001a88 <init_oled+0x150>)
 8001998:	619a      	str	r2, [r3, #24]
	sub_menu_1.head_item = &menu_item_11;
 800199a:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <init_oled+0x13c>)
 800199c:	4a3b      	ldr	r2, [pc, #236]	; (8001a8c <init_oled+0x154>)
 800199e:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_11.name, "Peripheral info");
 80019a0:	4a3a      	ldr	r2, [pc, #232]	; (8001a8c <init_oled+0x154>)
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <init_oled+0x158>)
 80019a4:	4614      	mov	r4, r2
 80019a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	menu_item_11.pNext = &menu_item_12;
 80019ac:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <init_oled+0x154>)
 80019ae:	4a39      	ldr	r2, [pc, #228]	; (8001a94 <init_oled+0x15c>)
 80019b0:	619a      	str	r2, [r3, #24]
	menu_item_11.function = oled_show_info;
 80019b2:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <init_oled+0x154>)
 80019b4:	4a38      	ldr	r2, [pc, #224]	; (8001a98 <init_oled+0x160>)
 80019b6:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_12.name, "CASE Logo");
 80019b8:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <init_oled+0x15c>)
 80019ba:	4a38      	ldr	r2, [pc, #224]	; (8001a9c <init_oled+0x164>)
 80019bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80019be:	c303      	stmia	r3!, {r0, r1}
 80019c0:	801a      	strh	r2, [r3, #0]
	menu_item_12.pNext = &menu_item_13;
 80019c2:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <init_oled+0x15c>)
 80019c4:	4a36      	ldr	r2, [pc, #216]	; (8001aa0 <init_oled+0x168>)
 80019c6:	619a      	str	r2, [r3, #24]
	menu_item_12.function = oled_show_case;
 80019c8:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <init_oled+0x15c>)
 80019ca:	4a36      	ldr	r2, [pc, #216]	; (8001aa4 <init_oled+0x16c>)
 80019cc:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_13.name, "Nyx & Iris");
 80019ce:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <init_oled+0x168>)
 80019d0:	4a35      	ldr	r2, [pc, #212]	; (8001aa8 <init_oled+0x170>)
 80019d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80019d4:	c303      	stmia	r3!, {r0, r1}
 80019d6:	801a      	strh	r2, [r3, #0]
 80019d8:	3302      	adds	r3, #2
 80019da:	0c12      	lsrs	r2, r2, #16
 80019dc:	701a      	strb	r2, [r3, #0]
	menu_item_13.pNext = &menu_item_back_main;
 80019de:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <init_oled+0x168>)
 80019e0:	4a25      	ldr	r2, [pc, #148]	; (8001a78 <init_oled+0x140>)
 80019e2:	619a      	str	r2, [r3, #24]
	menu_item_13.function = oled_show_cats;
 80019e4:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <init_oled+0x168>)
 80019e6:	4a31      	ldr	r2, [pc, #196]	; (8001aac <init_oled+0x174>)
 80019e8:	615a      	str	r2, [r3, #20]
	
	// Sub menu 2 + items
	strcpy(sub_menu_2.name, "Submenu 2");
 80019ea:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <init_oled+0x150>)
 80019ec:	4a30      	ldr	r2, [pc, #192]	; (8001ab0 <init_oled+0x178>)
 80019ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f0:	c303      	stmia	r3!, {r0, r1}
 80019f2:	801a      	strh	r2, [r3, #0]
	sub_menu_2.pNext = &sub_menu_3;
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <init_oled+0x150>)
 80019f6:	4a2f      	ldr	r2, [pc, #188]	; (8001ab4 <init_oled+0x17c>)
 80019f8:	619a      	str	r2, [r3, #24]
	sub_menu_2.head_item = &menu_item_21;
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <init_oled+0x150>)
 80019fc:	4a2e      	ldr	r2, [pc, #184]	; (8001ab8 <init_oled+0x180>)
 80019fe:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_21.name, "Item 21");
 8001a00:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <init_oled+0x180>)
 8001a02:	4a2e      	ldr	r2, [pc, #184]	; (8001abc <init_oled+0x184>)
 8001a04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a08:	e883 0003 	stmia.w	r3, {r0, r1}
	menu_item_21.pNext = &menu_item_22;
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <init_oled+0x180>)
 8001a0e:	4a2c      	ldr	r2, [pc, #176]	; (8001ac0 <init_oled+0x188>)
 8001a10:	619a      	str	r2, [r3, #24]
	
	strcpy(menu_item_22.name, "Item 22");
 8001a12:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <init_oled+0x188>)
 8001a14:	4a2b      	ldr	r2, [pc, #172]	; (8001ac4 <init_oled+0x18c>)
 8001a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a1a:	e883 0003 	stmia.w	r3, {r0, r1}
	menu_item_22.pNext = &menu_item_back_main;
 8001a1e:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <init_oled+0x188>)
 8001a20:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <init_oled+0x140>)
 8001a22:	619a      	str	r2, [r3, #24]


	// Sub menu 3 + items
	strcpy(sub_menu_3.name, "Submenu 3");
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <init_oled+0x17c>)
 8001a26:	4a28      	ldr	r2, [pc, #160]	; (8001ac8 <init_oled+0x190>)
 8001a28:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a2a:	c303      	stmia	r3!, {r0, r1}
 8001a2c:	801a      	strh	r2, [r3, #0]
	sub_menu_3.pNext = NULL;
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <init_oled+0x17c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
	sub_menu_3.head_item = &menu_item_31;
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <init_oled+0x17c>)
 8001a36:	4a25      	ldr	r2, [pc, #148]	; (8001acc <init_oled+0x194>)
 8001a38:	615a      	str	r2, [r3, #20]
	
	strcpy(menu_item_31.name, "Item 31");
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <init_oled+0x194>)
 8001a3c:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <init_oled+0x198>)
 8001a3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a42:	e883 0003 	stmia.w	r3, {r0, r1}
	menu_item_31.pNext = &menu_item_32;
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <init_oled+0x194>)
 8001a48:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <init_oled+0x19c>)
 8001a4a:	619a      	str	r2, [r3, #24]
	
	strcpy(menu_item_32.name, "Item 32");
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <init_oled+0x19c>)
 8001a4e:	4a22      	ldr	r2, [pc, #136]	; (8001ad8 <init_oled+0x1a0>)
 8001a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a54:	e883 0003 	stmia.w	r3, {r0, r1}
	menu_item_32.pNext = &menu_item_back_main;
 8001a58:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <init_oled+0x19c>)
 8001a5a:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <init_oled+0x140>)
 8001a5c:	619a      	str	r2, [r3, #24]

}
 8001a5e:	bf00      	nop
 8001a60:	bd98      	pop	{r3, r4, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	08005e64 	.word	0x08005e64
 8001a68:	20000768 	.word	0x20000768
 8001a6c:	2000076c 	.word	0x2000076c
 8001a70:	08005da8 	.word	0x08005da8
 8001a74:	20000788 	.word	0x20000788
 8001a78:	200007f8 	.word	0x200007f8
 8001a7c:	08005db4 	.word	0x08005db4
 8001a80:	08001d65 	.word	0x08001d65
 8001a84:	08005dbc 	.word	0x08005dbc
 8001a88:	200006f8 	.word	0x200006f8
 8001a8c:	2000074c 	.word	0x2000074c
 8001a90:	08005dc4 	.word	0x08005dc4
 8001a94:	20000714 	.word	0x20000714
 8001a98:	08001e81 	.word	0x08001e81
 8001a9c:	08005dd4 	.word	0x08005dd4
 8001aa0:	200007a4 	.word	0x200007a4
 8001aa4:	08001e31 	.word	0x08001e31
 8001aa8:	08005de0 	.word	0x08005de0
 8001aac:	08001e59 	.word	0x08001e59
 8001ab0:	08005dec 	.word	0x08005dec
 8001ab4:	20000814 	.word	0x20000814
 8001ab8:	200007dc 	.word	0x200007dc
 8001abc:	08005df8 	.word	0x08005df8
 8001ac0:	200006d8 	.word	0x200006d8
 8001ac4:	08005e00 	.word	0x08005e00
 8001ac8:	08005e08 	.word	0x08005e08
 8001acc:	200007c0 	.word	0x200007c0
 8001ad0:	08005e14 	.word	0x08005e14
 8001ad4:	20000730 	.word	0x20000730
 8001ad8:	08005e1c 	.word	0x08005e1c

08001adc <oled_update>:
/**
	* @brief Update the screen with new data
	*	
	* Will check if errors have occurd and only print an error screen.
*/
void oled_update(){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	// Don't print anything if an error has occured
	if(error_occurd){
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <oled_update+0x44>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d119      	bne.n	8001b1c <oled_update+0x40>
		return;
	}
	
	if(active_screen == MENU){
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <oled_update+0x48>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <oled_update+0x1a>
		oled_menu();
 8001af0:	f000 f864 	bl	8001bbc <oled_menu>
 8001af4:	e00f      	b.n	8001b16 <oled_update+0x3a>
	}else if(active_screen == INFO){
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <oled_update+0x48>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d102      	bne.n	8001b04 <oled_update+0x28>
		oled_info_screen();
 8001afe:	f000 f815 	bl	8001b2c <oled_info_screen>
 8001b02:	e008      	b.n	8001b16 <oled_update+0x3a>
	}else if(active_screen == IMAGE){
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <oled_update+0x48>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d104      	bne.n	8001b16 <oled_update+0x3a>
		ssd1306_DrawBitmap(curr_image);
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <oled_update+0x4c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fb11 	bl	8002138 <ssd1306_DrawBitmap>
	}
	
	ssd1306_UpdateScreen();
 8001b16:	f000 fa89 	bl	800202c <ssd1306_UpdateScreen>
 8001b1a:	e000      	b.n	8001b1e <oled_update+0x42>
		return;
 8001b1c:	bf00      	nop
}
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200000a4 	.word	0x200000a4
 8001b24:	20000768 	.word	0x20000768
 8001b28:	200006f4 	.word	0x200006f4

08001b2c <oled_info_screen>:


/**
	* @brief Show an screen with general info about the mouse peripherals.
*/
void oled_info_screen(){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	
	ssd1306_Fill(Black);
 8001b30:	2000      	movs	r0, #0
 8001b32:	f000 fa59 	bl	8001fe8 <ssd1306_Fill>
	ssd1306_SetCursor((128-15*7)/2, 0);
 8001b36:	2100      	movs	r1, #0
 8001b38:	200b      	movs	r0, #11
 8001b3a:	f000 fbeb 	bl	8002314 <ssd1306_SetCursor>
	ssd1306_WriteString("NOT IMPLEMENTED", Font_7x10, White);
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <oled_info_screen+0x28>)
 8001b40:	2301      	movs	r3, #1
 8001b42:	ca06      	ldmia	r2, {r1, r2}
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <oled_info_screen+0x2c>)
 8001b46:	f000 fbbf 	bl	80022c8 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8001b4a:	f000 fa6f 	bl	800202c <ssd1306_UpdateScreen>
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000004 	.word	0x20000004
 8001b58:	08005e24 	.word	0x08005e24

08001b5c <oled_nr_items>:
}




uint8_t oled_nr_items(void){
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
	uint8_t nr_items = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
	
	if(curr_submenu == NULL){
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <oled_nr_items+0x58>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10d      	bne.n	8001b8a <oled_nr_items+0x2e>
		struct menu * sub_menu = main_menu.pNext;
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <oled_nr_items+0x5c>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 8001b74:	e005      	b.n	8001b82 <oled_nr_items+0x26>
			nr_items++;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
			sub_menu = sub_menu->pNext;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	60bb      	str	r3, [r7, #8]
		while(sub_menu != NULL){
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f6      	bne.n	8001b76 <oled_nr_items+0x1a>
 8001b88:	e00d      	b.n	8001ba6 <oled_nr_items+0x4a>
		}
	}else{
		struct menu_item * item = curr_submenu->head_item;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <oled_nr_items+0x58>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 8001b92:	e005      	b.n	8001ba0 <oled_nr_items+0x44>
			nr_items++;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	3301      	adds	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
			item = item->pNext;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f6      	bne.n	8001b94 <oled_nr_items+0x38>
		}
	}
	
	return nr_items;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	200000ac 	.word	0x200000ac
 8001bb8:	2000076c 	.word	0x2000076c

08001bbc <oled_menu>:
	* 
	* The cursor position can be changed by rotating the wheels
	* You can choose menu or function by pressing the "Select Button" on the board 
	*
*/
void oled_menu(void){
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0

	// Calculate cursor index based on encoder
	revolutions = TIM5->CNT / (float)4096 * 6;
 8001bc2:	4b5f      	ldr	r3, [pc, #380]	; (8001d40 <oled_menu+0x184>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bce:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001d44 <oled_menu+0x188>
 8001bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bde:	4b5a      	ldr	r3, [pc, #360]	; (8001d48 <oled_menu+0x18c>)
 8001be0:	edc3 7a00 	vstr	s15, [r3]
	cursor = (int) revolutions % oled_nr_items(); // Should be calculated based on actual number of items in the current sub_menu
 8001be4:	4b58      	ldr	r3, [pc, #352]	; (8001d48 <oled_menu+0x18c>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bee:	ee17 4a90 	vmov	r4, s15
 8001bf2:	f7ff ffb3 	bl	8001b5c <oled_nr_items>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	fb94 f2f3 	sdiv	r2, r4, r3
 8001bfc:	fb03 f302 	mul.w	r3, r3, r2
 8001c00:	1ae3      	subs	r3, r4, r3
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b51      	ldr	r3, [pc, #324]	; (8001d4c <oled_menu+0x190>)
 8001c06:	701a      	strb	r2, [r3, #0]
	
	// Background
	ssd1306_Fill(Black);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f000 f9ed 	bl	8001fe8 <ssd1306_Fill>
	
	if(curr_submenu == NULL){
 8001c0e:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <oled_menu+0x194>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d145      	bne.n	8001ca2 <oled_menu+0xe6>
		ssd1306_SetCursor(0,0);
 8001c16:	2100      	movs	r1, #0
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f000 fb7b 	bl	8002314 <ssd1306_SetCursor>
		ssd1306_WriteString(main_menu.name, Font_11x18, White);
 8001c1e:	4a4d      	ldr	r2, [pc, #308]	; (8001d54 <oled_menu+0x198>)
 8001c20:	2301      	movs	r3, #1
 8001c22:	ca06      	ldmia	r2, {r1, r2}
 8001c24:	484c      	ldr	r0, [pc, #304]	; (8001d58 <oled_menu+0x19c>)
 8001c26:	f000 fb4f 	bl	80022c8 <ssd1306_WriteString>
		
		struct menu * sub_menu = main_menu.pNext; // Reference to first submenu
 8001c2a:	4b4b      	ldr	r3, [pc, #300]	; (8001d58 <oled_menu+0x19c>)
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	60fb      	str	r3, [r7, #12]
		int line = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
		
		while(sub_menu != NULL){
 8001c34:	e031      	b.n	8001c9a <oled_menu+0xde>
			if(line == cursor){
 8001c36:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <oled_menu+0x190>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d112      	bne.n	8001c68 <oled_menu+0xac>
				ssd1306_SetCursor(0, 18 + line*10);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	3312      	adds	r3, #18
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	4619      	mov	r1, r3
 8001c56:	2000      	movs	r0, #0
 8001c58:	f000 fb5c 	bl	8002314 <ssd1306_SetCursor>
				ssd1306_WriteString(">", Font_7x10, White);
 8001c5c:	4a3f      	ldr	r2, [pc, #252]	; (8001d5c <oled_menu+0x1a0>)
 8001c5e:	2301      	movs	r3, #1
 8001c60:	ca06      	ldmia	r2, {r1, r2}
 8001c62:	483f      	ldr	r0, [pc, #252]	; (8001d60 <oled_menu+0x1a4>)
 8001c64:	f000 fb30 	bl	80022c8 <ssd1306_WriteString>
			}
			ssd1306_SetCursor(14, 18 + line*10);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	3312      	adds	r3, #18
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	200e      	movs	r0, #14
 8001c7e:	f000 fb49 	bl	8002314 <ssd1306_SetCursor>
			ssd1306_WriteString(sub_menu->name, Font_7x10, White);
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	4a35      	ldr	r2, [pc, #212]	; (8001d5c <oled_menu+0x1a0>)
 8001c86:	2301      	movs	r3, #1
 8001c88:	ca06      	ldmia	r2, {r1, r2}
 8001c8a:	f000 fb1d 	bl	80022c8 <ssd1306_WriteString>
			line++;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	3301      	adds	r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
			sub_menu = sub_menu->pNext;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	60fb      	str	r3, [r7, #12]
		while(sub_menu != NULL){
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ca      	bne.n	8001c36 <oled_menu+0x7a>
 8001ca0:	e047      	b.n	8001d32 <oled_menu+0x176>
		}
	}else{ // We are in a submenu => draw menu items
		ssd1306_SetCursor(0,0);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f000 fb35 	bl	8002314 <ssd1306_SetCursor>
		ssd1306_WriteString(curr_submenu->name, Font_11x18, White);
 8001caa:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <oled_menu+0x194>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <oled_menu+0x198>)
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	ca06      	ldmia	r2, {r1, r2}
 8001cb6:	f000 fb07 	bl	80022c8 <ssd1306_WriteString>
		
		
		struct menu_item * item = curr_submenu->head_item;
 8001cba:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <oled_menu+0x194>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	607b      	str	r3, [r7, #4]
		int line = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
		while(item != NULL){
 8001cc6:	e031      	b.n	8001d2c <oled_menu+0x170>
			if (line == cursor){
 8001cc8:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <oled_menu+0x190>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d112      	bne.n	8001cfa <oled_menu+0x13e>
				ssd1306_SetCursor(0, 18 + line*10);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	3312      	adds	r3, #18
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f000 fb13 	bl	8002314 <ssd1306_SetCursor>
				ssd1306_WriteString(">", Font_7x10, White);
 8001cee:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <oled_menu+0x1a0>)
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	ca06      	ldmia	r2, {r1, r2}
 8001cf4:	481a      	ldr	r0, [pc, #104]	; (8001d60 <oled_menu+0x1a4>)
 8001cf6:	f000 fae7 	bl	80022c8 <ssd1306_WriteString>
			}
			ssd1306_SetCursor(14, 18 + line*10);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	0092      	lsls	r2, r2, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3312      	adds	r3, #18
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	200e      	movs	r0, #14
 8001d10:	f000 fb00 	bl	8002314 <ssd1306_SetCursor>
			ssd1306_WriteString(item->name, Font_7x10, White);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <oled_menu+0x1a0>)
 8001d18:	2301      	movs	r3, #1
 8001d1a:	ca06      	ldmia	r2, {r1, r2}
 8001d1c:	f000 fad4 	bl	80022c8 <ssd1306_WriteString>
			line++;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	603b      	str	r3, [r7, #0]
			item = item->pNext;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	607b      	str	r3, [r7, #4]
		while(item != NULL){
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1ca      	bne.n	8001cc8 <oled_menu+0x10c>
		}		
	}
	ssd1306_UpdateScreen();
 8001d32:	f000 f97b 	bl	800202c <ssd1306_UpdateScreen>

}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd90      	pop	{r4, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40000c00 	.word	0x40000c00
 8001d44:	45800000 	.word	0x45800000
 8001d48:	200000a8 	.word	0x200000a8
 8001d4c:	200000a5 	.word	0x200000a5
 8001d50:	200000ac 	.word	0x200000ac
 8001d54:	2000000c 	.word	0x2000000c
 8001d58:	2000076c 	.word	0x2000076c
 8001d5c:	20000004 	.word	0x20000004
 8001d60:	08005e48 	.word	0x08005e48

08001d64 <go_back_main>:


/**
	* @brief Go back to the main menu
*/
void go_back_main(void){
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
	curr_submenu = NULL;
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <go_back_main+0x1c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
    prev_submenu = NULL;
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <go_back_main+0x20>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	200000ac 	.word	0x200000ac
 8001d84:	200000b0 	.word	0x200000b0

08001d88 <oled_button_press>:
/**
	* @brief Update the menu when a button is pressed
	*
	* The menu will change based on where the cursor is
*/
void oled_button_press(void){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
	if(active_screen != MENU){
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <oled_button_press+0x98>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <oled_button_press+0x16>
		active_screen = MENU;
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <oled_button_press+0x98>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
		return; // Don't continue checking if we are on another screen.
 8001d9c:	e03d      	b.n	8001e1a <oled_button_press+0x92>
	}
	
	if(curr_submenu == NULL){
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <oled_button_press+0x9c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d119      	bne.n	8001dda <oled_button_press+0x52>
        struct menu * sub_menu = main_menu.pNext;
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <oled_button_press+0xa0>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	60fb      	str	r3, [r7, #12]
        int line = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
        while(sub_menu != NULL){
 8001db0:	e00f      	b.n	8001dd2 <oled_button_press+0x4a>
            if (line == cursor){
 8001db2:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <oled_button_press+0xa4>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d103      	bne.n	8001dc6 <oled_button_press+0x3e>
				curr_submenu = sub_menu;
 8001dbe:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <oled_button_press+0x9c>)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6013      	str	r3, [r2, #0]
				break;
 8001dc4:	e029      	b.n	8001e1a <oled_button_press+0x92>
			}
            line++;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
            sub_menu = sub_menu->pNext;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	60fb      	str	r3, [r7, #12]
        while(sub_menu != NULL){
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ec      	bne.n	8001db2 <oled_button_press+0x2a>
 8001dd8:	e01f      	b.n	8001e1a <oled_button_press+0x92>
		}
    }else{
        struct menu_item * item = curr_submenu->head_item;
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <oled_button_press+0x9c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	607b      	str	r3, [r7, #4]
        int line = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	603b      	str	r3, [r7, #0]
        while(item != NULL){
 8001de6:	e013      	b.n	8001e10 <oled_button_press+0x88>
            if (line == cursor){
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <oled_button_press+0xa4>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d107      	bne.n	8001e04 <oled_button_press+0x7c>
				if(item->function != NULL){
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00d      	beq.n	8001e18 <oled_button_press+0x90>
					item->function();
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	4798      	blx	r3
				}
				break;
 8001e02:	e009      	b.n	8001e18 <oled_button_press+0x90>
			}
            line++;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	603b      	str	r3, [r7, #0]
            item = item->pNext;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	607b      	str	r3, [r7, #4]
        while(item != NULL){
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1e8      	bne.n	8001de8 <oled_button_press+0x60>
 8001e16:	e000      	b.n	8001e1a <oled_button_press+0x92>
				break;
 8001e18:	bf00      	nop
		}
    }	
}
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000768 	.word	0x20000768
 8001e24:	200000ac 	.word	0x200000ac
 8001e28:	2000076c 	.word	0x2000076c
 8001e2c:	200000a5 	.word	0x200000a5

08001e30 <oled_show_case>:


// Menu item funcions
void oled_show_case(void){
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	active_screen = IMAGE;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <oled_show_case+0x1c>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	701a      	strb	r2, [r3, #0]
	curr_image = case_head_bmp;
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <oled_show_case+0x20>)
 8001e3c:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <oled_show_case+0x24>)
 8001e3e:	601a      	str	r2, [r3, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000768 	.word	0x20000768
 8001e50:	200006f4 	.word	0x200006f4
 8001e54:	08005e64 	.word	0x08005e64

08001e58 <oled_show_cats>:
void oled_show_cats(void){
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
	active_screen = IMAGE;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <oled_show_cats+0x1c>)
 8001e5e:	2202      	movs	r2, #2
 8001e60:	701a      	strb	r2, [r3, #0]
	curr_image = cats_bmp;
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <oled_show_cats+0x20>)
 8001e64:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <oled_show_cats+0x24>)
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000768 	.word	0x20000768
 8001e78:	200006f4 	.word	0x200006f4
 8001e7c:	08006264 	.word	0x08006264

08001e80 <oled_show_info>:
void oled_show_info(void){
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
	active_screen = INFO;
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <oled_show_info+0x14>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	20000768 	.word	0x20000768

08001e98 <ssd1306_Reset>:
#include "user/ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af04      	add	r7, sp, #16
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	9302      	str	r3, [sp, #8]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	1dfb      	adds	r3, r7, #7
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2178      	movs	r1, #120	; 0x78
 8001ec6:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <ssd1306_WriteCommand+0x2c>)
 8001ec8:	f000 ff4e 	bl	8002d68 <HAL_I2C_Mem_Write>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	200004c4 	.word	0x200004c4

08001ed8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af04      	add	r7, sp, #16
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eea:	9202      	str	r2, [sp, #8]
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2240      	movs	r2, #64	; 0x40
 8001ef6:	2178      	movs	r1, #120	; 0x78
 8001ef8:	4803      	ldr	r0, [pc, #12]	; (8001f08 <ssd1306_WriteData+0x30>)
 8001efa:	f000 ff35 	bl	8002d68 <HAL_I2C_Mem_Write>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200004c4 	.word	0x200004c4

08001f0c <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001f10:	f7ff ffc2 	bl	8001e98 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001f14:	2064      	movs	r0, #100	; 0x64
 8001f16:	f000 fab1 	bl	800247c <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001f1a:	20ae      	movs	r0, #174	; 0xae
 8001f1c:	f7ff ffc4 	bl	8001ea8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001f20:	2020      	movs	r0, #32
 8001f22:	f7ff ffc1 	bl	8001ea8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8001f26:	2010      	movs	r0, #16
 8001f28:	f7ff ffbe 	bl	8001ea8 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f2c:	20b0      	movs	r0, #176	; 0xb0
 8001f2e:	f7ff ffbb 	bl	8001ea8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001f32:	20c8      	movs	r0, #200	; 0xc8
 8001f34:	f7ff ffb8 	bl	8001ea8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f7ff ffb5 	bl	8001ea8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001f3e:	2010      	movs	r0, #16
 8001f40:	f7ff ffb2 	bl	8001ea8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001f44:	2040      	movs	r0, #64	; 0x40
 8001f46:	f7ff ffaf 	bl	8001ea8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001f4a:	2081      	movs	r0, #129	; 0x81
 8001f4c:	f7ff ffac 	bl	8001ea8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001f50:	20ff      	movs	r0, #255	; 0xff
 8001f52:	f7ff ffa9 	bl	8001ea8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001f56:	20a1      	movs	r0, #161	; 0xa1
 8001f58:	f7ff ffa6 	bl	8001ea8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001f5c:	20a6      	movs	r0, #166	; 0xa6
 8001f5e:	f7ff ffa3 	bl	8001ea8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001f62:	20a8      	movs	r0, #168	; 0xa8
 8001f64:	f7ff ffa0 	bl	8001ea8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8001f68:	203f      	movs	r0, #63	; 0x3f
 8001f6a:	f7ff ff9d 	bl	8001ea8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f6e:	20a4      	movs	r0, #164	; 0xa4
 8001f70:	f7ff ff9a 	bl	8001ea8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001f74:	20d3      	movs	r0, #211	; 0xd3
 8001f76:	f7ff ff97 	bl	8001ea8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff ff94 	bl	8001ea8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f80:	20d5      	movs	r0, #213	; 0xd5
 8001f82:	f7ff ff91 	bl	8001ea8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001f86:	20f0      	movs	r0, #240	; 0xf0
 8001f88:	f7ff ff8e 	bl	8001ea8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001f8c:	20d9      	movs	r0, #217	; 0xd9
 8001f8e:	f7ff ff8b 	bl	8001ea8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001f92:	2022      	movs	r0, #34	; 0x22
 8001f94:	f7ff ff88 	bl	8001ea8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001f98:	20da      	movs	r0, #218	; 0xda
 8001f9a:	f7ff ff85 	bl	8001ea8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8001f9e:	2012      	movs	r0, #18
 8001fa0:	f7ff ff82 	bl	8001ea8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001fa4:	20db      	movs	r0, #219	; 0xdb
 8001fa6:	f7ff ff7f 	bl	8001ea8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001faa:	2020      	movs	r0, #32
 8001fac:	f7ff ff7c 	bl	8001ea8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001fb0:	208d      	movs	r0, #141	; 0x8d
 8001fb2:	f7ff ff79 	bl	8001ea8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001fb6:	2014      	movs	r0, #20
 8001fb8:	f7ff ff76 	bl	8001ea8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001fbc:	20af      	movs	r0, #175	; 0xaf
 8001fbe:	f7ff ff73 	bl	8001ea8 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f000 f810 	bl	8001fe8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001fc8:	f000 f830 	bl	800202c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <ssd1306_Init+0xd8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <ssd1306_Init+0xd8>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001fd8:	4b02      	ldr	r3, [pc, #8]	; (8001fe4 <ssd1306_Init+0xd8>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	715a      	strb	r2, [r3, #5]
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200004b4 	.word	0x200004b4

08001fe8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e00d      	b.n	8002014 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <ssd1306_Fill+0x1a>
 8001ffe:	2100      	movs	r1, #0
 8002000:	e000      	b.n	8002004 <ssd1306_Fill+0x1c>
 8002002:	21ff      	movs	r1, #255	; 0xff
 8002004:	4a08      	ldr	r2, [pc, #32]	; (8002028 <ssd1306_Fill+0x40>)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4413      	add	r3, r2
 800200a:	460a      	mov	r2, r1
 800200c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3301      	adds	r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201a:	d3ed      	bcc.n	8001ff8 <ssd1306_Fill+0x10>
    }
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	200000b4 	.word	0x200000b4

0800202c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8002032:	2300      	movs	r3, #0
 8002034:	71fb      	strb	r3, [r7, #7]
 8002036:	e016      	b.n	8002066 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	3b50      	subs	r3, #80	; 0x50
 800203c:	b2db      	uxtb	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff32 	bl	8001ea8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff ff2f 	bl	8001ea8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800204a:	2010      	movs	r0, #16
 800204c:	f7ff ff2c 	bl	8001ea8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	01db      	lsls	r3, r3, #7
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <ssd1306_UpdateScreen+0x48>)
 8002056:	4413      	add	r3, r2
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff3c 	bl	8001ed8 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	3301      	adds	r3, #1
 8002064:	71fb      	strb	r3, [r7, #7]
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	2b07      	cmp	r3, #7
 800206a:	d9e5      	bls.n	8002038 <ssd1306_UpdateScreen+0xc>
    }
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200000b4 	.word	0x200000b4

08002078 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
 8002082:	460b      	mov	r3, r1
 8002084:	71bb      	strb	r3, [r7, #6]
 8002086:	4613      	mov	r3, r2
 8002088:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db48      	blt.n	8002124 <ssd1306_DrawPixel+0xac>
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	2b3f      	cmp	r3, #63	; 0x3f
 8002096:	d845      	bhi.n	8002124 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002098:	4b25      	ldr	r3, [pc, #148]	; (8002130 <ssd1306_DrawPixel+0xb8>)
 800209a:	791b      	ldrb	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80020a0:	797b      	ldrb	r3, [r7, #5]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80020ae:	797b      	ldrb	r3, [r7, #5]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d11a      	bne.n	80020ea <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020b4:	79fa      	ldrb	r2, [r7, #7]
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	b2d8      	uxtb	r0, r3
 80020bc:	4603      	mov	r3, r0
 80020be:	01db      	lsls	r3, r3, #7
 80020c0:	4413      	add	r3, r2
 80020c2:	4a1c      	ldr	r2, [pc, #112]	; (8002134 <ssd1306_DrawPixel+0xbc>)
 80020c4:	5cd3      	ldrb	r3, [r2, r3]
 80020c6:	b25a      	sxtb	r2, r3
 80020c8:	79bb      	ldrb	r3, [r7, #6]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	b25b      	sxtb	r3, r3
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b259      	sxtb	r1, r3
 80020da:	79fa      	ldrb	r2, [r7, #7]
 80020dc:	4603      	mov	r3, r0
 80020de:	01db      	lsls	r3, r3, #7
 80020e0:	4413      	add	r3, r2
 80020e2:	b2c9      	uxtb	r1, r1
 80020e4:	4a13      	ldr	r2, [pc, #76]	; (8002134 <ssd1306_DrawPixel+0xbc>)
 80020e6:	54d1      	strb	r1, [r2, r3]
 80020e8:	e01d      	b.n	8002126 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80020ea:	79fa      	ldrb	r2, [r7, #7]
 80020ec:	79bb      	ldrb	r3, [r7, #6]
 80020ee:	08db      	lsrs	r3, r3, #3
 80020f0:	b2d8      	uxtb	r0, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	01db      	lsls	r3, r3, #7
 80020f6:	4413      	add	r3, r2
 80020f8:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <ssd1306_DrawPixel+0xbc>)
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	b25a      	sxtb	r2, r3
 80020fe:	79bb      	ldrb	r3, [r7, #6]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	2101      	movs	r1, #1
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	b25b      	sxtb	r3, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	b25b      	sxtb	r3, r3
 8002110:	4013      	ands	r3, r2
 8002112:	b259      	sxtb	r1, r3
 8002114:	79fa      	ldrb	r2, [r7, #7]
 8002116:	4603      	mov	r3, r0
 8002118:	01db      	lsls	r3, r3, #7
 800211a:	4413      	add	r3, r2
 800211c:	b2c9      	uxtb	r1, r1
 800211e:	4a05      	ldr	r2, [pc, #20]	; (8002134 <ssd1306_DrawPixel+0xbc>)
 8002120:	54d1      	strb	r1, [r2, r3]
 8002122:	e000      	b.n	8002126 <ssd1306_DrawPixel+0xae>
        return;
 8002124:	bf00      	nop
    }
}
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	200004b4 	.word	0x200004b4
 8002134:	200000b4 	.word	0x200000b4

08002138 <ssd1306_DrawBitmap>:

// Draw a 128x64 bitmap image
// pBitmap     => Pointer to the stored byte array (size = 1024) of the image. 
// Convesion done here: https://javl.github.io/image2cpp/
void ssd1306_DrawBitmap(const unsigned char * pBitmap){
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 1024; i++){
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	e037      	b.n	80021b6 <ssd1306_DrawBitmap+0x7e>
			// Extract each byte
			unsigned char byte = pBitmap[i];
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	75fb      	strb	r3, [r7, #23]
				
			for(int k = 0; k < 8; k++){
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	e029      	b.n	80021aa <ssd1306_DrawBitmap+0x72>
				unsigned char pixel = (byte >> (7-k)) & 0x01;
 8002156:	7dfa      	ldrb	r2, [r7, #23]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	fa42 f303 	asr.w	r3, r2, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	75bb      	strb	r3, [r7, #22]
				unsigned int x = (i*8 + k) % 128;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	00da      	lsls	r2, r3, #3
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4413      	add	r3, r2
 8002172:	425a      	negs	r2, r3
 8002174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002178:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800217c:	bf58      	it	pl
 800217e:	4253      	negpl	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
				unsigned int y = (i*8 + k)/128;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	00da      	lsls	r2, r3, #3
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4413      	add	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	da00      	bge.n	8002190 <ssd1306_DrawBitmap+0x58>
 800218e:	337f      	adds	r3, #127	; 0x7f
 8002190:	11db      	asrs	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]
				ssd1306_DrawPixel(x, y, (SSD1306_COLOR) pixel);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	b2d1      	uxtb	r1, r2
 800219c:	7dba      	ldrb	r2, [r7, #22]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff6a 	bl	8002078 <ssd1306_DrawPixel>
			for(int k = 0; k < 8; k++){
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	3301      	adds	r3, #1
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b07      	cmp	r3, #7
 80021ae:	ddd2      	ble.n	8002156 <ssd1306_DrawBitmap+0x1e>
	for(int i = 0; i < 1024; i++){
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	3301      	adds	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021bc:	dbc3      	blt.n	8002146 <ssd1306_DrawBitmap+0xe>
			}//for - k
	}//for - i
}
 80021be:	bf00      	nop
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4604      	mov	r4, r0
 80021d0:	1d38      	adds	r0, r7, #4
 80021d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80021d6:	461a      	mov	r2, r3
 80021d8:	4623      	mov	r3, r4
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	4613      	mov	r3, r2
 80021de:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80021e0:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <ssd1306_WriteChar+0xfc>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	793b      	ldrb	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	2b7f      	cmp	r3, #127	; 0x7f
 80021ec:	dc06      	bgt.n	80021fc <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80021ee:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <ssd1306_WriteChar+0xfc>)
 80021f0:	885b      	ldrh	r3, [r3, #2]
 80021f2:	461a      	mov	r2, r3
 80021f4:	797b      	ldrb	r3, [r7, #5]
 80021f6:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80021f8:	2b3f      	cmp	r3, #63	; 0x3f
 80021fa:	dd01      	ble.n	8002200 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e05d      	b.n	80022bc <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	e04c      	b.n	80022a0 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	3b20      	subs	r3, #32
 800220c:	7979      	ldrb	r1, [r7, #5]
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4619      	mov	r1, r3
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	440b      	add	r3, r1
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	e034      	b.n	8002290 <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d012      	beq.n	800225c <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <ssd1306_WriteChar+0xfc>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4413      	add	r3, r2
 8002242:	b2d8      	uxtb	r0, r3
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <ssd1306_WriteChar+0xfc>)
 8002246:	885b      	ldrh	r3, [r3, #2]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4413      	add	r3, r2
 8002250:	b2db      	uxtb	r3, r3
 8002252:	7bba      	ldrb	r2, [r7, #14]
 8002254:	4619      	mov	r1, r3
 8002256:	f7ff ff0f 	bl	8002078 <ssd1306_DrawPixel>
 800225a:	e016      	b.n	800228a <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <ssd1306_WriteChar+0xfc>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	4413      	add	r3, r2
 8002268:	b2d8      	uxtb	r0, r3
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <ssd1306_WriteChar+0xfc>)
 800226c:	885b      	ldrh	r3, [r3, #2]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4413      	add	r3, r2
 8002276:	b2d9      	uxtb	r1, r3
 8002278:	7bbb      	ldrb	r3, [r7, #14]
 800227a:	2b00      	cmp	r3, #0
 800227c:	bf0c      	ite	eq
 800227e:	2301      	moveq	r3, #1
 8002280:	2300      	movne	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	f7ff fef7 	bl	8002078 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	3301      	adds	r3, #1
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	793b      	ldrb	r3, [r7, #4]
 8002292:	461a      	mov	r2, r3
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	4293      	cmp	r3, r2
 8002298:	d3c5      	bcc.n	8002226 <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3301      	adds	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	797b      	ldrb	r3, [r7, #5]
 80022a2:	461a      	mov	r2, r3
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d3ad      	bcc.n	8002206 <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <ssd1306_WriteChar+0xfc>)
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	793b      	ldrb	r3, [r7, #4]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <ssd1306_WriteChar+0xfc>)
 80022b8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3724      	adds	r7, #36	; 0x24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd90      	pop	{r4, r7, pc}
 80022c4:	200004b4 	.word	0x200004b4

080022c8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	1d38      	adds	r0, r7, #4
 80022d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80022d6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80022d8:	e012      	b.n	8002300 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	7818      	ldrb	r0, [r3, #0]
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	1d3a      	adds	r2, r7, #4
 80022e2:	ca06      	ldmia	r2, {r1, r2}
 80022e4:	f7ff ff70 	bl	80021c8 <ssd1306_WriteChar>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d002      	beq.n	80022fa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	e008      	b.n	800230c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3301      	adds	r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1e8      	bne.n	80022da <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	781b      	ldrb	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	460a      	mov	r2, r1
 800231e:	71fb      	strb	r3, [r7, #7]
 8002320:	4613      	mov	r3, r2
 8002322:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	b29a      	uxth	r2, r3
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <ssd1306_SetCursor+0x2c>)
 800232a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800232c:	79bb      	ldrb	r3, [r7, #6]
 800232e:	b29a      	uxth	r2, r3
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <ssd1306_SetCursor+0x2c>)
 8002332:	805a      	strh	r2, [r3, #2]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	200004b4 	.word	0x200004b4

08002344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800237c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002348:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800234a:	e003      	b.n	8002354 <LoopCopyDataInit>

0800234c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800234e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002350:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002352:	3104      	adds	r1, #4

08002354 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002354:	480b      	ldr	r0, [pc, #44]	; (8002384 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002358:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800235a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800235c:	d3f6      	bcc.n	800234c <CopyDataInit>
  ldr  r2, =_sbss
 800235e:	4a0b      	ldr	r2, [pc, #44]	; (800238c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002360:	e002      	b.n	8002368 <LoopFillZerobss>

08002362 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002362:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002364:	f842 3b04 	str.w	r3, [r2], #4

08002368 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800236a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800236c:	d3f9      	bcc.n	8002362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800236e:	f7ff f85d 	bl	800142c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002372:	f003 f803 	bl	800537c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002376:	f7fe f8e3 	bl	8000540 <main>
  bx  lr    
 800237a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800237c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002380:	08007ba0 	.word	0x08007ba0
  ldr  r0, =_sdata
 8002384:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002388:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 800238c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002390:	20000838 	.word	0x20000838

08002394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC_IRQHandler>
	...

08002398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_Init+0x40>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0d      	ldr	r2, [pc, #52]	; (80023d8 <HAL_Init+0x40>)
 80023a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <HAL_Init+0x40>)
 80023ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <HAL_Init+0x40>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c0:	2003      	movs	r0, #3
 80023c2:	f000 f94d 	bl	8002660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f000 f808 	bl	80023dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023cc:	f7fe fcbe 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023c00 	.word	0x40023c00

080023dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_InitTick+0x54>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_InitTick+0x58>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f965 	bl	80026ca <HAL_SYSTICK_Config>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e00e      	b.n	8002428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b0f      	cmp	r3, #15
 800240e:	d80a      	bhi.n	8002426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002410:	2200      	movs	r2, #0
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	f04f 30ff 	mov.w	r0, #4294967295
 8002418:	f000 f92d 	bl	8002676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800241c:	4a06      	ldr	r2, [pc, #24]	; (8002438 <HAL_InitTick+0x5c>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	e000      	b.n	8002428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000000 	.word	0x20000000
 8002434:	20000018 	.word	0x20000018
 8002438:	20000014 	.word	0x20000014

0800243c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_IncTick+0x20>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_IncTick+0x24>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4413      	add	r3, r2
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_IncTick+0x24>)
 800244e:	6013      	str	r3, [r2, #0]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000018 	.word	0x20000018
 8002460:	20000830 	.word	0x20000830

08002464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return uwTick;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_GetTick+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000830 	.word	0x20000830

0800247c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002484:	f7ff ffee 	bl	8002464 <HAL_GetTick>
 8002488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d005      	beq.n	80024a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_Delay+0x40>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024a2:	bf00      	nop
 80024a4:	f7ff ffde 	bl	8002464 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d8f7      	bhi.n	80024a4 <HAL_Delay+0x28>
  {
  }
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000018 	.word	0x20000018

080024c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024dc:	4013      	ands	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <__NVIC_GetPriorityGrouping+0x18>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 0307 	and.w	r3, r3, #7
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db0b      	blt.n	800254e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	4907      	ldr	r1, [pc, #28]	; (800255c <__NVIC_EnableIRQ+0x38>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	; (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f1c3 0307 	rsb	r3, r3, #7
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf28      	it	cs
 80025d2:	2304      	movcs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3304      	adds	r3, #4
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d902      	bls.n	80025e4 <NVIC_EncodePriority+0x30>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3b03      	subs	r3, #3
 80025e2:	e000      	b.n	80025e6 <NVIC_EncodePriority+0x32>
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43d9      	mvns	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	4313      	orrs	r3, r2
         );
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800262c:	d301      	bcc.n	8002632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262e:	2301      	movs	r3, #1
 8002630:	e00f      	b.n	8002652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <SysTick_Config+0x40>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800263a:	210f      	movs	r1, #15
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	f7ff ff8e 	bl	8002560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <SysTick_Config+0x40>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <SysTick_Config+0x40>)
 800264c:	2207      	movs	r2, #7
 800264e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	e000e010 	.word	0xe000e010

08002660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff29 	bl	80024c0 <__NVIC_SetPriorityGrouping>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002688:	f7ff ff3e 	bl	8002508 <__NVIC_GetPriorityGrouping>
 800268c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	6978      	ldr	r0, [r7, #20]
 8002694:	f7ff ff8e 	bl	80025b4 <NVIC_EncodePriority>
 8002698:	4602      	mov	r2, r0
 800269a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff5d 	bl	8002560 <__NVIC_SetPriority>
}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff31 	bl	8002524 <__NVIC_EnableIRQ>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffa2 	bl	800261c <SysTick_Config>
 80026d8:	4603      	mov	r3, r0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e16b      	b.n	80029d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 815a 	bne.w	80029d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d00b      	beq.n	800273e <HAL_GPIO_Init+0x5a>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d007      	beq.n	800273e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002732:	2b11      	cmp	r3, #17
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b12      	cmp	r3, #18
 800273c:	d130      	bne.n	80027a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 0201 	and.w	r2, r3, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0xfc>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b12      	cmp	r3, #18
 80027de:	d123      	bne.n	8002828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3208      	adds	r2, #8
 80027e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	08da      	lsrs	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	69b9      	ldr	r1, [r7, #24]
 8002824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0203 	and.w	r2, r3, #3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80b4 	beq.w	80029d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <HAL_GPIO_Init+0x308>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4a5e      	ldr	r2, [pc, #376]	; (80029ec <HAL_GPIO_Init+0x308>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	4b5c      	ldr	r3, [pc, #368]	; (80029ec <HAL_GPIO_Init+0x308>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002886:	4a5a      	ldr	r2, [pc, #360]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a51      	ldr	r2, [pc, #324]	; (80029f4 <HAL_GPIO_Init+0x310>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02b      	beq.n	800290a <HAL_GPIO_Init+0x226>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a50      	ldr	r2, [pc, #320]	; (80029f8 <HAL_GPIO_Init+0x314>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d025      	beq.n	8002906 <HAL_GPIO_Init+0x222>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4f      	ldr	r2, [pc, #316]	; (80029fc <HAL_GPIO_Init+0x318>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01f      	beq.n	8002902 <HAL_GPIO_Init+0x21e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4e      	ldr	r2, [pc, #312]	; (8002a00 <HAL_GPIO_Init+0x31c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0x21a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4d      	ldr	r2, [pc, #308]	; (8002a04 <HAL_GPIO_Init+0x320>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_Init+0x216>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4c      	ldr	r2, [pc, #304]	; (8002a08 <HAL_GPIO_Init+0x324>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x212>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4b      	ldr	r2, [pc, #300]	; (8002a0c <HAL_GPIO_Init+0x328>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4a      	ldr	r2, [pc, #296]	; (8002a10 <HAL_GPIO_Init+0x32c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x20a>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e00e      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028ee:	2308      	movs	r3, #8
 80028f0:	e00c      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e00a      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f6:	2305      	movs	r3, #5
 80028f8:	e008      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fa:	2304      	movs	r3, #4
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fe:	2303      	movs	r3, #3
 8002900:	e004      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002902:	2302      	movs	r3, #2
 8002904:	e002      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_GPIO_Init+0x228>
 800290a:	2300      	movs	r3, #0
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f002 0203 	and.w	r2, r2, #3
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4093      	lsls	r3, r2
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800291c:	4934      	ldr	r1, [pc, #208]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800292a:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <HAL_GPIO_Init+0x330>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800294e:	4a31      	ldr	r2, [pc, #196]	; (8002a14 <HAL_GPIO_Init+0x330>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002954:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <HAL_GPIO_Init+0x330>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002978:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <HAL_GPIO_Init+0x330>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297e:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <HAL_GPIO_Init+0x330>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a2:	4a1c      	ldr	r2, [pc, #112]	; (8002a14 <HAL_GPIO_Init+0x330>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a8:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_GPIO_Init+0x330>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029cc:	4a11      	ldr	r2, [pc, #68]	; (8002a14 <HAL_GPIO_Init+0x330>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	f67f ae90 	bls.w	8002700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	3724      	adds	r7, #36	; 0x24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40013800 	.word	0x40013800
 80029f4:	40020000 	.word	0x40020000
 80029f8:	40020400 	.word	0x40020400
 80029fc:	40020800 	.word	0x40020800
 8002a00:	40020c00 	.word	0x40020c00
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40021400 	.word	0x40021400
 8002a0c:	40021800 	.word	0x40021800
 8002a10:	40021c00 	.word	0x40021c00
 8002a14:	40013c00 	.word	0x40013c00

08002a18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	e001      	b.n	8002a3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
 8002a54:	4613      	mov	r3, r2
 8002a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a58:	787b      	ldrb	r3, [r7, #1]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a64:	e003      	b.n	8002a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a66:	887b      	ldrh	r3, [r7, #2]
 8002a68:	041a      	lsls	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	619a      	str	r2, [r3, #24]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d104      	bne.n	8002a9e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a94:	887b      	ldrh	r3, [r7, #2]
 8002a96:	041a      	lsls	r2, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002a9c:	e002      	b.n	8002aa4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002a9e:	887a      	ldrh	r2, [r7, #2]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	619a      	str	r2, [r3, #24]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f806 	bl	8002ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40013c00 	.word	0x40013c00

08002ae0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e11f      	b.n	8002d4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe f93c 	bl	8000d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2224      	movs	r2, #36	; 0x24
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b5c:	f001 f82e 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 8002b60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4a7b      	ldr	r2, [pc, #492]	; (8002d54 <HAL_I2C_Init+0x25c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d807      	bhi.n	8002b7c <HAL_I2C_Init+0x84>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a7a      	ldr	r2, [pc, #488]	; (8002d58 <HAL_I2C_Init+0x260>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	bf94      	ite	ls
 8002b74:	2301      	movls	r3, #1
 8002b76:	2300      	movhi	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e006      	b.n	8002b8a <HAL_I2C_Init+0x92>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4a77      	ldr	r2, [pc, #476]	; (8002d5c <HAL_I2C_Init+0x264>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	bf94      	ite	ls
 8002b84:	2301      	movls	r3, #1
 8002b86:	2300      	movhi	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0db      	b.n	8002d4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4a72      	ldr	r2, [pc, #456]	; (8002d60 <HAL_I2C_Init+0x268>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	0c9b      	lsrs	r3, r3, #18
 8002b9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a64      	ldr	r2, [pc, #400]	; (8002d54 <HAL_I2C_Init+0x25c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d802      	bhi.n	8002bcc <HAL_I2C_Init+0xd4>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	e009      	b.n	8002be0 <HAL_I2C_Init+0xe8>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	4a63      	ldr	r2, [pc, #396]	; (8002d64 <HAL_I2C_Init+0x26c>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	3301      	adds	r3, #1
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4956      	ldr	r1, [pc, #344]	; (8002d54 <HAL_I2C_Init+0x25c>)
 8002bfc:	428b      	cmp	r3, r1
 8002bfe:	d80d      	bhi.n	8002c1c <HAL_I2C_Init+0x124>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1e59      	subs	r1, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	bf38      	it	cc
 8002c18:	2304      	movcc	r3, #4
 8002c1a:	e04f      	b.n	8002cbc <HAL_I2C_Init+0x1c4>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d111      	bne.n	8002c48 <HAL_I2C_Init+0x150>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1e58      	subs	r0, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	440b      	add	r3, r1
 8002c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c36:	3301      	adds	r3, #1
 8002c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e012      	b.n	8002c6e <HAL_I2C_Init+0x176>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1e58      	subs	r0, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	0099      	lsls	r1, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Init+0x17e>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e022      	b.n	8002cbc <HAL_I2C_Init+0x1c4>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10e      	bne.n	8002c9c <HAL_I2C_Init+0x1a4>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1e58      	subs	r0, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	460b      	mov	r3, r1
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	440b      	add	r3, r1
 8002c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9a:	e00f      	b.n	8002cbc <HAL_I2C_Init+0x1c4>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1e58      	subs	r0, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	0099      	lsls	r1, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	6809      	ldr	r1, [r1, #0]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69da      	ldr	r2, [r3, #28]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6911      	ldr	r1, [r2, #16]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68d2      	ldr	r2, [r2, #12]
 8002cf6:	4311      	orrs	r1, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	000186a0 	.word	0x000186a0
 8002d58:	001e847f 	.word	0x001e847f
 8002d5c:	003d08ff 	.word	0x003d08ff
 8002d60:	431bde83 	.word	0x431bde83
 8002d64:	10624dd3 	.word	0x10624dd3

08002d68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	4608      	mov	r0, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	461a      	mov	r2, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	817b      	strh	r3, [r7, #10]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	813b      	strh	r3, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d82:	f7ff fb6f 	bl	8002464 <HAL_GetTick>
 8002d86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	f040 80d9 	bne.w	8002f48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	2319      	movs	r3, #25
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	496d      	ldr	r1, [pc, #436]	; (8002f54 <HAL_I2C_Mem_Write+0x1ec>)
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f96f 	bl	8003084 <I2C_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
 8002dae:	e0cc      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_I2C_Mem_Write+0x56>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e0c5      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d007      	beq.n	8002de4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2221      	movs	r2, #33	; 0x21
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2240      	movs	r2, #64	; 0x40
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a4d      	ldr	r2, [pc, #308]	; (8002f58 <HAL_I2C_Mem_Write+0x1f0>)
 8002e24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e26:	88f8      	ldrh	r0, [r7, #6]
 8002e28:	893a      	ldrh	r2, [r7, #8]
 8002e2a:	8979      	ldrh	r1, [r7, #10]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	4603      	mov	r3, r0
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f890 	bl	8002f5c <I2C_RequestMemoryWrite>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d052      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e081      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f9f0 	bl	8003230 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d107      	bne.n	8002e6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e06b      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d11b      	bne.n	8002ee8 <HAL_I2C_Mem_Write+0x180>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d017      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1aa      	bne.n	8002e46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f9dc 	bl	80032b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00d      	beq.n	8002f1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d107      	bne.n	8002f18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e016      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e000      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	00100002 	.word	0x00100002
 8002f58:	ffff0000 	.word	0xffff0000

08002f5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	817b      	strh	r3, [r7, #10]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	813b      	strh	r3, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f876 	bl	8003084 <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e05f      	b.n	8003078 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fb8:	897b      	ldrh	r3, [r7, #10]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	6a3a      	ldr	r2, [r7, #32]
 8002fcc:	492c      	ldr	r1, [pc, #176]	; (8003080 <I2C_RequestMemoryWrite+0x124>)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f8af 	bl	8003132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e04c      	b.n	8003078 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff6:	6a39      	ldr	r1, [r7, #32]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f919 	bl	8003230 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00d      	beq.n	8003020 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2b04      	cmp	r3, #4
 800300a:	d107      	bne.n	800301c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e02b      	b.n	8003078 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003026:	893b      	ldrh	r3, [r7, #8]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	611a      	str	r2, [r3, #16]
 8003030:	e021      	b.n	8003076 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003032:	893b      	ldrh	r3, [r7, #8]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	b29b      	uxth	r3, r3
 8003038:	b2da      	uxtb	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003042:	6a39      	ldr	r1, [r7, #32]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f8f3 	bl	8003230 <I2C_WaitOnTXEFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00d      	beq.n	800306c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b04      	cmp	r3, #4
 8003056:	d107      	bne.n	8003068 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003066:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e005      	b.n	8003078 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800306c:	893b      	ldrh	r3, [r7, #8]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	00010002 	.word	0x00010002

08003084 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003094:	e025      	b.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d021      	beq.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309e:	f7ff f9e1 	bl	8002464 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d302      	bcc.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d116      	bne.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e023      	b.n	800312a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10d      	bne.n	8003108 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	43da      	mvns	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bf0c      	ite	eq
 80030fe:	2301      	moveq	r3, #1
 8003100:	2300      	movne	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	e00c      	b.n	8003122 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	43da      	mvns	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4013      	ands	r3, r2
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	429a      	cmp	r2, r3
 8003126:	d0b6      	beq.n	8003096 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003140:	e051      	b.n	80031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003150:	d123      	bne.n	800319a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003160:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800316a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f043 0204 	orr.w	r2, r3, #4
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e046      	b.n	8003228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d021      	beq.n	80031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a2:	f7ff f95f 	bl	8002464 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d302      	bcc.n	80031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d116      	bne.n	80031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f043 0220 	orr.w	r2, r3, #32
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e020      	b.n	8003228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d10c      	bne.n	800320a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf14      	ite	ne
 8003202:	2301      	movne	r3, #1
 8003204:	2300      	moveq	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	e00b      	b.n	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	43da      	mvns	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d18d      	bne.n	8003142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800323c:	e02d      	b.n	800329a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f878 	bl	8003334 <I2C_IsAcknowledgeFailed>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e02d      	b.n	80032aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d021      	beq.n	800329a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003256:	f7ff f905 	bl	8002464 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	429a      	cmp	r2, r3
 8003264:	d302      	bcc.n	800326c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d116      	bne.n	800329a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f043 0220 	orr.w	r2, r3, #32
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e007      	b.n	80032aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a4:	2b80      	cmp	r3, #128	; 0x80
 80032a6:	d1ca      	bne.n	800323e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032be:	e02d      	b.n	800331c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f837 	bl	8003334 <I2C_IsAcknowledgeFailed>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e02d      	b.n	800332c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d021      	beq.n	800331c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d8:	f7ff f8c4 	bl	8002464 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d302      	bcc.n	80032ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d116      	bne.n	800331c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e007      	b.n	800332c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b04      	cmp	r3, #4
 8003328:	d1ca      	bne.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334a:	d11b      	bne.n	8003384 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003354:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	f043 0204 	orr.w	r2, r3, #4
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e25b      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d075      	beq.n	800349e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033b2:	4ba3      	ldr	r3, [pc, #652]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d00c      	beq.n	80033d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033be:	4ba0      	ldr	r3, [pc, #640]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d112      	bne.n	80033f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ca:	4b9d      	ldr	r3, [pc, #628]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d6:	d10b      	bne.n	80033f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	4b99      	ldr	r3, [pc, #612]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d05b      	beq.n	800349c <HAL_RCC_OscConfig+0x108>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d157      	bne.n	800349c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e236      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f8:	d106      	bne.n	8003408 <HAL_RCC_OscConfig+0x74>
 80033fa:	4b91      	ldr	r3, [pc, #580]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a90      	ldr	r2, [pc, #576]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e01d      	b.n	8003444 <HAL_RCC_OscConfig+0xb0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x98>
 8003412:	4b8b      	ldr	r3, [pc, #556]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a8a      	ldr	r2, [pc, #552]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a87      	ldr	r2, [pc, #540]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e00b      	b.n	8003444 <HAL_RCC_OscConfig+0xb0>
 800342c:	4b84      	ldr	r3, [pc, #528]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a83      	ldr	r2, [pc, #524]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b81      	ldr	r3, [pc, #516]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a80      	ldr	r2, [pc, #512]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800343e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d013      	beq.n	8003474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7ff f80a 	bl	8002464 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003454:	f7ff f806 	bl	8002464 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e1fb      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	4b76      	ldr	r3, [pc, #472]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0xc0>
 8003472:	e014      	b.n	800349e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe fff6 	bl	8002464 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800347c:	f7fe fff2 	bl	8002464 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e1e7      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	4b6c      	ldr	r3, [pc, #432]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0xe8>
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d063      	beq.n	8003572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034aa:	4b65      	ldr	r3, [pc, #404]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b6:	4b62      	ldr	r3, [pc, #392]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d11c      	bne.n	80034fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c2:	4b5f      	ldr	r3, [pc, #380]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d116      	bne.n	80034fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	4b5c      	ldr	r3, [pc, #368]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_RCC_OscConfig+0x152>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e1bb      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e6:	4b56      	ldr	r3, [pc, #344]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4952      	ldr	r1, [pc, #328]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fa:	e03a      	b.n	8003572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d020      	beq.n	8003546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003504:	4b4f      	ldr	r3, [pc, #316]	; (8003644 <HAL_RCC_OscConfig+0x2b0>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fe ffab 	bl	8002464 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003512:	f7fe ffa7 	bl	8002464 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e19c      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	4b46      	ldr	r3, [pc, #280]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003530:	4b43      	ldr	r3, [pc, #268]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4940      	ldr	r1, [pc, #256]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	4313      	orrs	r3, r2
 8003542:	600b      	str	r3, [r1, #0]
 8003544:	e015      	b.n	8003572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003546:	4b3f      	ldr	r3, [pc, #252]	; (8003644 <HAL_RCC_OscConfig+0x2b0>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe ff8a 	bl	8002464 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003554:	f7fe ff86 	bl	8002464 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e17b      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d030      	beq.n	80035e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003586:	4b30      	ldr	r3, [pc, #192]	; (8003648 <HAL_RCC_OscConfig+0x2b4>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358c:	f7fe ff6a 	bl	8002464 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003594:	f7fe ff66 	bl	8002464 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e15b      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	4b26      	ldr	r3, [pc, #152]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x200>
 80035b2:	e015      	b.n	80035e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_RCC_OscConfig+0x2b4>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ba:	f7fe ff53 	bl	8002464 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c2:	f7fe ff4f 	bl	8002464 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e144      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80035d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a0 	beq.w	800372e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10f      	bne.n	800361e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	4a0e      	ldr	r2, [pc, #56]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360c:	6413      	str	r3, [r2, #64]	; 0x40
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_OscConfig+0x2b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d121      	bne.n	800366e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <HAL_RCC_OscConfig+0x2b8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a07      	ldr	r2, [pc, #28]	; (800364c <HAL_RCC_OscConfig+0x2b8>)
 8003630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003636:	f7fe ff15 	bl	8002464 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	e011      	b.n	8003662 <HAL_RCC_OscConfig+0x2ce>
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800
 8003644:	42470000 	.word	0x42470000
 8003648:	42470e80 	.word	0x42470e80
 800364c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003650:	f7fe ff08 	bl	8002464 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e0fd      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	4b81      	ldr	r3, [pc, #516]	; (8003868 <HAL_RCC_OscConfig+0x4d4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d106      	bne.n	8003684 <HAL_RCC_OscConfig+0x2f0>
 8003676:	4b7d      	ldr	r3, [pc, #500]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a7c      	ldr	r2, [pc, #496]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
 8003682:	e01c      	b.n	80036be <HAL_RCC_OscConfig+0x32a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b05      	cmp	r3, #5
 800368a:	d10c      	bne.n	80036a6 <HAL_RCC_OscConfig+0x312>
 800368c:	4b77      	ldr	r3, [pc, #476]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a76      	ldr	r2, [pc, #472]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	4b74      	ldr	r3, [pc, #464]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a73      	ldr	r2, [pc, #460]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	e00b      	b.n	80036be <HAL_RCC_OscConfig+0x32a>
 80036a6:	4b71      	ldr	r3, [pc, #452]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a70      	ldr	r2, [pc, #448]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
 80036b2:	4b6e      	ldr	r3, [pc, #440]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	4a6d      	ldr	r2, [pc, #436]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d015      	beq.n	80036f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c6:	f7fe fecd 	bl	8002464 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036cc:	e00a      	b.n	80036e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ce:	f7fe fec9 	bl	8002464 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036dc:	4293      	cmp	r3, r2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e0bc      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e4:	4b61      	ldr	r3, [pc, #388]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ee      	beq.n	80036ce <HAL_RCC_OscConfig+0x33a>
 80036f0:	e014      	b.n	800371c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f2:	f7fe feb7 	bl	8002464 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fe feb3 	bl	8002464 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e0a6      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003710:	4b56      	ldr	r3, [pc, #344]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1ee      	bne.n	80036fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d105      	bne.n	800372e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003722:	4b52      	ldr	r3, [pc, #328]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	4a51      	ldr	r2, [pc, #324]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 8003728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8092 	beq.w	800385c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003738:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	d05c      	beq.n	80037fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d141      	bne.n	80037d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374c:	4b48      	ldr	r3, [pc, #288]	; (8003870 <HAL_RCC_OscConfig+0x4dc>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fe fe87 	bl	8002464 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375a:	f7fe fe83 	bl	8002464 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e078      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376c:	4b3f      	ldr	r3, [pc, #252]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	019b      	lsls	r3, r3, #6
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	3b01      	subs	r3, #1
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	061b      	lsls	r3, r3, #24
 800379c:	4933      	ldr	r1, [pc, #204]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a2:	4b33      	ldr	r3, [pc, #204]	; (8003870 <HAL_RCC_OscConfig+0x4dc>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fe fe5c 	bl	8002464 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fe fe58 	bl	8002464 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e04d      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	4b2a      	ldr	r3, [pc, #168]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x41c>
 80037ce:	e045      	b.n	800385c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <HAL_RCC_OscConfig+0x4dc>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fe fe45 	bl	8002464 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037de:	f7fe fe41 	bl	8002464 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e036      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f0:	4b1e      	ldr	r3, [pc, #120]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x44a>
 80037fc:	e02e      	b.n	800385c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e029      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800380a:	4b18      	ldr	r3, [pc, #96]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	429a      	cmp	r2, r3
 800381c:	d11c      	bne.n	8003858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d115      	bne.n	8003858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003832:	4013      	ands	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003838:	4293      	cmp	r3, r2
 800383a:	d10d      	bne.n	8003858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d106      	bne.n	8003858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40007000 	.word	0x40007000
 800386c:	40023800 	.word	0x40023800
 8003870:	42470060 	.word	0x42470060

08003874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0cc      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003888:	4b68      	ldr	r3, [pc, #416]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d90c      	bls.n	80038b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b63      	ldr	r3, [pc, #396]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0b8      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c8:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a58      	ldr	r2, [pc, #352]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a52      	ldr	r2, [pc, #328]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ec:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	494d      	ldr	r1, [pc, #308]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d044      	beq.n	8003994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d119      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e07f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d003      	beq.n	8003932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392e:	2b03      	cmp	r3, #3
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003932:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e06f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003942:	4b3b      	ldr	r3, [pc, #236]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e067      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003952:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 0203 	bic.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4934      	ldr	r1, [pc, #208]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	4313      	orrs	r3, r2
 8003962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003964:	f7fe fd7e 	bl	8002464 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	e00a      	b.n	8003982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396c:	f7fe fd7a 	bl	8002464 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e04f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	4b2b      	ldr	r3, [pc, #172]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 020c 	and.w	r2, r3, #12
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	429a      	cmp	r2, r3
 8003992:	d1eb      	bne.n	800396c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003994:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d20c      	bcs.n	80039bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e032      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4916      	ldr	r1, [pc, #88]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	490e      	ldr	r1, [pc, #56]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039fa:	f000 f821 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 80039fe:	4601      	mov	r1, r0
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	5cd3      	ldrb	r3, [r2, r3]
 8003a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <HAL_RCC_ClockConfig+0x1c8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe fcde 	bl	80023dc <HAL_InitTick>

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023c00 	.word	0x40023c00
 8003a30:	40023800 	.word	0x40023800
 8003a34:	08005e4c 	.word	0x08005e4c
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	20000014 	.word	0x20000014

08003a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a56:	4b50      	ldr	r3, [pc, #320]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d007      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x32>
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d008      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x38>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f040 808d 	bne.w	8003b86 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a6c:	4b4b      	ldr	r3, [pc, #300]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a6e:	60bb      	str	r3, [r7, #8]
       break;
 8003a70:	e08c      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a72:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a74:	60bb      	str	r3, [r7, #8]
      break;
 8003a76:	e089      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a78:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a82:	4b45      	ldr	r3, [pc, #276]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d023      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8e:	4b42      	ldr	r3, [pc, #264]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	099b      	lsrs	r3, r3, #6
 8003a94:	f04f 0400 	mov.w	r4, #0
 8003a98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	ea03 0501 	and.w	r5, r3, r1
 8003aa4:	ea04 0602 	and.w	r6, r4, r2
 8003aa8:	4a3d      	ldr	r2, [pc, #244]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003aaa:	fb02 f106 	mul.w	r1, r2, r6
 8003aae:	2200      	movs	r2, #0
 8003ab0:	fb02 f205 	mul.w	r2, r2, r5
 8003ab4:	440a      	add	r2, r1
 8003ab6:	493a      	ldr	r1, [pc, #232]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ab8:	fba5 0101 	umull	r0, r1, r5, r1
 8003abc:	1853      	adds	r3, r2, r1
 8003abe:	4619      	mov	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f04f 0400 	mov.w	r4, #0
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4623      	mov	r3, r4
 8003aca:	f7fc fb7d 	bl	80001c8 <__aeabi_uldivmod>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e049      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad6:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	099b      	lsrs	r3, r3, #6
 8003adc:	f04f 0400 	mov.w	r4, #0
 8003ae0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	ea03 0501 	and.w	r5, r3, r1
 8003aec:	ea04 0602 	and.w	r6, r4, r2
 8003af0:	4629      	mov	r1, r5
 8003af2:	4632      	mov	r2, r6
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	f04f 0400 	mov.w	r4, #0
 8003afc:	0154      	lsls	r4, r2, #5
 8003afe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b02:	014b      	lsls	r3, r1, #5
 8003b04:	4619      	mov	r1, r3
 8003b06:	4622      	mov	r2, r4
 8003b08:	1b49      	subs	r1, r1, r5
 8003b0a:	eb62 0206 	sbc.w	r2, r2, r6
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	f04f 0400 	mov.w	r4, #0
 8003b16:	0194      	lsls	r4, r2, #6
 8003b18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b1c:	018b      	lsls	r3, r1, #6
 8003b1e:	1a5b      	subs	r3, r3, r1
 8003b20:	eb64 0402 	sbc.w	r4, r4, r2
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	00e2      	lsls	r2, r4, #3
 8003b2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b32:	00d9      	lsls	r1, r3, #3
 8003b34:	460b      	mov	r3, r1
 8003b36:	4614      	mov	r4, r2
 8003b38:	195b      	adds	r3, r3, r5
 8003b3a:	eb44 0406 	adc.w	r4, r4, r6
 8003b3e:	f04f 0100 	mov.w	r1, #0
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	02a2      	lsls	r2, r4, #10
 8003b48:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b4c:	0299      	lsls	r1, r3, #10
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4614      	mov	r4, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	4621      	mov	r1, r4
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f04f 0400 	mov.w	r4, #0
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4623      	mov	r3, r4
 8003b60:	f7fc fb32 	bl	80001c8 <__aeabi_uldivmod>
 8003b64:	4603      	mov	r3, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	0c1b      	lsrs	r3, r3, #16
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	3301      	adds	r3, #1
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	60bb      	str	r3, [r7, #8]
      break;
 8003b84:	e002      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b88:	60bb      	str	r3, [r7, #8]
      break;
 8003b8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	00f42400 	.word	0x00f42400
 8003ba0:	017d7840 	.word	0x017d7840

08003ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20000000 	.word	0x20000000

08003bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bc0:	f7ff fff0 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003bc4:	4601      	mov	r1, r0
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	0a9b      	lsrs	r3, r3, #10
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	4a03      	ldr	r2, [pc, #12]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd2:	5cd3      	ldrb	r3, [r2, r3]
 8003bd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	08005e5c 	.word	0x08005e5c

08003be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003be8:	f7ff ffdc 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003bec:	4601      	mov	r1, r0
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	0b5b      	lsrs	r3, r3, #13
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4a03      	ldr	r2, [pc, #12]	; (8003c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bfa:	5cd3      	ldrb	r3, [r2, r3]
 8003bfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40023800 	.word	0x40023800
 8003c08:	08005e5c 	.word	0x08005e5c

08003c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e01d      	b.n	8003c5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd fa04 	bl	8001040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f000 fb8c 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b06      	cmp	r3, #6
 8003c8a:	d007      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10f      	bne.n	8003cf2 <HAL_TIM_Base_Stop_IT+0x48>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6a1a      	ldr	r2, [r3, #32]
 8003cd8:	f240 4344 	movw	r3, #1092	; 0x444
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d107      	bne.n	8003cf2 <HAL_TIM_Base_Stop_IT+0x48>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0201 	bic.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e01d      	b.n	8003d4e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd f8a2 	bl	8000e70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f000 fb12 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2201      	movs	r2, #1
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fd4c 	bl	8004808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <HAL_TIM_PWM_Start+0x74>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <HAL_TIM_PWM_Start+0x2c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <HAL_TIM_PWM_Start+0x78>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d101      	bne.n	8003d88 <HAL_TIM_PWM_Start+0x30>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <HAL_TIM_PWM_Start+0x32>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b06      	cmp	r3, #6
 8003dae:	d007      	beq.n	8003dc0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40010400 	.word	0x40010400

08003dd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e083      	b.n	8003ef0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fd f885 	bl	8000f0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e18:	f023 0307 	bic.w	r3, r3, #7
 8003e1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3304      	adds	r3, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4610      	mov	r0, r2
 8003e2a:	f000 fa9d 	bl	8004368 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	4313      	orrs	r3, r2
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e74:	f023 030c 	bic.w	r3, r3, #12
 8003e78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	4313      	orrs	r3, r2
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	011a      	lsls	r2, r3, #4
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	031b      	lsls	r3, r3, #12
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_TIM_Encoder_Start+0x16>
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d008      	beq.n	8003f1e <HAL_TIM_Encoder_Start+0x26>
 8003f0c:	e00f      	b.n	8003f2e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2201      	movs	r2, #1
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fc76 	bl	8004808 <TIM_CCxChannelCmd>
      break;
 8003f1c:	e016      	b.n	8003f4c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2201      	movs	r2, #1
 8003f24:	2104      	movs	r1, #4
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fc6e 	bl	8004808 <TIM_CCxChannelCmd>
      break;
 8003f2c:	e00e      	b.n	8003f4c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2201      	movs	r2, #1
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fc66 	bl	8004808 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2201      	movs	r2, #1
 8003f42:	2104      	movs	r1, #4
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fc5f 	bl	8004808 <TIM_CCxChannelCmd>
      break;
 8003f4a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d122      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d11b      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0202 	mvn.w	r2, #2
 8003f92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f9bf 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 8003fae:	e005      	b.n	8003fbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f9b1 	bl	8004318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f9c2 	bl	8004340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d122      	bne.n	8004016 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d11b      	bne.n	8004016 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f06f 0204 	mvn.w	r2, #4
 8003fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f995 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 8004002:	e005      	b.n	8004010 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f987 	bl	8004318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f998 	bl	8004340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b08      	cmp	r3, #8
 8004022:	d122      	bne.n	800406a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b08      	cmp	r3, #8
 8004030:	d11b      	bne.n	800406a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f06f 0208 	mvn.w	r2, #8
 800403a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2204      	movs	r2, #4
 8004040:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f96b 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 8004056:	e005      	b.n	8004064 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f95d 	bl	8004318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f96e 	bl	8004340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b10      	cmp	r3, #16
 8004076:	d122      	bne.n	80040be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b10      	cmp	r3, #16
 8004084:	d11b      	bne.n	80040be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f06f 0210 	mvn.w	r2, #16
 800408e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2208      	movs	r2, #8
 8004094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f941 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 80040aa:	e005      	b.n	80040b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f933 	bl	8004318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f944 	bl	8004340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d10e      	bne.n	80040ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d107      	bne.n	80040ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f06f 0201 	mvn.w	r2, #1
 80040e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f90d 	bl	8004304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b80      	cmp	r3, #128	; 0x80
 80040f6:	d10e      	bne.n	8004116 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d107      	bne.n	8004116 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800410e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fc77 	bl	8004a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d10e      	bne.n	8004142 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d107      	bne.n	8004142 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800413a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f909 	bl	8004354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b20      	cmp	r3, #32
 800414e:	d10e      	bne.n	800416e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b20      	cmp	r3, #32
 800415c:	d107      	bne.n	800416e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f06f 0220 	mvn.w	r2, #32
 8004166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fc41 	bl	80049f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800418e:	2302      	movs	r3, #2
 8004190:	e0b4      	b.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x184>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2202      	movs	r2, #2
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b0c      	cmp	r3, #12
 80041a6:	f200 809f 	bhi.w	80042e8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	080041e5 	.word	0x080041e5
 80041b4:	080042e9 	.word	0x080042e9
 80041b8:	080042e9 	.word	0x080042e9
 80041bc:	080042e9 	.word	0x080042e9
 80041c0:	08004225 	.word	0x08004225
 80041c4:	080042e9 	.word	0x080042e9
 80041c8:	080042e9 	.word	0x080042e9
 80041cc:	080042e9 	.word	0x080042e9
 80041d0:	08004267 	.word	0x08004267
 80041d4:	080042e9 	.word	0x080042e9
 80041d8:	080042e9 	.word	0x080042e9
 80041dc:	080042e9 	.word	0x080042e9
 80041e0:	080042a7 	.word	0x080042a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f95c 	bl	80044a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0208 	orr.w	r2, r2, #8
 80041fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0204 	bic.w	r2, r2, #4
 800420e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6999      	ldr	r1, [r3, #24]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	619a      	str	r2, [r3, #24]
      break;
 8004222:	e062      	b.n	80042ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f9ac 	bl	8004588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800423e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6999      	ldr	r1, [r3, #24]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	619a      	str	r2, [r3, #24]
      break;
 8004264:	e041      	b.n	80042ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fa01 	bl	8004674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0208 	orr.w	r2, r2, #8
 8004280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0204 	bic.w	r2, r2, #4
 8004290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69d9      	ldr	r1, [r3, #28]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	61da      	str	r2, [r3, #28]
      break;
 80042a4:	e021      	b.n	80042ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fa55 	bl	800475c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69d9      	ldr	r1, [r3, #28]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	021a      	lsls	r2, r3, #8
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	61da      	str	r2, [r3, #28]
      break;
 80042e6:	e000      	b.n	80042ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80042e8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a40      	ldr	r2, [pc, #256]	; (800447c <TIM_Base_SetConfig+0x114>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004386:	d00f      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a3d      	ldr	r2, [pc, #244]	; (8004480 <TIM_Base_SetConfig+0x118>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00b      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a3c      	ldr	r2, [pc, #240]	; (8004484 <TIM_Base_SetConfig+0x11c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d007      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a3b      	ldr	r2, [pc, #236]	; (8004488 <TIM_Base_SetConfig+0x120>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a3a      	ldr	r2, [pc, #232]	; (800448c <TIM_Base_SetConfig+0x124>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d108      	bne.n	80043ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a2f      	ldr	r2, [pc, #188]	; (800447c <TIM_Base_SetConfig+0x114>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d02b      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c8:	d027      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a2c      	ldr	r2, [pc, #176]	; (8004480 <TIM_Base_SetConfig+0x118>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d023      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a2b      	ldr	r2, [pc, #172]	; (8004484 <TIM_Base_SetConfig+0x11c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01f      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a2a      	ldr	r2, [pc, #168]	; (8004488 <TIM_Base_SetConfig+0x120>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01b      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a29      	ldr	r2, [pc, #164]	; (800448c <TIM_Base_SetConfig+0x124>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d017      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a28      	ldr	r2, [pc, #160]	; (8004490 <TIM_Base_SetConfig+0x128>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a27      	ldr	r2, [pc, #156]	; (8004494 <TIM_Base_SetConfig+0x12c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00f      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a26      	ldr	r2, [pc, #152]	; (8004498 <TIM_Base_SetConfig+0x130>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00b      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a25      	ldr	r2, [pc, #148]	; (800449c <TIM_Base_SetConfig+0x134>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d007      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a24      	ldr	r2, [pc, #144]	; (80044a0 <TIM_Base_SetConfig+0x138>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d003      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a23      	ldr	r2, [pc, #140]	; (80044a4 <TIM_Base_SetConfig+0x13c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d108      	bne.n	800442c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a0a      	ldr	r2, [pc, #40]	; (800447c <TIM_Base_SetConfig+0x114>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_Base_SetConfig+0xf8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a0c      	ldr	r2, [pc, #48]	; (800448c <TIM_Base_SetConfig+0x124>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d103      	bne.n	8004468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	615a      	str	r2, [r3, #20]
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40010000 	.word	0x40010000
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800
 8004488:	40000c00 	.word	0x40000c00
 800448c:	40010400 	.word	0x40010400
 8004490:	40014000 	.word	0x40014000
 8004494:	40014400 	.word	0x40014400
 8004498:	40014800 	.word	0x40014800
 800449c:	40001800 	.word	0x40001800
 80044a0:	40001c00 	.word	0x40001c00
 80044a4:	40002000 	.word	0x40002000

080044a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 0302 	bic.w	r3, r3, #2
 80044f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a20      	ldr	r2, [pc, #128]	; (8004580 <TIM_OC1_SetConfig+0xd8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_OC1_SetConfig+0x64>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <TIM_OC1_SetConfig+0xdc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d10c      	bne.n	8004526 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0308 	bic.w	r3, r3, #8
 8004512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f023 0304 	bic.w	r3, r3, #4
 8004524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a15      	ldr	r2, [pc, #84]	; (8004580 <TIM_OC1_SetConfig+0xd8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_OC1_SetConfig+0x8e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a14      	ldr	r2, [pc, #80]	; (8004584 <TIM_OC1_SetConfig+0xdc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d111      	bne.n	800455a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800453c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	621a      	str	r2, [r3, #32]
}
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	40010000 	.word	0x40010000
 8004584:	40010400 	.word	0x40010400

08004588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0210 	bic.w	r2, r3, #16
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0320 	bic.w	r3, r3, #32
 80045d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a22      	ldr	r2, [pc, #136]	; (800466c <TIM_OC2_SetConfig+0xe4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_OC2_SetConfig+0x68>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a21      	ldr	r2, [pc, #132]	; (8004670 <TIM_OC2_SetConfig+0xe8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d10d      	bne.n	800460c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800460a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a17      	ldr	r2, [pc, #92]	; (800466c <TIM_OC2_SetConfig+0xe4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d003      	beq.n	800461c <TIM_OC2_SetConfig+0x94>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a16      	ldr	r2, [pc, #88]	; (8004670 <TIM_OC2_SetConfig+0xe8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d113      	bne.n	8004644 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800462a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	621a      	str	r2, [r3, #32]
}
 800465e:	bf00      	nop
 8004660:	371c      	adds	r7, #28
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40010000 	.word	0x40010000
 8004670:	40010400 	.word	0x40010400

08004674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0303 	bic.w	r3, r3, #3
 80046aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a21      	ldr	r2, [pc, #132]	; (8004754 <TIM_OC3_SetConfig+0xe0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d003      	beq.n	80046da <TIM_OC3_SetConfig+0x66>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a20      	ldr	r2, [pc, #128]	; (8004758 <TIM_OC3_SetConfig+0xe4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d10d      	bne.n	80046f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a16      	ldr	r2, [pc, #88]	; (8004754 <TIM_OC3_SetConfig+0xe0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_OC3_SetConfig+0x92>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a15      	ldr	r2, [pc, #84]	; (8004758 <TIM_OC3_SetConfig+0xe4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d113      	bne.n	800472e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800470c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	621a      	str	r2, [r3, #32]
}
 8004748:	bf00      	nop
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40010000 	.word	0x40010000
 8004758:	40010400 	.word	0x40010400

0800475c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	021b      	lsls	r3, r3, #8
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	031b      	lsls	r3, r3, #12
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <TIM_OC4_SetConfig+0xa4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d003      	beq.n	80047c4 <TIM_OC4_SetConfig+0x68>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a11      	ldr	r2, [pc, #68]	; (8004804 <TIM_OC4_SetConfig+0xa8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d109      	bne.n	80047d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	019b      	lsls	r3, r3, #6
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40010000 	.word	0x40010000
 8004804:	40010400 	.word	0x40010400

08004808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2201      	movs	r2, #1
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1a      	ldr	r2, [r3, #32]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	43db      	mvns	r3, r3
 800482a:	401a      	ands	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1a      	ldr	r2, [r3, #32]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	fa01 f303 	lsl.w	r3, r1, r3
 8004840:	431a      	orrs	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	621a      	str	r2, [r3, #32]
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004868:	2302      	movs	r3, #2
 800486a:	e05a      	b.n	8004922 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a21      	ldr	r2, [pc, #132]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d022      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d01d      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1d      	ldr	r2, [pc, #116]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d018      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1a      	ldr	r2, [pc, #104]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00e      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a17      	ldr	r2, [pc, #92]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a15      	ldr	r2, [pc, #84]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d10c      	bne.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4313      	orrs	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40010000 	.word	0x40010000
 8004934:	40000400 	.word	0x40000400
 8004938:	40000800 	.word	0x40000800
 800493c:	40000c00 	.word	0x40000c00
 8004940:	40010400 	.word	0x40010400
 8004944:	40014000 	.word	0x40014000
 8004948:	40001800 	.word	0x40001800

0800494c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004964:	2302      	movs	r3, #2
 8004966:	e03d      	b.n	80049e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e03f      	b.n	8004aaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc fbb2 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2224      	movs	r2, #36	; 0x24
 8004a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f90b 	bl	8004c78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695a      	ldr	r2, [r3, #20]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b088      	sub	sp, #32
 8004ab6:	af02      	add	r7, sp, #8
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	f040 8083 	bne.w	8004bda <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_UART_Transmit+0x2e>
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e07b      	b.n	8004bdc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_UART_Transmit+0x40>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e074      	b.n	8004bdc <HAL_UART_Transmit+0x12a>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2221      	movs	r2, #33	; 0x21
 8004b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b08:	f7fd fcac 	bl	8002464 <HAL_GetTick>
 8004b0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	88fa      	ldrh	r2, [r7, #6]
 8004b12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004b22:	e042      	b.n	8004baa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3a:	d122      	bne.n	8004b82 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2200      	movs	r2, #0
 8004b44:	2180      	movs	r1, #128	; 0x80
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f84c 	bl	8004be4 <UART_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e042      	b.n	8004bdc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b68:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d103      	bne.n	8004b7a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	3302      	adds	r3, #2
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	e017      	b.n	8004baa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	e013      	b.n	8004baa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2180      	movs	r1, #128	; 0x80
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f829 	bl	8004be4 <UART_WaitOnFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e01f      	b.n	8004bdc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	60ba      	str	r2, [r7, #8]
 8004ba2:	781a      	ldrb	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1b7      	bne.n	8004b24 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2140      	movs	r1, #64	; 0x40
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f810 	bl	8004be4 <UART_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e006      	b.n	8004bdc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e000      	b.n	8004bdc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf4:	e02c      	b.n	8004c50 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d028      	beq.n	8004c50 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c04:	f7fd fc2e 	bl	8002464 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d21d      	bcs.n	8004c50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c22:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695a      	ldr	r2, [r3, #20]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0201 	bic.w	r2, r2, #1
 8004c32:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e00f      	b.n	8004c70 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d0c3      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004cba:	f023 030c 	bic.w	r3, r3, #12
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6812      	ldr	r2, [r2, #0]
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce6:	f040 818b 	bne.w	8005000 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4ac1      	ldr	r2, [pc, #772]	; (8004ff4 <UART_SetConfig+0x37c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d005      	beq.n	8004d00 <UART_SetConfig+0x88>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4abf      	ldr	r2, [pc, #764]	; (8004ff8 <UART_SetConfig+0x380>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	f040 80bd 	bne.w	8004e7a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d00:	f7fe ff70 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 8004d04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	461d      	mov	r5, r3
 8004d0a:	f04f 0600 	mov.w	r6, #0
 8004d0e:	46a8      	mov	r8, r5
 8004d10:	46b1      	mov	r9, r6
 8004d12:	eb18 0308 	adds.w	r3, r8, r8
 8004d16:	eb49 0409 	adc.w	r4, r9, r9
 8004d1a:	4698      	mov	r8, r3
 8004d1c:	46a1      	mov	r9, r4
 8004d1e:	eb18 0805 	adds.w	r8, r8, r5
 8004d22:	eb49 0906 	adc.w	r9, r9, r6
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d3a:	4688      	mov	r8, r1
 8004d3c:	4691      	mov	r9, r2
 8004d3e:	eb18 0005 	adds.w	r0, r8, r5
 8004d42:	eb49 0106 	adc.w	r1, r9, r6
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	461d      	mov	r5, r3
 8004d4c:	f04f 0600 	mov.w	r6, #0
 8004d50:	196b      	adds	r3, r5, r5
 8004d52:	eb46 0406 	adc.w	r4, r6, r6
 8004d56:	461a      	mov	r2, r3
 8004d58:	4623      	mov	r3, r4
 8004d5a:	f7fb fa35 	bl	80001c8 <__aeabi_uldivmod>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	461a      	mov	r2, r3
 8004d64:	4ba5      	ldr	r3, [pc, #660]	; (8004ffc <UART_SetConfig+0x384>)
 8004d66:	fba3 2302 	umull	r2, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	461d      	mov	r5, r3
 8004d74:	f04f 0600 	mov.w	r6, #0
 8004d78:	46a9      	mov	r9, r5
 8004d7a:	46b2      	mov	sl, r6
 8004d7c:	eb19 0309 	adds.w	r3, r9, r9
 8004d80:	eb4a 040a 	adc.w	r4, sl, sl
 8004d84:	4699      	mov	r9, r3
 8004d86:	46a2      	mov	sl, r4
 8004d88:	eb19 0905 	adds.w	r9, r9, r5
 8004d8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d90:	f04f 0100 	mov.w	r1, #0
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004da0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004da4:	4689      	mov	r9, r1
 8004da6:	4692      	mov	sl, r2
 8004da8:	eb19 0005 	adds.w	r0, r9, r5
 8004dac:	eb4a 0106 	adc.w	r1, sl, r6
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	461d      	mov	r5, r3
 8004db6:	f04f 0600 	mov.w	r6, #0
 8004dba:	196b      	adds	r3, r5, r5
 8004dbc:	eb46 0406 	adc.w	r4, r6, r6
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	f7fb fa00 	bl	80001c8 <__aeabi_uldivmod>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4b8b      	ldr	r3, [pc, #556]	; (8004ffc <UART_SetConfig+0x384>)
 8004dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	2164      	movs	r1, #100	; 0x64
 8004dd8:	fb01 f303 	mul.w	r3, r1, r3
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	3332      	adds	r3, #50	; 0x32
 8004de2:	4a86      	ldr	r2, [pc, #536]	; (8004ffc <UART_SetConfig+0x384>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004df0:	4498      	add	r8, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	461d      	mov	r5, r3
 8004df6:	f04f 0600 	mov.w	r6, #0
 8004dfa:	46a9      	mov	r9, r5
 8004dfc:	46b2      	mov	sl, r6
 8004dfe:	eb19 0309 	adds.w	r3, r9, r9
 8004e02:	eb4a 040a 	adc.w	r4, sl, sl
 8004e06:	4699      	mov	r9, r3
 8004e08:	46a2      	mov	sl, r4
 8004e0a:	eb19 0905 	adds.w	r9, r9, r5
 8004e0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e12:	f04f 0100 	mov.w	r1, #0
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e26:	4689      	mov	r9, r1
 8004e28:	4692      	mov	sl, r2
 8004e2a:	eb19 0005 	adds.w	r0, r9, r5
 8004e2e:	eb4a 0106 	adc.w	r1, sl, r6
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	461d      	mov	r5, r3
 8004e38:	f04f 0600 	mov.w	r6, #0
 8004e3c:	196b      	adds	r3, r5, r5
 8004e3e:	eb46 0406 	adc.w	r4, r6, r6
 8004e42:	461a      	mov	r2, r3
 8004e44:	4623      	mov	r3, r4
 8004e46:	f7fb f9bf 	bl	80001c8 <__aeabi_uldivmod>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4b6a      	ldr	r3, [pc, #424]	; (8004ffc <UART_SetConfig+0x384>)
 8004e52:	fba3 1302 	umull	r1, r3, r3, r2
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	2164      	movs	r1, #100	; 0x64
 8004e5a:	fb01 f303 	mul.w	r3, r1, r3
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	3332      	adds	r3, #50	; 0x32
 8004e64:	4a65      	ldr	r2, [pc, #404]	; (8004ffc <UART_SetConfig+0x384>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	f003 0207 	and.w	r2, r3, #7
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4442      	add	r2, r8
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	e26f      	b.n	800535a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e7a:	f7fe fe9f 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 8004e7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	461d      	mov	r5, r3
 8004e84:	f04f 0600 	mov.w	r6, #0
 8004e88:	46a8      	mov	r8, r5
 8004e8a:	46b1      	mov	r9, r6
 8004e8c:	eb18 0308 	adds.w	r3, r8, r8
 8004e90:	eb49 0409 	adc.w	r4, r9, r9
 8004e94:	4698      	mov	r8, r3
 8004e96:	46a1      	mov	r9, r4
 8004e98:	eb18 0805 	adds.w	r8, r8, r5
 8004e9c:	eb49 0906 	adc.w	r9, r9, r6
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004eac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004eb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004eb4:	4688      	mov	r8, r1
 8004eb6:	4691      	mov	r9, r2
 8004eb8:	eb18 0005 	adds.w	r0, r8, r5
 8004ebc:	eb49 0106 	adc.w	r1, r9, r6
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	461d      	mov	r5, r3
 8004ec6:	f04f 0600 	mov.w	r6, #0
 8004eca:	196b      	adds	r3, r5, r5
 8004ecc:	eb46 0406 	adc.w	r4, r6, r6
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4623      	mov	r3, r4
 8004ed4:	f7fb f978 	bl	80001c8 <__aeabi_uldivmod>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	461a      	mov	r2, r3
 8004ede:	4b47      	ldr	r3, [pc, #284]	; (8004ffc <UART_SetConfig+0x384>)
 8004ee0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	461d      	mov	r5, r3
 8004eee:	f04f 0600 	mov.w	r6, #0
 8004ef2:	46a9      	mov	r9, r5
 8004ef4:	46b2      	mov	sl, r6
 8004ef6:	eb19 0309 	adds.w	r3, r9, r9
 8004efa:	eb4a 040a 	adc.w	r4, sl, sl
 8004efe:	4699      	mov	r9, r3
 8004f00:	46a2      	mov	sl, r4
 8004f02:	eb19 0905 	adds.w	r9, r9, r5
 8004f06:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f0a:	f04f 0100 	mov.w	r1, #0
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f1e:	4689      	mov	r9, r1
 8004f20:	4692      	mov	sl, r2
 8004f22:	eb19 0005 	adds.w	r0, r9, r5
 8004f26:	eb4a 0106 	adc.w	r1, sl, r6
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	461d      	mov	r5, r3
 8004f30:	f04f 0600 	mov.w	r6, #0
 8004f34:	196b      	adds	r3, r5, r5
 8004f36:	eb46 0406 	adc.w	r4, r6, r6
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	4623      	mov	r3, r4
 8004f3e:	f7fb f943 	bl	80001c8 <__aeabi_uldivmod>
 8004f42:	4603      	mov	r3, r0
 8004f44:	460c      	mov	r4, r1
 8004f46:	461a      	mov	r2, r3
 8004f48:	4b2c      	ldr	r3, [pc, #176]	; (8004ffc <UART_SetConfig+0x384>)
 8004f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	2164      	movs	r1, #100	; 0x64
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	3332      	adds	r3, #50	; 0x32
 8004f5c:	4a27      	ldr	r2, [pc, #156]	; (8004ffc <UART_SetConfig+0x384>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f6a:	4498      	add	r8, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	461d      	mov	r5, r3
 8004f70:	f04f 0600 	mov.w	r6, #0
 8004f74:	46a9      	mov	r9, r5
 8004f76:	46b2      	mov	sl, r6
 8004f78:	eb19 0309 	adds.w	r3, r9, r9
 8004f7c:	eb4a 040a 	adc.w	r4, sl, sl
 8004f80:	4699      	mov	r9, r3
 8004f82:	46a2      	mov	sl, r4
 8004f84:	eb19 0905 	adds.w	r9, r9, r5
 8004f88:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f8c:	f04f 0100 	mov.w	r1, #0
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fa0:	4689      	mov	r9, r1
 8004fa2:	4692      	mov	sl, r2
 8004fa4:	eb19 0005 	adds.w	r0, r9, r5
 8004fa8:	eb4a 0106 	adc.w	r1, sl, r6
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	461d      	mov	r5, r3
 8004fb2:	f04f 0600 	mov.w	r6, #0
 8004fb6:	196b      	adds	r3, r5, r5
 8004fb8:	eb46 0406 	adc.w	r4, r6, r6
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	f7fb f902 	bl	80001c8 <__aeabi_uldivmod>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <UART_SetConfig+0x384>)
 8004fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	2164      	movs	r1, #100	; 0x64
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	3332      	adds	r3, #50	; 0x32
 8004fde:	4a07      	ldr	r2, [pc, #28]	; (8004ffc <UART_SetConfig+0x384>)
 8004fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	f003 0207 	and.w	r2, r3, #7
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4442      	add	r2, r8
 8004ff0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ff2:	e1b2      	b.n	800535a <UART_SetConfig+0x6e2>
 8004ff4:	40011000 	.word	0x40011000
 8004ff8:	40011400 	.word	0x40011400
 8004ffc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4ad7      	ldr	r2, [pc, #860]	; (8005364 <UART_SetConfig+0x6ec>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d005      	beq.n	8005016 <UART_SetConfig+0x39e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4ad6      	ldr	r2, [pc, #856]	; (8005368 <UART_SetConfig+0x6f0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	f040 80d1 	bne.w	80051b8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005016:	f7fe fde5 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 800501a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	469a      	mov	sl, r3
 8005020:	f04f 0b00 	mov.w	fp, #0
 8005024:	46d0      	mov	r8, sl
 8005026:	46d9      	mov	r9, fp
 8005028:	eb18 0308 	adds.w	r3, r8, r8
 800502c:	eb49 0409 	adc.w	r4, r9, r9
 8005030:	4698      	mov	r8, r3
 8005032:	46a1      	mov	r9, r4
 8005034:	eb18 080a 	adds.w	r8, r8, sl
 8005038:	eb49 090b 	adc.w	r9, r9, fp
 800503c:	f04f 0100 	mov.w	r1, #0
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005048:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800504c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005050:	4688      	mov	r8, r1
 8005052:	4691      	mov	r9, r2
 8005054:	eb1a 0508 	adds.w	r5, sl, r8
 8005058:	eb4b 0609 	adc.w	r6, fp, r9
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4619      	mov	r1, r3
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	f04f 0400 	mov.w	r4, #0
 800506e:	0094      	lsls	r4, r2, #2
 8005070:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005074:	008b      	lsls	r3, r1, #2
 8005076:	461a      	mov	r2, r3
 8005078:	4623      	mov	r3, r4
 800507a:	4628      	mov	r0, r5
 800507c:	4631      	mov	r1, r6
 800507e:	f7fb f8a3 	bl	80001c8 <__aeabi_uldivmod>
 8005082:	4603      	mov	r3, r0
 8005084:	460c      	mov	r4, r1
 8005086:	461a      	mov	r2, r3
 8005088:	4bb8      	ldr	r3, [pc, #736]	; (800536c <UART_SetConfig+0x6f4>)
 800508a:	fba3 2302 	umull	r2, r3, r3, r2
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	469b      	mov	fp, r3
 8005098:	f04f 0c00 	mov.w	ip, #0
 800509c:	46d9      	mov	r9, fp
 800509e:	46e2      	mov	sl, ip
 80050a0:	eb19 0309 	adds.w	r3, r9, r9
 80050a4:	eb4a 040a 	adc.w	r4, sl, sl
 80050a8:	4699      	mov	r9, r3
 80050aa:	46a2      	mov	sl, r4
 80050ac:	eb19 090b 	adds.w	r9, r9, fp
 80050b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050b4:	f04f 0100 	mov.w	r1, #0
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050c8:	4689      	mov	r9, r1
 80050ca:	4692      	mov	sl, r2
 80050cc:	eb1b 0509 	adds.w	r5, fp, r9
 80050d0:	eb4c 060a 	adc.w	r6, ip, sl
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4619      	mov	r1, r3
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	f04f 0400 	mov.w	r4, #0
 80050e6:	0094      	lsls	r4, r2, #2
 80050e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050ec:	008b      	lsls	r3, r1, #2
 80050ee:	461a      	mov	r2, r3
 80050f0:	4623      	mov	r3, r4
 80050f2:	4628      	mov	r0, r5
 80050f4:	4631      	mov	r1, r6
 80050f6:	f7fb f867 	bl	80001c8 <__aeabi_uldivmod>
 80050fa:	4603      	mov	r3, r0
 80050fc:	460c      	mov	r4, r1
 80050fe:	461a      	mov	r2, r3
 8005100:	4b9a      	ldr	r3, [pc, #616]	; (800536c <UART_SetConfig+0x6f4>)
 8005102:	fba3 1302 	umull	r1, r3, r3, r2
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	2164      	movs	r1, #100	; 0x64
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	3332      	adds	r3, #50	; 0x32
 8005114:	4a95      	ldr	r2, [pc, #596]	; (800536c <UART_SetConfig+0x6f4>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005120:	4498      	add	r8, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	469b      	mov	fp, r3
 8005126:	f04f 0c00 	mov.w	ip, #0
 800512a:	46d9      	mov	r9, fp
 800512c:	46e2      	mov	sl, ip
 800512e:	eb19 0309 	adds.w	r3, r9, r9
 8005132:	eb4a 040a 	adc.w	r4, sl, sl
 8005136:	4699      	mov	r9, r3
 8005138:	46a2      	mov	sl, r4
 800513a:	eb19 090b 	adds.w	r9, r9, fp
 800513e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005142:	f04f 0100 	mov.w	r1, #0
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800514e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005152:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005156:	4689      	mov	r9, r1
 8005158:	4692      	mov	sl, r2
 800515a:	eb1b 0509 	adds.w	r5, fp, r9
 800515e:	eb4c 060a 	adc.w	r6, ip, sl
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4619      	mov	r1, r3
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	f04f 0400 	mov.w	r4, #0
 8005174:	0094      	lsls	r4, r2, #2
 8005176:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800517a:	008b      	lsls	r3, r1, #2
 800517c:	461a      	mov	r2, r3
 800517e:	4623      	mov	r3, r4
 8005180:	4628      	mov	r0, r5
 8005182:	4631      	mov	r1, r6
 8005184:	f7fb f820 	bl	80001c8 <__aeabi_uldivmod>
 8005188:	4603      	mov	r3, r0
 800518a:	460c      	mov	r4, r1
 800518c:	461a      	mov	r2, r3
 800518e:	4b77      	ldr	r3, [pc, #476]	; (800536c <UART_SetConfig+0x6f4>)
 8005190:	fba3 1302 	umull	r1, r3, r3, r2
 8005194:	095b      	lsrs	r3, r3, #5
 8005196:	2164      	movs	r1, #100	; 0x64
 8005198:	fb01 f303 	mul.w	r3, r1, r3
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	3332      	adds	r3, #50	; 0x32
 80051a2:	4a72      	ldr	r2, [pc, #456]	; (800536c <UART_SetConfig+0x6f4>)
 80051a4:	fba2 2303 	umull	r2, r3, r2, r3
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	f003 020f 	and.w	r2, r3, #15
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4442      	add	r2, r8
 80051b4:	609a      	str	r2, [r3, #8]
 80051b6:	e0d0      	b.n	800535a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80051b8:	f7fe fd00 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 80051bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	469a      	mov	sl, r3
 80051c2:	f04f 0b00 	mov.w	fp, #0
 80051c6:	46d0      	mov	r8, sl
 80051c8:	46d9      	mov	r9, fp
 80051ca:	eb18 0308 	adds.w	r3, r8, r8
 80051ce:	eb49 0409 	adc.w	r4, r9, r9
 80051d2:	4698      	mov	r8, r3
 80051d4:	46a1      	mov	r9, r4
 80051d6:	eb18 080a 	adds.w	r8, r8, sl
 80051da:	eb49 090b 	adc.w	r9, r9, fp
 80051de:	f04f 0100 	mov.w	r1, #0
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051f2:	4688      	mov	r8, r1
 80051f4:	4691      	mov	r9, r2
 80051f6:	eb1a 0508 	adds.w	r5, sl, r8
 80051fa:	eb4b 0609 	adc.w	r6, fp, r9
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4619      	mov	r1, r3
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	0094      	lsls	r4, r2, #2
 8005212:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005216:	008b      	lsls	r3, r1, #2
 8005218:	461a      	mov	r2, r3
 800521a:	4623      	mov	r3, r4
 800521c:	4628      	mov	r0, r5
 800521e:	4631      	mov	r1, r6
 8005220:	f7fa ffd2 	bl	80001c8 <__aeabi_uldivmod>
 8005224:	4603      	mov	r3, r0
 8005226:	460c      	mov	r4, r1
 8005228:	461a      	mov	r2, r3
 800522a:	4b50      	ldr	r3, [pc, #320]	; (800536c <UART_SetConfig+0x6f4>)
 800522c:	fba3 2302 	umull	r2, r3, r3, r2
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	469b      	mov	fp, r3
 800523a:	f04f 0c00 	mov.w	ip, #0
 800523e:	46d9      	mov	r9, fp
 8005240:	46e2      	mov	sl, ip
 8005242:	eb19 0309 	adds.w	r3, r9, r9
 8005246:	eb4a 040a 	adc.w	r4, sl, sl
 800524a:	4699      	mov	r9, r3
 800524c:	46a2      	mov	sl, r4
 800524e:	eb19 090b 	adds.w	r9, r9, fp
 8005252:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005256:	f04f 0100 	mov.w	r1, #0
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005262:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005266:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800526a:	4689      	mov	r9, r1
 800526c:	4692      	mov	sl, r2
 800526e:	eb1b 0509 	adds.w	r5, fp, r9
 8005272:	eb4c 060a 	adc.w	r6, ip, sl
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4619      	mov	r1, r3
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	f04f 0400 	mov.w	r4, #0
 8005288:	0094      	lsls	r4, r2, #2
 800528a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800528e:	008b      	lsls	r3, r1, #2
 8005290:	461a      	mov	r2, r3
 8005292:	4623      	mov	r3, r4
 8005294:	4628      	mov	r0, r5
 8005296:	4631      	mov	r1, r6
 8005298:	f7fa ff96 	bl	80001c8 <__aeabi_uldivmod>
 800529c:	4603      	mov	r3, r0
 800529e:	460c      	mov	r4, r1
 80052a0:	461a      	mov	r2, r3
 80052a2:	4b32      	ldr	r3, [pc, #200]	; (800536c <UART_SetConfig+0x6f4>)
 80052a4:	fba3 1302 	umull	r1, r3, r3, r2
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	2164      	movs	r1, #100	; 0x64
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	3332      	adds	r3, #50	; 0x32
 80052b6:	4a2d      	ldr	r2, [pc, #180]	; (800536c <UART_SetConfig+0x6f4>)
 80052b8:	fba2 2303 	umull	r2, r3, r2, r3
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c2:	4498      	add	r8, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	469b      	mov	fp, r3
 80052c8:	f04f 0c00 	mov.w	ip, #0
 80052cc:	46d9      	mov	r9, fp
 80052ce:	46e2      	mov	sl, ip
 80052d0:	eb19 0309 	adds.w	r3, r9, r9
 80052d4:	eb4a 040a 	adc.w	r4, sl, sl
 80052d8:	4699      	mov	r9, r3
 80052da:	46a2      	mov	sl, r4
 80052dc:	eb19 090b 	adds.w	r9, r9, fp
 80052e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052f8:	4689      	mov	r9, r1
 80052fa:	4692      	mov	sl, r2
 80052fc:	eb1b 0509 	adds.w	r5, fp, r9
 8005300:	eb4c 060a 	adc.w	r6, ip, sl
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4619      	mov	r1, r3
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	f04f 0400 	mov.w	r4, #0
 8005316:	0094      	lsls	r4, r2, #2
 8005318:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800531c:	008b      	lsls	r3, r1, #2
 800531e:	461a      	mov	r2, r3
 8005320:	4623      	mov	r3, r4
 8005322:	4628      	mov	r0, r5
 8005324:	4631      	mov	r1, r6
 8005326:	f7fa ff4f 	bl	80001c8 <__aeabi_uldivmod>
 800532a:	4603      	mov	r3, r0
 800532c:	460c      	mov	r4, r1
 800532e:	461a      	mov	r2, r3
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <UART_SetConfig+0x6f4>)
 8005332:	fba3 1302 	umull	r1, r3, r3, r2
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	2164      	movs	r1, #100	; 0x64
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	3332      	adds	r3, #50	; 0x32
 8005344:	4a09      	ldr	r2, [pc, #36]	; (800536c <UART_SetConfig+0x6f4>)
 8005346:	fba2 2303 	umull	r2, r3, r2, r3
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	f003 020f 	and.w	r2, r3, #15
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4442      	add	r2, r8
 8005356:	609a      	str	r2, [r3, #8]
}
 8005358:	e7ff      	b.n	800535a <UART_SetConfig+0x6e2>
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005364:	40011000 	.word	0x40011000
 8005368:	40011400 	.word	0x40011400
 800536c:	51eb851f 	.word	0x51eb851f

08005370 <__errno>:
 8005370:	4b01      	ldr	r3, [pc, #4]	; (8005378 <__errno+0x8>)
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	2000001c 	.word	0x2000001c

0800537c <__libc_init_array>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4e0d      	ldr	r6, [pc, #52]	; (80053b4 <__libc_init_array+0x38>)
 8005380:	4c0d      	ldr	r4, [pc, #52]	; (80053b8 <__libc_init_array+0x3c>)
 8005382:	1ba4      	subs	r4, r4, r6
 8005384:	10a4      	asrs	r4, r4, #2
 8005386:	2500      	movs	r5, #0
 8005388:	42a5      	cmp	r5, r4
 800538a:	d109      	bne.n	80053a0 <__libc_init_array+0x24>
 800538c:	4e0b      	ldr	r6, [pc, #44]	; (80053bc <__libc_init_array+0x40>)
 800538e:	4c0c      	ldr	r4, [pc, #48]	; (80053c0 <__libc_init_array+0x44>)
 8005390:	f000 fc88 	bl	8005ca4 <_init>
 8005394:	1ba4      	subs	r4, r4, r6
 8005396:	10a4      	asrs	r4, r4, #2
 8005398:	2500      	movs	r5, #0
 800539a:	42a5      	cmp	r5, r4
 800539c:	d105      	bne.n	80053aa <__libc_init_array+0x2e>
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053a4:	4798      	blx	r3
 80053a6:	3501      	adds	r5, #1
 80053a8:	e7ee      	b.n	8005388 <__libc_init_array+0xc>
 80053aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053ae:	4798      	blx	r3
 80053b0:	3501      	adds	r5, #1
 80053b2:	e7f2      	b.n	800539a <__libc_init_array+0x1e>
 80053b4:	08007b98 	.word	0x08007b98
 80053b8:	08007b98 	.word	0x08007b98
 80053bc:	08007b98 	.word	0x08007b98
 80053c0:	08007b9c 	.word	0x08007b9c

080053c4 <memset>:
 80053c4:	4402      	add	r2, r0
 80053c6:	4603      	mov	r3, r0
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d100      	bne.n	80053ce <memset+0xa>
 80053cc:	4770      	bx	lr
 80053ce:	f803 1b01 	strb.w	r1, [r3], #1
 80053d2:	e7f9      	b.n	80053c8 <memset+0x4>

080053d4 <_puts_r>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	460e      	mov	r6, r1
 80053d8:	4605      	mov	r5, r0
 80053da:	b118      	cbz	r0, 80053e4 <_puts_r+0x10>
 80053dc:	6983      	ldr	r3, [r0, #24]
 80053de:	b90b      	cbnz	r3, 80053e4 <_puts_r+0x10>
 80053e0:	f000 fa0c 	bl	80057fc <__sinit>
 80053e4:	69ab      	ldr	r3, [r5, #24]
 80053e6:	68ac      	ldr	r4, [r5, #8]
 80053e8:	b913      	cbnz	r3, 80053f0 <_puts_r+0x1c>
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 fa06 	bl	80057fc <__sinit>
 80053f0:	4b23      	ldr	r3, [pc, #140]	; (8005480 <_puts_r+0xac>)
 80053f2:	429c      	cmp	r4, r3
 80053f4:	d117      	bne.n	8005426 <_puts_r+0x52>
 80053f6:	686c      	ldr	r4, [r5, #4]
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	071b      	lsls	r3, r3, #28
 80053fc:	d51d      	bpl.n	800543a <_puts_r+0x66>
 80053fe:	6923      	ldr	r3, [r4, #16]
 8005400:	b1db      	cbz	r3, 800543a <_puts_r+0x66>
 8005402:	3e01      	subs	r6, #1
 8005404:	68a3      	ldr	r3, [r4, #8]
 8005406:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800540a:	3b01      	subs	r3, #1
 800540c:	60a3      	str	r3, [r4, #8]
 800540e:	b9e9      	cbnz	r1, 800544c <_puts_r+0x78>
 8005410:	2b00      	cmp	r3, #0
 8005412:	da2e      	bge.n	8005472 <_puts_r+0x9e>
 8005414:	4622      	mov	r2, r4
 8005416:	210a      	movs	r1, #10
 8005418:	4628      	mov	r0, r5
 800541a:	f000 f83f 	bl	800549c <__swbuf_r>
 800541e:	3001      	adds	r0, #1
 8005420:	d011      	beq.n	8005446 <_puts_r+0x72>
 8005422:	200a      	movs	r0, #10
 8005424:	e011      	b.n	800544a <_puts_r+0x76>
 8005426:	4b17      	ldr	r3, [pc, #92]	; (8005484 <_puts_r+0xb0>)
 8005428:	429c      	cmp	r4, r3
 800542a:	d101      	bne.n	8005430 <_puts_r+0x5c>
 800542c:	68ac      	ldr	r4, [r5, #8]
 800542e:	e7e3      	b.n	80053f8 <_puts_r+0x24>
 8005430:	4b15      	ldr	r3, [pc, #84]	; (8005488 <_puts_r+0xb4>)
 8005432:	429c      	cmp	r4, r3
 8005434:	bf08      	it	eq
 8005436:	68ec      	ldreq	r4, [r5, #12]
 8005438:	e7de      	b.n	80053f8 <_puts_r+0x24>
 800543a:	4621      	mov	r1, r4
 800543c:	4628      	mov	r0, r5
 800543e:	f000 f87f 	bl	8005540 <__swsetup_r>
 8005442:	2800      	cmp	r0, #0
 8005444:	d0dd      	beq.n	8005402 <_puts_r+0x2e>
 8005446:	f04f 30ff 	mov.w	r0, #4294967295
 800544a:	bd70      	pop	{r4, r5, r6, pc}
 800544c:	2b00      	cmp	r3, #0
 800544e:	da04      	bge.n	800545a <_puts_r+0x86>
 8005450:	69a2      	ldr	r2, [r4, #24]
 8005452:	429a      	cmp	r2, r3
 8005454:	dc06      	bgt.n	8005464 <_puts_r+0x90>
 8005456:	290a      	cmp	r1, #10
 8005458:	d004      	beq.n	8005464 <_puts_r+0x90>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	6022      	str	r2, [r4, #0]
 8005460:	7019      	strb	r1, [r3, #0]
 8005462:	e7cf      	b.n	8005404 <_puts_r+0x30>
 8005464:	4622      	mov	r2, r4
 8005466:	4628      	mov	r0, r5
 8005468:	f000 f818 	bl	800549c <__swbuf_r>
 800546c:	3001      	adds	r0, #1
 800546e:	d1c9      	bne.n	8005404 <_puts_r+0x30>
 8005470:	e7e9      	b.n	8005446 <_puts_r+0x72>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	200a      	movs	r0, #10
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	6022      	str	r2, [r4, #0]
 800547a:	7018      	strb	r0, [r3, #0]
 800547c:	e7e5      	b.n	800544a <_puts_r+0x76>
 800547e:	bf00      	nop
 8005480:	08007b50 	.word	0x08007b50
 8005484:	08007b70 	.word	0x08007b70
 8005488:	08007b30 	.word	0x08007b30

0800548c <puts>:
 800548c:	4b02      	ldr	r3, [pc, #8]	; (8005498 <puts+0xc>)
 800548e:	4601      	mov	r1, r0
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	f7ff bf9f 	b.w	80053d4 <_puts_r>
 8005496:	bf00      	nop
 8005498:	2000001c 	.word	0x2000001c

0800549c <__swbuf_r>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	460e      	mov	r6, r1
 80054a0:	4614      	mov	r4, r2
 80054a2:	4605      	mov	r5, r0
 80054a4:	b118      	cbz	r0, 80054ae <__swbuf_r+0x12>
 80054a6:	6983      	ldr	r3, [r0, #24]
 80054a8:	b90b      	cbnz	r3, 80054ae <__swbuf_r+0x12>
 80054aa:	f000 f9a7 	bl	80057fc <__sinit>
 80054ae:	4b21      	ldr	r3, [pc, #132]	; (8005534 <__swbuf_r+0x98>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	d12a      	bne.n	800550a <__swbuf_r+0x6e>
 80054b4:	686c      	ldr	r4, [r5, #4]
 80054b6:	69a3      	ldr	r3, [r4, #24]
 80054b8:	60a3      	str	r3, [r4, #8]
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	071a      	lsls	r2, r3, #28
 80054be:	d52e      	bpl.n	800551e <__swbuf_r+0x82>
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	b363      	cbz	r3, 800551e <__swbuf_r+0x82>
 80054c4:	6923      	ldr	r3, [r4, #16]
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	1ac0      	subs	r0, r0, r3
 80054ca:	6963      	ldr	r3, [r4, #20]
 80054cc:	b2f6      	uxtb	r6, r6
 80054ce:	4283      	cmp	r3, r0
 80054d0:	4637      	mov	r7, r6
 80054d2:	dc04      	bgt.n	80054de <__swbuf_r+0x42>
 80054d4:	4621      	mov	r1, r4
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 f926 	bl	8005728 <_fflush_r>
 80054dc:	bb28      	cbnz	r0, 800552a <__swbuf_r+0x8e>
 80054de:	68a3      	ldr	r3, [r4, #8]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	60a3      	str	r3, [r4, #8]
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	6022      	str	r2, [r4, #0]
 80054ea:	701e      	strb	r6, [r3, #0]
 80054ec:	6963      	ldr	r3, [r4, #20]
 80054ee:	3001      	adds	r0, #1
 80054f0:	4283      	cmp	r3, r0
 80054f2:	d004      	beq.n	80054fe <__swbuf_r+0x62>
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	07db      	lsls	r3, r3, #31
 80054f8:	d519      	bpl.n	800552e <__swbuf_r+0x92>
 80054fa:	2e0a      	cmp	r6, #10
 80054fc:	d117      	bne.n	800552e <__swbuf_r+0x92>
 80054fe:	4621      	mov	r1, r4
 8005500:	4628      	mov	r0, r5
 8005502:	f000 f911 	bl	8005728 <_fflush_r>
 8005506:	b190      	cbz	r0, 800552e <__swbuf_r+0x92>
 8005508:	e00f      	b.n	800552a <__swbuf_r+0x8e>
 800550a:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <__swbuf_r+0x9c>)
 800550c:	429c      	cmp	r4, r3
 800550e:	d101      	bne.n	8005514 <__swbuf_r+0x78>
 8005510:	68ac      	ldr	r4, [r5, #8]
 8005512:	e7d0      	b.n	80054b6 <__swbuf_r+0x1a>
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <__swbuf_r+0xa0>)
 8005516:	429c      	cmp	r4, r3
 8005518:	bf08      	it	eq
 800551a:	68ec      	ldreq	r4, [r5, #12]
 800551c:	e7cb      	b.n	80054b6 <__swbuf_r+0x1a>
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	f000 f80d 	bl	8005540 <__swsetup_r>
 8005526:	2800      	cmp	r0, #0
 8005528:	d0cc      	beq.n	80054c4 <__swbuf_r+0x28>
 800552a:	f04f 37ff 	mov.w	r7, #4294967295
 800552e:	4638      	mov	r0, r7
 8005530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005532:	bf00      	nop
 8005534:	08007b50 	.word	0x08007b50
 8005538:	08007b70 	.word	0x08007b70
 800553c:	08007b30 	.word	0x08007b30

08005540 <__swsetup_r>:
 8005540:	4b32      	ldr	r3, [pc, #200]	; (800560c <__swsetup_r+0xcc>)
 8005542:	b570      	push	{r4, r5, r6, lr}
 8005544:	681d      	ldr	r5, [r3, #0]
 8005546:	4606      	mov	r6, r0
 8005548:	460c      	mov	r4, r1
 800554a:	b125      	cbz	r5, 8005556 <__swsetup_r+0x16>
 800554c:	69ab      	ldr	r3, [r5, #24]
 800554e:	b913      	cbnz	r3, 8005556 <__swsetup_r+0x16>
 8005550:	4628      	mov	r0, r5
 8005552:	f000 f953 	bl	80057fc <__sinit>
 8005556:	4b2e      	ldr	r3, [pc, #184]	; (8005610 <__swsetup_r+0xd0>)
 8005558:	429c      	cmp	r4, r3
 800555a:	d10f      	bne.n	800557c <__swsetup_r+0x3c>
 800555c:	686c      	ldr	r4, [r5, #4]
 800555e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005562:	b29a      	uxth	r2, r3
 8005564:	0715      	lsls	r5, r2, #28
 8005566:	d42c      	bmi.n	80055c2 <__swsetup_r+0x82>
 8005568:	06d0      	lsls	r0, r2, #27
 800556a:	d411      	bmi.n	8005590 <__swsetup_r+0x50>
 800556c:	2209      	movs	r2, #9
 800556e:	6032      	str	r2, [r6, #0]
 8005570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005574:	81a3      	strh	r3, [r4, #12]
 8005576:	f04f 30ff 	mov.w	r0, #4294967295
 800557a:	e03e      	b.n	80055fa <__swsetup_r+0xba>
 800557c:	4b25      	ldr	r3, [pc, #148]	; (8005614 <__swsetup_r+0xd4>)
 800557e:	429c      	cmp	r4, r3
 8005580:	d101      	bne.n	8005586 <__swsetup_r+0x46>
 8005582:	68ac      	ldr	r4, [r5, #8]
 8005584:	e7eb      	b.n	800555e <__swsetup_r+0x1e>
 8005586:	4b24      	ldr	r3, [pc, #144]	; (8005618 <__swsetup_r+0xd8>)
 8005588:	429c      	cmp	r4, r3
 800558a:	bf08      	it	eq
 800558c:	68ec      	ldreq	r4, [r5, #12]
 800558e:	e7e6      	b.n	800555e <__swsetup_r+0x1e>
 8005590:	0751      	lsls	r1, r2, #29
 8005592:	d512      	bpl.n	80055ba <__swsetup_r+0x7a>
 8005594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005596:	b141      	cbz	r1, 80055aa <__swsetup_r+0x6a>
 8005598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800559c:	4299      	cmp	r1, r3
 800559e:	d002      	beq.n	80055a6 <__swsetup_r+0x66>
 80055a0:	4630      	mov	r0, r6
 80055a2:	f000 fa19 	bl	80059d8 <_free_r>
 80055a6:	2300      	movs	r3, #0
 80055a8:	6363      	str	r3, [r4, #52]	; 0x34
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055b0:	81a3      	strh	r3, [r4, #12]
 80055b2:	2300      	movs	r3, #0
 80055b4:	6063      	str	r3, [r4, #4]
 80055b6:	6923      	ldr	r3, [r4, #16]
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	f043 0308 	orr.w	r3, r3, #8
 80055c0:	81a3      	strh	r3, [r4, #12]
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	b94b      	cbnz	r3, 80055da <__swsetup_r+0x9a>
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d0:	d003      	beq.n	80055da <__swsetup_r+0x9a>
 80055d2:	4621      	mov	r1, r4
 80055d4:	4630      	mov	r0, r6
 80055d6:	f000 f9bf 	bl	8005958 <__smakebuf_r>
 80055da:	89a2      	ldrh	r2, [r4, #12]
 80055dc:	f012 0301 	ands.w	r3, r2, #1
 80055e0:	d00c      	beq.n	80055fc <__swsetup_r+0xbc>
 80055e2:	2300      	movs	r3, #0
 80055e4:	60a3      	str	r3, [r4, #8]
 80055e6:	6963      	ldr	r3, [r4, #20]
 80055e8:	425b      	negs	r3, r3
 80055ea:	61a3      	str	r3, [r4, #24]
 80055ec:	6923      	ldr	r3, [r4, #16]
 80055ee:	b953      	cbnz	r3, 8005606 <__swsetup_r+0xc6>
 80055f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80055f8:	d1ba      	bne.n	8005570 <__swsetup_r+0x30>
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	0792      	lsls	r2, r2, #30
 80055fe:	bf58      	it	pl
 8005600:	6963      	ldrpl	r3, [r4, #20]
 8005602:	60a3      	str	r3, [r4, #8]
 8005604:	e7f2      	b.n	80055ec <__swsetup_r+0xac>
 8005606:	2000      	movs	r0, #0
 8005608:	e7f7      	b.n	80055fa <__swsetup_r+0xba>
 800560a:	bf00      	nop
 800560c:	2000001c 	.word	0x2000001c
 8005610:	08007b50 	.word	0x08007b50
 8005614:	08007b70 	.word	0x08007b70
 8005618:	08007b30 	.word	0x08007b30

0800561c <__sflush_r>:
 800561c:	898a      	ldrh	r2, [r1, #12]
 800561e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005622:	4605      	mov	r5, r0
 8005624:	0710      	lsls	r0, r2, #28
 8005626:	460c      	mov	r4, r1
 8005628:	d458      	bmi.n	80056dc <__sflush_r+0xc0>
 800562a:	684b      	ldr	r3, [r1, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	dc05      	bgt.n	800563c <__sflush_r+0x20>
 8005630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	dc02      	bgt.n	800563c <__sflush_r+0x20>
 8005636:	2000      	movs	r0, #0
 8005638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800563c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800563e:	2e00      	cmp	r6, #0
 8005640:	d0f9      	beq.n	8005636 <__sflush_r+0x1a>
 8005642:	2300      	movs	r3, #0
 8005644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005648:	682f      	ldr	r7, [r5, #0]
 800564a:	6a21      	ldr	r1, [r4, #32]
 800564c:	602b      	str	r3, [r5, #0]
 800564e:	d032      	beq.n	80056b6 <__sflush_r+0x9a>
 8005650:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	075a      	lsls	r2, r3, #29
 8005656:	d505      	bpl.n	8005664 <__sflush_r+0x48>
 8005658:	6863      	ldr	r3, [r4, #4]
 800565a:	1ac0      	subs	r0, r0, r3
 800565c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800565e:	b10b      	cbz	r3, 8005664 <__sflush_r+0x48>
 8005660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005662:	1ac0      	subs	r0, r0, r3
 8005664:	2300      	movs	r3, #0
 8005666:	4602      	mov	r2, r0
 8005668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800566a:	6a21      	ldr	r1, [r4, #32]
 800566c:	4628      	mov	r0, r5
 800566e:	47b0      	blx	r6
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	d106      	bne.n	8005684 <__sflush_r+0x68>
 8005676:	6829      	ldr	r1, [r5, #0]
 8005678:	291d      	cmp	r1, #29
 800567a:	d848      	bhi.n	800570e <__sflush_r+0xf2>
 800567c:	4a29      	ldr	r2, [pc, #164]	; (8005724 <__sflush_r+0x108>)
 800567e:	40ca      	lsrs	r2, r1
 8005680:	07d6      	lsls	r6, r2, #31
 8005682:	d544      	bpl.n	800570e <__sflush_r+0xf2>
 8005684:	2200      	movs	r2, #0
 8005686:	6062      	str	r2, [r4, #4]
 8005688:	04d9      	lsls	r1, r3, #19
 800568a:	6922      	ldr	r2, [r4, #16]
 800568c:	6022      	str	r2, [r4, #0]
 800568e:	d504      	bpl.n	800569a <__sflush_r+0x7e>
 8005690:	1c42      	adds	r2, r0, #1
 8005692:	d101      	bne.n	8005698 <__sflush_r+0x7c>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b903      	cbnz	r3, 800569a <__sflush_r+0x7e>
 8005698:	6560      	str	r0, [r4, #84]	; 0x54
 800569a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800569c:	602f      	str	r7, [r5, #0]
 800569e:	2900      	cmp	r1, #0
 80056a0:	d0c9      	beq.n	8005636 <__sflush_r+0x1a>
 80056a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a6:	4299      	cmp	r1, r3
 80056a8:	d002      	beq.n	80056b0 <__sflush_r+0x94>
 80056aa:	4628      	mov	r0, r5
 80056ac:	f000 f994 	bl	80059d8 <_free_r>
 80056b0:	2000      	movs	r0, #0
 80056b2:	6360      	str	r0, [r4, #52]	; 0x34
 80056b4:	e7c0      	b.n	8005638 <__sflush_r+0x1c>
 80056b6:	2301      	movs	r3, #1
 80056b8:	4628      	mov	r0, r5
 80056ba:	47b0      	blx	r6
 80056bc:	1c41      	adds	r1, r0, #1
 80056be:	d1c8      	bne.n	8005652 <__sflush_r+0x36>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0c5      	beq.n	8005652 <__sflush_r+0x36>
 80056c6:	2b1d      	cmp	r3, #29
 80056c8:	d001      	beq.n	80056ce <__sflush_r+0xb2>
 80056ca:	2b16      	cmp	r3, #22
 80056cc:	d101      	bne.n	80056d2 <__sflush_r+0xb6>
 80056ce:	602f      	str	r7, [r5, #0]
 80056d0:	e7b1      	b.n	8005636 <__sflush_r+0x1a>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d8:	81a3      	strh	r3, [r4, #12]
 80056da:	e7ad      	b.n	8005638 <__sflush_r+0x1c>
 80056dc:	690f      	ldr	r7, [r1, #16]
 80056de:	2f00      	cmp	r7, #0
 80056e0:	d0a9      	beq.n	8005636 <__sflush_r+0x1a>
 80056e2:	0793      	lsls	r3, r2, #30
 80056e4:	680e      	ldr	r6, [r1, #0]
 80056e6:	bf08      	it	eq
 80056e8:	694b      	ldreq	r3, [r1, #20]
 80056ea:	600f      	str	r7, [r1, #0]
 80056ec:	bf18      	it	ne
 80056ee:	2300      	movne	r3, #0
 80056f0:	eba6 0807 	sub.w	r8, r6, r7
 80056f4:	608b      	str	r3, [r1, #8]
 80056f6:	f1b8 0f00 	cmp.w	r8, #0
 80056fa:	dd9c      	ble.n	8005636 <__sflush_r+0x1a>
 80056fc:	4643      	mov	r3, r8
 80056fe:	463a      	mov	r2, r7
 8005700:	6a21      	ldr	r1, [r4, #32]
 8005702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005704:	4628      	mov	r0, r5
 8005706:	47b0      	blx	r6
 8005708:	2800      	cmp	r0, #0
 800570a:	dc06      	bgt.n	800571a <__sflush_r+0xfe>
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005712:	81a3      	strh	r3, [r4, #12]
 8005714:	f04f 30ff 	mov.w	r0, #4294967295
 8005718:	e78e      	b.n	8005638 <__sflush_r+0x1c>
 800571a:	4407      	add	r7, r0
 800571c:	eba8 0800 	sub.w	r8, r8, r0
 8005720:	e7e9      	b.n	80056f6 <__sflush_r+0xda>
 8005722:	bf00      	nop
 8005724:	20400001 	.word	0x20400001

08005728 <_fflush_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	690b      	ldr	r3, [r1, #16]
 800572c:	4605      	mov	r5, r0
 800572e:	460c      	mov	r4, r1
 8005730:	b1db      	cbz	r3, 800576a <_fflush_r+0x42>
 8005732:	b118      	cbz	r0, 800573c <_fflush_r+0x14>
 8005734:	6983      	ldr	r3, [r0, #24]
 8005736:	b90b      	cbnz	r3, 800573c <_fflush_r+0x14>
 8005738:	f000 f860 	bl	80057fc <__sinit>
 800573c:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <_fflush_r+0x48>)
 800573e:	429c      	cmp	r4, r3
 8005740:	d109      	bne.n	8005756 <_fflush_r+0x2e>
 8005742:	686c      	ldr	r4, [r5, #4]
 8005744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005748:	b17b      	cbz	r3, 800576a <_fflush_r+0x42>
 800574a:	4621      	mov	r1, r4
 800574c:	4628      	mov	r0, r5
 800574e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005752:	f7ff bf63 	b.w	800561c <__sflush_r>
 8005756:	4b07      	ldr	r3, [pc, #28]	; (8005774 <_fflush_r+0x4c>)
 8005758:	429c      	cmp	r4, r3
 800575a:	d101      	bne.n	8005760 <_fflush_r+0x38>
 800575c:	68ac      	ldr	r4, [r5, #8]
 800575e:	e7f1      	b.n	8005744 <_fflush_r+0x1c>
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <_fflush_r+0x50>)
 8005762:	429c      	cmp	r4, r3
 8005764:	bf08      	it	eq
 8005766:	68ec      	ldreq	r4, [r5, #12]
 8005768:	e7ec      	b.n	8005744 <_fflush_r+0x1c>
 800576a:	2000      	movs	r0, #0
 800576c:	bd38      	pop	{r3, r4, r5, pc}
 800576e:	bf00      	nop
 8005770:	08007b50 	.word	0x08007b50
 8005774:	08007b70 	.word	0x08007b70
 8005778:	08007b30 	.word	0x08007b30

0800577c <std>:
 800577c:	2300      	movs	r3, #0
 800577e:	b510      	push	{r4, lr}
 8005780:	4604      	mov	r4, r0
 8005782:	e9c0 3300 	strd	r3, r3, [r0]
 8005786:	6083      	str	r3, [r0, #8]
 8005788:	8181      	strh	r1, [r0, #12]
 800578a:	6643      	str	r3, [r0, #100]	; 0x64
 800578c:	81c2      	strh	r2, [r0, #14]
 800578e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005792:	6183      	str	r3, [r0, #24]
 8005794:	4619      	mov	r1, r3
 8005796:	2208      	movs	r2, #8
 8005798:	305c      	adds	r0, #92	; 0x5c
 800579a:	f7ff fe13 	bl	80053c4 <memset>
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <std+0x38>)
 80057a0:	6263      	str	r3, [r4, #36]	; 0x24
 80057a2:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <std+0x3c>)
 80057a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <std+0x40>)
 80057a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057aa:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <std+0x44>)
 80057ac:	6224      	str	r4, [r4, #32]
 80057ae:	6323      	str	r3, [r4, #48]	; 0x30
 80057b0:	bd10      	pop	{r4, pc}
 80057b2:	bf00      	nop
 80057b4:	08005b49 	.word	0x08005b49
 80057b8:	08005b6b 	.word	0x08005b6b
 80057bc:	08005ba3 	.word	0x08005ba3
 80057c0:	08005bc7 	.word	0x08005bc7

080057c4 <_cleanup_r>:
 80057c4:	4901      	ldr	r1, [pc, #4]	; (80057cc <_cleanup_r+0x8>)
 80057c6:	f000 b885 	b.w	80058d4 <_fwalk_reent>
 80057ca:	bf00      	nop
 80057cc:	08005729 	.word	0x08005729

080057d0 <__sfmoreglue>:
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	1e4a      	subs	r2, r1, #1
 80057d4:	2568      	movs	r5, #104	; 0x68
 80057d6:	4355      	muls	r5, r2
 80057d8:	460e      	mov	r6, r1
 80057da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057de:	f000 f949 	bl	8005a74 <_malloc_r>
 80057e2:	4604      	mov	r4, r0
 80057e4:	b140      	cbz	r0, 80057f8 <__sfmoreglue+0x28>
 80057e6:	2100      	movs	r1, #0
 80057e8:	e9c0 1600 	strd	r1, r6, [r0]
 80057ec:	300c      	adds	r0, #12
 80057ee:	60a0      	str	r0, [r4, #8]
 80057f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057f4:	f7ff fde6 	bl	80053c4 <memset>
 80057f8:	4620      	mov	r0, r4
 80057fa:	bd70      	pop	{r4, r5, r6, pc}

080057fc <__sinit>:
 80057fc:	6983      	ldr	r3, [r0, #24]
 80057fe:	b510      	push	{r4, lr}
 8005800:	4604      	mov	r4, r0
 8005802:	bb33      	cbnz	r3, 8005852 <__sinit+0x56>
 8005804:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005808:	6503      	str	r3, [r0, #80]	; 0x50
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <__sinit+0x58>)
 800580c:	4a12      	ldr	r2, [pc, #72]	; (8005858 <__sinit+0x5c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6282      	str	r2, [r0, #40]	; 0x28
 8005812:	4298      	cmp	r0, r3
 8005814:	bf04      	itt	eq
 8005816:	2301      	moveq	r3, #1
 8005818:	6183      	streq	r3, [r0, #24]
 800581a:	f000 f81f 	bl	800585c <__sfp>
 800581e:	6060      	str	r0, [r4, #4]
 8005820:	4620      	mov	r0, r4
 8005822:	f000 f81b 	bl	800585c <__sfp>
 8005826:	60a0      	str	r0, [r4, #8]
 8005828:	4620      	mov	r0, r4
 800582a:	f000 f817 	bl	800585c <__sfp>
 800582e:	2200      	movs	r2, #0
 8005830:	60e0      	str	r0, [r4, #12]
 8005832:	2104      	movs	r1, #4
 8005834:	6860      	ldr	r0, [r4, #4]
 8005836:	f7ff ffa1 	bl	800577c <std>
 800583a:	2201      	movs	r2, #1
 800583c:	2109      	movs	r1, #9
 800583e:	68a0      	ldr	r0, [r4, #8]
 8005840:	f7ff ff9c 	bl	800577c <std>
 8005844:	2202      	movs	r2, #2
 8005846:	2112      	movs	r1, #18
 8005848:	68e0      	ldr	r0, [r4, #12]
 800584a:	f7ff ff97 	bl	800577c <std>
 800584e:	2301      	movs	r3, #1
 8005850:	61a3      	str	r3, [r4, #24]
 8005852:	bd10      	pop	{r4, pc}
 8005854:	08007b2c 	.word	0x08007b2c
 8005858:	080057c5 	.word	0x080057c5

0800585c <__sfp>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <__sfp+0x70>)
 8005860:	681e      	ldr	r6, [r3, #0]
 8005862:	69b3      	ldr	r3, [r6, #24]
 8005864:	4607      	mov	r7, r0
 8005866:	b913      	cbnz	r3, 800586e <__sfp+0x12>
 8005868:	4630      	mov	r0, r6
 800586a:	f7ff ffc7 	bl	80057fc <__sinit>
 800586e:	3648      	adds	r6, #72	; 0x48
 8005870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005874:	3b01      	subs	r3, #1
 8005876:	d503      	bpl.n	8005880 <__sfp+0x24>
 8005878:	6833      	ldr	r3, [r6, #0]
 800587a:	b133      	cbz	r3, 800588a <__sfp+0x2e>
 800587c:	6836      	ldr	r6, [r6, #0]
 800587e:	e7f7      	b.n	8005870 <__sfp+0x14>
 8005880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005884:	b16d      	cbz	r5, 80058a2 <__sfp+0x46>
 8005886:	3468      	adds	r4, #104	; 0x68
 8005888:	e7f4      	b.n	8005874 <__sfp+0x18>
 800588a:	2104      	movs	r1, #4
 800588c:	4638      	mov	r0, r7
 800588e:	f7ff ff9f 	bl	80057d0 <__sfmoreglue>
 8005892:	6030      	str	r0, [r6, #0]
 8005894:	2800      	cmp	r0, #0
 8005896:	d1f1      	bne.n	800587c <__sfp+0x20>
 8005898:	230c      	movs	r3, #12
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4604      	mov	r4, r0
 800589e:	4620      	mov	r0, r4
 80058a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a2:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <__sfp+0x74>)
 80058a4:	6665      	str	r5, [r4, #100]	; 0x64
 80058a6:	e9c4 5500 	strd	r5, r5, [r4]
 80058aa:	60a5      	str	r5, [r4, #8]
 80058ac:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80058b0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80058b4:	2208      	movs	r2, #8
 80058b6:	4629      	mov	r1, r5
 80058b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058bc:	f7ff fd82 	bl	80053c4 <memset>
 80058c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058c8:	e7e9      	b.n	800589e <__sfp+0x42>
 80058ca:	bf00      	nop
 80058cc:	08007b2c 	.word	0x08007b2c
 80058d0:	ffff0001 	.word	0xffff0001

080058d4 <_fwalk_reent>:
 80058d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d8:	4680      	mov	r8, r0
 80058da:	4689      	mov	r9, r1
 80058dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058e0:	2600      	movs	r6, #0
 80058e2:	b914      	cbnz	r4, 80058ea <_fwalk_reent+0x16>
 80058e4:	4630      	mov	r0, r6
 80058e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ea:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80058ee:	3f01      	subs	r7, #1
 80058f0:	d501      	bpl.n	80058f6 <_fwalk_reent+0x22>
 80058f2:	6824      	ldr	r4, [r4, #0]
 80058f4:	e7f5      	b.n	80058e2 <_fwalk_reent+0xe>
 80058f6:	89ab      	ldrh	r3, [r5, #12]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d907      	bls.n	800590c <_fwalk_reent+0x38>
 80058fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005900:	3301      	adds	r3, #1
 8005902:	d003      	beq.n	800590c <_fwalk_reent+0x38>
 8005904:	4629      	mov	r1, r5
 8005906:	4640      	mov	r0, r8
 8005908:	47c8      	blx	r9
 800590a:	4306      	orrs	r6, r0
 800590c:	3568      	adds	r5, #104	; 0x68
 800590e:	e7ee      	b.n	80058ee <_fwalk_reent+0x1a>

08005910 <__swhatbuf_r>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	460e      	mov	r6, r1
 8005914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005918:	2900      	cmp	r1, #0
 800591a:	b096      	sub	sp, #88	; 0x58
 800591c:	4614      	mov	r4, r2
 800591e:	461d      	mov	r5, r3
 8005920:	da07      	bge.n	8005932 <__swhatbuf_r+0x22>
 8005922:	2300      	movs	r3, #0
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	89b3      	ldrh	r3, [r6, #12]
 8005928:	061a      	lsls	r2, r3, #24
 800592a:	d410      	bmi.n	800594e <__swhatbuf_r+0x3e>
 800592c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005930:	e00e      	b.n	8005950 <__swhatbuf_r+0x40>
 8005932:	466a      	mov	r2, sp
 8005934:	f000 f96e 	bl	8005c14 <_fstat_r>
 8005938:	2800      	cmp	r0, #0
 800593a:	dbf2      	blt.n	8005922 <__swhatbuf_r+0x12>
 800593c:	9a01      	ldr	r2, [sp, #4]
 800593e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005942:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005946:	425a      	negs	r2, r3
 8005948:	415a      	adcs	r2, r3
 800594a:	602a      	str	r2, [r5, #0]
 800594c:	e7ee      	b.n	800592c <__swhatbuf_r+0x1c>
 800594e:	2340      	movs	r3, #64	; 0x40
 8005950:	2000      	movs	r0, #0
 8005952:	6023      	str	r3, [r4, #0]
 8005954:	b016      	add	sp, #88	; 0x58
 8005956:	bd70      	pop	{r4, r5, r6, pc}

08005958 <__smakebuf_r>:
 8005958:	898b      	ldrh	r3, [r1, #12]
 800595a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800595c:	079d      	lsls	r5, r3, #30
 800595e:	4606      	mov	r6, r0
 8005960:	460c      	mov	r4, r1
 8005962:	d507      	bpl.n	8005974 <__smakebuf_r+0x1c>
 8005964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	6123      	str	r3, [r4, #16]
 800596c:	2301      	movs	r3, #1
 800596e:	6163      	str	r3, [r4, #20]
 8005970:	b002      	add	sp, #8
 8005972:	bd70      	pop	{r4, r5, r6, pc}
 8005974:	ab01      	add	r3, sp, #4
 8005976:	466a      	mov	r2, sp
 8005978:	f7ff ffca 	bl	8005910 <__swhatbuf_r>
 800597c:	9900      	ldr	r1, [sp, #0]
 800597e:	4605      	mov	r5, r0
 8005980:	4630      	mov	r0, r6
 8005982:	f000 f877 	bl	8005a74 <_malloc_r>
 8005986:	b948      	cbnz	r0, 800599c <__smakebuf_r+0x44>
 8005988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800598c:	059a      	lsls	r2, r3, #22
 800598e:	d4ef      	bmi.n	8005970 <__smakebuf_r+0x18>
 8005990:	f023 0303 	bic.w	r3, r3, #3
 8005994:	f043 0302 	orr.w	r3, r3, #2
 8005998:	81a3      	strh	r3, [r4, #12]
 800599a:	e7e3      	b.n	8005964 <__smakebuf_r+0xc>
 800599c:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <__smakebuf_r+0x7c>)
 800599e:	62b3      	str	r3, [r6, #40]	; 0x28
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	6020      	str	r0, [r4, #0]
 80059a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	9b00      	ldr	r3, [sp, #0]
 80059ac:	6163      	str	r3, [r4, #20]
 80059ae:	9b01      	ldr	r3, [sp, #4]
 80059b0:	6120      	str	r0, [r4, #16]
 80059b2:	b15b      	cbz	r3, 80059cc <__smakebuf_r+0x74>
 80059b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059b8:	4630      	mov	r0, r6
 80059ba:	f000 f93d 	bl	8005c38 <_isatty_r>
 80059be:	b128      	cbz	r0, 80059cc <__smakebuf_r+0x74>
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	f043 0301 	orr.w	r3, r3, #1
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	89a3      	ldrh	r3, [r4, #12]
 80059ce:	431d      	orrs	r5, r3
 80059d0:	81a5      	strh	r5, [r4, #12]
 80059d2:	e7cd      	b.n	8005970 <__smakebuf_r+0x18>
 80059d4:	080057c5 	.word	0x080057c5

080059d8 <_free_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4605      	mov	r5, r0
 80059dc:	2900      	cmp	r1, #0
 80059de:	d045      	beq.n	8005a6c <_free_r+0x94>
 80059e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e4:	1f0c      	subs	r4, r1, #4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	bfb8      	it	lt
 80059ea:	18e4      	addlt	r4, r4, r3
 80059ec:	f000 f946 	bl	8005c7c <__malloc_lock>
 80059f0:	4a1f      	ldr	r2, [pc, #124]	; (8005a70 <_free_r+0x98>)
 80059f2:	6813      	ldr	r3, [r2, #0]
 80059f4:	4610      	mov	r0, r2
 80059f6:	b933      	cbnz	r3, 8005a06 <_free_r+0x2e>
 80059f8:	6063      	str	r3, [r4, #4]
 80059fa:	6014      	str	r4, [r2, #0]
 80059fc:	4628      	mov	r0, r5
 80059fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a02:	f000 b93c 	b.w	8005c7e <__malloc_unlock>
 8005a06:	42a3      	cmp	r3, r4
 8005a08:	d90c      	bls.n	8005a24 <_free_r+0x4c>
 8005a0a:	6821      	ldr	r1, [r4, #0]
 8005a0c:	1862      	adds	r2, r4, r1
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	bf04      	itt	eq
 8005a12:	681a      	ldreq	r2, [r3, #0]
 8005a14:	685b      	ldreq	r3, [r3, #4]
 8005a16:	6063      	str	r3, [r4, #4]
 8005a18:	bf04      	itt	eq
 8005a1a:	1852      	addeq	r2, r2, r1
 8005a1c:	6022      	streq	r2, [r4, #0]
 8005a1e:	6004      	str	r4, [r0, #0]
 8005a20:	e7ec      	b.n	80059fc <_free_r+0x24>
 8005a22:	4613      	mov	r3, r2
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	b10a      	cbz	r2, 8005a2c <_free_r+0x54>
 8005a28:	42a2      	cmp	r2, r4
 8005a2a:	d9fa      	bls.n	8005a22 <_free_r+0x4a>
 8005a2c:	6819      	ldr	r1, [r3, #0]
 8005a2e:	1858      	adds	r0, r3, r1
 8005a30:	42a0      	cmp	r0, r4
 8005a32:	d10b      	bne.n	8005a4c <_free_r+0x74>
 8005a34:	6820      	ldr	r0, [r4, #0]
 8005a36:	4401      	add	r1, r0
 8005a38:	1858      	adds	r0, r3, r1
 8005a3a:	4282      	cmp	r2, r0
 8005a3c:	6019      	str	r1, [r3, #0]
 8005a3e:	d1dd      	bne.n	80059fc <_free_r+0x24>
 8005a40:	6810      	ldr	r0, [r2, #0]
 8005a42:	6852      	ldr	r2, [r2, #4]
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	4401      	add	r1, r0
 8005a48:	6019      	str	r1, [r3, #0]
 8005a4a:	e7d7      	b.n	80059fc <_free_r+0x24>
 8005a4c:	d902      	bls.n	8005a54 <_free_r+0x7c>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	602b      	str	r3, [r5, #0]
 8005a52:	e7d3      	b.n	80059fc <_free_r+0x24>
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	1821      	adds	r1, r4, r0
 8005a58:	428a      	cmp	r2, r1
 8005a5a:	bf04      	itt	eq
 8005a5c:	6811      	ldreq	r1, [r2, #0]
 8005a5e:	6852      	ldreq	r2, [r2, #4]
 8005a60:	6062      	str	r2, [r4, #4]
 8005a62:	bf04      	itt	eq
 8005a64:	1809      	addeq	r1, r1, r0
 8005a66:	6021      	streq	r1, [r4, #0]
 8005a68:	605c      	str	r4, [r3, #4]
 8005a6a:	e7c7      	b.n	80059fc <_free_r+0x24>
 8005a6c:	bd38      	pop	{r3, r4, r5, pc}
 8005a6e:	bf00      	nop
 8005a70:	200004bc 	.word	0x200004bc

08005a74 <_malloc_r>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	1ccd      	adds	r5, r1, #3
 8005a78:	f025 0503 	bic.w	r5, r5, #3
 8005a7c:	3508      	adds	r5, #8
 8005a7e:	2d0c      	cmp	r5, #12
 8005a80:	bf38      	it	cc
 8005a82:	250c      	movcc	r5, #12
 8005a84:	2d00      	cmp	r5, #0
 8005a86:	4606      	mov	r6, r0
 8005a88:	db01      	blt.n	8005a8e <_malloc_r+0x1a>
 8005a8a:	42a9      	cmp	r1, r5
 8005a8c:	d903      	bls.n	8005a96 <_malloc_r+0x22>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	6033      	str	r3, [r6, #0]
 8005a92:	2000      	movs	r0, #0
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
 8005a96:	f000 f8f1 	bl	8005c7c <__malloc_lock>
 8005a9a:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <_malloc_r+0xac>)
 8005a9c:	6814      	ldr	r4, [r2, #0]
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	b991      	cbnz	r1, 8005ac8 <_malloc_r+0x54>
 8005aa2:	4c20      	ldr	r4, [pc, #128]	; (8005b24 <_malloc_r+0xb0>)
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	b91b      	cbnz	r3, 8005ab0 <_malloc_r+0x3c>
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f000 f83d 	bl	8005b28 <_sbrk_r>
 8005aae:	6020      	str	r0, [r4, #0]
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f000 f838 	bl	8005b28 <_sbrk_r>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d124      	bne.n	8005b06 <_malloc_r+0x92>
 8005abc:	230c      	movs	r3, #12
 8005abe:	6033      	str	r3, [r6, #0]
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f000 f8dc 	bl	8005c7e <__malloc_unlock>
 8005ac6:	e7e4      	b.n	8005a92 <_malloc_r+0x1e>
 8005ac8:	680b      	ldr	r3, [r1, #0]
 8005aca:	1b5b      	subs	r3, r3, r5
 8005acc:	d418      	bmi.n	8005b00 <_malloc_r+0x8c>
 8005ace:	2b0b      	cmp	r3, #11
 8005ad0:	d90f      	bls.n	8005af2 <_malloc_r+0x7e>
 8005ad2:	600b      	str	r3, [r1, #0]
 8005ad4:	50cd      	str	r5, [r1, r3]
 8005ad6:	18cc      	adds	r4, r1, r3
 8005ad8:	4630      	mov	r0, r6
 8005ada:	f000 f8d0 	bl	8005c7e <__malloc_unlock>
 8005ade:	f104 000b 	add.w	r0, r4, #11
 8005ae2:	1d23      	adds	r3, r4, #4
 8005ae4:	f020 0007 	bic.w	r0, r0, #7
 8005ae8:	1ac3      	subs	r3, r0, r3
 8005aea:	d0d3      	beq.n	8005a94 <_malloc_r+0x20>
 8005aec:	425a      	negs	r2, r3
 8005aee:	50e2      	str	r2, [r4, r3]
 8005af0:	e7d0      	b.n	8005a94 <_malloc_r+0x20>
 8005af2:	428c      	cmp	r4, r1
 8005af4:	684b      	ldr	r3, [r1, #4]
 8005af6:	bf16      	itet	ne
 8005af8:	6063      	strne	r3, [r4, #4]
 8005afa:	6013      	streq	r3, [r2, #0]
 8005afc:	460c      	movne	r4, r1
 8005afe:	e7eb      	b.n	8005ad8 <_malloc_r+0x64>
 8005b00:	460c      	mov	r4, r1
 8005b02:	6849      	ldr	r1, [r1, #4]
 8005b04:	e7cc      	b.n	8005aa0 <_malloc_r+0x2c>
 8005b06:	1cc4      	adds	r4, r0, #3
 8005b08:	f024 0403 	bic.w	r4, r4, #3
 8005b0c:	42a0      	cmp	r0, r4
 8005b0e:	d005      	beq.n	8005b1c <_malloc_r+0xa8>
 8005b10:	1a21      	subs	r1, r4, r0
 8005b12:	4630      	mov	r0, r6
 8005b14:	f000 f808 	bl	8005b28 <_sbrk_r>
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d0cf      	beq.n	8005abc <_malloc_r+0x48>
 8005b1c:	6025      	str	r5, [r4, #0]
 8005b1e:	e7db      	b.n	8005ad8 <_malloc_r+0x64>
 8005b20:	200004bc 	.word	0x200004bc
 8005b24:	200004c0 	.word	0x200004c0

08005b28 <_sbrk_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4c06      	ldr	r4, [pc, #24]	; (8005b44 <_sbrk_r+0x1c>)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4605      	mov	r5, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	f7fb fc4e 	bl	80013d4 <_sbrk>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_sbrk_r+0x1a>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_sbrk_r+0x1a>
 8005b40:	602b      	str	r3, [r5, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	20000834 	.word	0x20000834

08005b48 <__sread>:
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b50:	f000 f896 	bl	8005c80 <_read_r>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	bfab      	itete	ge
 8005b58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b5c:	181b      	addge	r3, r3, r0
 8005b5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b62:	bfac      	ite	ge
 8005b64:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b66:	81a3      	strhlt	r3, [r4, #12]
 8005b68:	bd10      	pop	{r4, pc}

08005b6a <__swrite>:
 8005b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6e:	461f      	mov	r7, r3
 8005b70:	898b      	ldrh	r3, [r1, #12]
 8005b72:	05db      	lsls	r3, r3, #23
 8005b74:	4605      	mov	r5, r0
 8005b76:	460c      	mov	r4, r1
 8005b78:	4616      	mov	r6, r2
 8005b7a:	d505      	bpl.n	8005b88 <__swrite+0x1e>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b84:	f000 f868 	bl	8005c58 <_lseek_r>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	4632      	mov	r2, r6
 8005b96:	463b      	mov	r3, r7
 8005b98:	4628      	mov	r0, r5
 8005b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9e:	f000 b817 	b.w	8005bd0 <_write_r>

08005ba2 <__sseek>:
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005baa:	f000 f855 	bl	8005c58 <_lseek_r>
 8005bae:	1c43      	adds	r3, r0, #1
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	bf15      	itete	ne
 8005bb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bbe:	81a3      	strheq	r3, [r4, #12]
 8005bc0:	bf18      	it	ne
 8005bc2:	81a3      	strhne	r3, [r4, #12]
 8005bc4:	bd10      	pop	{r4, pc}

08005bc6 <__sclose>:
 8005bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bca:	f000 b813 	b.w	8005bf4 <_close_r>
	...

08005bd0 <_write_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4c07      	ldr	r4, [pc, #28]	; (8005bf0 <_write_r+0x20>)
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	4608      	mov	r0, r1
 8005bd8:	4611      	mov	r1, r2
 8005bda:	2200      	movs	r2, #0
 8005bdc:	6022      	str	r2, [r4, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f7fb fba7 	bl	8001332 <_write>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_write_r+0x1e>
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_write_r+0x1e>
 8005bec:	602b      	str	r3, [r5, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	20000834 	.word	0x20000834

08005bf4 <_close_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4c06      	ldr	r4, [pc, #24]	; (8005c10 <_close_r+0x1c>)
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	4608      	mov	r0, r1
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	f7fb fbb3 	bl	800136a <_close>
 8005c04:	1c43      	adds	r3, r0, #1
 8005c06:	d102      	bne.n	8005c0e <_close_r+0x1a>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	b103      	cbz	r3, 8005c0e <_close_r+0x1a>
 8005c0c:	602b      	str	r3, [r5, #0]
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}
 8005c10:	20000834 	.word	0x20000834

08005c14 <_fstat_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4c07      	ldr	r4, [pc, #28]	; (8005c34 <_fstat_r+0x20>)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	4611      	mov	r1, r2
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	f7fb fbae 	bl	8001382 <_fstat>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	d102      	bne.n	8005c30 <_fstat_r+0x1c>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	b103      	cbz	r3, 8005c30 <_fstat_r+0x1c>
 8005c2e:	602b      	str	r3, [r5, #0]
 8005c30:	bd38      	pop	{r3, r4, r5, pc}
 8005c32:	bf00      	nop
 8005c34:	20000834 	.word	0x20000834

08005c38 <_isatty_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4c06      	ldr	r4, [pc, #24]	; (8005c54 <_isatty_r+0x1c>)
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4605      	mov	r5, r0
 8005c40:	4608      	mov	r0, r1
 8005c42:	6023      	str	r3, [r4, #0]
 8005c44:	f7fb fbad 	bl	80013a2 <_isatty>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_isatty_r+0x1a>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_isatty_r+0x1a>
 8005c50:	602b      	str	r3, [r5, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	20000834 	.word	0x20000834

08005c58 <_lseek_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4c07      	ldr	r4, [pc, #28]	; (8005c78 <_lseek_r+0x20>)
 8005c5c:	4605      	mov	r5, r0
 8005c5e:	4608      	mov	r0, r1
 8005c60:	4611      	mov	r1, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	6022      	str	r2, [r4, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f7fb fba6 	bl	80013b8 <_lseek>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_lseek_r+0x1e>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_lseek_r+0x1e>
 8005c74:	602b      	str	r3, [r5, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	20000834 	.word	0x20000834

08005c7c <__malloc_lock>:
 8005c7c:	4770      	bx	lr

08005c7e <__malloc_unlock>:
 8005c7e:	4770      	bx	lr

08005c80 <_read_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4c07      	ldr	r4, [pc, #28]	; (8005ca0 <_read_r+0x20>)
 8005c84:	4605      	mov	r5, r0
 8005c86:	4608      	mov	r0, r1
 8005c88:	4611      	mov	r1, r2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	6022      	str	r2, [r4, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f7fb fb32 	bl	80012f8 <_read>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_read_r+0x1e>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_read_r+0x1e>
 8005c9c:	602b      	str	r3, [r5, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	20000834 	.word	0x20000834

08005ca4 <_init>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	bf00      	nop
 8005ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005caa:	bc08      	pop	{r3}
 8005cac:	469e      	mov	lr, r3
 8005cae:	4770      	bx	lr

08005cb0 <_fini>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	bf00      	nop
 8005cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb6:	bc08      	pop	{r3}
 8005cb8:	469e      	mov	lr, r3
 8005cba:	4770      	bx	lr
