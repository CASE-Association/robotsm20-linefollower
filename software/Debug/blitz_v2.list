
blitz_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004708  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08004890  08004890  00014890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e10  08004e10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000070  08004e88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08004e88  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011635  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024e2  00000000  00000000  000316d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001010  00000000  00000000  00033bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  00034bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021162  00000000  00000000  00035ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc44  00000000  00000000  00056c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2b65  00000000  00000000  0006385e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001263c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004878  00000000  00000000  00126440  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004878 	.word	0x08004878

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004878 	.word	0x08004878

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 80004d0:	1d39      	adds	r1, r7, #4
 80004d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d6:	2201      	movs	r2, #1
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <__io_putchar+0x20>)
 80004da:	f003 f8d4 	bl	8003686 <HAL_UART_Transmit>
	return ch;
 80004de:	687b      	ldr	r3, [r7, #4]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000574 	.word	0x20000574

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 ffe6 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f898 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 fa96 	bl	8000a28 <MX_GPIO_Init>
  MX_I2C3_Init();
 80004fc:	f000 f8f2 	bl	80006e4 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000500:	f000 f91e 	bl	8000740 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000504:	f000 fa66 	bl	80009d4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000508:	f000 fa00 	bl	800090c <MX_TIM4_Init>
  MX_TIM3_Init();
 800050c:	f000 f99a 	bl	8000844 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("========== Starting Blitz V2 ==========\r\n");
 8000510:	4837      	ldr	r0, [pc, #220]	; (80005f0 <main+0x104>)
 8000512:	f003 fda5 	bl	8004060 <puts>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000516:	210c      	movs	r1, #12
 8000518:	4836      	ldr	r0, [pc, #216]	; (80005f4 <main+0x108>)
 800051a:	f002 fc1f 	bl	8002d5c <HAL_TIM_PWM_Start>
  init_buzzer();
 800051e:	f000 fdc3 	bl	80010a8 <init_buzzer>
  oled_init(); // Draws CASE LOGO for now
 8000522:	f000 fdfd 	bl	8001120 <oled_init>
  init_motors();
 8000526:	f000 fdc9 	bl	80010bc <init_motors>



  printf("\t- Initialization complete\r\n");
 800052a:	4833      	ldr	r0, [pc, #204]	; (80005f8 <main+0x10c>)
 800052c:	f003 fd98 	bl	8004060 <puts>
  printf("\t- Hot glue secured\r\n");
 8000530:	4832      	ldr	r0, [pc, #200]	; (80005fc <main+0x110>)
 8000532:	f003 fd95 	bl	8004060 <puts>
  printf("\t- Bodge kablar anchored\r\n");
 8000536:	4832      	ldr	r0, [pc, #200]	; (8000600 <main+0x114>)
 8000538:	f003 fd92 	bl	8004060 <puts>
  printf("========== Startup COMPLETE ==========\r\n");
 800053c:	4831      	ldr	r0, [pc, #196]	; (8000604 <main+0x118>)
 800053e:	f003 fd8f 	bl	8004060 <puts>
  printf("\r\n\r\n========== RUN TESTS ==========\r\n");
 8000542:	4831      	ldr	r0, [pc, #196]	; (8000608 <main+0x11c>)
 8000544:	f003 fd8c 	bl	8004060 <puts>
  printf("\t- Buzzer\r\n");
 8000548:	4830      	ldr	r0, [pc, #192]	; (800060c <main+0x120>)
 800054a:	f003 fd89 	bl	8004060 <puts>
  printf("\t- OLED\r\n");
 800054e:	4830      	ldr	r0, [pc, #192]	; (8000610 <main+0x124>)
 8000550:	f003 fd86 	bl	8004060 <puts>

  printf("\r\n\r\n Enabling motors\r\n");
 8000554:	482f      	ldr	r0, [pc, #188]	; (8000614 <main+0x128>)
 8000556:	f003 fd83 	bl	8004060 <puts>
	*/


  //Test for right fan motor. // something is weird, check with oscillioscope, freq and that 1500 => 1.5ms

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Right FAN
 800055a:	2104      	movs	r1, #4
 800055c:	482e      	ldr	r0, [pc, #184]	; (8000618 <main+0x12c>)
 800055e:	f002 fbfd 	bl	8002d5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Left FAN
 8000562:	2100      	movs	r1, #0
 8000564:	482c      	ldr	r0, [pc, #176]	; (8000618 <main+0x12c>)
 8000566:	f002 fbf9 	bl	8002d5c <HAL_TIM_PWM_Start>
  TIM3->CCR2 = 1500;
 800056a:	4b2c      	ldr	r3, [pc, #176]	; (800061c <main+0x130>)
 800056c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000570:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR1 = 1500;
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <main+0x130>)
 8000574:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(3000);
 800057a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800057e:	f001 f811 	bl	80015a4 <HAL_Delay>


  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000586:	4826      	ldr	r0, [pc, #152]	; (8000620 <main+0x134>)
 8000588:	f001 faf3 	bl	8001b72 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800058c:	2050      	movs	r0, #80	; 0x50
 800058e:	f001 f809 	bl	80015a4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000592:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000596:	4822      	ldr	r0, [pc, #136]	; (8000620 <main+0x134>)
 8000598:	f001 faeb 	bl	8001b72 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800059c:	2050      	movs	r0, #80	; 0x50
 800059e:	f001 f801 	bl	80015a4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80005a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a6:	481e      	ldr	r0, [pc, #120]	; (8000620 <main+0x134>)
 80005a8:	f001 fae3 	bl	8001b72 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 80005ac:	2050      	movs	r0, #80	; 0x50
 80005ae:	f000 fff9 	bl	80015a4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80005b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b6:	481a      	ldr	r0, [pc, #104]	; (8000620 <main+0x134>)
 80005b8:	f001 fadb 	bl	8001b72 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 80005bc:	2050      	movs	r0, #80	; 0x50
 80005be:	f000 fff1 	bl	80015a4 <HAL_Delay>

	HAL_Delay(500);
 80005c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c6:	f000 ffed 	bl	80015a4 <HAL_Delay>
  TIM3->CCR2 = 1550;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <main+0x130>)
 80005cc:	f240 620e 	movw	r2, #1550	; 0x60e
 80005d0:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR1 = 1550;
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <main+0x130>)
 80005d4:	f240 620e 	movw	r2, #1550	; 0x60e
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
  	//HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
  	//test_buzzer();
		//test_motors();
  	//play_song();
//  	play_song();
  	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	4811      	ldr	r0, [pc, #68]	; (8000624 <main+0x138>)
 80005e0:	f001 fac7 	bl	8001b72 <HAL_GPIO_TogglePin>
  	HAL_Delay(500);
 80005e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e8:	f000 ffdc 	bl	80015a4 <HAL_Delay>
  	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 80005ec:	e7f5      	b.n	80005da <main+0xee>
 80005ee:	bf00      	nop
 80005f0:	08004890 	.word	0x08004890
 80005f4:	200005b4 	.word	0x200005b4
 80005f8:	080048bc 	.word	0x080048bc
 80005fc:	080048d8 	.word	0x080048d8
 8000600:	080048f0 	.word	0x080048f0
 8000604:	0800490c 	.word	0x0800490c
 8000608:	08004934 	.word	0x08004934
 800060c:	0800495c 	.word	0x0800495c
 8000610:	08004968 	.word	0x08004968
 8000614:	08004974 	.word	0x08004974
 8000618:	20000534 	.word	0x20000534
 800061c:	40000400 	.word	0x40000400
 8000620:	40020800 	.word	0x40020800
 8000624:	40020000 	.word	0x40020000

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fcae 	bl	8003f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xb4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xb4>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xb4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <SystemClock_Config+0xb8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <SystemClock_Config+0xb8>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <SystemClock_Config+0xb8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	2300      	movs	r3, #0
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fef7 	bl	800248c <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a4:	f000 fa60 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 f952 	bl	800296c <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ce:	f000 fa4b 	bl	8000b68 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C3_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_I2C3_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C3_Init+0x50>)
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_I2C3_Init+0x58>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C3_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2C3_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2C3_Init+0x50>)
 8000702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000706:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_I2C3_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2C3_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_I2C3_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2C3_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_I2C3_Init+0x50>)
 8000722:	f001 fa65 	bl	8001bf0 <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 fa1c 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200004a0 	.word	0x200004a0
 8000738:	40005c00 	.word	0x40005c00
 800073c:	00061a80 	.word	0x00061a80

08000740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b092      	sub	sp, #72	; 0x48
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000746:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2220      	movs	r2, #32
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 fc14 	bl	8003f98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <MX_TIM1_Init+0xfc>)
 8000772:	4a33      	ldr	r2, [pc, #204]	; (8000840 <MX_TIM1_Init+0x100>)
 8000774:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8000776:	4b31      	ldr	r3, [pc, #196]	; (800083c <MX_TIM1_Init+0xfc>)
 8000778:	2203      	movs	r2, #3
 800077a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b2f      	ldr	r3, [pc, #188]	; (800083c <MX_TIM1_Init+0xfc>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000782:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MX_TIM1_Init+0xfc>)
 8000784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000788:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <MX_TIM1_Init+0xfc>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000790:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_TIM1_Init+0xfc>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <MX_TIM1_Init+0xfc>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800079c:	4827      	ldr	r0, [pc, #156]	; (800083c <MX_TIM1_Init+0xfc>)
 800079e:	f002 fab1 	bl	8002d04 <HAL_TIM_PWM_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80007a8:	f000 f9de 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007b8:	4619      	mov	r1, r3
 80007ba:	4820      	ldr	r0, [pc, #128]	; (800083c <MX_TIM1_Init+0xfc>)
 80007bc:	f002 fe48 	bl	8003450 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80007c6:	f000 f9cf 	bl	8000b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ca:	2360      	movs	r3, #96	; 0x60
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	220c      	movs	r2, #12
 80007e8:	4619      	mov	r1, r3
 80007ea:	4814      	ldr	r0, [pc, #80]	; (800083c <MX_TIM1_Init+0xfc>)
 80007ec:	f002 faf4 	bl	8002dd8 <HAL_TIM_PWM_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80007f6:	f000 f9b7 	bl	8000b68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4619      	mov	r1, r3
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_TIM1_Init+0xfc>)
 800081e:	f002 fe93 	bl	8003548 <HAL_TIMEx_ConfigBreakDeadTime>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000828:	f000 f99e 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <MX_TIM1_Init+0xfc>)
 800082e:	f000 fa83 	bl	8000d38 <HAL_TIM_MspPostInit>

}
 8000832:	bf00      	nop
 8000834:	3748      	adds	r7, #72	; 0x48
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200005b4 	.word	0x200005b4
 8000840:	40010000 	.word	0x40010000

08000844 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
 8000862:	615a      	str	r2, [r3, #20]
 8000864:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <MX_TIM3_Init+0xc0>)
 8000868:	4a27      	ldr	r2, [pc, #156]	; (8000908 <MX_TIM3_Init+0xc4>)
 800086a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <MX_TIM3_Init+0xc0>)
 800086e:	220f      	movs	r2, #15
 8000870:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <MX_TIM3_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_TIM3_Init+0xc0>)
 800087a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800087e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b20      	ldr	r3, [pc, #128]	; (8000904 <MX_TIM3_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_TIM3_Init+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800088c:	481d      	ldr	r0, [pc, #116]	; (8000904 <MX_TIM3_Init+0xc0>)
 800088e:	f002 fa39 	bl	8002d04 <HAL_TIM_PWM_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000898:	f000 f966 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4619      	mov	r1, r3
 80008aa:	4816      	ldr	r0, [pc, #88]	; (8000904 <MX_TIM3_Init+0xc0>)
 80008ac:	f002 fdd0 	bl	8003450 <HAL_TIMEx_MasterConfigSynchronization>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008b6:	f000 f957 	bl	8000b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ba:	2360      	movs	r3, #96	; 0x60
 80008bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_TIM3_Init+0xc0>)
 80008d2:	f002 fa81 	bl	8002dd8 <HAL_TIM_PWM_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80008dc:	f000 f944 	bl	8000b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2204      	movs	r2, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <MX_TIM3_Init+0xc0>)
 80008e8:	f002 fa76 	bl	8002dd8 <HAL_TIM_PWM_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80008f2:	f000 f939 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008f6:	4803      	ldr	r0, [pc, #12]	; (8000904 <MX_TIM3_Init+0xc0>)
 80008f8:	f000 fa1e 	bl	8000d38 <HAL_TIM_MspPostInit>

}
 80008fc:	bf00      	nop
 80008fe:	3728      	adds	r7, #40	; 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000534 	.word	0x20000534
 8000908:	40000400 	.word	0x40000400

0800090c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000912:	f107 0320 	add.w	r3, r7, #32
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <MX_TIM4_Init+0xc0>)
 8000930:	4a27      	ldr	r2, [pc, #156]	; (80009d0 <MX_TIM4_Init+0xc4>)
 8000932:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_TIM4_Init+0xc0>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b24      	ldr	r3, [pc, #144]	; (80009cc <MX_TIM4_Init+0xc0>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_TIM4_Init+0xc0>)
 8000942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000946:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_TIM4_Init+0xc0>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_TIM4_Init+0xc0>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000954:	481d      	ldr	r0, [pc, #116]	; (80009cc <MX_TIM4_Init+0xc0>)
 8000956:	f002 f9d5 	bl	8002d04 <HAL_TIM_PWM_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000960:	f000 f902 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800096c:	f107 0320 	add.w	r3, r7, #32
 8000970:	4619      	mov	r1, r3
 8000972:	4816      	ldr	r0, [pc, #88]	; (80009cc <MX_TIM4_Init+0xc0>)
 8000974:	f002 fd6c 	bl	8003450 <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800097e:	f000 f8f3 	bl	8000b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000982:	2360      	movs	r3, #96	; 0x60
 8000984:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2208      	movs	r2, #8
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_TIM4_Init+0xc0>)
 800099a:	f002 fa1d 	bl	8002dd8 <HAL_TIM_PWM_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80009a4:	f000 f8e0 	bl	8000b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	220c      	movs	r2, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_TIM4_Init+0xc0>)
 80009b0:	f002 fa12 	bl	8002dd8 <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80009ba:	f000 f8d5 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM4_Init+0xc0>)
 80009c0:	f000 f9ba 	bl	8000d38 <HAL_TIM_MspPostInit>

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200004f4 	.word	0x200004f4
 80009d0:	40000800 	.word	0x40000800

080009d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_USART1_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	f002 fdee 	bl	80035ec <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 f8a7 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000574 	.word	0x20000574
 8000a24:	40011000 	.word	0x40011000

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b44      	ldr	r3, [pc, #272]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a43      	ldr	r2, [pc, #268]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b41      	ldr	r3, [pc, #260]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a3c      	ldr	r2, [pc, #240]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a35      	ldr	r2, [pc, #212]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a98:	482f      	ldr	r0, [pc, #188]	; (8000b58 <MX_GPIO_Init+0x130>)
 8000a9a:	f001 f851 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000aa4:	482d      	ldr	r0, [pc, #180]	; (8000b5c <MX_GPIO_Init+0x134>)
 8000aa6:	f001 f84b 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin|MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	21f0      	movs	r1, #240	; 0xf0
 8000aae:	482c      	ldr	r0, [pc, #176]	; (8000b60 <MX_GPIO_Init+0x138>)
 8000ab0:	f001 f846 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_SELECT_Pin */
  GPIO_InitStruct.Pin = BUTTON_SELECT_Pin;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_SELECT_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4825      	ldr	r0, [pc, #148]	; (8000b5c <MX_GPIO_Init+0x134>)
 8000ac8:	f000 fea0 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000acc:	2304      	movs	r3, #4
 8000ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4619      	mov	r1, r3
 8000ade:	4820      	ldr	r0, [pc, #128]	; (8000b60 <MX_GPIO_Init+0x138>)
 8000ae0:	f000 fe94 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ae8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4619      	mov	r1, r3
 8000afc:	4816      	ldr	r0, [pc, #88]	; (8000b58 <MX_GPIO_Init+0x130>)
 8000afe:	f000 fe85 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8000b02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4810      	ldr	r0, [pc, #64]	; (8000b5c <MX_GPIO_Init+0x134>)
 8000b1c:	f000 fe76 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_R_IN2_Pin MOTOR_R_IN1_Pin MOTOR_L_IN2_Pin MOTOR_L_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_R_IN2_Pin|MOTOR_R_IN1_Pin|MOTOR_L_IN2_Pin|MOTOR_L_IN1_Pin;
 8000b20:	23f0      	movs	r3, #240	; 0xf0
 8000b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4619      	mov	r1, r3
 8000b36:	480a      	ldr	r0, [pc, #40]	; (8000b60 <MX_GPIO_Init+0x138>)
 8000b38:	f000 fe68 	bl	800180c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2009      	movs	r0, #9
 8000b42:	f000 fe2c 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b46:	2009      	movs	r0, #9
 8000b48:	f000 fe45 	bl	80017d6 <HAL_NVIC_EnableIRQ>

}
 8000b4c:	bf00      	nop
 8000b4e:	3720      	adds	r7, #32
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020400 	.word	0x40020400
 8000b64:	10210000 	.word	0x10210000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a0f      	ldr	r2, [pc, #60]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a29      	ldr	r2, [pc, #164]	; (8000c8c <HAL_I2C_MspInit+0xc4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d14b      	bne.n	8000c82 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = SDA_Pin;
 8000c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c28:	2312      	movs	r3, #18
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c34:	2304      	movs	r3, #4
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4815      	ldr	r0, [pc, #84]	; (8000c94 <HAL_I2C_MspInit+0xcc>)
 8000c40:	f000 fde4 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCL_Pin;
 8000c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4a:	2312      	movs	r3, #18
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c56:	2304      	movs	r3, #4
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <HAL_I2C_MspInit+0xd0>)
 8000c62:	f000 fdd3 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000c70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_I2C_MspInit+0xc8>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40005c00 	.word	0x40005c00
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020800 	.word	0x40020800
 8000c98:	40020000 	.word	0x40020000

08000c9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <HAL_TIM_PWM_MspInit+0x8c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10e      	bne.n	8000ccc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cca:	e026      	b.n	8000d1a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_TIM_PWM_MspInit+0x94>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d10e      	bne.n	8000cf4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
}
 8000cf2:	e012      	b.n	8000d1a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_TIM_PWM_MspInit+0x98>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10d      	bne.n	8000d1a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
}
 8000d1a:	bf00      	nop
 8000d1c:	371c      	adds	r7, #28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40010000 	.word	0x40010000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40000400 	.word	0x40000400
 8000d34:	40000800 	.word	0x40000800

08000d38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a37      	ldr	r2, [pc, #220]	; (8000e34 <HAL_TIM_MspPostInit+0xfc>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d11f      	bne.n	8000d9a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <HAL_TIM_MspPostInit+0x100>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a35      	ldr	r2, [pc, #212]	; (8000e38 <HAL_TIM_MspPostInit+0x100>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <HAL_TIM_MspPostInit+0x100>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8000d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	482a      	ldr	r0, [pc, #168]	; (8000e3c <HAL_TIM_MspPostInit+0x104>)
 8000d94:	f000 fd3a 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d98:	e047      	b.n	8000e2a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <HAL_TIM_MspPostInit+0x108>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d11e      	bne.n	8000de2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <HAL_TIM_MspPostInit+0x100>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <HAL_TIM_MspPostInit+0x100>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_TIM_MspPostInit+0x100>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_L_PWM_Pin|FAN_R_PWM_Pin;
 8000dc0:	23c0      	movs	r3, #192	; 0xc0
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	481a      	ldr	r0, [pc, #104]	; (8000e44 <HAL_TIM_MspPostInit+0x10c>)
 8000ddc:	f000 fd16 	bl	800180c <HAL_GPIO_Init>
}
 8000de0:	e023      	b.n	8000e2a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a18      	ldr	r2, [pc, #96]	; (8000e48 <HAL_TIM_MspPostInit+0x110>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d11e      	bne.n	8000e2a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_TIM_MspPostInit+0x100>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_TIM_MspPostInit+0x100>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_TIM_MspPostInit+0x100>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin|MOTOR_L_PWM_Pin;
 8000e08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4809      	ldr	r0, [pc, #36]	; (8000e4c <HAL_TIM_MspPostInit+0x114>)
 8000e26:	f000 fcf1 	bl	800180c <HAL_GPIO_Init>
}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40010000 	.word	0x40010000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40000400 	.word	0x40000400
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40000800 	.word	0x40000800
 8000e4c:	40020400 	.word	0x40020400

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <HAL_UART_MspInit+0x84>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d12c      	bne.n	8000ecc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_UART_MspInit+0x88>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <HAL_UART_MspInit+0x88>)
 8000e7c:	f043 0310 	orr.w	r3, r3, #16
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_UART_MspInit+0x88>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_UART_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <HAL_UART_MspInit+0x88>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_UART_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8000eaa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <HAL_UART_MspInit+0x8c>)
 8000ec8:	f000 fca0 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 fb16 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f40:	2008      	movs	r0, #8
 8000f42:	f000 fe31 	bl	8001ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e00a      	b.n	8000f72 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f5c:	f3af 8000 	nop.w
 8000f60:	4601      	mov	r1, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	60ba      	str	r2, [r7, #8]
 8000f68:	b2ca      	uxtb	r2, r1
 8000f6a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dbf0      	blt.n	8000f5c <_read+0x12>
	}

return len;
 8000f7a:	687b      	ldr	r3, [r7, #4]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e009      	b.n	8000faa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	60ba      	str	r2, [r7, #8]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fa92 	bl	80004c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dbf1      	blt.n	8000f96 <_write+0x12>
	}
	return len;
 8000fb2:	687b      	ldr	r3, [r7, #4]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_close>:

int _close(int file)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe4:	605a      	str	r2, [r3, #4]
	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_isatty>:

int _isatty(int file)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	return 1;
 8000ffc:	2301      	movs	r3, #1
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800100a:	b480      	push	{r7}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
	return 0;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_sbrk+0x50>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x16>
		heap_end = &end;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <_sbrk+0x50>)
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <_sbrk+0x54>)
 8001038:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <_sbrk+0x50>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <_sbrk+0x50>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	466a      	mov	r2, sp
 800104a:	4293      	cmp	r3, r2
 800104c:	d907      	bls.n	800105e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800104e:	f002 ff79 	bl	8003f44 <__errno>
 8001052:	4602      	mov	r2, r0
 8001054:	230c      	movs	r3, #12
 8001056:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800105c:	e006      	b.n	800106c <_sbrk+0x48>
	}

	heap_end += incr;
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <_sbrk+0x50>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a03      	ldr	r2, [pc, #12]	; (8001074 <_sbrk+0x50>)
 8001068:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2000008c 	.word	0x2000008c
 8001078:	20000600 	.word	0x20000600

0800107c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <SystemInit+0x28>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <SystemInit+0x28>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SystemInit+0x28>)
 8001092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001096:	609a      	str	r2, [r3, #8]
#endif
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <init_buzzer>:
  NOTE_GS5,2,

};


void init_buzzer(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80010ac:	210c      	movs	r1, #12
 80010ae:	4802      	ldr	r0, [pc, #8]	; (80010b8 <init_buzzer+0x10>)
 80010b0:	f001 fe54 	bl	8002d5c <HAL_TIM_PWM_Start>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200005b4 	.word	0x200005b4

080010bc <init_motors>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

void init_motors(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
    // Start encoder inputs
    //HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Right
    //HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left

    // Start PWM generation for motors
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Right
 80010c0:	2108      	movs	r1, #8
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <init_motors+0x1c>)
 80010c4:	f001 fe4a 	bl	8002d5c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Left
 80010c8:	210c      	movs	r1, #12
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <init_motors+0x1c>)
 80010cc:	f001 fe46 	bl	8002d5c <HAL_TIM_PWM_Start>

    // Put both motors in Hi-Z (high impedance output => rotate freely)
    motors_stop();
 80010d0:	f000 f804 	bl	80010dc <motors_stop>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200004f4 	.word	0x200004f4

080010dc <motors_stop>:
    }

    TIM4->CCR3 = limited_speed;
}

void motors_stop(void){
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
    TIM4->CCR3 = 0;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <motors_stop+0x3c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_WritePin(MOTOR_R_IN1_GPIO_Port, MOTOR_R_IN1_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2120      	movs	r1, #32
 80010ea:	480c      	ldr	r0, [pc, #48]	; (800111c <motors_stop+0x40>)
 80010ec:	f000 fd28 	bl	8001b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_R_IN2_GPIO_Port, MOTOR_R_IN2_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2110      	movs	r1, #16
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <motors_stop+0x40>)
 80010f6:	f000 fd23 	bl	8001b40 <HAL_GPIO_WritePin>

    TIM4->CCR4 = 0;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <motors_stop+0x3c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_GPIO_WritePin(MOTOR_L_IN1_GPIO_Port, MOTOR_L_IN1_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <motors_stop+0x40>)
 8001106:	f000 fd1b 	bl	8001b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_L_IN2_GPIO_Port, MOTOR_L_IN2_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <motors_stop+0x40>)
 8001110:	f000 fd16 	bl	8001b40 <HAL_GPIO_WritePin>
};
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40000800 	.word	0x40000800
 800111c:	40020400 	.word	0x40020400

08001120 <oled_init>:


/**
	* @brief Initialize the oled screen and a welcome screen. 
*/
void oled_init(void){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8001124:	f000 f844 	bl	80011b0 <ssd1306_Init>
	
	ssd1306_DrawBitmap(case_head_bmp);
 8001128:	4803      	ldr	r0, [pc, #12]	; (8001138 <oled_init+0x18>)
 800112a:	f000 f957 	bl	80013dc <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 800112e:	f000 f8cf 	bl	80012d0 <ssd1306_UpdateScreen>
	menu_item_31.pNext = &menu_item_32;
	
	strcpy(menu_item_32.name, "Item 32");
	menu_item_32.pNext = &menu_item_back_main;
	*/
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	080049a4 	.word	0x080049a4

0800113c <ssd1306_Reset>:
#include "user/ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af04      	add	r7, sp, #16
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	2200      	movs	r2, #0
 8001168:	2178      	movs	r1, #120	; 0x78
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <ssd1306_WriteCommand+0x2c>)
 800116c:	f000 fe78 	bl	8001e60 <HAL_I2C_Mem_Write>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200004a0 	.word	0x200004a0

0800117c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af04      	add	r7, sp, #16
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800118e:	9202      	str	r2, [sp, #8]
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	2240      	movs	r2, #64	; 0x40
 800119a:	2178      	movs	r1, #120	; 0x78
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <ssd1306_WriteData+0x30>)
 800119e:	f000 fe5f 	bl	8001e60 <HAL_I2C_Mem_Write>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200004a0 	.word	0x200004a0

080011b0 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80011b4:	f7ff ffc2 	bl	800113c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011b8:	2064      	movs	r0, #100	; 0x64
 80011ba:	f000 f9f3 	bl	80015a4 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80011be:	20ae      	movs	r0, #174	; 0xae
 80011c0:	f7ff ffc4 	bl	800114c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80011c4:	2020      	movs	r0, #32
 80011c6:	f7ff ffc1 	bl	800114c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 80011ca:	2010      	movs	r0, #16
 80011cc:	f7ff ffbe 	bl	800114c <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011d0:	20b0      	movs	r0, #176	; 0xb0
 80011d2:	f7ff ffbb 	bl	800114c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80011d6:	20c8      	movs	r0, #200	; 0xc8
 80011d8:	f7ff ffb8 	bl	800114c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff ffb5 	bl	800114c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80011e2:	2010      	movs	r0, #16
 80011e4:	f7ff ffb2 	bl	800114c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80011e8:	2040      	movs	r0, #64	; 0x40
 80011ea:	f7ff ffaf 	bl	800114c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80011ee:	2081      	movs	r0, #129	; 0x81
 80011f0:	f7ff ffac 	bl	800114c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80011f4:	20ff      	movs	r0, #255	; 0xff
 80011f6:	f7ff ffa9 	bl	800114c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80011fa:	20a1      	movs	r0, #161	; 0xa1
 80011fc:	f7ff ffa6 	bl	800114c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001200:	20a6      	movs	r0, #166	; 0xa6
 8001202:	f7ff ffa3 	bl	800114c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001206:	20a8      	movs	r0, #168	; 0xa8
 8001208:	f7ff ffa0 	bl	800114c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 800120c:	203f      	movs	r0, #63	; 0x3f
 800120e:	f7ff ff9d 	bl	800114c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001212:	20a4      	movs	r0, #164	; 0xa4
 8001214:	f7ff ff9a 	bl	800114c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001218:	20d3      	movs	r0, #211	; 0xd3
 800121a:	f7ff ff97 	bl	800114c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff ff94 	bl	800114c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001224:	20d5      	movs	r0, #213	; 0xd5
 8001226:	f7ff ff91 	bl	800114c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800122a:	20f0      	movs	r0, #240	; 0xf0
 800122c:	f7ff ff8e 	bl	800114c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001230:	20d9      	movs	r0, #217	; 0xd9
 8001232:	f7ff ff8b 	bl	800114c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001236:	2022      	movs	r0, #34	; 0x22
 8001238:	f7ff ff88 	bl	800114c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800123c:	20da      	movs	r0, #218	; 0xda
 800123e:	f7ff ff85 	bl	800114c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8001242:	2012      	movs	r0, #18
 8001244:	f7ff ff82 	bl	800114c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001248:	20db      	movs	r0, #219	; 0xdb
 800124a:	f7ff ff7f 	bl	800114c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800124e:	2020      	movs	r0, #32
 8001250:	f7ff ff7c 	bl	800114c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001254:	208d      	movs	r0, #141	; 0x8d
 8001256:	f7ff ff79 	bl	800114c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800125a:	2014      	movs	r0, #20
 800125c:	f7ff ff76 	bl	800114c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001260:	20af      	movs	r0, #175	; 0xaf
 8001262:	f7ff ff73 	bl	800114c <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f810 	bl	800128c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800126c:	f000 f830 	bl	80012d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <ssd1306_Init+0xd8>)
 8001272:	2200      	movs	r2, #0
 8001274:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <ssd1306_Init+0xd8>)
 8001278:	2200      	movs	r2, #0
 800127a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800127c:	4b02      	ldr	r3, [pc, #8]	; (8001288 <ssd1306_Init+0xd8>)
 800127e:	2201      	movs	r2, #1
 8001280:	715a      	strb	r2, [r3, #5]
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000490 	.word	0x20000490

0800128c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e00d      	b.n	80012b8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <ssd1306_Fill+0x1a>
 80012a2:	2100      	movs	r1, #0
 80012a4:	e000      	b.n	80012a8 <ssd1306_Fill+0x1c>
 80012a6:	21ff      	movs	r1, #255	; 0xff
 80012a8:	4a08      	ldr	r2, [pc, #32]	; (80012cc <ssd1306_Fill+0x40>)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4413      	add	r3, r2
 80012ae:	460a      	mov	r2, r1
 80012b0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	3301      	adds	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012be:	d3ed      	bcc.n	800129c <ssd1306_Fill+0x10>
    }
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	20000090 	.word	0x20000090

080012d0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	e016      	b.n	800130a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	3b50      	subs	r3, #80	; 0x50
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff32 	bl	800114c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff ff2f 	bl	800114c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80012ee:	2010      	movs	r0, #16
 80012f0:	f7ff ff2c 	bl	800114c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	01db      	lsls	r3, r3, #7
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <ssd1306_UpdateScreen+0x48>)
 80012fa:	4413      	add	r3, r2
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff3c 	bl	800117c <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	3301      	adds	r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b07      	cmp	r3, #7
 800130e:	d9e5      	bls.n	80012dc <ssd1306_UpdateScreen+0xc>
    }
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000090 	.word	0x20000090

0800131c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	460b      	mov	r3, r1
 8001328:	71bb      	strb	r3, [r7, #6]
 800132a:	4613      	mov	r3, r2
 800132c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db48      	blt.n	80013c8 <ssd1306_DrawPixel+0xac>
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	2b3f      	cmp	r3, #63	; 0x3f
 800133a:	d845      	bhi.n	80013c8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800133c:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <ssd1306_DrawPixel+0xb8>)
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001344:	797b      	ldrb	r3, [r7, #5]
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001352:	797b      	ldrb	r3, [r7, #5]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d11a      	bne.n	800138e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	b2d8      	uxtb	r0, r3
 8001360:	4603      	mov	r3, r0
 8001362:	01db      	lsls	r3, r3, #7
 8001364:	4413      	add	r3, r2
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <ssd1306_DrawPixel+0xbc>)
 8001368:	5cd3      	ldrb	r3, [r2, r3]
 800136a:	b25a      	sxtb	r2, r3
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	2101      	movs	r1, #1
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	b25b      	sxtb	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b259      	sxtb	r1, r3
 800137e:	79fa      	ldrb	r2, [r7, #7]
 8001380:	4603      	mov	r3, r0
 8001382:	01db      	lsls	r3, r3, #7
 8001384:	4413      	add	r3, r2
 8001386:	b2c9      	uxtb	r1, r1
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <ssd1306_DrawPixel+0xbc>)
 800138a:	54d1      	strb	r1, [r2, r3]
 800138c:	e01d      	b.n	80013ca <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	b2d8      	uxtb	r0, r3
 8001396:	4603      	mov	r3, r0
 8001398:	01db      	lsls	r3, r3, #7
 800139a:	4413      	add	r3, r2
 800139c:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <ssd1306_DrawPixel+0xbc>)
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	2101      	movs	r1, #1
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	b259      	sxtb	r1, r3
 80013b8:	79fa      	ldrb	r2, [r7, #7]
 80013ba:	4603      	mov	r3, r0
 80013bc:	01db      	lsls	r3, r3, #7
 80013be:	4413      	add	r3, r2
 80013c0:	b2c9      	uxtb	r1, r1
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <ssd1306_DrawPixel+0xbc>)
 80013c4:	54d1      	strb	r1, [r2, r3]
 80013c6:	e000      	b.n	80013ca <ssd1306_DrawPixel+0xae>
        return;
 80013c8:	bf00      	nop
    }
}
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20000490 	.word	0x20000490
 80013d8:	20000090 	.word	0x20000090

080013dc <ssd1306_DrawBitmap>:

// Draw a 128x64 bitmap image
// pBitmap     => Pointer to the stored byte array (size = 1024) of the image. 
// Convesion done here: https://javl.github.io/image2cpp/
void ssd1306_DrawBitmap(const unsigned char * pBitmap){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 1024; i++){
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	e037      	b.n	800145a <ssd1306_DrawBitmap+0x7e>
			// Extract each byte
			unsigned char byte = pBitmap[i];
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	75fb      	strb	r3, [r7, #23]
				
			for(int k = 0; k < 8; k++){
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	e029      	b.n	800144e <ssd1306_DrawBitmap+0x72>
				unsigned char pixel = (byte >> (7-k)) & 0x01;
 80013fa:	7dfa      	ldrb	r2, [r7, #23]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	fa42 f303 	asr.w	r3, r2, r3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	75bb      	strb	r3, [r7, #22]
				unsigned int x = (i*8 + k) % 128;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	00da      	lsls	r2, r3, #3
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4413      	add	r3, r2
 8001416:	425a      	negs	r2, r3
 8001418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800141c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001420:	bf58      	it	pl
 8001422:	4253      	negpl	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
				unsigned int y = (i*8 + k)/128;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	00da      	lsls	r2, r3, #3
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4413      	add	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	da00      	bge.n	8001434 <ssd1306_DrawBitmap+0x58>
 8001432:	337f      	adds	r3, #127	; 0x7f
 8001434:	11db      	asrs	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]
				ssd1306_DrawPixel(x, y, (SSD1306_COLOR) pixel);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	b2d1      	uxtb	r1, r2
 8001440:	7dba      	ldrb	r2, [r7, #22]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff6a 	bl	800131c <ssd1306_DrawPixel>
			for(int k = 0; k < 8; k++){
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	3301      	adds	r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b07      	cmp	r3, #7
 8001452:	ddd2      	ble.n	80013fa <ssd1306_DrawBitmap+0x1e>
	for(int i = 0; i < 1024; i++){
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	3301      	adds	r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001460:	dbc3      	blt.n	80013ea <ssd1306_DrawBitmap+0xe>
			}//for - k
	}//for - i
}
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800146c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001470:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001472:	e003      	b.n	800147c <LoopCopyDataInit>

08001474 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001476:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001478:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800147a:	3104      	adds	r1, #4

0800147c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800147c:	480b      	ldr	r0, [pc, #44]	; (80014ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001480:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001482:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001484:	d3f6      	bcc.n	8001474 <CopyDataInit>
  ldr  r2, =_sbss
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001488:	e002      	b.n	8001490 <LoopFillZerobss>

0800148a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800148a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800148c:	f842 3b04 	str.w	r3, [r2], #4

08001490 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001492:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001494:	d3f9      	bcc.n	800148a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001496:	f7ff fdf1 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149a:	f002 fd59 	bl	8003f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149e:	f7ff f825 	bl	80004ec <main>
  bx  lr    
 80014a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014a8:	08004e18 	.word	0x08004e18
  ldr  r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014b0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80014b4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80014b8:	200005fc 	.word	0x200005fc

080014bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <HAL_Init+0x40>)
 80014ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_Init+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <HAL_Init+0x40>)
 80014d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_Init+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_Init+0x40>)
 80014e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f000 f94d 	bl	8001788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 f808 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f4:	f7ff fb40 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023c00 	.word	0x40023c00

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x54>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x58>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f965 	bl	80017f2 <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001540:	f000 f92d 	bl	800179e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_InitTick+0x5c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000000 	.word	0x20000000
 800155c:	20000008 	.word	0x20000008
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x20>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x24>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_IncTick+0x24>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000008 	.word	0x20000008
 8001588:	200005f4 	.word	0x200005f4

0800158c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_GetTick+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	200005f4 	.word	0x200005f4

080015a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff ffee 	bl	800158c <HAL_GetTick>
 80015b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015bc:	d005      	beq.n	80015ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_Delay+0x40>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ca:	bf00      	nop
 80015cc:	f7ff ffde 	bl	800158c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8f7      	bhi.n	80015cc <HAL_Delay+0x28>
  {
  }
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000008 	.word	0x20000008

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4907      	ldr	r1, [pc, #28]	; (8001684 <__NVIC_EnableIRQ+0x38>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	; (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	; (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f1c3 0307 	rsb	r3, r3, #7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf28      	it	cs
 80016fa:	2304      	movcs	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3304      	adds	r3, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d902      	bls.n	800170c <NVIC_EncodePriority+0x30>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3b03      	subs	r3, #3
 800170a:	e000      	b.n	800170e <NVIC_EncodePriority+0x32>
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	401a      	ands	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43d9      	mvns	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	4313      	orrs	r3, r2
         );
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001754:	d301      	bcc.n	800175a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001756:	2301      	movs	r3, #1
 8001758:	e00f      	b.n	800177a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <SysTick_Config+0x40>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001762:	210f      	movs	r1, #15
 8001764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001768:	f7ff ff8e 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <SysTick_Config+0x40>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <SysTick_Config+0x40>)
 8001774:	2207      	movs	r2, #7
 8001776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010

08001788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ff29 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b0:	f7ff ff3e 	bl	8001630 <__NVIC_GetPriorityGrouping>
 80017b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff ff8e 	bl	80016dc <NVIC_EncodePriority>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff5d 	bl	8001688 <__NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff31 	bl	800164c <__NVIC_EnableIRQ>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffa2 	bl	8001744 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	e16b      	b.n	8001b00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001828:	2201      	movs	r2, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	429a      	cmp	r2, r3
 8001842:	f040 815a 	bne.w	8001afa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d00b      	beq.n	8001866 <HAL_GPIO_Init+0x5a>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d007      	beq.n	8001866 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800185a:	2b11      	cmp	r3, #17
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b12      	cmp	r3, #18
 8001864:	d130      	bne.n	80018c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2203      	movs	r2, #3
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 0201 	and.w	r2, r3, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0xfc>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b12      	cmp	r3, #18
 8001906:	d123      	bne.n	8001950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3208      	adds	r2, #8
 800194a:	69b9      	ldr	r1, [r7, #24]
 800194c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80b4 	beq.w	8001afa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b5f      	ldr	r3, [pc, #380]	; (8001b14 <HAL_GPIO_Init+0x308>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a5e      	ldr	r2, [pc, #376]	; (8001b14 <HAL_GPIO_Init+0x308>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b5c      	ldr	r3, [pc, #368]	; (8001b14 <HAL_GPIO_Init+0x308>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ae:	4a5a      	ldr	r2, [pc, #360]	; (8001b18 <HAL_GPIO_Init+0x30c>)
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a51      	ldr	r2, [pc, #324]	; (8001b1c <HAL_GPIO_Init+0x310>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d02b      	beq.n	8001a32 <HAL_GPIO_Init+0x226>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a50      	ldr	r2, [pc, #320]	; (8001b20 <HAL_GPIO_Init+0x314>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d025      	beq.n	8001a2e <HAL_GPIO_Init+0x222>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4f      	ldr	r2, [pc, #316]	; (8001b24 <HAL_GPIO_Init+0x318>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d01f      	beq.n	8001a2a <HAL_GPIO_Init+0x21e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4e      	ldr	r2, [pc, #312]	; (8001b28 <HAL_GPIO_Init+0x31c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d019      	beq.n	8001a26 <HAL_GPIO_Init+0x21a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4d      	ldr	r2, [pc, #308]	; (8001b2c <HAL_GPIO_Init+0x320>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0x216>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4c      	ldr	r2, [pc, #304]	; (8001b30 <HAL_GPIO_Init+0x324>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00d      	beq.n	8001a1e <HAL_GPIO_Init+0x212>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4b      	ldr	r2, [pc, #300]	; (8001b34 <HAL_GPIO_Init+0x328>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x20e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4a      	ldr	r2, [pc, #296]	; (8001b38 <HAL_GPIO_Init+0x32c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <HAL_GPIO_Init+0x20a>
 8001a12:	2307      	movs	r3, #7
 8001a14:	e00e      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a16:	2308      	movs	r3, #8
 8001a18:	e00c      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a1a:	2306      	movs	r3, #6
 8001a1c:	e00a      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a1e:	2305      	movs	r3, #5
 8001a20:	e008      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a22:	2304      	movs	r3, #4
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a26:	2303      	movs	r3, #3
 8001a28:	e004      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a32:	2300      	movs	r3, #0
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	f002 0203 	and.w	r2, r2, #3
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	4093      	lsls	r3, r2
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a44:	4934      	ldr	r1, [pc, #208]	; (8001b18 <HAL_GPIO_Init+0x30c>)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a52:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <HAL_GPIO_Init+0x330>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a76:	4a31      	ldr	r2, [pc, #196]	; (8001b3c <HAL_GPIO_Init+0x330>)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_GPIO_Init+0x330>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa0:	4a26      	ldr	r2, [pc, #152]	; (8001b3c <HAL_GPIO_Init+0x330>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <HAL_GPIO_Init+0x330>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <HAL_GPIO_Init+0x330>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_GPIO_Init+0x330>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af4:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <HAL_GPIO_Init+0x330>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3301      	adds	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	f67f ae90 	bls.w	8001828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3724      	adds	r7, #36	; 0x24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40013800 	.word	0x40013800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40020800 	.word	0x40020800
 8001b28:	40020c00 	.word	0x40020c00
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40021400 	.word	0x40021400
 8001b34:	40021800 	.word	0x40021800
 8001b38:	40021c00 	.word	0x40021c00
 8001b3c:	40013c00 	.word	0x40013c00

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b5c:	e003      	b.n	8001b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	041a      	lsls	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	619a      	str	r2, [r3, #24]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	887b      	ldrh	r3, [r7, #2]
 8001b84:	401a      	ands	r2, r3
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d104      	bne.n	8001b96 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	041a      	lsls	r2, r3, #16
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	619a      	str	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f806 	bl	8001bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40013c00 	.word	0x40013c00

08001bd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e11f      	b.n	8001e42 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7fe ffd6 	bl	8000bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2224      	movs	r2, #36	; 0x24
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c54:	f001 f82e 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8001c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4a7b      	ldr	r2, [pc, #492]	; (8001e4c <HAL_I2C_Init+0x25c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d807      	bhi.n	8001c74 <HAL_I2C_Init+0x84>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4a7a      	ldr	r2, [pc, #488]	; (8001e50 <HAL_I2C_Init+0x260>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	bf94      	ite	ls
 8001c6c:	2301      	movls	r3, #1
 8001c6e:	2300      	movhi	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	e006      	b.n	8001c82 <HAL_I2C_Init+0x92>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4a77      	ldr	r2, [pc, #476]	; (8001e54 <HAL_I2C_Init+0x264>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	bf94      	ite	ls
 8001c7c:	2301      	movls	r3, #1
 8001c7e:	2300      	movhi	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0db      	b.n	8001e42 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4a72      	ldr	r2, [pc, #456]	; (8001e58 <HAL_I2C_Init+0x268>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0c9b      	lsrs	r3, r3, #18
 8001c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a64      	ldr	r2, [pc, #400]	; (8001e4c <HAL_I2C_Init+0x25c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d802      	bhi.n	8001cc4 <HAL_I2C_Init+0xd4>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	e009      	b.n	8001cd8 <HAL_I2C_Init+0xe8>
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cca:	fb02 f303 	mul.w	r3, r2, r3
 8001cce:	4a63      	ldr	r2, [pc, #396]	; (8001e5c <HAL_I2C_Init+0x26c>)
 8001cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4956      	ldr	r1, [pc, #344]	; (8001e4c <HAL_I2C_Init+0x25c>)
 8001cf4:	428b      	cmp	r3, r1
 8001cf6:	d80d      	bhi.n	8001d14 <HAL_I2C_Init+0x124>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e59      	subs	r1, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	bf38      	it	cc
 8001d10:	2304      	movcc	r3, #4
 8001d12:	e04f      	b.n	8001db4 <HAL_I2C_Init+0x1c4>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d111      	bne.n	8001d40 <HAL_I2C_Init+0x150>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1e58      	subs	r0, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	440b      	add	r3, r1
 8001d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	e012      	b.n	8001d66 <HAL_I2C_Init+0x176>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1e58      	subs	r0, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	0099      	lsls	r1, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_I2C_Init+0x17e>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e022      	b.n	8001db4 <HAL_I2C_Init+0x1c4>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10e      	bne.n	8001d94 <HAL_I2C_Init+0x1a4>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1e58      	subs	r0, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6859      	ldr	r1, [r3, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	440b      	add	r3, r1
 8001d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d92:	e00f      	b.n	8001db4 <HAL_I2C_Init+0x1c4>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1e58      	subs	r0, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	0099      	lsls	r1, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001daa:	3301      	adds	r3, #1
 8001dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	6809      	ldr	r1, [r1, #0]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69da      	ldr	r2, [r3, #28]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001de2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6911      	ldr	r1, [r2, #16]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68d2      	ldr	r2, [r2, #12]
 8001dee:	4311      	orrs	r1, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	000186a0 	.word	0x000186a0
 8001e50:	001e847f 	.word	0x001e847f
 8001e54:	003d08ff 	.word	0x003d08ff
 8001e58:	431bde83 	.word	0x431bde83
 8001e5c:	10624dd3 	.word	0x10624dd3

08001e60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	4608      	mov	r0, r1
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	817b      	strh	r3, [r7, #10]
 8001e72:	460b      	mov	r3, r1
 8001e74:	813b      	strh	r3, [r7, #8]
 8001e76:	4613      	mov	r3, r2
 8001e78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e7a:	f7ff fb87 	bl	800158c <HAL_GetTick>
 8001e7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	f040 80d9 	bne.w	8002040 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2319      	movs	r3, #25
 8001e94:	2201      	movs	r2, #1
 8001e96:	496d      	ldr	r1, [pc, #436]	; (800204c <HAL_I2C_Mem_Write+0x1ec>)
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f96f 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e0cc      	b.n	8002042 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2C_Mem_Write+0x56>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e0c5      	b.n	8002042 <HAL_I2C_Mem_Write+0x1e2>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d007      	beq.n	8001edc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2221      	movs	r2, #33	; 0x21
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2240      	movs	r2, #64	; 0x40
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a3a      	ldr	r2, [r7, #32]
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4a4d      	ldr	r2, [pc, #308]	; (8002050 <HAL_I2C_Mem_Write+0x1f0>)
 8001f1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f1e:	88f8      	ldrh	r0, [r7, #6]
 8001f20:	893a      	ldrh	r2, [r7, #8]
 8001f22:	8979      	ldrh	r1, [r7, #10]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f890 	bl	8002054 <I2C_RequestMemoryWrite>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d052      	beq.n	8001fe0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e081      	b.n	8002042 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f9f0 	bl	8002328 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00d      	beq.n	8001f6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d107      	bne.n	8001f66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06b      	b.n	8002042 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_I2C_Mem_Write+0x180>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d017      	beq.n	8001fe0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1aa      	bne.n	8001f3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f9dc 	bl	80023aa <I2C_WaitOnBTFFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00d      	beq.n	8002014 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d107      	bne.n	8002010 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e016      	b.n	8002042 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	e000      	b.n	8002042 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
  }
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	00100002 	.word	0x00100002
 8002050:	ffff0000 	.word	0xffff0000

08002054 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	4608      	mov	r0, r1
 800205e:	4611      	mov	r1, r2
 8002060:	461a      	mov	r2, r3
 8002062:	4603      	mov	r3, r0
 8002064:	817b      	strh	r3, [r7, #10]
 8002066:	460b      	mov	r3, r1
 8002068:	813b      	strh	r3, [r7, #8]
 800206a:	4613      	mov	r3, r2
 800206c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800207c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	2200      	movs	r2, #0
 8002086:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f876 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00c      	beq.n	80020b0 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e05f      	b.n	8002170 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020b0:	897b      	ldrh	r3, [r7, #10]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	6a3a      	ldr	r2, [r7, #32]
 80020c4:	492c      	ldr	r1, [pc, #176]	; (8002178 <I2C_RequestMemoryWrite+0x124>)
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f8af 	bl	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e04c      	b.n	8002170 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ee:	6a39      	ldr	r1, [r7, #32]
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f919 	bl	8002328 <I2C_WaitOnTXEFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00d      	beq.n	8002118 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	2b04      	cmp	r3, #4
 8002102:	d107      	bne.n	8002114 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002112:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e02b      	b.n	8002170 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d105      	bne.n	800212a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800211e:	893b      	ldrh	r3, [r7, #8]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	611a      	str	r2, [r3, #16]
 8002128:	e021      	b.n	800216e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800212a:	893b      	ldrh	r3, [r7, #8]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	b29b      	uxth	r3, r3
 8002130:	b2da      	uxtb	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213a:	6a39      	ldr	r1, [r7, #32]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f8f3 	bl	8002328 <I2C_WaitOnTXEFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00d      	beq.n	8002164 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2b04      	cmp	r3, #4
 800214e:	d107      	bne.n	8002160 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e005      	b.n	8002170 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002164:	893b      	ldrh	r3, [r7, #8]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	00010002 	.word	0x00010002

0800217c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800218c:	e025      	b.n	80021da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002194:	d021      	beq.n	80021da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002196:	f7ff f9f9 	bl	800158c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d302      	bcc.n	80021ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d116      	bne.n	80021da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f043 0220 	orr.w	r2, r3, #32
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e023      	b.n	8002222 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d10d      	bne.n	8002200 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4013      	ands	r3, r2
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf0c      	ite	eq
 80021f6:	2301      	moveq	r3, #1
 80021f8:	2300      	movne	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	e00c      	b.n	800221a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4013      	ands	r3, r2
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf0c      	ite	eq
 8002212:	2301      	moveq	r3, #1
 8002214:	2300      	movne	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	429a      	cmp	r2, r3
 800221e:	d0b6      	beq.n	800218e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002238:	e051      	b.n	80022de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002248:	d123      	bne.n	8002292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002258:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002262:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f043 0204 	orr.w	r2, r3, #4
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e046      	b.n	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002298:	d021      	beq.n	80022de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229a:	f7ff f977 	bl	800158c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d302      	bcc.n	80022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d116      	bne.n	80022de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e020      	b.n	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d10c      	bne.n	8002302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	43da      	mvns	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4013      	ands	r3, r2
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf14      	ite	ne
 80022fa:	2301      	movne	r3, #1
 80022fc:	2300      	moveq	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	e00b      	b.n	800231a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	43da      	mvns	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4013      	ands	r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf14      	ite	ne
 8002314:	2301      	movne	r3, #1
 8002316:	2300      	moveq	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d18d      	bne.n	800223a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002334:	e02d      	b.n	8002392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f878 	bl	800242c <I2C_IsAcknowledgeFailed>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e02d      	b.n	80023a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800234c:	d021      	beq.n	8002392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234e:	f7ff f91d 	bl	800158c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	429a      	cmp	r2, r3
 800235c:	d302      	bcc.n	8002364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d116      	bne.n	8002392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f043 0220 	orr.w	r2, r3, #32
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e007      	b.n	80023a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239c:	2b80      	cmp	r3, #128	; 0x80
 800239e:	d1ca      	bne.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023b6:	e02d      	b.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f837 	bl	800242c <I2C_IsAcknowledgeFailed>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e02d      	b.n	8002424 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ce:	d021      	beq.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d0:	f7ff f8dc 	bl	800158c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d302      	bcc.n	80023e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d116      	bne.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f043 0220 	orr.w	r2, r3, #32
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e007      	b.n	8002424 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b04      	cmp	r3, #4
 8002420:	d1ca      	bne.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002442:	d11b      	bne.n	800247c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800244c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f043 0204 	orr.w	r2, r3, #4
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e25b      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d075      	beq.n	8002596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024aa:	4ba3      	ldr	r3, [pc, #652]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d00c      	beq.n	80024d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b6:	4ba0      	ldr	r3, [pc, #640]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d112      	bne.n	80024e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c2:	4b9d      	ldr	r3, [pc, #628]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ce:	d10b      	bne.n	80024e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	4b99      	ldr	r3, [pc, #612]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d05b      	beq.n	8002594 <HAL_RCC_OscConfig+0x108>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d157      	bne.n	8002594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e236      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d106      	bne.n	8002500 <HAL_RCC_OscConfig+0x74>
 80024f2:	4b91      	ldr	r3, [pc, #580]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a90      	ldr	r2, [pc, #576]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e01d      	b.n	800253c <HAL_RCC_OscConfig+0xb0>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x98>
 800250a:	4b8b      	ldr	r3, [pc, #556]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a8a      	ldr	r2, [pc, #552]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b88      	ldr	r3, [pc, #544]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a87      	ldr	r2, [pc, #540]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e00b      	b.n	800253c <HAL_RCC_OscConfig+0xb0>
 8002524:	4b84      	ldr	r3, [pc, #528]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a83      	ldr	r2, [pc, #524]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b81      	ldr	r3, [pc, #516]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a80      	ldr	r2, [pc, #512]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 8002536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d013      	beq.n	800256c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff f822 	bl	800158c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800254c:	f7ff f81e 	bl	800158c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1fb      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0xc0>
 800256a:	e014      	b.n	8002596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7ff f80e 	bl	800158c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002574:	f7ff f80a 	bl	800158c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1e7      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	4b6c      	ldr	r3, [pc, #432]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0xe8>
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d063      	beq.n	800266a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ae:	4b62      	ldr	r3, [pc, #392]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d11c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ba:	4b5f      	ldr	r3, [pc, #380]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d116      	bne.n	80025f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	4b5c      	ldr	r3, [pc, #368]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_RCC_OscConfig+0x152>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e1bb      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025de:	4b56      	ldr	r3, [pc, #344]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4952      	ldr	r1, [pc, #328]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f2:	e03a      	b.n	800266a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <HAL_RCC_OscConfig+0x2b0>)
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe ffc3 	bl	800158c <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260a:	f7fe ffbf 	bl	800158c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e19c      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	4b46      	ldr	r3, [pc, #280]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4b43      	ldr	r3, [pc, #268]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4940      	ldr	r1, [pc, #256]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
 800263c:	e015      	b.n	800266a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263e:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_OscConfig+0x2b0>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe ffa2 	bl	800158c <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264c:	f7fe ff9e 	bl	800158c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e17b      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d030      	beq.n	80026d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267e:	4b30      	ldr	r3, [pc, #192]	; (8002740 <HAL_RCC_OscConfig+0x2b4>)
 8002680:	2201      	movs	r2, #1
 8002682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7fe ff82 	bl	800158c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800268c:	f7fe ff7e 	bl	800158c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e15b      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x200>
 80026aa:	e015      	b.n	80026d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ac:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_RCC_OscConfig+0x2b4>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe ff6b 	bl	800158c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ba:	f7fe ff67 	bl	800158c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e144      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f0      	bne.n	80026ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80a0 	beq.w	8002826 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_OscConfig+0x2b8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d121      	bne.n	8002766 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <HAL_RCC_OscConfig+0x2b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a07      	ldr	r2, [pc, #28]	; (8002744 <HAL_RCC_OscConfig+0x2b8>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272e:	f7fe ff2d 	bl	800158c <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	e011      	b.n	800275a <HAL_RCC_OscConfig+0x2ce>
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	42470000 	.word	0x42470000
 8002740:	42470e80 	.word	0x42470e80
 8002744:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002748:	f7fe ff20 	bl	800158c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0fd      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b81      	ldr	r3, [pc, #516]	; (8002960 <HAL_RCC_OscConfig+0x4d4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d106      	bne.n	800277c <HAL_RCC_OscConfig+0x2f0>
 800276e:	4b7d      	ldr	r3, [pc, #500]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	4a7c      	ldr	r2, [pc, #496]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6713      	str	r3, [r2, #112]	; 0x70
 800277a:	e01c      	b.n	80027b6 <HAL_RCC_OscConfig+0x32a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b05      	cmp	r3, #5
 8002782:	d10c      	bne.n	800279e <HAL_RCC_OscConfig+0x312>
 8002784:	4b77      	ldr	r3, [pc, #476]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	4a76      	ldr	r2, [pc, #472]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 800278a:	f043 0304 	orr.w	r3, r3, #4
 800278e:	6713      	str	r3, [r2, #112]	; 0x70
 8002790:	4b74      	ldr	r3, [pc, #464]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	4a73      	ldr	r2, [pc, #460]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	; 0x70
 800279c:	e00b      	b.n	80027b6 <HAL_RCC_OscConfig+0x32a>
 800279e:	4b71      	ldr	r3, [pc, #452]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a70      	ldr	r2, [pc, #448]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	4b6e      	ldr	r3, [pc, #440]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a6d      	ldr	r2, [pc, #436]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d015      	beq.n	80027ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7fe fee5 	bl	800158c <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c6:	f7fe fee1 	bl	800158c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0bc      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027dc:	4b61      	ldr	r3, [pc, #388]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ee      	beq.n	80027c6 <HAL_RCC_OscConfig+0x33a>
 80027e8:	e014      	b.n	8002814 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7fe fecf 	bl	800158c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fecb 	bl	800158c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e0a6      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002808:	4b56      	ldr	r3, [pc, #344]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ee      	bne.n	80027f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281a:	4b52      	ldr	r3, [pc, #328]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a51      	ldr	r2, [pc, #324]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 8002820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8092 	beq.w	8002954 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002830:	4b4c      	ldr	r3, [pc, #304]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b08      	cmp	r3, #8
 800283a:	d05c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d141      	bne.n	80028c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002844:	4b48      	ldr	r3, [pc, #288]	; (8002968 <HAL_RCC_OscConfig+0x4dc>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7fe fe9f 	bl	800158c <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe fe9b 	bl	800158c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e078      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002864:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	019b      	lsls	r3, r3, #6
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	3b01      	subs	r3, #1
 800288a:	041b      	lsls	r3, r3, #16
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	061b      	lsls	r3, r3, #24
 8002894:	4933      	ldr	r1, [pc, #204]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289a:	4b33      	ldr	r3, [pc, #204]	; (8002968 <HAL_RCC_OscConfig+0x4dc>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fe74 	bl	800158c <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fe70 	bl	800158c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e04d      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x41c>
 80028c6:	e045      	b.n	8002954 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c8:	4b27      	ldr	r3, [pc, #156]	; (8002968 <HAL_RCC_OscConfig+0x4dc>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7fe fe5d 	bl	800158c <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d6:	f7fe fe59 	bl	800158c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e036      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x44a>
 80028f4:	e02e      	b.n	8002954 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e029      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002902:	4b18      	ldr	r3, [pc, #96]	; (8002964 <HAL_RCC_OscConfig+0x4d8>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	429a      	cmp	r2, r3
 8002914:	d11c      	bne.n	8002950 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d115      	bne.n	8002950 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800292a:	4013      	ands	r3, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002930:	4293      	cmp	r3, r2
 8002932:	d10d      	bne.n	8002950 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d106      	bne.n	8002950 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40007000 	.word	0x40007000
 8002964:	40023800 	.word	0x40023800
 8002968:	42470060 	.word	0x42470060

0800296c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0cc      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002980:	4b68      	ldr	r3, [pc, #416]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d90c      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b65      	ldr	r3, [pc, #404]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b63      	ldr	r3, [pc, #396]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0b8      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d020      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c0:	4b59      	ldr	r3, [pc, #356]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d8:	4b53      	ldr	r3, [pc, #332]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a52      	ldr	r2, [pc, #328]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e4:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	494d      	ldr	r1, [pc, #308]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d044      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	4b47      	ldr	r3, [pc, #284]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d119      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e07f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2a:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e06f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e067      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4a:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f023 0203 	bic.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4934      	ldr	r1, [pc, #208]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fd96 	bl	800158c <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a64:	f7fe fd92 	bl	800158c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e04f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 020c 	and.w	r2, r3, #12
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1eb      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d20c      	bcs.n	8002ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e032      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4916      	ldr	r1, [pc, #88]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	490e      	ldr	r1, [pc, #56]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002af2:	f000 f821 	bl	8002b38 <HAL_RCC_GetSysClockFreq>
 8002af6:	4601      	mov	r1, r0
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	5cd3      	ldrb	r3, [r2, r3]
 8002b06:	fa21 f303 	lsr.w	r3, r1, r3
 8002b0a:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe fcf6 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40023c00 	.word	0x40023c00
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	0800498c 	.word	0x0800498c
 8002b30:	20000000 	.word	0x20000000
 8002b34:	20000004 	.word	0x20000004

08002b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	2300      	movs	r3, #0
 8002b48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b4e:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d007      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0x32>
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d008      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x38>
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f040 808d 	bne.w	8002c7e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b4b      	ldr	r3, [pc, #300]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b66:	60bb      	str	r3, [r7, #8]
       break;
 8002b68:	e08c      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b6a:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b6c:	60bb      	str	r3, [r7, #8]
      break;
 8002b6e:	e089      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b70:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b7a:	4b45      	ldr	r3, [pc, #276]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d023      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b86:	4b42      	ldr	r3, [pc, #264]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	f04f 0400 	mov.w	r4, #0
 8002b90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	ea03 0501 	and.w	r5, r3, r1
 8002b9c:	ea04 0602 	and.w	r6, r4, r2
 8002ba0:	4a3d      	ldr	r2, [pc, #244]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ba2:	fb02 f106 	mul.w	r1, r2, r6
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	fb02 f205 	mul.w	r2, r2, r5
 8002bac:	440a      	add	r2, r1
 8002bae:	493a      	ldr	r1, [pc, #232]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bb0:	fba5 0101 	umull	r0, r1, r5, r1
 8002bb4:	1853      	adds	r3, r2, r1
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f04f 0400 	mov.w	r4, #0
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4623      	mov	r3, r4
 8002bc2:	f7fd fb01 	bl	80001c8 <__aeabi_uldivmod>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	460c      	mov	r4, r1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e049      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bce:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	f04f 0400 	mov.w	r4, #0
 8002bd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	ea03 0501 	and.w	r5, r3, r1
 8002be4:	ea04 0602 	and.w	r6, r4, r2
 8002be8:	4629      	mov	r1, r5
 8002bea:	4632      	mov	r2, r6
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	f04f 0400 	mov.w	r4, #0
 8002bf4:	0154      	lsls	r4, r2, #5
 8002bf6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bfa:	014b      	lsls	r3, r1, #5
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4622      	mov	r2, r4
 8002c00:	1b49      	subs	r1, r1, r5
 8002c02:	eb62 0206 	sbc.w	r2, r2, r6
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	f04f 0400 	mov.w	r4, #0
 8002c0e:	0194      	lsls	r4, r2, #6
 8002c10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c14:	018b      	lsls	r3, r1, #6
 8002c16:	1a5b      	subs	r3, r3, r1
 8002c18:	eb64 0402 	sbc.w	r4, r4, r2
 8002c1c:	f04f 0100 	mov.w	r1, #0
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	00e2      	lsls	r2, r4, #3
 8002c26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c2a:	00d9      	lsls	r1, r3, #3
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4614      	mov	r4, r2
 8002c30:	195b      	adds	r3, r3, r5
 8002c32:	eb44 0406 	adc.w	r4, r4, r6
 8002c36:	f04f 0100 	mov.w	r1, #0
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	02a2      	lsls	r2, r4, #10
 8002c40:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c44:	0299      	lsls	r1, r3, #10
 8002c46:	460b      	mov	r3, r1
 8002c48:	4614      	mov	r4, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f04f 0400 	mov.w	r4, #0
 8002c54:	461a      	mov	r2, r3
 8002c56:	4623      	mov	r3, r4
 8002c58:	f7fd fab6 	bl	80001c8 <__aeabi_uldivmod>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	460c      	mov	r4, r1
 8002c60:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7a:	60bb      	str	r3, [r7, #8]
      break;
 8002c7c:	e002      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c80:	60bb      	str	r3, [r7, #8]
      break;
 8002c82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c84:	68bb      	ldr	r3, [r7, #8]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	017d7840 	.word	0x017d7840

08002c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb8:	f7ff fff0 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cbc:	4601      	mov	r1, r0
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0a9b      	lsrs	r3, r3, #10
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4a03      	ldr	r2, [pc, #12]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	0800499c 	.word	0x0800499c

08002cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ce0:	f7ff ffdc 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002ce4:	4601      	mov	r1, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0b5b      	lsrs	r3, r3, #13
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4a03      	ldr	r2, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	0800499c 	.word	0x0800499c

08002d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e01d      	b.n	8002d52 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fd ffb6 	bl	8000c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 f90e 	bl	8002f64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	6839      	ldr	r1, [r7, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fb48 	bl	8003404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a15      	ldr	r2, [pc, #84]	; (8002dd0 <HAL_TIM_PWM_Start+0x74>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d004      	beq.n	8002d88 <HAL_TIM_PWM_Start+0x2c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <HAL_TIM_PWM_Start+0x78>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d101      	bne.n	8002d8c <HAL_TIM_PWM_Start+0x30>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_TIM_PWM_Start+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b06      	cmp	r3, #6
 8002db2:	d007      	beq.n	8002dc4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40010400 	.word	0x40010400

08002dd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e0b4      	b.n	8002f5c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	f200 809f 	bhi.w	8002f48 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002e0a:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e45 	.word	0x08002e45
 8002e14:	08002f49 	.word	0x08002f49
 8002e18:	08002f49 	.word	0x08002f49
 8002e1c:	08002f49 	.word	0x08002f49
 8002e20:	08002e85 	.word	0x08002e85
 8002e24:	08002f49 	.word	0x08002f49
 8002e28:	08002f49 	.word	0x08002f49
 8002e2c:	08002f49 	.word	0x08002f49
 8002e30:	08002ec7 	.word	0x08002ec7
 8002e34:	08002f49 	.word	0x08002f49
 8002e38:	08002f49 	.word	0x08002f49
 8002e3c:	08002f49 	.word	0x08002f49
 8002e40:	08002f07 	.word	0x08002f07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f92a 	bl	80030a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0208 	orr.w	r2, r2, #8
 8002e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0204 	bic.w	r2, r2, #4
 8002e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6999      	ldr	r1, [r3, #24]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	619a      	str	r2, [r3, #24]
      break;
 8002e82:	e062      	b.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f97a 	bl	8003184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6999      	ldr	r1, [r3, #24]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	021a      	lsls	r2, r3, #8
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	619a      	str	r2, [r3, #24]
      break;
 8002ec4:	e041      	b.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 f9cf 	bl	8003270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0208 	orr.w	r2, r2, #8
 8002ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0204 	bic.w	r2, r2, #4
 8002ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69d9      	ldr	r1, [r3, #28]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	61da      	str	r2, [r3, #28]
      break;
 8002f04:	e021      	b.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fa23 	bl	8003358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69d9      	ldr	r1, [r3, #28]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	021a      	lsls	r2, r3, #8
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	61da      	str	r2, [r3, #28]
      break;
 8002f46:	e000      	b.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002f48:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a40      	ldr	r2, [pc, #256]	; (8003078 <TIM_Base_SetConfig+0x114>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d013      	beq.n	8002fa4 <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f82:	d00f      	beq.n	8002fa4 <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3d      	ldr	r2, [pc, #244]	; (800307c <TIM_Base_SetConfig+0x118>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00b      	beq.n	8002fa4 <TIM_Base_SetConfig+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a3c      	ldr	r2, [pc, #240]	; (8003080 <TIM_Base_SetConfig+0x11c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d007      	beq.n	8002fa4 <TIM_Base_SetConfig+0x40>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a3b      	ldr	r2, [pc, #236]	; (8003084 <TIM_Base_SetConfig+0x120>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <TIM_Base_SetConfig+0x40>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a3a      	ldr	r2, [pc, #232]	; (8003088 <TIM_Base_SetConfig+0x124>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d108      	bne.n	8002fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a2f      	ldr	r2, [pc, #188]	; (8003078 <TIM_Base_SetConfig+0x114>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d02b      	beq.n	8003016 <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc4:	d027      	beq.n	8003016 <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a2c      	ldr	r2, [pc, #176]	; (800307c <TIM_Base_SetConfig+0x118>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d023      	beq.n	8003016 <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a2b      	ldr	r2, [pc, #172]	; (8003080 <TIM_Base_SetConfig+0x11c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01f      	beq.n	8003016 <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <TIM_Base_SetConfig+0x120>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01b      	beq.n	8003016 <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a29      	ldr	r2, [pc, #164]	; (8003088 <TIM_Base_SetConfig+0x124>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d017      	beq.n	8003016 <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a28      	ldr	r2, [pc, #160]	; (800308c <TIM_Base_SetConfig+0x128>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a27      	ldr	r2, [pc, #156]	; (8003090 <TIM_Base_SetConfig+0x12c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00f      	beq.n	8003016 <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a26      	ldr	r2, [pc, #152]	; (8003094 <TIM_Base_SetConfig+0x130>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00b      	beq.n	8003016 <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a25      	ldr	r2, [pc, #148]	; (8003098 <TIM_Base_SetConfig+0x134>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <TIM_Base_SetConfig+0xb2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a24      	ldr	r2, [pc, #144]	; (800309c <TIM_Base_SetConfig+0x138>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d003      	beq.n	8003016 <TIM_Base_SetConfig+0xb2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a23      	ldr	r2, [pc, #140]	; (80030a0 <TIM_Base_SetConfig+0x13c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d108      	bne.n	8003028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <TIM_Base_SetConfig+0x114>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <TIM_Base_SetConfig+0xf8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <TIM_Base_SetConfig+0x124>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d103      	bne.n	8003064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	615a      	str	r2, [r3, #20]
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40010000 	.word	0x40010000
 800307c:	40000400 	.word	0x40000400
 8003080:	40000800 	.word	0x40000800
 8003084:	40000c00 	.word	0x40000c00
 8003088:	40010400 	.word	0x40010400
 800308c:	40014000 	.word	0x40014000
 8003090:	40014400 	.word	0x40014400
 8003094:	40014800 	.word	0x40014800
 8003098:	40001800 	.word	0x40001800
 800309c:	40001c00 	.word	0x40001c00
 80030a0:	40002000 	.word	0x40002000

080030a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0201 	bic.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0303 	bic.w	r3, r3, #3
 80030da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f023 0302 	bic.w	r3, r3, #2
 80030ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a20      	ldr	r2, [pc, #128]	; (800317c <TIM_OC1_SetConfig+0xd8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d003      	beq.n	8003108 <TIM_OC1_SetConfig+0x64>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <TIM_OC1_SetConfig+0xdc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d10c      	bne.n	8003122 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0308 	bic.w	r3, r3, #8
 800310e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f023 0304 	bic.w	r3, r3, #4
 8003120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a15      	ldr	r2, [pc, #84]	; (800317c <TIM_OC1_SetConfig+0xd8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d003      	beq.n	8003132 <TIM_OC1_SetConfig+0x8e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <TIM_OC1_SetConfig+0xdc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d111      	bne.n	8003156 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	621a      	str	r2, [r3, #32]
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40010000 	.word	0x40010000
 8003180:	40010400 	.word	0x40010400

08003184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	f023 0210 	bic.w	r2, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f023 0320 	bic.w	r3, r3, #32
 80031ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a22      	ldr	r2, [pc, #136]	; (8003268 <TIM_OC2_SetConfig+0xe4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d003      	beq.n	80031ec <TIM_OC2_SetConfig+0x68>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a21      	ldr	r2, [pc, #132]	; (800326c <TIM_OC2_SetConfig+0xe8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d10d      	bne.n	8003208 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003206:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <TIM_OC2_SetConfig+0xe4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d003      	beq.n	8003218 <TIM_OC2_SetConfig+0x94>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a16      	ldr	r2, [pc, #88]	; (800326c <TIM_OC2_SetConfig+0xe8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d113      	bne.n	8003240 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800321e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	621a      	str	r2, [r3, #32]
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40010000 	.word	0x40010000
 800326c:	40010400 	.word	0x40010400

08003270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a21      	ldr	r2, [pc, #132]	; (8003350 <TIM_OC3_SetConfig+0xe0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d003      	beq.n	80032d6 <TIM_OC3_SetConfig+0x66>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a20      	ldr	r2, [pc, #128]	; (8003354 <TIM_OC3_SetConfig+0xe4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d10d      	bne.n	80032f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a16      	ldr	r2, [pc, #88]	; (8003350 <TIM_OC3_SetConfig+0xe0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d003      	beq.n	8003302 <TIM_OC3_SetConfig+0x92>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a15      	ldr	r2, [pc, #84]	; (8003354 <TIM_OC3_SetConfig+0xe4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d113      	bne.n	800332a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	621a      	str	r2, [r3, #32]
}
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	40010000 	.word	0x40010000
 8003354:	40010400 	.word	0x40010400

08003358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	031b      	lsls	r3, r3, #12
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a12      	ldr	r2, [pc, #72]	; (80033fc <TIM_OC4_SetConfig+0xa4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <TIM_OC4_SetConfig+0x68>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a11      	ldr	r2, [pc, #68]	; (8003400 <TIM_OC4_SetConfig+0xa8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d109      	bne.n	80033d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	019b      	lsls	r3, r3, #6
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	621a      	str	r2, [r3, #32]
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000
 8003400:	40010400 	.word	0x40010400

08003404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	2201      	movs	r2, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1a      	ldr	r2, [r3, #32]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	43db      	mvns	r3, r3
 8003426:	401a      	ands	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	431a      	orrs	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	621a      	str	r2, [r3, #32]
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003464:	2302      	movs	r3, #2
 8003466:	e05a      	b.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a21      	ldr	r2, [pc, #132]	; (800352c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d01d      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d018      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a18      	ldr	r2, [pc, #96]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a17      	ldr	r2, [pc, #92]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10c      	bne.n	800350c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	4313      	orrs	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40010400 	.word	0x40010400
 8003540:	40014000 	.word	0x40014000
 8003544:	40001800 	.word	0x40001800

08003548 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003560:	2302      	movs	r3, #2
 8003562:	e03d      	b.n	80035e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e03f      	b.n	800367e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fc1c 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	; 0x24
 800361c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800362e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f90b 	bl	800384c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b088      	sub	sp, #32
 800368a:	af02      	add	r7, sp, #8
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	603b      	str	r3, [r7, #0]
 8003692:	4613      	mov	r3, r2
 8003694:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	f040 8083 	bne.w	80037ae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Transmit+0x2e>
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e07b      	b.n	80037b0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Transmit+0x40>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e074      	b.n	80037b0 <HAL_UART_Transmit+0x12a>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2221      	movs	r2, #33	; 0x21
 80036d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036dc:	f7fd ff56 	bl	800158c <HAL_GetTick>
 80036e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	88fa      	ldrh	r2, [r7, #6]
 80036e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80036f6:	e042      	b.n	800377e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370e:	d122      	bne.n	8003756 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2200      	movs	r2, #0
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f84c 	bl	80037b8 <UART_WaitOnFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e042      	b.n	80037b0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800373c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	3302      	adds	r3, #2
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	e017      	b.n	800377e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	3301      	adds	r3, #1
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	e013      	b.n	800377e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	2180      	movs	r1, #128	; 0x80
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f829 	bl	80037b8 <UART_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e01f      	b.n	80037b0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	60ba      	str	r2, [r7, #8]
 8003776:	781a      	ldrb	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1b7      	bne.n	80036f8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2200      	movs	r2, #0
 8003790:	2140      	movs	r1, #64	; 0x40
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f810 	bl	80037b8 <UART_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e006      	b.n	80037b0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c8:	e02c      	b.n	8003824 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d0:	d028      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037d8:	f7fd fed8 	bl	800158c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d21d      	bcs.n	8003824 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e00f      	b.n	8003844 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	429a      	cmp	r2, r3
 8003840:	d0c3      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800384c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800388e:	f023 030c 	bic.w	r3, r3, #12
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	430b      	orrs	r3, r1
 800389a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ba:	f040 818b 	bne.w	8003bd4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4ac1      	ldr	r2, [pc, #772]	; (8003bc8 <UART_SetConfig+0x37c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d005      	beq.n	80038d4 <UART_SetConfig+0x88>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4abf      	ldr	r2, [pc, #764]	; (8003bcc <UART_SetConfig+0x380>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	f040 80bd 	bne.w	8003a4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038d4:	f7ff fa02 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 80038d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	461d      	mov	r5, r3
 80038de:	f04f 0600 	mov.w	r6, #0
 80038e2:	46a8      	mov	r8, r5
 80038e4:	46b1      	mov	r9, r6
 80038e6:	eb18 0308 	adds.w	r3, r8, r8
 80038ea:	eb49 0409 	adc.w	r4, r9, r9
 80038ee:	4698      	mov	r8, r3
 80038f0:	46a1      	mov	r9, r4
 80038f2:	eb18 0805 	adds.w	r8, r8, r5
 80038f6:	eb49 0906 	adc.w	r9, r9, r6
 80038fa:	f04f 0100 	mov.w	r1, #0
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003906:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800390a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800390e:	4688      	mov	r8, r1
 8003910:	4691      	mov	r9, r2
 8003912:	eb18 0005 	adds.w	r0, r8, r5
 8003916:	eb49 0106 	adc.w	r1, r9, r6
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	461d      	mov	r5, r3
 8003920:	f04f 0600 	mov.w	r6, #0
 8003924:	196b      	adds	r3, r5, r5
 8003926:	eb46 0406 	adc.w	r4, r6, r6
 800392a:	461a      	mov	r2, r3
 800392c:	4623      	mov	r3, r4
 800392e:	f7fc fc4b 	bl	80001c8 <__aeabi_uldivmod>
 8003932:	4603      	mov	r3, r0
 8003934:	460c      	mov	r4, r1
 8003936:	461a      	mov	r2, r3
 8003938:	4ba5      	ldr	r3, [pc, #660]	; (8003bd0 <UART_SetConfig+0x384>)
 800393a:	fba3 2302 	umull	r2, r3, r3, r2
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	461d      	mov	r5, r3
 8003948:	f04f 0600 	mov.w	r6, #0
 800394c:	46a9      	mov	r9, r5
 800394e:	46b2      	mov	sl, r6
 8003950:	eb19 0309 	adds.w	r3, r9, r9
 8003954:	eb4a 040a 	adc.w	r4, sl, sl
 8003958:	4699      	mov	r9, r3
 800395a:	46a2      	mov	sl, r4
 800395c:	eb19 0905 	adds.w	r9, r9, r5
 8003960:	eb4a 0a06 	adc.w	sl, sl, r6
 8003964:	f04f 0100 	mov.w	r1, #0
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003970:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003974:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003978:	4689      	mov	r9, r1
 800397a:	4692      	mov	sl, r2
 800397c:	eb19 0005 	adds.w	r0, r9, r5
 8003980:	eb4a 0106 	adc.w	r1, sl, r6
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	461d      	mov	r5, r3
 800398a:	f04f 0600 	mov.w	r6, #0
 800398e:	196b      	adds	r3, r5, r5
 8003990:	eb46 0406 	adc.w	r4, r6, r6
 8003994:	461a      	mov	r2, r3
 8003996:	4623      	mov	r3, r4
 8003998:	f7fc fc16 	bl	80001c8 <__aeabi_uldivmod>
 800399c:	4603      	mov	r3, r0
 800399e:	460c      	mov	r4, r1
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b8b      	ldr	r3, [pc, #556]	; (8003bd0 <UART_SetConfig+0x384>)
 80039a4:	fba3 1302 	umull	r1, r3, r3, r2
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2164      	movs	r1, #100	; 0x64
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	3332      	adds	r3, #50	; 0x32
 80039b6:	4a86      	ldr	r2, [pc, #536]	; (8003bd0 <UART_SetConfig+0x384>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039c4:	4498      	add	r8, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	461d      	mov	r5, r3
 80039ca:	f04f 0600 	mov.w	r6, #0
 80039ce:	46a9      	mov	r9, r5
 80039d0:	46b2      	mov	sl, r6
 80039d2:	eb19 0309 	adds.w	r3, r9, r9
 80039d6:	eb4a 040a 	adc.w	r4, sl, sl
 80039da:	4699      	mov	r9, r3
 80039dc:	46a2      	mov	sl, r4
 80039de:	eb19 0905 	adds.w	r9, r9, r5
 80039e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039fa:	4689      	mov	r9, r1
 80039fc:	4692      	mov	sl, r2
 80039fe:	eb19 0005 	adds.w	r0, r9, r5
 8003a02:	eb4a 0106 	adc.w	r1, sl, r6
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	461d      	mov	r5, r3
 8003a0c:	f04f 0600 	mov.w	r6, #0
 8003a10:	196b      	adds	r3, r5, r5
 8003a12:	eb46 0406 	adc.w	r4, r6, r6
 8003a16:	461a      	mov	r2, r3
 8003a18:	4623      	mov	r3, r4
 8003a1a:	f7fc fbd5 	bl	80001c8 <__aeabi_uldivmod>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	460c      	mov	r4, r1
 8003a22:	461a      	mov	r2, r3
 8003a24:	4b6a      	ldr	r3, [pc, #424]	; (8003bd0 <UART_SetConfig+0x384>)
 8003a26:	fba3 1302 	umull	r1, r3, r3, r2
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2164      	movs	r1, #100	; 0x64
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	3332      	adds	r3, #50	; 0x32
 8003a38:	4a65      	ldr	r2, [pc, #404]	; (8003bd0 <UART_SetConfig+0x384>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	f003 0207 	and.w	r2, r3, #7
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4442      	add	r2, r8
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	e26f      	b.n	8003f2e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a4e:	f7ff f931 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8003a52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	461d      	mov	r5, r3
 8003a58:	f04f 0600 	mov.w	r6, #0
 8003a5c:	46a8      	mov	r8, r5
 8003a5e:	46b1      	mov	r9, r6
 8003a60:	eb18 0308 	adds.w	r3, r8, r8
 8003a64:	eb49 0409 	adc.w	r4, r9, r9
 8003a68:	4698      	mov	r8, r3
 8003a6a:	46a1      	mov	r9, r4
 8003a6c:	eb18 0805 	adds.w	r8, r8, r5
 8003a70:	eb49 0906 	adc.w	r9, r9, r6
 8003a74:	f04f 0100 	mov.w	r1, #0
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a88:	4688      	mov	r8, r1
 8003a8a:	4691      	mov	r9, r2
 8003a8c:	eb18 0005 	adds.w	r0, r8, r5
 8003a90:	eb49 0106 	adc.w	r1, r9, r6
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	461d      	mov	r5, r3
 8003a9a:	f04f 0600 	mov.w	r6, #0
 8003a9e:	196b      	adds	r3, r5, r5
 8003aa0:	eb46 0406 	adc.w	r4, r6, r6
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	f7fc fb8e 	bl	80001c8 <__aeabi_uldivmod>
 8003aac:	4603      	mov	r3, r0
 8003aae:	460c      	mov	r4, r1
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <UART_SetConfig+0x384>)
 8003ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	461d      	mov	r5, r3
 8003ac2:	f04f 0600 	mov.w	r6, #0
 8003ac6:	46a9      	mov	r9, r5
 8003ac8:	46b2      	mov	sl, r6
 8003aca:	eb19 0309 	adds.w	r3, r9, r9
 8003ace:	eb4a 040a 	adc.w	r4, sl, sl
 8003ad2:	4699      	mov	r9, r3
 8003ad4:	46a2      	mov	sl, r4
 8003ad6:	eb19 0905 	adds.w	r9, r9, r5
 8003ada:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003af2:	4689      	mov	r9, r1
 8003af4:	4692      	mov	sl, r2
 8003af6:	eb19 0005 	adds.w	r0, r9, r5
 8003afa:	eb4a 0106 	adc.w	r1, sl, r6
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	461d      	mov	r5, r3
 8003b04:	f04f 0600 	mov.w	r6, #0
 8003b08:	196b      	adds	r3, r5, r5
 8003b0a:	eb46 0406 	adc.w	r4, r6, r6
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4623      	mov	r3, r4
 8003b12:	f7fc fb59 	bl	80001c8 <__aeabi_uldivmod>
 8003b16:	4603      	mov	r3, r0
 8003b18:	460c      	mov	r4, r1
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <UART_SetConfig+0x384>)
 8003b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2164      	movs	r1, #100	; 0x64
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a27      	ldr	r2, [pc, #156]	; (8003bd0 <UART_SetConfig+0x384>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b3e:	4498      	add	r8, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	461d      	mov	r5, r3
 8003b44:	f04f 0600 	mov.w	r6, #0
 8003b48:	46a9      	mov	r9, r5
 8003b4a:	46b2      	mov	sl, r6
 8003b4c:	eb19 0309 	adds.w	r3, r9, r9
 8003b50:	eb4a 040a 	adc.w	r4, sl, sl
 8003b54:	4699      	mov	r9, r3
 8003b56:	46a2      	mov	sl, r4
 8003b58:	eb19 0905 	adds.w	r9, r9, r5
 8003b5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b60:	f04f 0100 	mov.w	r1, #0
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b74:	4689      	mov	r9, r1
 8003b76:	4692      	mov	sl, r2
 8003b78:	eb19 0005 	adds.w	r0, r9, r5
 8003b7c:	eb4a 0106 	adc.w	r1, sl, r6
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	461d      	mov	r5, r3
 8003b86:	f04f 0600 	mov.w	r6, #0
 8003b8a:	196b      	adds	r3, r5, r5
 8003b8c:	eb46 0406 	adc.w	r4, r6, r6
 8003b90:	461a      	mov	r2, r3
 8003b92:	4623      	mov	r3, r4
 8003b94:	f7fc fb18 	bl	80001c8 <__aeabi_uldivmod>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <UART_SetConfig+0x384>)
 8003ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	2164      	movs	r1, #100	; 0x64
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	3332      	adds	r3, #50	; 0x32
 8003bb2:	4a07      	ldr	r2, [pc, #28]	; (8003bd0 <UART_SetConfig+0x384>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	f003 0207 	and.w	r2, r3, #7
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4442      	add	r2, r8
 8003bc4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003bc6:	e1b2      	b.n	8003f2e <UART_SetConfig+0x6e2>
 8003bc8:	40011000 	.word	0x40011000
 8003bcc:	40011400 	.word	0x40011400
 8003bd0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4ad7      	ldr	r2, [pc, #860]	; (8003f38 <UART_SetConfig+0x6ec>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d005      	beq.n	8003bea <UART_SetConfig+0x39e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4ad6      	ldr	r2, [pc, #856]	; (8003f3c <UART_SetConfig+0x6f0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	f040 80d1 	bne.w	8003d8c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bea:	f7ff f877 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8003bee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	469a      	mov	sl, r3
 8003bf4:	f04f 0b00 	mov.w	fp, #0
 8003bf8:	46d0      	mov	r8, sl
 8003bfa:	46d9      	mov	r9, fp
 8003bfc:	eb18 0308 	adds.w	r3, r8, r8
 8003c00:	eb49 0409 	adc.w	r4, r9, r9
 8003c04:	4698      	mov	r8, r3
 8003c06:	46a1      	mov	r9, r4
 8003c08:	eb18 080a 	adds.w	r8, r8, sl
 8003c0c:	eb49 090b 	adc.w	r9, r9, fp
 8003c10:	f04f 0100 	mov.w	r1, #0
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c24:	4688      	mov	r8, r1
 8003c26:	4691      	mov	r9, r2
 8003c28:	eb1a 0508 	adds.w	r5, sl, r8
 8003c2c:	eb4b 0609 	adc.w	r6, fp, r9
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4619      	mov	r1, r3
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	f04f 0400 	mov.w	r4, #0
 8003c42:	0094      	lsls	r4, r2, #2
 8003c44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c48:	008b      	lsls	r3, r1, #2
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4623      	mov	r3, r4
 8003c4e:	4628      	mov	r0, r5
 8003c50:	4631      	mov	r1, r6
 8003c52:	f7fc fab9 	bl	80001c8 <__aeabi_uldivmod>
 8003c56:	4603      	mov	r3, r0
 8003c58:	460c      	mov	r4, r1
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4bb8      	ldr	r3, [pc, #736]	; (8003f40 <UART_SetConfig+0x6f4>)
 8003c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	469b      	mov	fp, r3
 8003c6c:	f04f 0c00 	mov.w	ip, #0
 8003c70:	46d9      	mov	r9, fp
 8003c72:	46e2      	mov	sl, ip
 8003c74:	eb19 0309 	adds.w	r3, r9, r9
 8003c78:	eb4a 040a 	adc.w	r4, sl, sl
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	46a2      	mov	sl, r4
 8003c80:	eb19 090b 	adds.w	r9, r9, fp
 8003c84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c88:	f04f 0100 	mov.w	r1, #0
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c9c:	4689      	mov	r9, r1
 8003c9e:	4692      	mov	sl, r2
 8003ca0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ca4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4619      	mov	r1, r3
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	f04f 0400 	mov.w	r4, #0
 8003cba:	0094      	lsls	r4, r2, #2
 8003cbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cc0:	008b      	lsls	r3, r1, #2
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4623      	mov	r3, r4
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	4631      	mov	r1, r6
 8003cca:	f7fc fa7d 	bl	80001c8 <__aeabi_uldivmod>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4b9a      	ldr	r3, [pc, #616]	; (8003f40 <UART_SetConfig+0x6f4>)
 8003cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2164      	movs	r1, #100	; 0x64
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	3332      	adds	r3, #50	; 0x32
 8003ce8:	4a95      	ldr	r2, [pc, #596]	; (8003f40 <UART_SetConfig+0x6f4>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf4:	4498      	add	r8, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	469b      	mov	fp, r3
 8003cfa:	f04f 0c00 	mov.w	ip, #0
 8003cfe:	46d9      	mov	r9, fp
 8003d00:	46e2      	mov	sl, ip
 8003d02:	eb19 0309 	adds.w	r3, r9, r9
 8003d06:	eb4a 040a 	adc.w	r4, sl, sl
 8003d0a:	4699      	mov	r9, r3
 8003d0c:	46a2      	mov	sl, r4
 8003d0e:	eb19 090b 	adds.w	r9, r9, fp
 8003d12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d2a:	4689      	mov	r9, r1
 8003d2c:	4692      	mov	sl, r2
 8003d2e:	eb1b 0509 	adds.w	r5, fp, r9
 8003d32:	eb4c 060a 	adc.w	r6, ip, sl
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	f04f 0400 	mov.w	r4, #0
 8003d48:	0094      	lsls	r4, r2, #2
 8003d4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d4e:	008b      	lsls	r3, r1, #2
 8003d50:	461a      	mov	r2, r3
 8003d52:	4623      	mov	r3, r4
 8003d54:	4628      	mov	r0, r5
 8003d56:	4631      	mov	r1, r6
 8003d58:	f7fc fa36 	bl	80001c8 <__aeabi_uldivmod>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	460c      	mov	r4, r1
 8003d60:	461a      	mov	r2, r3
 8003d62:	4b77      	ldr	r3, [pc, #476]	; (8003f40 <UART_SetConfig+0x6f4>)
 8003d64:	fba3 1302 	umull	r1, r3, r3, r2
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	2164      	movs	r1, #100	; 0x64
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	3332      	adds	r3, #50	; 0x32
 8003d76:	4a72      	ldr	r2, [pc, #456]	; (8003f40 <UART_SetConfig+0x6f4>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4442      	add	r2, r8
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	e0d0      	b.n	8003f2e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f7fe ff92 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8003d90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	469a      	mov	sl, r3
 8003d96:	f04f 0b00 	mov.w	fp, #0
 8003d9a:	46d0      	mov	r8, sl
 8003d9c:	46d9      	mov	r9, fp
 8003d9e:	eb18 0308 	adds.w	r3, r8, r8
 8003da2:	eb49 0409 	adc.w	r4, r9, r9
 8003da6:	4698      	mov	r8, r3
 8003da8:	46a1      	mov	r9, r4
 8003daa:	eb18 080a 	adds.w	r8, r8, sl
 8003dae:	eb49 090b 	adc.w	r9, r9, fp
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dbe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dc2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dc6:	4688      	mov	r8, r1
 8003dc8:	4691      	mov	r9, r2
 8003dca:	eb1a 0508 	adds.w	r5, sl, r8
 8003dce:	eb4b 0609 	adc.w	r6, fp, r9
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	f04f 0400 	mov.w	r4, #0
 8003de4:	0094      	lsls	r4, r2, #2
 8003de6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dea:	008b      	lsls	r3, r1, #2
 8003dec:	461a      	mov	r2, r3
 8003dee:	4623      	mov	r3, r4
 8003df0:	4628      	mov	r0, r5
 8003df2:	4631      	mov	r1, r6
 8003df4:	f7fc f9e8 	bl	80001c8 <__aeabi_uldivmod>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <UART_SetConfig+0x6f4>)
 8003e00:	fba3 2302 	umull	r2, r3, r3, r2
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	469b      	mov	fp, r3
 8003e0e:	f04f 0c00 	mov.w	ip, #0
 8003e12:	46d9      	mov	r9, fp
 8003e14:	46e2      	mov	sl, ip
 8003e16:	eb19 0309 	adds.w	r3, r9, r9
 8003e1a:	eb4a 040a 	adc.w	r4, sl, sl
 8003e1e:	4699      	mov	r9, r3
 8003e20:	46a2      	mov	sl, r4
 8003e22:	eb19 090b 	adds.w	r9, r9, fp
 8003e26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e2a:	f04f 0100 	mov.w	r1, #0
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e3e:	4689      	mov	r9, r1
 8003e40:	4692      	mov	sl, r2
 8003e42:	eb1b 0509 	adds.w	r5, fp, r9
 8003e46:	eb4c 060a 	adc.w	r6, ip, sl
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	f04f 0400 	mov.w	r4, #0
 8003e5c:	0094      	lsls	r4, r2, #2
 8003e5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e62:	008b      	lsls	r3, r1, #2
 8003e64:	461a      	mov	r2, r3
 8003e66:	4623      	mov	r3, r4
 8003e68:	4628      	mov	r0, r5
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	f7fc f9ac 	bl	80001c8 <__aeabi_uldivmod>
 8003e70:	4603      	mov	r3, r0
 8003e72:	460c      	mov	r4, r1
 8003e74:	461a      	mov	r2, r3
 8003e76:	4b32      	ldr	r3, [pc, #200]	; (8003f40 <UART_SetConfig+0x6f4>)
 8003e78:	fba3 1302 	umull	r1, r3, r3, r2
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	2164      	movs	r1, #100	; 0x64
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	3332      	adds	r3, #50	; 0x32
 8003e8a:	4a2d      	ldr	r2, [pc, #180]	; (8003f40 <UART_SetConfig+0x6f4>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e96:	4498      	add	r8, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	469b      	mov	fp, r3
 8003e9c:	f04f 0c00 	mov.w	ip, #0
 8003ea0:	46d9      	mov	r9, fp
 8003ea2:	46e2      	mov	sl, ip
 8003ea4:	eb19 0309 	adds.w	r3, r9, r9
 8003ea8:	eb4a 040a 	adc.w	r4, sl, sl
 8003eac:	4699      	mov	r9, r3
 8003eae:	46a2      	mov	sl, r4
 8003eb0:	eb19 090b 	adds.w	r9, r9, fp
 8003eb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003eb8:	f04f 0100 	mov.w	r1, #0
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ec8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ecc:	4689      	mov	r9, r1
 8003ece:	4692      	mov	sl, r2
 8003ed0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ed4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4619      	mov	r1, r3
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	f04f 0400 	mov.w	r4, #0
 8003eea:	0094      	lsls	r4, r2, #2
 8003eec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ef0:	008b      	lsls	r3, r1, #2
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	4631      	mov	r1, r6
 8003efa:	f7fc f965 	bl	80001c8 <__aeabi_uldivmod>
 8003efe:	4603      	mov	r3, r0
 8003f00:	460c      	mov	r4, r1
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <UART_SetConfig+0x6f4>)
 8003f06:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2164      	movs	r1, #100	; 0x64
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	3332      	adds	r3, #50	; 0x32
 8003f18:	4a09      	ldr	r2, [pc, #36]	; (8003f40 <UART_SetConfig+0x6f4>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	f003 020f 	and.w	r2, r3, #15
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4442      	add	r2, r8
 8003f2a:	609a      	str	r2, [r3, #8]
}
 8003f2c:	e7ff      	b.n	8003f2e <UART_SetConfig+0x6e2>
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f38:	40011000 	.word	0x40011000
 8003f3c:	40011400 	.word	0x40011400
 8003f40:	51eb851f 	.word	0x51eb851f

08003f44 <__errno>:
 8003f44:	4b01      	ldr	r3, [pc, #4]	; (8003f4c <__errno+0x8>)
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	2000000c 	.word	0x2000000c

08003f50 <__libc_init_array>:
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	4e0d      	ldr	r6, [pc, #52]	; (8003f88 <__libc_init_array+0x38>)
 8003f54:	4c0d      	ldr	r4, [pc, #52]	; (8003f8c <__libc_init_array+0x3c>)
 8003f56:	1ba4      	subs	r4, r4, r6
 8003f58:	10a4      	asrs	r4, r4, #2
 8003f5a:	2500      	movs	r5, #0
 8003f5c:	42a5      	cmp	r5, r4
 8003f5e:	d109      	bne.n	8003f74 <__libc_init_array+0x24>
 8003f60:	4e0b      	ldr	r6, [pc, #44]	; (8003f90 <__libc_init_array+0x40>)
 8003f62:	4c0c      	ldr	r4, [pc, #48]	; (8003f94 <__libc_init_array+0x44>)
 8003f64:	f000 fc88 	bl	8004878 <_init>
 8003f68:	1ba4      	subs	r4, r4, r6
 8003f6a:	10a4      	asrs	r4, r4, #2
 8003f6c:	2500      	movs	r5, #0
 8003f6e:	42a5      	cmp	r5, r4
 8003f70:	d105      	bne.n	8003f7e <__libc_init_array+0x2e>
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
 8003f74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f78:	4798      	blx	r3
 8003f7a:	3501      	adds	r5, #1
 8003f7c:	e7ee      	b.n	8003f5c <__libc_init_array+0xc>
 8003f7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f82:	4798      	blx	r3
 8003f84:	3501      	adds	r5, #1
 8003f86:	e7f2      	b.n	8003f6e <__libc_init_array+0x1e>
 8003f88:	08004e10 	.word	0x08004e10
 8003f8c:	08004e10 	.word	0x08004e10
 8003f90:	08004e10 	.word	0x08004e10
 8003f94:	08004e14 	.word	0x08004e14

08003f98 <memset>:
 8003f98:	4402      	add	r2, r0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d100      	bne.n	8003fa2 <memset+0xa>
 8003fa0:	4770      	bx	lr
 8003fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa6:	e7f9      	b.n	8003f9c <memset+0x4>

08003fa8 <_puts_r>:
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 8003faa:	460e      	mov	r6, r1
 8003fac:	4605      	mov	r5, r0
 8003fae:	b118      	cbz	r0, 8003fb8 <_puts_r+0x10>
 8003fb0:	6983      	ldr	r3, [r0, #24]
 8003fb2:	b90b      	cbnz	r3, 8003fb8 <_puts_r+0x10>
 8003fb4:	f000 fa0c 	bl	80043d0 <__sinit>
 8003fb8:	69ab      	ldr	r3, [r5, #24]
 8003fba:	68ac      	ldr	r4, [r5, #8]
 8003fbc:	b913      	cbnz	r3, 8003fc4 <_puts_r+0x1c>
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f000 fa06 	bl	80043d0 <__sinit>
 8003fc4:	4b23      	ldr	r3, [pc, #140]	; (8004054 <_puts_r+0xac>)
 8003fc6:	429c      	cmp	r4, r3
 8003fc8:	d117      	bne.n	8003ffa <_puts_r+0x52>
 8003fca:	686c      	ldr	r4, [r5, #4]
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	071b      	lsls	r3, r3, #28
 8003fd0:	d51d      	bpl.n	800400e <_puts_r+0x66>
 8003fd2:	6923      	ldr	r3, [r4, #16]
 8003fd4:	b1db      	cbz	r3, 800400e <_puts_r+0x66>
 8003fd6:	3e01      	subs	r6, #1
 8003fd8:	68a3      	ldr	r3, [r4, #8]
 8003fda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	60a3      	str	r3, [r4, #8]
 8003fe2:	b9e9      	cbnz	r1, 8004020 <_puts_r+0x78>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	da2e      	bge.n	8004046 <_puts_r+0x9e>
 8003fe8:	4622      	mov	r2, r4
 8003fea:	210a      	movs	r1, #10
 8003fec:	4628      	mov	r0, r5
 8003fee:	f000 f83f 	bl	8004070 <__swbuf_r>
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d011      	beq.n	800401a <_puts_r+0x72>
 8003ff6:	200a      	movs	r0, #10
 8003ff8:	e011      	b.n	800401e <_puts_r+0x76>
 8003ffa:	4b17      	ldr	r3, [pc, #92]	; (8004058 <_puts_r+0xb0>)
 8003ffc:	429c      	cmp	r4, r3
 8003ffe:	d101      	bne.n	8004004 <_puts_r+0x5c>
 8004000:	68ac      	ldr	r4, [r5, #8]
 8004002:	e7e3      	b.n	8003fcc <_puts_r+0x24>
 8004004:	4b15      	ldr	r3, [pc, #84]	; (800405c <_puts_r+0xb4>)
 8004006:	429c      	cmp	r4, r3
 8004008:	bf08      	it	eq
 800400a:	68ec      	ldreq	r4, [r5, #12]
 800400c:	e7de      	b.n	8003fcc <_puts_r+0x24>
 800400e:	4621      	mov	r1, r4
 8004010:	4628      	mov	r0, r5
 8004012:	f000 f87f 	bl	8004114 <__swsetup_r>
 8004016:	2800      	cmp	r0, #0
 8004018:	d0dd      	beq.n	8003fd6 <_puts_r+0x2e>
 800401a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	2b00      	cmp	r3, #0
 8004022:	da04      	bge.n	800402e <_puts_r+0x86>
 8004024:	69a2      	ldr	r2, [r4, #24]
 8004026:	429a      	cmp	r2, r3
 8004028:	dc06      	bgt.n	8004038 <_puts_r+0x90>
 800402a:	290a      	cmp	r1, #10
 800402c:	d004      	beq.n	8004038 <_puts_r+0x90>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	6022      	str	r2, [r4, #0]
 8004034:	7019      	strb	r1, [r3, #0]
 8004036:	e7cf      	b.n	8003fd8 <_puts_r+0x30>
 8004038:	4622      	mov	r2, r4
 800403a:	4628      	mov	r0, r5
 800403c:	f000 f818 	bl	8004070 <__swbuf_r>
 8004040:	3001      	adds	r0, #1
 8004042:	d1c9      	bne.n	8003fd8 <_puts_r+0x30>
 8004044:	e7e9      	b.n	800401a <_puts_r+0x72>
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	200a      	movs	r0, #10
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	6022      	str	r2, [r4, #0]
 800404e:	7018      	strb	r0, [r3, #0]
 8004050:	e7e5      	b.n	800401e <_puts_r+0x76>
 8004052:	bf00      	nop
 8004054:	08004dc8 	.word	0x08004dc8
 8004058:	08004de8 	.word	0x08004de8
 800405c:	08004da8 	.word	0x08004da8

08004060 <puts>:
 8004060:	4b02      	ldr	r3, [pc, #8]	; (800406c <puts+0xc>)
 8004062:	4601      	mov	r1, r0
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	f7ff bf9f 	b.w	8003fa8 <_puts_r>
 800406a:	bf00      	nop
 800406c:	2000000c 	.word	0x2000000c

08004070 <__swbuf_r>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	460e      	mov	r6, r1
 8004074:	4614      	mov	r4, r2
 8004076:	4605      	mov	r5, r0
 8004078:	b118      	cbz	r0, 8004082 <__swbuf_r+0x12>
 800407a:	6983      	ldr	r3, [r0, #24]
 800407c:	b90b      	cbnz	r3, 8004082 <__swbuf_r+0x12>
 800407e:	f000 f9a7 	bl	80043d0 <__sinit>
 8004082:	4b21      	ldr	r3, [pc, #132]	; (8004108 <__swbuf_r+0x98>)
 8004084:	429c      	cmp	r4, r3
 8004086:	d12a      	bne.n	80040de <__swbuf_r+0x6e>
 8004088:	686c      	ldr	r4, [r5, #4]
 800408a:	69a3      	ldr	r3, [r4, #24]
 800408c:	60a3      	str	r3, [r4, #8]
 800408e:	89a3      	ldrh	r3, [r4, #12]
 8004090:	071a      	lsls	r2, r3, #28
 8004092:	d52e      	bpl.n	80040f2 <__swbuf_r+0x82>
 8004094:	6923      	ldr	r3, [r4, #16]
 8004096:	b363      	cbz	r3, 80040f2 <__swbuf_r+0x82>
 8004098:	6923      	ldr	r3, [r4, #16]
 800409a:	6820      	ldr	r0, [r4, #0]
 800409c:	1ac0      	subs	r0, r0, r3
 800409e:	6963      	ldr	r3, [r4, #20]
 80040a0:	b2f6      	uxtb	r6, r6
 80040a2:	4283      	cmp	r3, r0
 80040a4:	4637      	mov	r7, r6
 80040a6:	dc04      	bgt.n	80040b2 <__swbuf_r+0x42>
 80040a8:	4621      	mov	r1, r4
 80040aa:	4628      	mov	r0, r5
 80040ac:	f000 f926 	bl	80042fc <_fflush_r>
 80040b0:	bb28      	cbnz	r0, 80040fe <__swbuf_r+0x8e>
 80040b2:	68a3      	ldr	r3, [r4, #8]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	60a3      	str	r3, [r4, #8]
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	6022      	str	r2, [r4, #0]
 80040be:	701e      	strb	r6, [r3, #0]
 80040c0:	6963      	ldr	r3, [r4, #20]
 80040c2:	3001      	adds	r0, #1
 80040c4:	4283      	cmp	r3, r0
 80040c6:	d004      	beq.n	80040d2 <__swbuf_r+0x62>
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	07db      	lsls	r3, r3, #31
 80040cc:	d519      	bpl.n	8004102 <__swbuf_r+0x92>
 80040ce:	2e0a      	cmp	r6, #10
 80040d0:	d117      	bne.n	8004102 <__swbuf_r+0x92>
 80040d2:	4621      	mov	r1, r4
 80040d4:	4628      	mov	r0, r5
 80040d6:	f000 f911 	bl	80042fc <_fflush_r>
 80040da:	b190      	cbz	r0, 8004102 <__swbuf_r+0x92>
 80040dc:	e00f      	b.n	80040fe <__swbuf_r+0x8e>
 80040de:	4b0b      	ldr	r3, [pc, #44]	; (800410c <__swbuf_r+0x9c>)
 80040e0:	429c      	cmp	r4, r3
 80040e2:	d101      	bne.n	80040e8 <__swbuf_r+0x78>
 80040e4:	68ac      	ldr	r4, [r5, #8]
 80040e6:	e7d0      	b.n	800408a <__swbuf_r+0x1a>
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <__swbuf_r+0xa0>)
 80040ea:	429c      	cmp	r4, r3
 80040ec:	bf08      	it	eq
 80040ee:	68ec      	ldreq	r4, [r5, #12]
 80040f0:	e7cb      	b.n	800408a <__swbuf_r+0x1a>
 80040f2:	4621      	mov	r1, r4
 80040f4:	4628      	mov	r0, r5
 80040f6:	f000 f80d 	bl	8004114 <__swsetup_r>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d0cc      	beq.n	8004098 <__swbuf_r+0x28>
 80040fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004102:	4638      	mov	r0, r7
 8004104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004106:	bf00      	nop
 8004108:	08004dc8 	.word	0x08004dc8
 800410c:	08004de8 	.word	0x08004de8
 8004110:	08004da8 	.word	0x08004da8

08004114 <__swsetup_r>:
 8004114:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <__swsetup_r+0xcc>)
 8004116:	b570      	push	{r4, r5, r6, lr}
 8004118:	681d      	ldr	r5, [r3, #0]
 800411a:	4606      	mov	r6, r0
 800411c:	460c      	mov	r4, r1
 800411e:	b125      	cbz	r5, 800412a <__swsetup_r+0x16>
 8004120:	69ab      	ldr	r3, [r5, #24]
 8004122:	b913      	cbnz	r3, 800412a <__swsetup_r+0x16>
 8004124:	4628      	mov	r0, r5
 8004126:	f000 f953 	bl	80043d0 <__sinit>
 800412a:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <__swsetup_r+0xd0>)
 800412c:	429c      	cmp	r4, r3
 800412e:	d10f      	bne.n	8004150 <__swsetup_r+0x3c>
 8004130:	686c      	ldr	r4, [r5, #4]
 8004132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004136:	b29a      	uxth	r2, r3
 8004138:	0715      	lsls	r5, r2, #28
 800413a:	d42c      	bmi.n	8004196 <__swsetup_r+0x82>
 800413c:	06d0      	lsls	r0, r2, #27
 800413e:	d411      	bmi.n	8004164 <__swsetup_r+0x50>
 8004140:	2209      	movs	r2, #9
 8004142:	6032      	str	r2, [r6, #0]
 8004144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004148:	81a3      	strh	r3, [r4, #12]
 800414a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800414e:	e03e      	b.n	80041ce <__swsetup_r+0xba>
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <__swsetup_r+0xd4>)
 8004152:	429c      	cmp	r4, r3
 8004154:	d101      	bne.n	800415a <__swsetup_r+0x46>
 8004156:	68ac      	ldr	r4, [r5, #8]
 8004158:	e7eb      	b.n	8004132 <__swsetup_r+0x1e>
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <__swsetup_r+0xd8>)
 800415c:	429c      	cmp	r4, r3
 800415e:	bf08      	it	eq
 8004160:	68ec      	ldreq	r4, [r5, #12]
 8004162:	e7e6      	b.n	8004132 <__swsetup_r+0x1e>
 8004164:	0751      	lsls	r1, r2, #29
 8004166:	d512      	bpl.n	800418e <__swsetup_r+0x7a>
 8004168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800416a:	b141      	cbz	r1, 800417e <__swsetup_r+0x6a>
 800416c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004170:	4299      	cmp	r1, r3
 8004172:	d002      	beq.n	800417a <__swsetup_r+0x66>
 8004174:	4630      	mov	r0, r6
 8004176:	f000 fa19 	bl	80045ac <_free_r>
 800417a:	2300      	movs	r3, #0
 800417c:	6363      	str	r3, [r4, #52]	; 0x34
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004184:	81a3      	strh	r3, [r4, #12]
 8004186:	2300      	movs	r3, #0
 8004188:	6063      	str	r3, [r4, #4]
 800418a:	6923      	ldr	r3, [r4, #16]
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	89a3      	ldrh	r3, [r4, #12]
 8004190:	f043 0308 	orr.w	r3, r3, #8
 8004194:	81a3      	strh	r3, [r4, #12]
 8004196:	6923      	ldr	r3, [r4, #16]
 8004198:	b94b      	cbnz	r3, 80041ae <__swsetup_r+0x9a>
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a4:	d003      	beq.n	80041ae <__swsetup_r+0x9a>
 80041a6:	4621      	mov	r1, r4
 80041a8:	4630      	mov	r0, r6
 80041aa:	f000 f9bf 	bl	800452c <__smakebuf_r>
 80041ae:	89a2      	ldrh	r2, [r4, #12]
 80041b0:	f012 0301 	ands.w	r3, r2, #1
 80041b4:	d00c      	beq.n	80041d0 <__swsetup_r+0xbc>
 80041b6:	2300      	movs	r3, #0
 80041b8:	60a3      	str	r3, [r4, #8]
 80041ba:	6963      	ldr	r3, [r4, #20]
 80041bc:	425b      	negs	r3, r3
 80041be:	61a3      	str	r3, [r4, #24]
 80041c0:	6923      	ldr	r3, [r4, #16]
 80041c2:	b953      	cbnz	r3, 80041da <__swsetup_r+0xc6>
 80041c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80041cc:	d1ba      	bne.n	8004144 <__swsetup_r+0x30>
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	0792      	lsls	r2, r2, #30
 80041d2:	bf58      	it	pl
 80041d4:	6963      	ldrpl	r3, [r4, #20]
 80041d6:	60a3      	str	r3, [r4, #8]
 80041d8:	e7f2      	b.n	80041c0 <__swsetup_r+0xac>
 80041da:	2000      	movs	r0, #0
 80041dc:	e7f7      	b.n	80041ce <__swsetup_r+0xba>
 80041de:	bf00      	nop
 80041e0:	2000000c 	.word	0x2000000c
 80041e4:	08004dc8 	.word	0x08004dc8
 80041e8:	08004de8 	.word	0x08004de8
 80041ec:	08004da8 	.word	0x08004da8

080041f0 <__sflush_r>:
 80041f0:	898a      	ldrh	r2, [r1, #12]
 80041f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f6:	4605      	mov	r5, r0
 80041f8:	0710      	lsls	r0, r2, #28
 80041fa:	460c      	mov	r4, r1
 80041fc:	d458      	bmi.n	80042b0 <__sflush_r+0xc0>
 80041fe:	684b      	ldr	r3, [r1, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	dc05      	bgt.n	8004210 <__sflush_r+0x20>
 8004204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	dc02      	bgt.n	8004210 <__sflush_r+0x20>
 800420a:	2000      	movs	r0, #0
 800420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004212:	2e00      	cmp	r6, #0
 8004214:	d0f9      	beq.n	800420a <__sflush_r+0x1a>
 8004216:	2300      	movs	r3, #0
 8004218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800421c:	682f      	ldr	r7, [r5, #0]
 800421e:	6a21      	ldr	r1, [r4, #32]
 8004220:	602b      	str	r3, [r5, #0]
 8004222:	d032      	beq.n	800428a <__sflush_r+0x9a>
 8004224:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	075a      	lsls	r2, r3, #29
 800422a:	d505      	bpl.n	8004238 <__sflush_r+0x48>
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	1ac0      	subs	r0, r0, r3
 8004230:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004232:	b10b      	cbz	r3, 8004238 <__sflush_r+0x48>
 8004234:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004236:	1ac0      	subs	r0, r0, r3
 8004238:	2300      	movs	r3, #0
 800423a:	4602      	mov	r2, r0
 800423c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800423e:	6a21      	ldr	r1, [r4, #32]
 8004240:	4628      	mov	r0, r5
 8004242:	47b0      	blx	r6
 8004244:	1c43      	adds	r3, r0, #1
 8004246:	89a3      	ldrh	r3, [r4, #12]
 8004248:	d106      	bne.n	8004258 <__sflush_r+0x68>
 800424a:	6829      	ldr	r1, [r5, #0]
 800424c:	291d      	cmp	r1, #29
 800424e:	d848      	bhi.n	80042e2 <__sflush_r+0xf2>
 8004250:	4a29      	ldr	r2, [pc, #164]	; (80042f8 <__sflush_r+0x108>)
 8004252:	40ca      	lsrs	r2, r1
 8004254:	07d6      	lsls	r6, r2, #31
 8004256:	d544      	bpl.n	80042e2 <__sflush_r+0xf2>
 8004258:	2200      	movs	r2, #0
 800425a:	6062      	str	r2, [r4, #4]
 800425c:	04d9      	lsls	r1, r3, #19
 800425e:	6922      	ldr	r2, [r4, #16]
 8004260:	6022      	str	r2, [r4, #0]
 8004262:	d504      	bpl.n	800426e <__sflush_r+0x7e>
 8004264:	1c42      	adds	r2, r0, #1
 8004266:	d101      	bne.n	800426c <__sflush_r+0x7c>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b903      	cbnz	r3, 800426e <__sflush_r+0x7e>
 800426c:	6560      	str	r0, [r4, #84]	; 0x54
 800426e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004270:	602f      	str	r7, [r5, #0]
 8004272:	2900      	cmp	r1, #0
 8004274:	d0c9      	beq.n	800420a <__sflush_r+0x1a>
 8004276:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800427a:	4299      	cmp	r1, r3
 800427c:	d002      	beq.n	8004284 <__sflush_r+0x94>
 800427e:	4628      	mov	r0, r5
 8004280:	f000 f994 	bl	80045ac <_free_r>
 8004284:	2000      	movs	r0, #0
 8004286:	6360      	str	r0, [r4, #52]	; 0x34
 8004288:	e7c0      	b.n	800420c <__sflush_r+0x1c>
 800428a:	2301      	movs	r3, #1
 800428c:	4628      	mov	r0, r5
 800428e:	47b0      	blx	r6
 8004290:	1c41      	adds	r1, r0, #1
 8004292:	d1c8      	bne.n	8004226 <__sflush_r+0x36>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0c5      	beq.n	8004226 <__sflush_r+0x36>
 800429a:	2b1d      	cmp	r3, #29
 800429c:	d001      	beq.n	80042a2 <__sflush_r+0xb2>
 800429e:	2b16      	cmp	r3, #22
 80042a0:	d101      	bne.n	80042a6 <__sflush_r+0xb6>
 80042a2:	602f      	str	r7, [r5, #0]
 80042a4:	e7b1      	b.n	800420a <__sflush_r+0x1a>
 80042a6:	89a3      	ldrh	r3, [r4, #12]
 80042a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ac:	81a3      	strh	r3, [r4, #12]
 80042ae:	e7ad      	b.n	800420c <__sflush_r+0x1c>
 80042b0:	690f      	ldr	r7, [r1, #16]
 80042b2:	2f00      	cmp	r7, #0
 80042b4:	d0a9      	beq.n	800420a <__sflush_r+0x1a>
 80042b6:	0793      	lsls	r3, r2, #30
 80042b8:	680e      	ldr	r6, [r1, #0]
 80042ba:	bf08      	it	eq
 80042bc:	694b      	ldreq	r3, [r1, #20]
 80042be:	600f      	str	r7, [r1, #0]
 80042c0:	bf18      	it	ne
 80042c2:	2300      	movne	r3, #0
 80042c4:	eba6 0807 	sub.w	r8, r6, r7
 80042c8:	608b      	str	r3, [r1, #8]
 80042ca:	f1b8 0f00 	cmp.w	r8, #0
 80042ce:	dd9c      	ble.n	800420a <__sflush_r+0x1a>
 80042d0:	4643      	mov	r3, r8
 80042d2:	463a      	mov	r2, r7
 80042d4:	6a21      	ldr	r1, [r4, #32]
 80042d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042d8:	4628      	mov	r0, r5
 80042da:	47b0      	blx	r6
 80042dc:	2800      	cmp	r0, #0
 80042de:	dc06      	bgt.n	80042ee <__sflush_r+0xfe>
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042e6:	81a3      	strh	r3, [r4, #12]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042ec:	e78e      	b.n	800420c <__sflush_r+0x1c>
 80042ee:	4407      	add	r7, r0
 80042f0:	eba8 0800 	sub.w	r8, r8, r0
 80042f4:	e7e9      	b.n	80042ca <__sflush_r+0xda>
 80042f6:	bf00      	nop
 80042f8:	20400001 	.word	0x20400001

080042fc <_fflush_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	690b      	ldr	r3, [r1, #16]
 8004300:	4605      	mov	r5, r0
 8004302:	460c      	mov	r4, r1
 8004304:	b1db      	cbz	r3, 800433e <_fflush_r+0x42>
 8004306:	b118      	cbz	r0, 8004310 <_fflush_r+0x14>
 8004308:	6983      	ldr	r3, [r0, #24]
 800430a:	b90b      	cbnz	r3, 8004310 <_fflush_r+0x14>
 800430c:	f000 f860 	bl	80043d0 <__sinit>
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <_fflush_r+0x48>)
 8004312:	429c      	cmp	r4, r3
 8004314:	d109      	bne.n	800432a <_fflush_r+0x2e>
 8004316:	686c      	ldr	r4, [r5, #4]
 8004318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800431c:	b17b      	cbz	r3, 800433e <_fflush_r+0x42>
 800431e:	4621      	mov	r1, r4
 8004320:	4628      	mov	r0, r5
 8004322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004326:	f7ff bf63 	b.w	80041f0 <__sflush_r>
 800432a:	4b07      	ldr	r3, [pc, #28]	; (8004348 <_fflush_r+0x4c>)
 800432c:	429c      	cmp	r4, r3
 800432e:	d101      	bne.n	8004334 <_fflush_r+0x38>
 8004330:	68ac      	ldr	r4, [r5, #8]
 8004332:	e7f1      	b.n	8004318 <_fflush_r+0x1c>
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <_fflush_r+0x50>)
 8004336:	429c      	cmp	r4, r3
 8004338:	bf08      	it	eq
 800433a:	68ec      	ldreq	r4, [r5, #12]
 800433c:	e7ec      	b.n	8004318 <_fflush_r+0x1c>
 800433e:	2000      	movs	r0, #0
 8004340:	bd38      	pop	{r3, r4, r5, pc}
 8004342:	bf00      	nop
 8004344:	08004dc8 	.word	0x08004dc8
 8004348:	08004de8 	.word	0x08004de8
 800434c:	08004da8 	.word	0x08004da8

08004350 <std>:
 8004350:	2300      	movs	r3, #0
 8004352:	b510      	push	{r4, lr}
 8004354:	4604      	mov	r4, r0
 8004356:	e9c0 3300 	strd	r3, r3, [r0]
 800435a:	6083      	str	r3, [r0, #8]
 800435c:	8181      	strh	r1, [r0, #12]
 800435e:	6643      	str	r3, [r0, #100]	; 0x64
 8004360:	81c2      	strh	r2, [r0, #14]
 8004362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004366:	6183      	str	r3, [r0, #24]
 8004368:	4619      	mov	r1, r3
 800436a:	2208      	movs	r2, #8
 800436c:	305c      	adds	r0, #92	; 0x5c
 800436e:	f7ff fe13 	bl	8003f98 <memset>
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <std+0x38>)
 8004374:	6263      	str	r3, [r4, #36]	; 0x24
 8004376:	4b05      	ldr	r3, [pc, #20]	; (800438c <std+0x3c>)
 8004378:	62a3      	str	r3, [r4, #40]	; 0x28
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <std+0x40>)
 800437c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800437e:	4b05      	ldr	r3, [pc, #20]	; (8004394 <std+0x44>)
 8004380:	6224      	str	r4, [r4, #32]
 8004382:	6323      	str	r3, [r4, #48]	; 0x30
 8004384:	bd10      	pop	{r4, pc}
 8004386:	bf00      	nop
 8004388:	0800471d 	.word	0x0800471d
 800438c:	0800473f 	.word	0x0800473f
 8004390:	08004777 	.word	0x08004777
 8004394:	0800479b 	.word	0x0800479b

08004398 <_cleanup_r>:
 8004398:	4901      	ldr	r1, [pc, #4]	; (80043a0 <_cleanup_r+0x8>)
 800439a:	f000 b885 	b.w	80044a8 <_fwalk_reent>
 800439e:	bf00      	nop
 80043a0:	080042fd 	.word	0x080042fd

080043a4 <__sfmoreglue>:
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	1e4a      	subs	r2, r1, #1
 80043a8:	2568      	movs	r5, #104	; 0x68
 80043aa:	4355      	muls	r5, r2
 80043ac:	460e      	mov	r6, r1
 80043ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043b2:	f000 f949 	bl	8004648 <_malloc_r>
 80043b6:	4604      	mov	r4, r0
 80043b8:	b140      	cbz	r0, 80043cc <__sfmoreglue+0x28>
 80043ba:	2100      	movs	r1, #0
 80043bc:	e9c0 1600 	strd	r1, r6, [r0]
 80043c0:	300c      	adds	r0, #12
 80043c2:	60a0      	str	r0, [r4, #8]
 80043c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043c8:	f7ff fde6 	bl	8003f98 <memset>
 80043cc:	4620      	mov	r0, r4
 80043ce:	bd70      	pop	{r4, r5, r6, pc}

080043d0 <__sinit>:
 80043d0:	6983      	ldr	r3, [r0, #24]
 80043d2:	b510      	push	{r4, lr}
 80043d4:	4604      	mov	r4, r0
 80043d6:	bb33      	cbnz	r3, 8004426 <__sinit+0x56>
 80043d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80043dc:	6503      	str	r3, [r0, #80]	; 0x50
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <__sinit+0x58>)
 80043e0:	4a12      	ldr	r2, [pc, #72]	; (800442c <__sinit+0x5c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6282      	str	r2, [r0, #40]	; 0x28
 80043e6:	4298      	cmp	r0, r3
 80043e8:	bf04      	itt	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	6183      	streq	r3, [r0, #24]
 80043ee:	f000 f81f 	bl	8004430 <__sfp>
 80043f2:	6060      	str	r0, [r4, #4]
 80043f4:	4620      	mov	r0, r4
 80043f6:	f000 f81b 	bl	8004430 <__sfp>
 80043fa:	60a0      	str	r0, [r4, #8]
 80043fc:	4620      	mov	r0, r4
 80043fe:	f000 f817 	bl	8004430 <__sfp>
 8004402:	2200      	movs	r2, #0
 8004404:	60e0      	str	r0, [r4, #12]
 8004406:	2104      	movs	r1, #4
 8004408:	6860      	ldr	r0, [r4, #4]
 800440a:	f7ff ffa1 	bl	8004350 <std>
 800440e:	2201      	movs	r2, #1
 8004410:	2109      	movs	r1, #9
 8004412:	68a0      	ldr	r0, [r4, #8]
 8004414:	f7ff ff9c 	bl	8004350 <std>
 8004418:	2202      	movs	r2, #2
 800441a:	2112      	movs	r1, #18
 800441c:	68e0      	ldr	r0, [r4, #12]
 800441e:	f7ff ff97 	bl	8004350 <std>
 8004422:	2301      	movs	r3, #1
 8004424:	61a3      	str	r3, [r4, #24]
 8004426:	bd10      	pop	{r4, pc}
 8004428:	08004da4 	.word	0x08004da4
 800442c:	08004399 	.word	0x08004399

08004430 <__sfp>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <__sfp+0x70>)
 8004434:	681e      	ldr	r6, [r3, #0]
 8004436:	69b3      	ldr	r3, [r6, #24]
 8004438:	4607      	mov	r7, r0
 800443a:	b913      	cbnz	r3, 8004442 <__sfp+0x12>
 800443c:	4630      	mov	r0, r6
 800443e:	f7ff ffc7 	bl	80043d0 <__sinit>
 8004442:	3648      	adds	r6, #72	; 0x48
 8004444:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004448:	3b01      	subs	r3, #1
 800444a:	d503      	bpl.n	8004454 <__sfp+0x24>
 800444c:	6833      	ldr	r3, [r6, #0]
 800444e:	b133      	cbz	r3, 800445e <__sfp+0x2e>
 8004450:	6836      	ldr	r6, [r6, #0]
 8004452:	e7f7      	b.n	8004444 <__sfp+0x14>
 8004454:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004458:	b16d      	cbz	r5, 8004476 <__sfp+0x46>
 800445a:	3468      	adds	r4, #104	; 0x68
 800445c:	e7f4      	b.n	8004448 <__sfp+0x18>
 800445e:	2104      	movs	r1, #4
 8004460:	4638      	mov	r0, r7
 8004462:	f7ff ff9f 	bl	80043a4 <__sfmoreglue>
 8004466:	6030      	str	r0, [r6, #0]
 8004468:	2800      	cmp	r0, #0
 800446a:	d1f1      	bne.n	8004450 <__sfp+0x20>
 800446c:	230c      	movs	r3, #12
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4604      	mov	r4, r0
 8004472:	4620      	mov	r0, r4
 8004474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <__sfp+0x74>)
 8004478:	6665      	str	r5, [r4, #100]	; 0x64
 800447a:	e9c4 5500 	strd	r5, r5, [r4]
 800447e:	60a5      	str	r5, [r4, #8]
 8004480:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004484:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004488:	2208      	movs	r2, #8
 800448a:	4629      	mov	r1, r5
 800448c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004490:	f7ff fd82 	bl	8003f98 <memset>
 8004494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800449c:	e7e9      	b.n	8004472 <__sfp+0x42>
 800449e:	bf00      	nop
 80044a0:	08004da4 	.word	0x08004da4
 80044a4:	ffff0001 	.word	0xffff0001

080044a8 <_fwalk_reent>:
 80044a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044ac:	4680      	mov	r8, r0
 80044ae:	4689      	mov	r9, r1
 80044b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044b4:	2600      	movs	r6, #0
 80044b6:	b914      	cbnz	r4, 80044be <_fwalk_reent+0x16>
 80044b8:	4630      	mov	r0, r6
 80044ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80044c2:	3f01      	subs	r7, #1
 80044c4:	d501      	bpl.n	80044ca <_fwalk_reent+0x22>
 80044c6:	6824      	ldr	r4, [r4, #0]
 80044c8:	e7f5      	b.n	80044b6 <_fwalk_reent+0xe>
 80044ca:	89ab      	ldrh	r3, [r5, #12]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d907      	bls.n	80044e0 <_fwalk_reent+0x38>
 80044d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044d4:	3301      	adds	r3, #1
 80044d6:	d003      	beq.n	80044e0 <_fwalk_reent+0x38>
 80044d8:	4629      	mov	r1, r5
 80044da:	4640      	mov	r0, r8
 80044dc:	47c8      	blx	r9
 80044de:	4306      	orrs	r6, r0
 80044e0:	3568      	adds	r5, #104	; 0x68
 80044e2:	e7ee      	b.n	80044c2 <_fwalk_reent+0x1a>

080044e4 <__swhatbuf_r>:
 80044e4:	b570      	push	{r4, r5, r6, lr}
 80044e6:	460e      	mov	r6, r1
 80044e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ec:	2900      	cmp	r1, #0
 80044ee:	b096      	sub	sp, #88	; 0x58
 80044f0:	4614      	mov	r4, r2
 80044f2:	461d      	mov	r5, r3
 80044f4:	da07      	bge.n	8004506 <__swhatbuf_r+0x22>
 80044f6:	2300      	movs	r3, #0
 80044f8:	602b      	str	r3, [r5, #0]
 80044fa:	89b3      	ldrh	r3, [r6, #12]
 80044fc:	061a      	lsls	r2, r3, #24
 80044fe:	d410      	bmi.n	8004522 <__swhatbuf_r+0x3e>
 8004500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004504:	e00e      	b.n	8004524 <__swhatbuf_r+0x40>
 8004506:	466a      	mov	r2, sp
 8004508:	f000 f96e 	bl	80047e8 <_fstat_r>
 800450c:	2800      	cmp	r0, #0
 800450e:	dbf2      	blt.n	80044f6 <__swhatbuf_r+0x12>
 8004510:	9a01      	ldr	r2, [sp, #4]
 8004512:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004516:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800451a:	425a      	negs	r2, r3
 800451c:	415a      	adcs	r2, r3
 800451e:	602a      	str	r2, [r5, #0]
 8004520:	e7ee      	b.n	8004500 <__swhatbuf_r+0x1c>
 8004522:	2340      	movs	r3, #64	; 0x40
 8004524:	2000      	movs	r0, #0
 8004526:	6023      	str	r3, [r4, #0]
 8004528:	b016      	add	sp, #88	; 0x58
 800452a:	bd70      	pop	{r4, r5, r6, pc}

0800452c <__smakebuf_r>:
 800452c:	898b      	ldrh	r3, [r1, #12]
 800452e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004530:	079d      	lsls	r5, r3, #30
 8004532:	4606      	mov	r6, r0
 8004534:	460c      	mov	r4, r1
 8004536:	d507      	bpl.n	8004548 <__smakebuf_r+0x1c>
 8004538:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	6123      	str	r3, [r4, #16]
 8004540:	2301      	movs	r3, #1
 8004542:	6163      	str	r3, [r4, #20]
 8004544:	b002      	add	sp, #8
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	ab01      	add	r3, sp, #4
 800454a:	466a      	mov	r2, sp
 800454c:	f7ff ffca 	bl	80044e4 <__swhatbuf_r>
 8004550:	9900      	ldr	r1, [sp, #0]
 8004552:	4605      	mov	r5, r0
 8004554:	4630      	mov	r0, r6
 8004556:	f000 f877 	bl	8004648 <_malloc_r>
 800455a:	b948      	cbnz	r0, 8004570 <__smakebuf_r+0x44>
 800455c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004560:	059a      	lsls	r2, r3, #22
 8004562:	d4ef      	bmi.n	8004544 <__smakebuf_r+0x18>
 8004564:	f023 0303 	bic.w	r3, r3, #3
 8004568:	f043 0302 	orr.w	r3, r3, #2
 800456c:	81a3      	strh	r3, [r4, #12]
 800456e:	e7e3      	b.n	8004538 <__smakebuf_r+0xc>
 8004570:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <__smakebuf_r+0x7c>)
 8004572:	62b3      	str	r3, [r6, #40]	; 0x28
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	6020      	str	r0, [r4, #0]
 8004578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457c:	81a3      	strh	r3, [r4, #12]
 800457e:	9b00      	ldr	r3, [sp, #0]
 8004580:	6163      	str	r3, [r4, #20]
 8004582:	9b01      	ldr	r3, [sp, #4]
 8004584:	6120      	str	r0, [r4, #16]
 8004586:	b15b      	cbz	r3, 80045a0 <__smakebuf_r+0x74>
 8004588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800458c:	4630      	mov	r0, r6
 800458e:	f000 f93d 	bl	800480c <_isatty_r>
 8004592:	b128      	cbz	r0, 80045a0 <__smakebuf_r+0x74>
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	81a3      	strh	r3, [r4, #12]
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	431d      	orrs	r5, r3
 80045a4:	81a5      	strh	r5, [r4, #12]
 80045a6:	e7cd      	b.n	8004544 <__smakebuf_r+0x18>
 80045a8:	08004399 	.word	0x08004399

080045ac <_free_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4605      	mov	r5, r0
 80045b0:	2900      	cmp	r1, #0
 80045b2:	d045      	beq.n	8004640 <_free_r+0x94>
 80045b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b8:	1f0c      	subs	r4, r1, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bfb8      	it	lt
 80045be:	18e4      	addlt	r4, r4, r3
 80045c0:	f000 f946 	bl	8004850 <__malloc_lock>
 80045c4:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <_free_r+0x98>)
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	4610      	mov	r0, r2
 80045ca:	b933      	cbnz	r3, 80045da <_free_r+0x2e>
 80045cc:	6063      	str	r3, [r4, #4]
 80045ce:	6014      	str	r4, [r2, #0]
 80045d0:	4628      	mov	r0, r5
 80045d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045d6:	f000 b93c 	b.w	8004852 <__malloc_unlock>
 80045da:	42a3      	cmp	r3, r4
 80045dc:	d90c      	bls.n	80045f8 <_free_r+0x4c>
 80045de:	6821      	ldr	r1, [r4, #0]
 80045e0:	1862      	adds	r2, r4, r1
 80045e2:	4293      	cmp	r3, r2
 80045e4:	bf04      	itt	eq
 80045e6:	681a      	ldreq	r2, [r3, #0]
 80045e8:	685b      	ldreq	r3, [r3, #4]
 80045ea:	6063      	str	r3, [r4, #4]
 80045ec:	bf04      	itt	eq
 80045ee:	1852      	addeq	r2, r2, r1
 80045f0:	6022      	streq	r2, [r4, #0]
 80045f2:	6004      	str	r4, [r0, #0]
 80045f4:	e7ec      	b.n	80045d0 <_free_r+0x24>
 80045f6:	4613      	mov	r3, r2
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	b10a      	cbz	r2, 8004600 <_free_r+0x54>
 80045fc:	42a2      	cmp	r2, r4
 80045fe:	d9fa      	bls.n	80045f6 <_free_r+0x4a>
 8004600:	6819      	ldr	r1, [r3, #0]
 8004602:	1858      	adds	r0, r3, r1
 8004604:	42a0      	cmp	r0, r4
 8004606:	d10b      	bne.n	8004620 <_free_r+0x74>
 8004608:	6820      	ldr	r0, [r4, #0]
 800460a:	4401      	add	r1, r0
 800460c:	1858      	adds	r0, r3, r1
 800460e:	4282      	cmp	r2, r0
 8004610:	6019      	str	r1, [r3, #0]
 8004612:	d1dd      	bne.n	80045d0 <_free_r+0x24>
 8004614:	6810      	ldr	r0, [r2, #0]
 8004616:	6852      	ldr	r2, [r2, #4]
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	4401      	add	r1, r0
 800461c:	6019      	str	r1, [r3, #0]
 800461e:	e7d7      	b.n	80045d0 <_free_r+0x24>
 8004620:	d902      	bls.n	8004628 <_free_r+0x7c>
 8004622:	230c      	movs	r3, #12
 8004624:	602b      	str	r3, [r5, #0]
 8004626:	e7d3      	b.n	80045d0 <_free_r+0x24>
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	1821      	adds	r1, r4, r0
 800462c:	428a      	cmp	r2, r1
 800462e:	bf04      	itt	eq
 8004630:	6811      	ldreq	r1, [r2, #0]
 8004632:	6852      	ldreq	r2, [r2, #4]
 8004634:	6062      	str	r2, [r4, #4]
 8004636:	bf04      	itt	eq
 8004638:	1809      	addeq	r1, r1, r0
 800463a:	6021      	streq	r1, [r4, #0]
 800463c:	605c      	str	r4, [r3, #4]
 800463e:	e7c7      	b.n	80045d0 <_free_r+0x24>
 8004640:	bd38      	pop	{r3, r4, r5, pc}
 8004642:	bf00      	nop
 8004644:	20000498 	.word	0x20000498

08004648 <_malloc_r>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	1ccd      	adds	r5, r1, #3
 800464c:	f025 0503 	bic.w	r5, r5, #3
 8004650:	3508      	adds	r5, #8
 8004652:	2d0c      	cmp	r5, #12
 8004654:	bf38      	it	cc
 8004656:	250c      	movcc	r5, #12
 8004658:	2d00      	cmp	r5, #0
 800465a:	4606      	mov	r6, r0
 800465c:	db01      	blt.n	8004662 <_malloc_r+0x1a>
 800465e:	42a9      	cmp	r1, r5
 8004660:	d903      	bls.n	800466a <_malloc_r+0x22>
 8004662:	230c      	movs	r3, #12
 8004664:	6033      	str	r3, [r6, #0]
 8004666:	2000      	movs	r0, #0
 8004668:	bd70      	pop	{r4, r5, r6, pc}
 800466a:	f000 f8f1 	bl	8004850 <__malloc_lock>
 800466e:	4a21      	ldr	r2, [pc, #132]	; (80046f4 <_malloc_r+0xac>)
 8004670:	6814      	ldr	r4, [r2, #0]
 8004672:	4621      	mov	r1, r4
 8004674:	b991      	cbnz	r1, 800469c <_malloc_r+0x54>
 8004676:	4c20      	ldr	r4, [pc, #128]	; (80046f8 <_malloc_r+0xb0>)
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	b91b      	cbnz	r3, 8004684 <_malloc_r+0x3c>
 800467c:	4630      	mov	r0, r6
 800467e:	f000 f83d 	bl	80046fc <_sbrk_r>
 8004682:	6020      	str	r0, [r4, #0]
 8004684:	4629      	mov	r1, r5
 8004686:	4630      	mov	r0, r6
 8004688:	f000 f838 	bl	80046fc <_sbrk_r>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d124      	bne.n	80046da <_malloc_r+0x92>
 8004690:	230c      	movs	r3, #12
 8004692:	6033      	str	r3, [r6, #0]
 8004694:	4630      	mov	r0, r6
 8004696:	f000 f8dc 	bl	8004852 <__malloc_unlock>
 800469a:	e7e4      	b.n	8004666 <_malloc_r+0x1e>
 800469c:	680b      	ldr	r3, [r1, #0]
 800469e:	1b5b      	subs	r3, r3, r5
 80046a0:	d418      	bmi.n	80046d4 <_malloc_r+0x8c>
 80046a2:	2b0b      	cmp	r3, #11
 80046a4:	d90f      	bls.n	80046c6 <_malloc_r+0x7e>
 80046a6:	600b      	str	r3, [r1, #0]
 80046a8:	50cd      	str	r5, [r1, r3]
 80046aa:	18cc      	adds	r4, r1, r3
 80046ac:	4630      	mov	r0, r6
 80046ae:	f000 f8d0 	bl	8004852 <__malloc_unlock>
 80046b2:	f104 000b 	add.w	r0, r4, #11
 80046b6:	1d23      	adds	r3, r4, #4
 80046b8:	f020 0007 	bic.w	r0, r0, #7
 80046bc:	1ac3      	subs	r3, r0, r3
 80046be:	d0d3      	beq.n	8004668 <_malloc_r+0x20>
 80046c0:	425a      	negs	r2, r3
 80046c2:	50e2      	str	r2, [r4, r3]
 80046c4:	e7d0      	b.n	8004668 <_malloc_r+0x20>
 80046c6:	428c      	cmp	r4, r1
 80046c8:	684b      	ldr	r3, [r1, #4]
 80046ca:	bf16      	itet	ne
 80046cc:	6063      	strne	r3, [r4, #4]
 80046ce:	6013      	streq	r3, [r2, #0]
 80046d0:	460c      	movne	r4, r1
 80046d2:	e7eb      	b.n	80046ac <_malloc_r+0x64>
 80046d4:	460c      	mov	r4, r1
 80046d6:	6849      	ldr	r1, [r1, #4]
 80046d8:	e7cc      	b.n	8004674 <_malloc_r+0x2c>
 80046da:	1cc4      	adds	r4, r0, #3
 80046dc:	f024 0403 	bic.w	r4, r4, #3
 80046e0:	42a0      	cmp	r0, r4
 80046e2:	d005      	beq.n	80046f0 <_malloc_r+0xa8>
 80046e4:	1a21      	subs	r1, r4, r0
 80046e6:	4630      	mov	r0, r6
 80046e8:	f000 f808 	bl	80046fc <_sbrk_r>
 80046ec:	3001      	adds	r0, #1
 80046ee:	d0cf      	beq.n	8004690 <_malloc_r+0x48>
 80046f0:	6025      	str	r5, [r4, #0]
 80046f2:	e7db      	b.n	80046ac <_malloc_r+0x64>
 80046f4:	20000498 	.word	0x20000498
 80046f8:	2000049c 	.word	0x2000049c

080046fc <_sbrk_r>:
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	4c06      	ldr	r4, [pc, #24]	; (8004718 <_sbrk_r+0x1c>)
 8004700:	2300      	movs	r3, #0
 8004702:	4605      	mov	r5, r0
 8004704:	4608      	mov	r0, r1
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	f7fc fc8c 	bl	8001024 <_sbrk>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	d102      	bne.n	8004716 <_sbrk_r+0x1a>
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	b103      	cbz	r3, 8004716 <_sbrk_r+0x1a>
 8004714:	602b      	str	r3, [r5, #0]
 8004716:	bd38      	pop	{r3, r4, r5, pc}
 8004718:	200005f8 	.word	0x200005f8

0800471c <__sread>:
 800471c:	b510      	push	{r4, lr}
 800471e:	460c      	mov	r4, r1
 8004720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004724:	f000 f896 	bl	8004854 <_read_r>
 8004728:	2800      	cmp	r0, #0
 800472a:	bfab      	itete	ge
 800472c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800472e:	89a3      	ldrhlt	r3, [r4, #12]
 8004730:	181b      	addge	r3, r3, r0
 8004732:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004736:	bfac      	ite	ge
 8004738:	6563      	strge	r3, [r4, #84]	; 0x54
 800473a:	81a3      	strhlt	r3, [r4, #12]
 800473c:	bd10      	pop	{r4, pc}

0800473e <__swrite>:
 800473e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004742:	461f      	mov	r7, r3
 8004744:	898b      	ldrh	r3, [r1, #12]
 8004746:	05db      	lsls	r3, r3, #23
 8004748:	4605      	mov	r5, r0
 800474a:	460c      	mov	r4, r1
 800474c:	4616      	mov	r6, r2
 800474e:	d505      	bpl.n	800475c <__swrite+0x1e>
 8004750:	2302      	movs	r3, #2
 8004752:	2200      	movs	r2, #0
 8004754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004758:	f000 f868 	bl	800482c <_lseek_r>
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004766:	81a3      	strh	r3, [r4, #12]
 8004768:	4632      	mov	r2, r6
 800476a:	463b      	mov	r3, r7
 800476c:	4628      	mov	r0, r5
 800476e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004772:	f000 b817 	b.w	80047a4 <_write_r>

08004776 <__sseek>:
 8004776:	b510      	push	{r4, lr}
 8004778:	460c      	mov	r4, r1
 800477a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477e:	f000 f855 	bl	800482c <_lseek_r>
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	bf15      	itete	ne
 8004788:	6560      	strne	r0, [r4, #84]	; 0x54
 800478a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800478e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004792:	81a3      	strheq	r3, [r4, #12]
 8004794:	bf18      	it	ne
 8004796:	81a3      	strhne	r3, [r4, #12]
 8004798:	bd10      	pop	{r4, pc}

0800479a <__sclose>:
 800479a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479e:	f000 b813 	b.w	80047c8 <_close_r>
	...

080047a4 <_write_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4c07      	ldr	r4, [pc, #28]	; (80047c4 <_write_r+0x20>)
 80047a8:	4605      	mov	r5, r0
 80047aa:	4608      	mov	r0, r1
 80047ac:	4611      	mov	r1, r2
 80047ae:	2200      	movs	r2, #0
 80047b0:	6022      	str	r2, [r4, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f7fc fbe6 	bl	8000f84 <_write>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d102      	bne.n	80047c2 <_write_r+0x1e>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	b103      	cbz	r3, 80047c2 <_write_r+0x1e>
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	200005f8 	.word	0x200005f8

080047c8 <_close_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4c06      	ldr	r4, [pc, #24]	; (80047e4 <_close_r+0x1c>)
 80047cc:	2300      	movs	r3, #0
 80047ce:	4605      	mov	r5, r0
 80047d0:	4608      	mov	r0, r1
 80047d2:	6023      	str	r3, [r4, #0]
 80047d4:	f7fc fbf2 	bl	8000fbc <_close>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_close_r+0x1a>
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_close_r+0x1a>
 80047e0:	602b      	str	r3, [r5, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	200005f8 	.word	0x200005f8

080047e8 <_fstat_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4c07      	ldr	r4, [pc, #28]	; (8004808 <_fstat_r+0x20>)
 80047ec:	2300      	movs	r3, #0
 80047ee:	4605      	mov	r5, r0
 80047f0:	4608      	mov	r0, r1
 80047f2:	4611      	mov	r1, r2
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	f7fc fbed 	bl	8000fd4 <_fstat>
 80047fa:	1c43      	adds	r3, r0, #1
 80047fc:	d102      	bne.n	8004804 <_fstat_r+0x1c>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	b103      	cbz	r3, 8004804 <_fstat_r+0x1c>
 8004802:	602b      	str	r3, [r5, #0]
 8004804:	bd38      	pop	{r3, r4, r5, pc}
 8004806:	bf00      	nop
 8004808:	200005f8 	.word	0x200005f8

0800480c <_isatty_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4c06      	ldr	r4, [pc, #24]	; (8004828 <_isatty_r+0x1c>)
 8004810:	2300      	movs	r3, #0
 8004812:	4605      	mov	r5, r0
 8004814:	4608      	mov	r0, r1
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	f7fc fbec 	bl	8000ff4 <_isatty>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_isatty_r+0x1a>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	b103      	cbz	r3, 8004826 <_isatty_r+0x1a>
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	200005f8 	.word	0x200005f8

0800482c <_lseek_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4c07      	ldr	r4, [pc, #28]	; (800484c <_lseek_r+0x20>)
 8004830:	4605      	mov	r5, r0
 8004832:	4608      	mov	r0, r1
 8004834:	4611      	mov	r1, r2
 8004836:	2200      	movs	r2, #0
 8004838:	6022      	str	r2, [r4, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f7fc fbe5 	bl	800100a <_lseek>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_lseek_r+0x1e>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	b103      	cbz	r3, 800484a <_lseek_r+0x1e>
 8004848:	602b      	str	r3, [r5, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	200005f8 	.word	0x200005f8

08004850 <__malloc_lock>:
 8004850:	4770      	bx	lr

08004852 <__malloc_unlock>:
 8004852:	4770      	bx	lr

08004854 <_read_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4c07      	ldr	r4, [pc, #28]	; (8004874 <_read_r+0x20>)
 8004858:	4605      	mov	r5, r0
 800485a:	4608      	mov	r0, r1
 800485c:	4611      	mov	r1, r2
 800485e:	2200      	movs	r2, #0
 8004860:	6022      	str	r2, [r4, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	f7fc fb71 	bl	8000f4a <_read>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d102      	bne.n	8004872 <_read_r+0x1e>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	b103      	cbz	r3, 8004872 <_read_r+0x1e>
 8004870:	602b      	str	r3, [r5, #0]
 8004872:	bd38      	pop	{r3, r4, r5, pc}
 8004874:	200005f8 	.word	0x200005f8

08004878 <_init>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	bf00      	nop
 800487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487e:	bc08      	pop	{r3}
 8004880:	469e      	mov	lr, r3
 8004882:	4770      	bx	lr

08004884 <_fini>:
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004886:	bf00      	nop
 8004888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488a:	bc08      	pop	{r3}
 800488c:	469e      	mov	lr, r3
 800488e:	4770      	bx	lr
